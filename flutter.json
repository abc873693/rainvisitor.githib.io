{"2019-07-25T00:39:46.000Z":{"title":"Flutter for web early adopter program now open","link":"https://medium.com/flutter/flutter-for-web-early-adopter-program-now-open-9f1fb146e4c4?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/9f1fb146e4c4","category":["google","flutter","web-development","web-design"],"dc:creator":"Kevin Moore","pubDate":"Thu, 25 Jul 2019 00:39:46 GMT","atom:updated":"2019-07-25T00:39:46.167Z","content:encoded":"<h4>Ready for active development of production-quality web apps</h4><p>Our vision for Flutter has always been to provide a fast, productive and open toolkit for creating beautiful user experiences on any platform. We started with mobile, with a toolkit that is already in use for tens of thousands of apps, big and small. At Google I/O this year, we announced the <a href=\"https://developers.googleblog.com/2019/05/Flutter-io19.html\">first preview of Flutter support for the web</a>, allowing developers to use the same skills and code to target the web browser, and we’ve seen a <em>lot</em> of interest already. Thank you to the thousands of you who are already experimenting with Flutter on the web and giving us your feedback.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HcggEjhP_Li6Tt7KIzB10g.png\" /></figure><p>We’re excited to announce that we are moving into a new phase of development as we get closer to a production-quality release of our web support. Today, we are <a href=\"https://forms.gle/32JCpbYefLaZE3xp8\">opening an exclusive program for companies, design agencies and startups</a> who are ready to build in earnest on Flutter for the web. We have a limited number of slots available by application to those who are ready to engage with us directly on a first wave of production Flutter web applications.</p><p>We are looking for candidates with a compelling scenario, a plan to release a web-based Flutter experience within the next six to twelve months, as well as willingness to be featured as a showcase in marketing and launch activities. Like any preview program, there will inevitably be rough edges along the way, but we’re ready to provide support and early access to overcome any obstacles that you experience.</p><p>Accepted participants will receive priority support and an opportunity to highlight their projects in Google / Flutter media and events.</p><h3>How to apply</h3><p><a href=\"https://forms.gle/32JCpbYefLaZE3xp8\">Apply for consideration by completing the form</a>. We’ll be accepting qualified applications from now through the end of August.</p><p>More information on Flutter’s support for the web can be found at <a href=\"https://flutter.dev/web\">flutter.dev/web</a>. We’re looking forward to hear from you!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9f1fb146e4c4\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/flutter-for-web-early-adopter-program-now-open-9f1fb146e4c4\">Flutter for web early adopter program now open</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-07-18T15:20:03.000Z":{"title":"Hamilton Flare Design Challenge","link":"https://medium.com/flutter/hamilton-flare-design-challenge-54993a7dd0be?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/54993a7dd0be","category":["challenge","hamilton","apps","design","contests"],"dc:creator":"Martin Aguinis","pubDate":"Thu, 18 Jul 2019 15:20:03 GMT","atom:updated":"2019-07-18T15:46:43.798Z","content:encoded":"<p>The Flutter community continues to impress us. We often see new initiatives to help developers from around the world learn and have fun with Flutter. <a href=\"https://verygood.ventures/\">VeryGoodVentures</a> just announced their first ever <a href=\"https://www.2dimensions.com/about-flare\">Flare</a> design challenge for the <a href=\"https://hamiltonmusical.com/app/\">Hamilton App</a>, in partnership with <a href=\"https://www.2dimensions.com/\">2Dimensions</a>. Check out <a href=\"https://vgv.dev/hamappflare\">the official page</a> of this contest for more details.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wAn4IQgexh-pkr6K\" /></figure><p>Hamilton was <a href=\"https://medium.com/flutter/video-hamilton-app-built-in-3-months-with-flutter-reaches-1m-installs-f37f81856be4\">one of the first apps built with Flutter</a>. The app was built in 3 months, reached 1M+ installs, and was featured on the Apple App and Google Play stores. Here is a video we made about the app:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fkfd-oLypqFI%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dkfd-oLypqFI&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fkfd-oLypqFI%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1097dda1eac53b0c728032e04ca5bfc8/href\">https://medium.com/media/1097dda1eac53b0c728032e04ca5bfc8/href</a></iframe><p>Flare is a new design and animation tool that allows users to build real, interactive, animated assets that run in real time in their final product. What better way to explore the potential of Flare for the Hamilton app than to open it up to designers, developers, and Hamilton fans.</p><h3>#HAMAPPFLARE</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*N2BgtvNZQuZtG1ZpzNoxcA.gif\" /></figure><p><strong>The #HamAppFlare Challenge is a unique opportunity to win prizes and be featured in the Hamilton app (built with Flutter) while learning to use Flare.</strong></p><p>This is your chance to create amazing animations with Flare and Flutter using the Hamilton app as your muse. Think of fun, interesting, and useful ways that animations could improve the Hamilton app and bring them to life with Flare. Or, just make something awesome with Flare that expresses your love for Hamilton.</p><h3>To participate:</h3><ol><li>Create a Flare animation that is suitable for Hamilton.</li><li>Tweet a link to your submission using <strong>#HamAppFlare.</strong></li><li><a href=\"https://forms.gle/hi3uvLWPaFMP8aws9\">Submit your entry to the submission site</a> by <strong>August 15, 2019 at 11:59pm EST.</strong></li><li>A winner will be selected by Hamilton, Very Good Ventures, and 2Dimensions.</li></ol><h3>The winner will receive:</h3><ul><li>$250 Hamilton merchandise pack</li><li>$250 Broadway.com gift card</li><li>1-year Flare Subscription ($250) + Flare T-Shirt</li><li>In-app Winner Announcement</li><li>Social Mentions by @HamiltonMusical</li></ul><p><a href=\"https://docs.google.com/a/google.com/forms/d/e/1FAIpQLSfi-U9QEdDuBFl1vlcIKFeqOoR-K2ePf-wEBjYrvUf4A3byig/closedform\">ENTER THE CHALLENGE HERE</a></p><p><strong>The Hamilton Flare Challenge opens on 7/20/19 and ends on 8/15/19 at 11:59pm EST.</strong></p><h3>Hamilton — Rise Up With Flutter &amp; Flare!</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_uc59w_DpnfksbT1\" /></figure><p>In 2017, the hit Broadway musical, Hamilton, was the first brand outside of Google to launch a production app using <a href=\"https://flutter.dev/\">Flutter</a>. The Hamilton app has been the <a href=\"https://www.youtube.com/watch?v=kfd-oLypqFI\">flagship Flutter app</a> since its launch with over 3 million installs globally.</p><p>While Flutter is now well-known among developers as a game-changing portable UI framework, Hamilton embraced Flutter extremely early — in its pre-alpha stages. Hamilton and Very Good Ventures remain committed to building revolutionary app experiences with Flutter…and now Flare.</p><h3>Details</h3><h4>Submission Guidelines</h4><p>Official details and rules can be found on the <a href=\"https://forms.gle/hi3uvLWPaFMP8aws9\">submission site</a>. Any information below is for convenience only and is not “official.”</p><ul><li>Submissions will be accepted from 7/20/2019 at 12:00am EST to 8/15/2019 at 11:59pm EST.</li><li>Submissions MUST include Flare files. Ideally Flare animations are also utilized in Flutter code that you provide.</li><li>Your submission must be made with a valid URL to a public repo on <a href=\"https://github.com/\">Github</a> or the <a href=\"https://www.2dimensions.com/explore\">2Dimensions Flare site</a>.</li><li>Each submission must be accompanied by an MIT license: <a href=\"https://opensource.org/licenses/MIT\">https://opensource.org/licenses/MIT</a></li><li>Your entry must not be offensive or mean-spirited — this is for fun and to encourage designers and developers to use Flare!</li></ul><h4>How will the submissions be judged?</h4><p>Flare submission will be judged by members of the Hamilton, Very Good Ventures, and Flare teams based on:</p><ul><li><strong>Originality: </strong>The uniqueness and novelty of the animation and its usage.</li><li><strong>Brand Alignment: </strong>The degree to which the animation is on-brand for Hamilton and suitable for use in the app.</li><li><strong>Wow: </strong>The degree to which it puts a smile on faces and showcases the power of Flare.</li></ul><h4>Spread the Word!</h4><p>The official hashtag for the challenge is <strong>#HamAppFlare</strong>. Please be sure to tweet or ‘gram your work and mention <a href=\"https://twitter.com/hamiltonmusical\">@HamiltonMusical</a>, <a href=\"https://twitter.com/vgventures\">@VGVentures</a>, <a href=\"https://twitter.com/2dimensions\">@2Dimentions</a>, and <a href=\"https://twitter.com/flutterdev\">@FlutterDev</a>!</p><h4>What is in the Hamilton Merch Pack?</h4><ul><li>Hamilton Gold Star T-Shirt — <a href=\"https://broadwaymerchandiseshop.com/stores/hamilton/apparel/hamilton-gold-star-t-shirt\">link</a></li><li>Hamilton Baseball Cap — <a href=\"https://broadwaymerchandiseshop.com/stores/hamilton/apparel/a-ham-hat-631\">link</a></li><li>Hamilton Pint Glass — <a href=\"https://broadwaymerchandiseshop.com/stores/hamilton/souvenirs/hamilton-pint-glass\">link</a></li><li>Hamilton The Revolution Hardcover Book — <a href=\"https://broadwaymerchandiseshop.com/stores/hamilton/media/hamilton-the-revolution-hardcover-book\">link</a></li><li>Hamilton Canvas Beach Bag — <a href=\"https://broadwaymerchandiseshop.com/stores/hamilton/souvenirs/hamilton-canvas-beach-tote\">link</a></li><li>Hamilton Beach Towel — <a href=\"https://broadwaymerchandiseshop.com/stores/hamilton/souvenirs/hamilton-beach-towel\">link</a></li><li>Hamilton Souvenir Program Book — <a href=\"https://broadwaymerchandiseshop.com/stores/hamilton/souvenirs/program-book\">link</a></li><li>Hamilton Lapel Pin — <a href=\"https://broadwaymerchandiseshop.com/stores/hamilton/shop-all/star-lapel-pin\">link</a></li></ul><h4>Looking for Ideas?</h4><p>Need help finding something inspired by the Hamilton app to create with Flare? Try some of these focus areas:</p><ul><li>Enter lottery animations</li><li>“You won!” animations</li><li>Lottery tour location selector</li><li>Trivia star burst animations</li><li>Today screen content animations</li></ul><p>Really any button, content, or interaction is fair game! Or just create something fun using Hamilton and its characters as your muse — think of it as interactive fan art!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*utEEfftXnEdaQlEF\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=54993a7dd0be\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/hamilton-flare-design-challenge-54993a7dd0be\">Hamilton Flare Design Challenge</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-07-11T15:06:31.000Z":{"title":"Material Range Slider in Flutter","link":"https://medium.com/flutter/material-range-slider-in-flutter-a285c6e3447d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/a285c6e3447d","category":["slider","flutter","material-design","range-slider","flutter-widget"],"dc:creator":"Anthony Robledo","pubDate":"Thu, 11 Jul 2019 15:06:31 GMT","atom:updated":"2019-07-11T17:54:01.266Z","content:encoded":"<h3>Material RangeSlider in Flutter</h3><p>The range slider, a highly customizable component for selecting a range of values, has been released in Flutter 1.7. This article explains what a range slider is, why you might use it, and how you can use Material Theming to customize the behavior and appearance of the Flutter RangeSlider.</p><h4>Why Range Slider?</h4><p>A slider component can offer a single selection or multiple selections on either a discrete or continuous track. Unlike single selection sliders that predetermine either a minimum or maximum value with the ability to adjust the selection in one direction, range sliders have two selection points that allow for a flexible adjustment of minimum and maximum value points. This flexibility makes it a useful component for instances when a user prefers to control a specific range, such as indicating price points or a length of time.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Mu435B7sBkJHMuY4\" /></figure><h4>Structure &amp; Implementation</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wtmSldtwjSvtRtuI\" /></figure><p>The RangeSlider consists of 5 parts:</p><ol><li>A track that the thumbs slide across.</li><li>Tick marks on the track when the RangeSlider is discrete.</li><li>2 thumbs (or knobs) that indicate the min and max value of the range.</li><li>Value indicators that show the labels for the thumb values when labels are defined and showValueIndicator matches the type of slider.</li><li>Overlays that display on the thumbs when they are pressed.</li></ol><p>We needed the RangeSlider to have rich animations. This includes the interaction-driven animations for the positions of the thumb, as well as the built-in animations for the overlay and value indicators. In Flutter, we do this by making the RangeSlider component a StatefulWidget, which stores the animation controllers as state.</p><p>The actual range slider values are stored as state in the parent widget. The values are updated by calling setState() within the RangeSlider’s onChange() callback. In other words, in order to have an interactive range slider, the RangeSlider widget itself must be created within a StatefulWidget.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b46e1536ed4daed740b9cf6fe6acec74/href\">https://medium.com/media/b46e1536ed4daed740b9cf6fe6acec74/href</a></iframe><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*B0bu8hC9PtI5xXBL\" /></figure><p>The RangeSlider’s State object builds a LeafRenderObjectWidget. Everything is painted in its inner RenderBox, which also handles touch input.</p><h4>Handling Touch Input</h4><p>If you are curious about how RangeSlider implements touch input, read on! One interesting aspect of RangeSlider is that it’s one of the only out-of-the-box Flutter widgets that uses a GestureArenaTeam. The next section covers how to customize touch input.</p><p>If you have no interest in peeking under the hood, feel free to skip this section.</p><p>To ensure that RangeSlider can handle both taps and drags while functioning properly within scroll views, tab bar views, and other widgets that handle gestures, a GestureArenaTeam is used. A GestureArenaTeam allows for a gesture within a group of gestures to be properly chosen by “winning.”</p><p>First, the drag recognizer is added to the team, followed by the tap recognizer. There is no team captain, so the drag recognizer wins, since it was the first recognizer added to the team, as soon as any other recognizers are out of the arena. On the other hand, if the tap can win outright, such as when the slider is within a vertically scrolling list and the user taps then immediately lifts, then the tap recognizer wins.</p><p>The drag and tap events resolve to 1 of 3 possible interactions:</p><ul><li>Drag onStart or Tap onTapDown →_startInteraction</li><li>Drag onUpdate →_handleDragUpdate</li><li>Drag onEnd or onCancel and Tap onEnd or onCancel → _endInteraction</li></ul><p>At the start of interaction, one of the very first things that must be determined is which thumb should be selected for movement. The RangeSlider does this by using a themable function that takes in properties like the tap value and drag displacement, and returns a thumb choice: Thumb.start, Thumb.end, or null for no selection.</p><p>The default thumb selector first attempts to find the closest thumb in _startInteraction. If a thumb is selected, then the thumb’s position is immediately updated to the tap value. But if the tap value is between the thumbs, but not in either touch target, there is no selection. Also, if the thumbs are close enough together, and the tap is in both touch targets, no thumb is selected. In this case, a thumb is only selected once there is a non-zero movement (drag displacement). Then the left thumb is selected for negative movement, and the right thumb is selected for positive movement. This is the only scenario where the interaction actually begins in the first _handleDragUpdate step. In either case, a special callback, onChangeStart(), emits the start values of this interaction.</p><p>When the thumbs are further apart, touching the inner track does not select a thumb:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*mlCfCFNzbUsT6P5l\" /></figure><p>When the thumbs are closer together, the drag displacement is used to determine the thumb selection:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*vcWwbYKPKh0Q-Cbc\" /></figure><p>Implementation of the default thumb selector with the behavior described above:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0ac5d8df7ac3e62c03d4d2839c8d6f70/href\">https://medium.com/media/0ac5d8df7ac3e62c03d4d2839c8d6f70/href</a></iframe><p>After a thumb is selected, all future drag updates are used to determine the new positions of the thumb. The overlay animation starts on the selected thumb, and the value indicator animations start on both thumbs. As the user drags the selected thumb, the range slider emits a new set of values with the updated position, and the values are then passed back to the range slider to update its corresponding position.</p><p>The last step is _endInteraction. Once the tap or drag gesture is lifted, the overlay and value indicator animations that were started in the first step are reversed. A special callback, onChangeEnd(), also emits the end values.</p><h4>Custom Touch Input Selection</h4><p>In the previous section, you saw the code for Material’s default thumb selection behavior. <strong>But what if you wanted something different?</strong> The following code shows how to write a thumb selector that always selects the closest thumb, regardless of what part of the track is touched.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*HLlGFubMmDajfdYU\" /></figure><p>Implementation of a custom thumb selector that always finds the closest thumb:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/17465a7465a2c335d097f06bd8c502aa/href\">https://medium.com/media/17465a7465a2c335d097f06bd8c502aa/href</a></iframe><p>Once you have this custom thumb, you can set it in the global app theme:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/171df2c714aec9922da8497a12304583/href\">https://medium.com/media/171df2c714aec9922da8497a12304583/href</a></iframe><p>Or it can be set on a specific slider instance using the SliderTheme:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/219227026deaf348ad717ae6e581a324/href\">https://medium.com/media/219227026deaf348ad717ae6e581a324/href</a></iframe><h4>Controlling Allowed Thumb Positions</h4><p>Above, you saw how to use the SliderThemeData to customize how the thumbs are selected. This section shows how to limit the positions that the thumbs can be dragged, or set, to. There are 2 ways to control the allowed positions of thumbs. It can be done by <strong>value</strong>, or it can be done by <strong>space. </strong>By value can be useful, for example, if you have a price selector. Let’s say the allowed prices can be within $0 and $100, but you want the range to be at least $20 apart. So the range [$30, $50] would be allowed but the range [$33, $34] would not be allowed. Simply adjust the onChanged function as follows:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tqIVrQZCHKLeLZCV\" /></figure><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5535cf2d8ed0fd8a022df6d952ff703c/href\">https://medium.com/media/5535cf2d8ed0fd8a022df6d952ff703c/href</a></iframe><p>If it is only necessary to restrict the thumbs for the sake of appearances, then the minThumbSeparation property can be used to limit the number of logical pixels that separate the 2 thumbs. The default top thumb will draw a white outline around itself for better contrast between the thumbs. Here is a side by side comparison showing the default value of 8 vs a custom value of 24</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kChVA0QLDWygcEn0\" /></figure><h4>Painting Shapes</h4><p>In addition to handling touch input, the RenderBox is also responsible for painting the RangeSlider. It paints the RangeSlider’s components in this order:</p><ol><li>Track</li><li>Overlays</li><li>Tick Marks (if discrete)</li><li>Value Indicators (if visible)</li><li>Thumbs</li></ol><p>This can be important to know when painting custom shapes. All shape implementations are abstracted away from the RenderBox.paint() method through 5 separate abstract classes, which makes the painting or rendering of the RangeSlider fully customizable and themable since the classes exist on the SliderThemeData object.</p><p>In the next section, we will show how to override the default shapes with custom shapes.</p><h4>Using Custom Shapes</h4><p>Just like the single Slider, all of the shapes that make up a slider can be customized for the RangeSlider. See <a href=\"https://www.youtube.com/watch?v=YSULAJf6R6M&amp;t=410s\">this clip</a> for an example of how a Material Slider was customized.</p><p>This is done by passing custom implementations of the abstract shape classes into the SliderThemeData. This takes advantage of the RangeSliderThumbShape class to provide custom thumbs that have different appearances depending on what side they are on.</p><p>The custom range thumb shape can be implemented as follows:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e91011cb6da3f467856df1390d4b0b98/href\">https://medium.com/media/e91011cb6da3f467856df1390d4b0b98/href</a></iframe><p>Then the custom range thumb shape can be set on a SliderThemeData:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e3632831c43cde6d982863667d3dd4e9/href\">https://medium.com/media/e3632831c43cde6d982863667d3dd4e9/href</a></iframe><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*w97BioIrNzfHqQ43\" /></figure><h4>Closing Remarks</h4><p>The Material range slider is a component that was requested by the community. It works out-of-the-box, and is also customizable to suit the needs of your app. The behavior and visual appearance can be changed in the theme at the global level, or on an instance by instance basis.</p><p>The complete code for all code included in this article, along with more examples, can be found in the <a href=\"https://github.com/flutter/flutter/tree/master/examples/flutter_gallery/lib/demo/material\">Material gallery on github</a> and in the <a href=\"https://github.com/flutter/flutter/tree/master/packages/flutter/lib/src/material\">Material library on github</a>.</p><p>Special thanks to Shams Zakhour, Liam Spradlin, Barbara Eldredge, Cortney Cassidy, and Will Larche.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a285c6e3447d\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/material-range-slider-in-flutter-a285c6e3447d\">Material Range Slider in Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-07-09T23:04:18.000Z":{"title":"Announcing Flutter 1.7","link":"https://medium.com/flutter/announcing-flutter-1-7-9cab4f34eacf?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/9cab4f34eacf","category":["ios-app-development","flutter","mobile-app-development","android-app-development"],"dc:creator":"Tim Sneath","pubDate":"Tue, 09 Jul 2019 23:04:18 GMT","atom:updated":"2019-07-10T18:25:12.395Z","content:encoded":"<h4>Continued refinement and polish for mobile platforms</h4><p>Today we’re pleased to <strong>announce the general availability of Flutter 1.7</strong>, a smaller release after the major feature announcements at Google I/O. Flutter 1.7 contains support for AndroidX and for updated Play Store requirements, a number of new and enhanced components, and bug fixes to customer-reported issues.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PzRLnOtNMtoO59dPPz--hA.png\" /></figure><p>If you already have Flutter on your system and you’re on the default stable channel, you can upgrade to version 1.7 by running flutter upgrade from the command line. The updated release is also included in <a href=\"https://flutter.dev/docs/get-started/install\">a new installation</a> of Flutter.</p><h3>AndroidX Support for New Apps</h3><p><a href=\"https://developer.android.com/jetpack/androidx\">AndroidX</a> is a new open source support library from the Jetpack team that helps Android apps stay updated with the latest components without sacrificing backward compatibility. Now that AndroidX is itself stable and many Flutter packages have been updated to support it, Flutter supports <a href=\"https://github.com/flutter/flutter/pull/31028\">creating new Flutter projects with AndroidX</a>, which reduces the work needed to integrate with other parts of the Android ecosystem.</p><p>When creating a Flutter project, you can add the --androidx flag to ensure the generated project targets the new support library. Information about migrating existing projects to AndroidX can be found <a href=\"https://flutter.dev/docs/development/packages-and-plugins/androidx-compatibility#for-plugin-maintainers-migrating-a-flutter-plugin-to-androidx\">on flutter.dev</a>. We’re actively working on bringing AndroidX / Jetifier support for apps with mixed AndroidX / Android Support libraries, such as in add-to-app cases, and will have more to share on this front in a forthcoming post.</p><h3>Support for Android app bundles and 64-bit Android apps</h3><p>From August 1st, 2019, Android apps that use native code and target Android 9 Pie will be <a href=\"https://developer.android.com/distribute/best-practices/develop/64-bit\">required to provide a 64-bit version</a> in addition to the 32-bit version when publishing to the Google Play Store. While Flutter has long supported generating 64-bit Android apps, version 1.7 adds support for creating <a href=\"https://developer.android.com/guide/app-bundle\">Android App Bundles</a> that target both 64-bit and 32-bit from a single submission. See the updated <a href=\"https://flutter.dev/docs/deployment/android\">documentation on publishing Flutter-based Android apps</a> to learn how to do this, as well as how to create separate APK files for both 32-bit and 64-bit devices.</p><h3>New widgets and framework enhancements</h3><p>We want your apps to look great and feel natural, regardless of what platform you’re targeting. Correspondingly, we continue to update and enhance the widgets available for both Android and iOS.</p><p>This release features a new <a href=\"https://github.com/flutter/flutter/pull/31681\">RangeSlider</a> control that lets you select a range of values on a single slider (for example a minimum and maximum temperature value):</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*rruCdwqtc2p3SXaMzUuE0Q.gif\" /><figcaption>The new, themeable RangeSlider widget supports continuous or discrete styles</figcaption></figure><p>The <a href=\"https://github.com/flutter/flutter/pull/31275\">updated </a><a href=\"https://github.com/flutter/flutter/pull/31275\">SnackBar widget</a> supports an updated look in the Material spec, and a <a href=\"https://github.com/flutter/flutter/pull/31294\">number</a> <a href=\"https://github.com/flutter/flutter/pull/32177\">of</a> <a href=\"https://github.com/flutter/flutter/pull/31929\">new</a> <a href=\"https://github.com/flutter/flutter/pull/32703\">samples</a> are added <a href=\"https://github.com/flutter/flutter/pull/34679\">to the</a> <a href=\"https://github.com/flutter/flutter/pull/32530\">documentation</a>.</p><p>For <a href=\"https://flutter.dev/docs/development/ui/widgets/cupertino\">Cupertino</a>, the Flutter library for building pixel-perfect iOS applications, we’ve made a number of updates. In particular, we’ve improved the fidelity of the <a href=\"https://github.com/flutter/flutter/pull/31464\">CupertinoPicker and </a><a href=\"https://github.com/flutter/flutter/pull/31464\">CupertinoDateTimePicker widgets</a>, and added support for localization to non-English languages.</p><p>We also made major improvements to the <a href=\"https://flutter.dev/docs/resources/platform-adaptations#text-editing\">text selection and editing experience on iOS</a>, regardless of whether you’re using the Material or Cupertino design language. Also, a <a href=\"https://github.com/flutter/samples/tree/master/platform_design\">new sample</a> demonstrates how to make more significant platform adaptations across iOS and Android while retaining the same codebase.</p><p>Text rendering gets a big upgrade with support for rich <a href=\"https://api.flutter.dev/flutter/painting/TextStyle/fontFeatures.html\">typography features</a>, including tabular and old-style numbers, slashed zeros, and stylistic sets, as <a href=\"https://github.com/timsneath/typography\">this demo</a> shows:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/831/0*0tdr7sHesqXfjWwK\" /><figcaption>With Flutter, you can now add sophisticated typography with OpenType font feature support</figcaption></figure><p>Lastly, we’ve added support for <a href=\"https://github.com/flutter/flutter/pull/33868\">game controllers</a>. Could this lead to some fun Flutter apps? You tell us!</p><h3>Focus on the Fundamentals</h3><p>Flutter 1.7 represents a lot of hard work by the team to respond to customer-reported issues, with <a href=\"https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aclosed+closed%3A2019-04-22..2019-06-21+sort%3Areactions-%2B1-desc\">over 1,250 issues closed in the two months</a> since our last stable release.</p><p>With the rapid growth in Flutter, we’re seeing lots of new issues reported, and to be transparent, the bug process that worked well when our project was smaller is not working so well now. As a result, our open issue count has increased significantly over the last few months, despite our progress in closing triaged issues. We’re working to increase staffing in this area, which will help with faster triaging of new bugs, closing and merging duplicate issues and redirecting support requests to <a href=\"https://stackoverflow.com/questions/tagged/flutter\">StackOverflow</a>.</p><p>In recent surveys, many of you said that you’d like to see us continue to invest in documentation and error messages. One key part of that work is to provide better structure for our errors which tools like VSCode and Android Studio can take advantage of in the future. You can see examples of this work <a href=\"https://github.com/flutter/flutter/pull/34684\">in issue 34684</a>.</p><p>We also fixed the top crashing bug, which was an error when the Flutter tool is unable to write to the Flutter directory. Flutter now fails gracefully if the user doesn’t have write permissions, with clearer indications on how to fix the problem.</p><p>In terms of documentation, we have an ever increasing list of samples that can be created directly from the flutter create tool. From the command line, you can run a command such as:</p><pre>flutter create --sample=material.AppBar.1 mysample</pre><p>If a sample can be created in this way, you’ll see a “Sample in the App” tab in the documentation, as in <a href=\"https://master-api.flutter.dev/flutter/material/AppBar-class.html\">this example for the AppBar widget</a>:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rARvCCVpn-cp1XoP5gXt9Q.png\" /></figure><p>We’re also continuing to embed the popular <a href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU23XGwz3Km7sQZFTdB996iG\">Widget of the Week</a> videos directly into the documentation, as an easy way to grok the various widgets in Flutter’s toolkit.</p><p>Behind the scenes, you’ll see lots of underlying work to create infrastructure towards enabling Flutter on macOS and Windows, with further support for important concepts like right-click and unique platform infrastructure such as <a href=\"https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2019\">MSBuild</a>. Support for non-mobile platforms is not yet available in the stable channel, however.</p><p>Lastly, when you’re building Flutter apps on the Mac, we now have support for <a href=\"https://github.com/flutter/flutter/pull/33684\">the new Xcode build system</a>. This is on by default for new projects, and <a href=\"https://github.com/flutter/flutter/issues/20685#issuecomment-509731873\">easy to enable for existing projects</a>.</p><h3>An ever-growing Flutter community</h3><p>As ever, it’s exciting to see Flutter continue to grow in popularity and usage, and we also celebrate the ways customers large and small are using Flutter. Since I/O, the team has been busy with various events around the world: from <a href=\"https://gmtc2019.geekbang.org/\">GMTC</a> in China to meetups and presentations in New York and Mexico; it’s been great to meet with many of you and hear about some of the apps that you’re building.</p><p>We’ve talked about <a href=\"https://www.forbes.com/sites/heatherfarmbrough/2018/05/01/reflectly-wants-to-be-an-adidas-of-the-mind/#572291294204\">Reflectly</a> before: a small Danish company who built a beautiful mindfulness app for iOS and Android. Their app was just featured as Apple’s App of the Day on their US iPhone app store, demonstrating how Flutter apps are more than capable of delivering reference-quality experiences:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F6ZpETbJjipQ%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D6ZpETbJjipQ&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F6ZpETbJjipQ%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d7acaad0ea9a98272cfe861eafcf581f/href\">https://medium.com/media/d7acaad0ea9a98272cfe861eafcf581f/href</a></iframe><p>And at the <a href=\"https://events.wearedevelopers.com/\">WeAreDevelopers</a> conference in Berlin, <a href=\"https://youtu.be/80pRyn7fZRk?t=1234\">BMW announced their new Flutter-based app</a>, currently in development. Here’s what Guy Duncan, CTO Connected Company at BMW, had to say:</p><blockquote><em>“By combining Dart and Flutter we have the first true cross-platform mobile toolkit; we feel it is a game changer to ensure feature parity for digital touchpoints and IoT.</em></blockquote><blockquote><em>By moving forward with world class tooling, automation and modern functional programming patterns we can improve feature cycle time, security, and cost of delivery of features for the business.”</em></blockquote><p>Beyond apps, of course the open source community is what makes Flutter such a fun place to work, with so many <a href=\"https://flutterx.com/\">resources</a>, <a href=\"https://pub.dev/flutter\">plugins</a>, <a href=\"https://flutterevents.com/\">events</a> and <a href=\"https://www.meetup.com/topics/flutter/\">meetups</a>. We continue to be amazed by how you’re using Flutter and are honored to be able to share the fun with you all!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mz1byB5RNbLttBIDGINljg.jpeg\" /><figcaption>Photo credit: <a href=\"https://twitter.com/damian2048\">@damian2048</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9cab4f34eacf\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-1-7-9cab4f34eacf\">Announcing Flutter 1.7</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-06-27T23:49:40.000Z":{"title":"Getting to the Bottom of Navigation in Flutter","description":"<div class=\"medium-feed-item\"><p class=\"medium-feed-image\"><a href=\"https://medium.com/flutter/getting-to-the-bottom-of-navigation-in-flutter-b3e440b9386?source=rss----4da7dfd21a33---4\"><img src=\"https://cdn-images-1.medium.com/max/1524/1*pzfLG6bpSs8KGe48AXZR_g.png\" width=\"1524\"></a></p><p class=\"medium-feed-snippet\">Bottom navigation in mobile apps is popular because our phones keep getting bigger but our thumbs do not. Here&#x2019;s how to do it in Flutter.</p><p class=\"medium-feed-link\"><a href=\"https://medium.com/flutter/getting-to-the-bottom-of-navigation-in-flutter-b3e440b9386?source=rss----4da7dfd21a33---4\">Continue reading on Flutter »</a></p></div>","link":"https://medium.com/flutter/getting-to-the-bottom-of-navigation-in-flutter-b3e440b9386?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/b3e440b9386","category":"react-native","dc:creator":"Hans Muller","pubDate":"Thu, 27 Jun 2019 23:49:40 GMT","atom:updated":"2019-06-27T23:49:40.940Z"},"2019-06-13T22:53:11.000Z":{"title":"The Power of the Flutter’s Transform and GestureDetector Widgets","link":"https://medium.com/flutter/the-power-of-the-flutters-transform-and-gesturedetector-widgets-6834f5a25be9?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6834f5a25be9","category":["ios","android","flutter","2d-animation","mobile-app-development"],"dc:creator":"Justin McCandless","pubDate":"Thu, 13 Jun 2019 22:53:11 GMT","atom:updated":"2019-06-13T22:53:11.942Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6hQYJrDKEE1r961qkxrMwQ.jpeg\" /></figure><p>When it first clicked for me that Flutter gives me full control of everything on the screen, right down to the last pixel, I immediately wanted to go beyond the fixed and predictable world of most app UIs. The fully custom widgets that I could draw using <a href=\"https://api.flutter.dev/flutter/widgets/CustomPaint-class.html\">CustomPaint</a> begged to be broken out of the typical ScrollView or Container. I wanted to move around, zoom in on things, and navigate the world that Flutter makes it possible to create. The <a href=\"https://api.flutter.dev/flutter/widgets/Transform-class.html\">Transform</a> widget was my vehicle for navigating this world, and <a href=\"https://api.flutter.dev/flutter/widgets/GestureDetector-class.html\">GestureDetector</a> provided the controls.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*96VXf5cl-KdkF0st\" /></figure><p>GestureDetector gives easy access to most gestures, and Transform provides the ability to modify the perspective in which a child widget is seen. Both are simple, independent widgets that follow Flutter’s pattern of composability. When we combine the two, every gesture on a widget becomes a way to explore.</p><h3>An introduction to transformation</h3><p>Despite its power, all that the Transform widget really does is to take a transformation matrix and apply it to its child. This results in the translation, scale, rotation, and even skew of the child with respect to the parent, all specified by one simple <a href=\"https://api.flutter.dev/flutter/vector_math/Matrix4-class.html\">Matrix4</a> object.</p><p>Matrices are very convenient to work with when doing transformations because they are composable. Storing separate translation, scale, rotation, and skew parameters is intuitive at first, but it’s easy to run into ambiguity with things like order.</p><p>Imagine the user performs a series of gestures back to back. If the gestures are simply a series of drags, then we can easily store the final transformation as the resulting location Offset. However, if the user drags, then rotates at the new location, and repeats this several times, how do we keep track of the final state? An offset and a double of radians is not enough, not even if we include a focal point as well. We would have to keep track of an ever expanding list of operations that the user has performed and iterate the whole thing just to get to the final state.</p><p>A transformation matrix can be combined with any number of other transformation matrices indefinitely, and the result is always another single matrix of the same size. The GPU is very fast at doing this sort of math, even massively in parallel, such as for every pixel on the screen. This makes it great for storing the state of a widget like Transform, and the result is a very straightforward widget for Flutter developers to use.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*VQ-yBPvchbC0k_tX\" /></figure><h3>Detecting gestures</h3><p>If we tie some user gestures into updating the transformation matrix using a GestureDetector, then the user has the freedom to navigate the scene that we’re displaying to them. GestureDetector provides easy access to gestures like drag, which we can use for translation, pinch, for zooming, and even a two-finger rotation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*IjMrne-3AEcMAkUP\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*Ut-Uqv6H9ypaumF2\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*-BQ6W3Ke-W_JQiX4\" /></figure><p>GestureDetector provides lots of different callbacks for various gestures and their start, update, and end states. However, if you’re implementing something like the pictured demo that combines several, the scale callbacks are all you’ll need. The onScaleUpdate callback provides a focalPoint, both horizontal and vertical scales, and rotation, all in one. This allows you to respond to multiple gestures at the same time, such as if the user is rotating and scaling in one gesture. See the <a href=\"https://api.flutter.dev/flutter/gestures/ScaleUpdateDetails-class.html\">ScaleUpdateDetails</a> for everything provided in the onScaleUpdate callback.</p><p>Another thing that is often implemented in physical transformations like these is inertia. After the user finishes a gesture, they might expect the transformation to continue for awhile before slowly coming to a stop. Flutter provides a “velocity” parameter in the ending callbacks of all of these gestures, including scale. As you might guess with physics-based movement, this value is larger if the user is moving their finger quickly and smaller if the user is making a slow gesture.</p><p>You can create this inertia effect with another great piece of Flutter infrastructure, the <a href=\"https://api.flutter.dev/flutter/animation/Tween-class.html\">Tween</a> animation. Using the velocity and position at the end of a gesture, and a basic knowledge of physics, you can come up with a final position and duration to provide to the Tween, and let it handle everything else. Flutter even includes a <a href=\"https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/physics/friction_simulation.dart\">friction simulation class</a> to handle some of these calculations for you and make things feel very realistic.</p><h3>Conclusion</h3><p>Combining Transform and GestureDetector gives us an incredibly powerful tool. So much is possible, from moving around a game board, as shown in the screenshots, to navigating a map, to providing an interactive image viewer, and beyond.</p><p>The app shown here is currently available as a demo in the <a href=\"https://play.google.com/store/apps/details?id=io.flutter.demo.gallery&amp;hl=en_US\">Flutter Gallery app</a>. All of the code is a part of the main flutter open source repository, and can be found in the <a href=\"https://github.com/flutter/flutter/blob/master/examples/flutter_gallery/lib/demo/transformations/transformations_demo.dart\">transformation demo source</a>. Most of the transformation logic is in the <a href=\"https://github.com/flutter/flutter/blob/master/examples/flutter_gallery/lib/demo/transformations/transformations_demo_gesture_transformable.dart\">GestureTransformable</a> class, including the <a href=\"https://github.com/flutter/flutter/blob/9d724d4c4483b585dfd4bfd719844802f8b38abe/examples/flutter_gallery/lib/demo/transformations/transformations_demo_gesture_transformable.dart#L503\">inertia animation</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6834f5a25be9\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/the-power-of-the-flutters-transform-and-gesturedetector-widgets-6834f5a25be9\">The Power of the Flutter’s Transform and GestureDetector Widgets</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-06-07T00:57:41.000Z":{"title":"Flutter culture and how to preserve it","link":"https://medium.com/flutter/flutter-culture-and-how-to-preserve-it-436b4ed1031d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/436b4ed1031d","category":"community","dc:creator":"Filip Hracek","pubDate":"Fri, 07 Jun 2019 00:57:41 GMT","atom:updated":"2019-06-07T00:57:41.208Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<p><em>[</em><a href=\"https://medium.com/@emily.fortuna\"><em>Emily Fortuna</em></a><em> and </em><a href=\"https://medium.com/@filiph\"><em>Filip Hracek</em></a><em> wrote this article together.]</em></p><p>A big part of what makes Flutter so delightful and productive is its community. We really want this to continue, and so we thought we’d share some of our observations about the current culture, and some ideas on how to preserve it.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cuQ-MCimzPmxiJjL-UV3KQ.jpeg\" /></figure><h3>Being open</h3><p>There are three senses of the word <em>open</em> we’re thinking of here: <em>open</em> as in <em>open minded</em>, and open as in <em>accessible</em>, and <em>open</em> as in Open Source. While the Open Source angle is great (and makes our package system a veritable rainforest biome of abundance), culture-wise we’re thinking primarily about the first two. It has been wonderful to see the Flutter community welcome newcomers and help them learn the ropes, answering questions with patience and thoroughness. This helps our community grow and feel inviting to everyone, regardless of your background. We love seeing how Flutter developers share code snippets and have a willingness to dive into debugging others’ problems.</p><p>Of course, open-mindedness is applicable to much more than just newcomers. There often can be more than one way to implement an idea, and we appreciate tremendously that the Flutter community <em>gently</em> corrects issues as they arise or allows different ways of implementing algorithms as the case may be. That, again, is powerful.</p><p><em>Some</em> amount of standardization is good. A small team should probably have a standardized code style. But it’s really easy for tech communities to get a little overzealous about the “right” way to do things. Different teams will have different code styles, and that’s okay. Different apps will use different state management approaches, and that’s also okay. Some people will use tabs instead of spaces, and that’s (*visibly struggles for 15 minutes*) okay.</p><p>Again, it’s easy to overlook how <em>natural</em> it is for tech communities to become rigid about some ideas, to gain immutable institutional knowledge and defend it with fanatical zeal.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pI9tDcnxm87Vq1hX1Yzwpg.jpeg\" /></figure><p>Yet in the Flutter community, we haven’t seen any of that.</p><p>Approaching questions with a beginner’s mindset, that is with openness, gentleness, curiosity, thoroughness, and a lack of preconceptions serves everyone. Not only does it encourage newcomers, it furthers the understanding of Flutter veterans, who may have only had a partial understanding of a subject area. And, simply, it makes other folks more receptive to your ideas. We are thrilled to see these positive qualities often on Stack Overflow and various Slack channels. See also, <a href=\"https://www.ted.com/talks/brene_brown_on_vulnerability?language=en\">vulnerability as a superpower</a>.</p><h3>Being modest</h3><p>We see Flutter developers being helpful to newcomers without looking down at them. This is extremely powerful.</p><p>It’s very natural to want to look perfect in front of others. But if taken too far it leads to a culture of masks and unrealistic expectations. Things like this, when left unchecked, can spiral out of control via feedback loops. It can start with little snide remarks and next thing you know, you have widespread imposter syndrome, insecurity, anxiety, and cruelty.</p><p>We hope we’ve shown through the various Flutter Boring Show episodes that we make mistakes. (Because we certainly do make mistakes!) The Boring Show’s concept is about showing the development process with all the errors, blind alleys, and synapse lapses along the way, without editing.</p><p>This is one of the core qualities our team looks for in prospective Flutter Google Developer Experts (GDEs). We expect Flutter GDEs, the people who are some of the most knowledgeable about Flutter on the planet, to demonstrate humility and empathy. We don’t want Flutter to be represented by a group of smart but patronizing people. Thankfully, we never had any trouble with any of the prospective GDEs. The message of humbleness always resonated without us even having to explain what we mean. That’s a testament to our community.</p><p>Fortunately we see this in the Flutter engineering team as well. To call just one example, Ian — one of the founders of Flutter and former editor of the HTML spec, among other things — is as humble an engineer as anyone we know. You can see him here being uncertain about the workings of Slivers. That makes us respect him more, not less.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fvideoseries%3Flist%3DPLOU2XLYxmsIK0r_D-zWcmJ1plIcDNnRkK&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DMz3kHQxBjGg&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FMz3kHQxBjGg%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3ce723313eeee1c8d1c41f3eacc85888/href\">https://medium.com/media/3ce723313eeee1c8d1c41f3eacc85888/href</a></iframe><h3>Being respectful to other technologies</h3><p>It’s easy to get so attached to a technology to the point that all others look like a bad idea. Especially when they’re competing technologies.</p><p>Flutter doesn’t need hype or zealotry. There are very good reasons to use Flutter such as wanting to take advantage of Dart to write a reactive UI quickly, having a fast responsive app that works on iOS and Android (and the web and desktop), and having a rich package ecosystem easily within reach.</p><p>But some people also have use cases that are not a good fit for Flutter, and one of the best things you can do as a Flutter enthusiast is to persuade these people to <strong><em>not</em></strong> use Flutter. You will save them a lot of pain and disappointment. And that person will respect you <em>more </em>for knowing the technological landscape extensively enough to provide an even-handed recommendation.</p><p>Unfortunately, Filip <a href=\"https://twitter.com/filiphracek/status/997324648164478976\">has</a> already seen some derision from the Flutter community towards other technologies. But it hasn’t been widespread, and others in the community have stood against it. That makes us optimistic.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wgRQ5H3y-fauvzGLxM3HDw.jpeg\" /></figure><h3>Why preserve this?</h3><p>This community culture is an enormous strength of Flutter. Let’s be real: the developer experience of any technology is a sum of both the technology itself and the community around it. If a community consists of just fanatics, jerks, or hypers, no amount of technical superiority will make us join it.</p><p>A healthy community is one that grows. There can be hidden costs behind a community growing while simultaneously becoming more insular. Yes, <em>some</em> new folks are joining, but can you imagine how many <em>additional</em> people might join if that community if it were more welcoming? We want to preserve these qualities that brought <em>us</em> to this community and continue to open it up for those that join after us.</p><h3>How to preserve this?</h3><p>There isn’t a top-down way to preserve these values. Flutter is an open community. Its values will be preserved through the day-to-day decisions of its members. Small things like how you welcome new members, how you share your knowledge, how honest you are about your latest mistake, how nicely you talk about a competing framework. All those things <strong><em>are</em></strong> the Flutter community.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*I4r3rDh8039olbgfWiztkw.png\" /></figure><p>By focusing on openness, modesty, and respect to others in the ecosystem we will continue to foster a great developer experience for everyone. We hope that by identifying and naming what we see in the community, this article will help preserve it. After all, it’s hard to preserve something without realizing we have it.</p><h3>What we don’t mean</h3><ul><li>We don’t mean we shouldn’t be showing best practices and great code. You can be excellent in your craft without looking down on others.</li><li>We don’t mean we shouldn’t have any standards and “primary ways to do things.” You can have standards without being dismissive about alternatives.</li><li>We don’t mean we shouldn’t be enthusiastic. You can be enthusiastic without hating on competing technologies.</li><li>We don’t mean we shouldn’t be excited about Flutter. You can be excited and still know exactly when and why Flutter is not a good tool for the job.</li></ul><p>As Flutter continues to grow in popularity, we are at an important point in our community’s history, and <em>you </em>are a crucial part of it! Let’s grow in the right way to continue to foster a great experience for everyone. When interacting with other folks on the internet remember to let the qualities of <strong>openness</strong>, <strong>modesty</strong>, and <strong>respect to other ecosystems</strong> guide your responses. Flutter has a <a href=\"https://github.com/flutter/flutter/blob/master/CODE_OF_CONDUCT.md\">Code of Conduct</a> and, as we mention there, should you experience anything that makes you feel unwelcome in Flutter’s community, please contact someone on the team such as one of us. And if you’re new here, welcome! We’re so excited you can join us.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-P8cY8Ia17Xq1ufedJKyiQ.png\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=436b4ed1031d\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/flutter-culture-and-how-to-preserve-it-436b4ed1031d\">Flutter culture and how to preserve it</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-05-15T18:37:58.000Z":{"title":"Android Dark Theme in Flutter","link":"https://medium.com/flutter/android-dark-theme-in-flutter-9c8070b8b127?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/9c8070b8b127","category":["android-app-development","dark-theme","flutter"],"dc:creator":"Matt Carroll","pubDate":"Wed, 15 May 2019 18:37:58 GMT","atom:updated":"2019-05-15T18:37:58.242Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wogDV86zrS8BNYI-8Th-TA.jpeg\" /></figure><p>A week ago at Google I/O 2019, the Android team <a href=\"https://developer.android.com/preview/features/darktheme\">announced support in Android Q for Dark Theme</a>, a system-wide dark UI mode that is toggled by the user. This then begs the question, when will Flutter add support for this awesome new Android feature? Well, you might be surprised to find out that <a href=\"https://github.com/flutter/flutter/pull/26605\">Flutter added support for dark theme back in February</a>! Here’s how to use it.</p><p>First, let’s start with a typical <em>MaterialApp</em> that establishes the theme for the rest of the UI. The following is how a typical app would define its theme before Dark Theme.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1c5700cdb2e385a3667623a51f5bf113/href\">https://medium.com/media/1c5700cdb2e385a3667623a51f5bf113/href</a></iframe><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jNi8NVhtMe7zo_3Nmtajqg.jpeg\" /></figure><p>In Flutter, we introduced a <em>darkTheme</em> property for <em>MaterialApp</em>, which allows you to specify a 2nd, independent theme to be used just for Android’s Dark Theme feature. Let’s introduce a theme with a setting of <em>Brightness.dark</em> for our <em>MaterialApp</em>’s <em>darkTheme</em>.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e3172e5538dd496e6b65de1af26eb0e4/href\">https://medium.com/media/e3172e5538dd496e6b65de1af26eb0e4/href</a></iframe><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*b5P4ZxNmuw2q6-cZwj1Ukw.jpeg\" /></figure><p>Tada! Now when you toggle Dark Theme in your system drawer, your Flutter app will automatically switch from your regular <em>theme</em> to your <em>darkTheme</em>!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/270/1*dGPFsh1dbSaoNOGQCpsmCw.gif\" /></figure><p>Thanks to Flutter’s use of code for UI, updating your app to support a great new feature takes little more than adding a new property to your widget tree. No XML styles to update, no CSS to update, just a normal Dart parameter.</p><p>In Flutter, there’s no reason to be afraid of the dark.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9c8070b8b127\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/android-dark-theme-in-flutter-9c8070b8b127\">Android Dark Theme in Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-05-08T16:29:32.000Z":{"title":"A roundup of Flutter news at Google I/O","link":"https://medium.com/flutter/a-roundup-of-flutter-news-at-google-i-o-453bb3249981?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/453bb3249981","category":["dart","technology-news","google","web-development","flutter"],"dc:creator":"Tim Sneath","pubDate":"Wed, 08 May 2019 16:29:32 GMT","atom:updated":"2019-05-11T21:37:18.993Z","content:encoded":"<h4>Flutter: beautiful apps for mobile, web and desktop</h4><p>We shipped an almost overwhelming amount of news about Flutter at <a href=\"https://events.google.com/io/\">I/O ’19</a> this year, and if it’s not your full-time job to track it all, you might be forgiven for missing some of it. So here’s an aggregation of all the big news, as well as highlights from the press coverage.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3XedGb879lTK2vbCP0uscA.png\" /><figcaption>Flutter for Web technical preview, announced by Adam Seligman during the developer keynote at Google I/O ‘19</figcaption></figure><h4>TL;DR</h4><p>Flutter expands from mobile devices to support the web and desktop: same codebase, same focus on fast, beautiful experiences with high productivity.</p><h4>News and announcements</h4><ul><li>Flutter <a href=\"https://flutter.dev/web\">now supports the web</a>. Open source, <a href=\"https://github.com/flutter/flutter_web\">repo on GitHub</a>.</li><li>Flutter 1.5 ships to the stable channel (<a href=\"https://github.com/flutter/flutter/wiki/Release-Notes-Flutter-1.5.4\">release notes</a>). Includes preliminary support for <a href=\"https://github.com/flutter/flutter/wiki/Desktop-shells\">targeting Windows, Mac and Linux operating systems</a>. New plug-ins for <a href=\"https://pub.dev/packages/in_app_purchase\">in-app payment</a>, <a href=\"https://pub.dev/packages/provider\">state management</a>. New samples for <a href=\"https://github.com/firebase/mlkit-custom-image-classifier/tree/master/flutter-app\">ML Kit</a>-based image classification.</li><li>Support for <a href=\"https://github.com/flutter/flutter/wiki/Linting-Flutter-apps-for-Chrome-OS\">developing on Chrome OS</a> and <a href=\"https://github.com/flutter/flutter/wiki/Linting-Flutter-apps-for-Chrome-OS\">publishing apps to Chrome OS</a>.</li><li>Dart 2.3 <a href=\"https://dart.dev/tools/sdk/archive\">released</a> with new support for UI-as-code features including the <em>spread </em>operator, collection<em> if </em>and collection<em> for</em>; <a href=\"https://dart.dev\">website</a> and <a href=\"https://pub.dev\">package site</a> overhauled.</li><li>New reference customers for Flutter announced: eBay, Sonos, and New York Times. The Assistant team is using Flutter for their smart display platform with Flutter, powering the UI of devices such as Google Nest Hub.</li><li>Updates for the <a href=\"https://dartcode.org/releases/v3-0/\">Visual Studio Code</a> and <a href=\"https://groups.google.com/d/msg/flutter-dev/qZNjCI_2BLE/_R4iJPOFAAAJ\">Android Studio</a> tooling extensions.</li><li><a href=\"https://www.appbrewery.co/p/flutter-development-bootcamp-with-dart/\">Flutter training course published by App Brewery</a>, in collaboration with Google. Thirty hours of videos and labs, at a subsidized price of just $10.</li><li>Flutter Create award winners <a href=\"https://medium.com/flutter-io/the-flutter-create-winners-are-40980f2d20b3\">announced</a>, along with <a href=\"https://www.youtube.com/watch?v=WLvpROMUjYQ\">demo reel</a>.</li><li>International <a href=\"https://flutterhackathon.com\">community-organized Flutter hackathon</a> on June 1st.</li></ul><h4>Articles from the Flutter and Dart teams</h4><ul><li><a href=\"https://developers.googleblog.com/2019/05/Flutter-io19.html\">Flutter: a portable UI framework for mobile, web, embedded, and desktop</a></li><li><a href=\"https://medium.com/flutter-io/bringing-flutter-to-the-web-904de05f0df0\">Bringing Flutter to the web</a></li><li><a href=\"https://medium.com/flutter-io/announcing-flutter-1-5-d203c6072e5c\">Announcing Flutter 1.5</a></li><li><a href=\"https://medium.com/dartlang/announcing-dart-2-3-optimized-for-building-user-interfaces-e84919ca1dff\">Dart 2.3: optimized for building user interfaces</a></li><li><a href=\"https://medium.com/googleplaydev/flutter-and-chrome-os-better-together-14b257ed6776\">Chrome OS and Flutter: better together</a></li><li><a href=\"https://medium.com/flutter-io/performance-testing-of-flutter-apps-df7669bb7df7\">Performance testing of Flutter apps</a></li></ul><h4>Articles from partner teams</h4><ul><li><a href=\"https://medium.com/flutter-nyc/flutter-is-all-the-things-805caf2793f3\">Flutter is all the things</a> (Very Good Ventures)</li><li><a href=\"https://medium.com/flutter-nyc/under-the-hood-with-flutter-for-web-bc0d5ce1c11e\">Under the Hood with Flutter for Web</a> (Very Good Ventures)</li><li><a href=\"https://medium.com/2dimensions/flutter-developer-quest-game-at-google-i-o-2019-53971a56a524\">Flutter Developer Quest game at I/O ’19</a> (2Dimensions)</li></ul><h4>Flutter and Dart keynote and session recordings</h4><ul><li><a href=\"https://twitter.com/googledevs/status/1126222981452247040\">Keynote: announcing the technical preview of Flutter for web</a></li><li><a href=\"https://www.youtube.com/watch?v=YSULAJf6R6M\">Beyond mobile: Material Design, adaptable UIs and Flutter</a></li><li><a href=\"https://www.youtube.com/watch?v=ZBJa-xjZl3w\">Building for iOS with Flutter</a></li><li><a href=\"https://www.youtube.com/watch?v=IyFZznAk69U\">Building Flutter apps for iOS, Android, Chrome OS and web</a></li><li><a href=\"https://www.youtube.com/watch?v=J5DQRPRBiFI\">Dart: Productive, fast and multiplatform — pick 3</a></li><li><a href=\"https://www.youtube.com/watch?v=d_m5csmrf7I\">Pragmatic state management with Flutter</a></li></ul><h4>Demos and Codelabs</h4><ul><li><a href=\"https://www.nytimes.com/games/prototype/kenken\">New York Times KENKEN game, built with Flutter for web</a></li><li><a href=\"https://flutter.github.io/samples/\">Flutter web sample gallery</a></li><li><a href=\"http://github.com/2d-inc/developer_quest\">2Dimensions: Developer Quest game</a> (<a href=\"https://itunes.apple.com/app/id1455994402\">iOS</a>, <a href=\"https://play.google.com/store/apps/details?id=dev.flutter.devRpg\">Android</a>)</li><li>Three new codelabs for Flutter: <a href=\"https://codelabs.developers.google.com/codelabs/google-photos-sharing/index.html\">Photos API</a>, <a href=\"https://codelabs.developers.google.com/codelabs/google-maps-in-flutter/index.html\">Google Maps</a>, <a href=\"https://codelabs.developers.google.com/codelabs/flutter-cupertino/index.html\">iOS apps</a></li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*iFS8mhfeoLHEBSfh0p7CTw.jpeg\" /><figcaption>The New York Times KENKEN game, shown running on Chrome, macOS, mobile Safari, iPhone and Android.</figcaption></figure><h4>Press highlights</h4><ul><li>“Flutter has grown by leaps and bounds to quickly become arguably the best framework for multi-platform coding across iOS and Android. […] It has frankly been a bit shocking how positive the response to Flutter has been.” (<a href=\"https://www.xda-developers.com/flutter-1-5-support-web-embedded-desktop/\">XDA Developers</a>)</li><li>“Google’s Flutter UI toolkit for cross-platform development may only be two years old, but it has quickly become the framework of choice for many developers.” (<a href=\"https://techcrunch.com/2019/05/07/googles-flutter-framework-spreads-its-wings-and-goes-multi-platform/\">TechCrunch</a>)</li><li>“Google is fixing one of the biggest hurdles for app developers that not only makes their jobs easier, but also makes their apps and services better to use on pretty much every platform we most commonly use, including Android, iOS, Windows 10, macOS, Chrome OS, and web browsers.” (<a href=\"https://www.businessinsider.com/googles-flutter-will-bring-your-favorite-apps-to-mobile-desktop-web-2019-5\">BusinessInsider</a>)</li><li>“Clearly, Google is trying to make Flutter the best way to create apps of every kind. Whether your app is for Android, iOS, Chrome OS, Windows, Web, IoT or all of the above doesn’t matter anymore, and that’s astounding.” (<a href=\"https://9to5google.com/2019/05/07/flutter-apps-web-desktop-more/\">9to5Google</a>)</li><li>“<a href=\"https://developers.googleblog.com/2019/05/Flutter-io19.html\">The updates</a>, which got a lot of cheers when they were announced today […] mean that Flutter in fact becomes a multiplatform UI framework.” (<a href=\"https://siliconangle.com/2019/05/07/google-expands-flutter-ui-framework-web/\">SiliconAngle</a>)</li></ul><p>Also see articles from <a href=\"https://venturebeat.com/2019/05/07/google-expands-flutter-mobile-app-sdk-to-the-web-desktop-and-embedded-devices/\">VentureBeat</a>, <a href=\"https://www.zdnet.com/article/google-expands-ui-framework-flutter-from-just-mobile-to-multi-platform/\">ZDNet</a>, <a href=\"https://www.thurrott.com/dev/206307/google-brings-flutter-to-the-web-in-technical-preview\">Thurrott</a>, and others.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=453bb3249981\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/a-roundup-of-flutter-news-at-google-i-o-453bb3249981\">A roundup of Flutter news at Google I/O</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-05-09T01:26:02.000Z":{"title":"Performance Testing of Flutter apps","link":"https://medium.com/flutter/performance-testing-of-flutter-apps-df7669bb7df7?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/df7669bb7df7","category":["google","flutter","performance","mobile-app-development","mobile"],"dc:creator":"Filip Hracek","pubDate":"Thu, 09 May 2019 01:26:02 GMT","atom:updated":"2019-05-09T01:32:08.899Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h3>Performance testing of Flutter apps</h3><p>The Flutter framework does a good job being fast by default, but does that mean you don’t need to think about performance at all? No. It is absolutely possible to write Flutter apps that are slow. On the other hand, it is also possible to make the most of the framework, and make your apps not only fast, but also efficient, consuming less CPU time and battery.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/742/1*MxtHyEfdBlANwu7ZRyX2mw.png\" /><figcaption>This is what we want: a statistically significant result comparing two versions of your app on some meaningful metric. Read on to learn how to get this.</figcaption></figure><p>There are some general guidelines for performance optimization in Flutter:</p><ul><li>Target as few widgets as possible when updating state.</li><li>Only update state when you must.</li><li>Keep computationally intensive tasks outside your build methods, and — ideally — outside the main isolate.</li></ul><p>The hard truth is that, for many questions about performance optimization, the answer is “it depends”. Is <em>this particular</em> optimization for <em>this particular </em>widget worth the effort and the maintenance cost? Does <em>this particular</em> approach in <em>this particular</em> situation make sense?</p><p>The only useful answer to these questions comes from testing and measurement. Quantify what impact each choice has on performance, and decide based on that data.</p><p>The good news is that Flutter provides great performance profiling tools, such as the <a href=\"https://flutter.github.io/devtools/\">Dart DevTools</a> (currently in preview release) that includes the Flutter Inspector, or you can use <a href=\"https://flutter.github.io/devtools/inspector\">Flutter Inspector</a> directly from Android Studio (with the Flutter plugin installed). You have Flutter Driver for exercising your app, and Profile mode for saving performance information.</p><p>The bad news is that modern smartphones are — well — smart.</p><h3>The problem with governors</h3><p>Quantification of Flutter app performance is made particularly hard by iOS and Android governors. These system-level daemons tweak the speed of CPU and GPU units according to load. This is mostly a good thing, of course, because it ensures smooth performance while consuming as little battery as possible.</p><p>The downside is that you can make your app significantly <em>faster</em> by making it work <em>more</em>.</p><p>Below, you can see how adding a loop with nonsensical print statements to an app made the governor switch into higher gear, making the app much faster and its performance more predictable.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/656/0*vJSgoS61dEqAK7kf\" /><figcaption>The problem with governors: by default, is that you can’t trust your numbers. In this boxplot, we have individual runs on the x axis (labeled by the exact time they started), and build times on the y axis. As you can see, when we introduce some completely unnecessary print statements, it makes build times go down, not up.</figcaption></figure><p>In this experiment, worse code resulted in faster build times (above), faster rasterization times, and higher frame rate. When objectively worse code results in better performance metrics, you can’t depend on those metrics for guidance.</p><p>This is just one example of how performance benchmarking of mobile apps can be unintuitive and hard.</p><p>Below, I share some tips I gathered while working on Flutter’s Google I/O app, <a href=\"https://github.com/2d-inc/developer_quest\">Developer Quest</a>.</p><h3>Basic advice</h3><ul><li>Do not measure performance when in DEBUG mode. Only measure performance in profile mode.</li><li>Measure on a real device, not in the iOS Simulator or Android Emulator. The software emulators are great for development, but they have very different performance characteristics from the real thing. Flutter won’t allow you to run in profile mode on a simulated device, because it doesn’t make any sense. The data you gather this way is not applicable to real world performance.</li><li>Ideally, use the same exact physical device. Make it your dedicated perf testing device and never use it for anything else.</li><li>Learn the Flutter <a href=\"https://flutter.dev/docs/testing/ui-performance\">performance profiling tools</a>.</li></ul><h3>CPU/GPU governors</h3><p>As discussed above, modern operating systems change the frequency of each CPU and GPU at their disposal according to load and some other heuristics. (For example, touching the screen typically puts an Android phone into a much higher gear.)</p><p>On Android, you can turn these governors off. We call this process “scale locking.”</p><ul><li>Build a script that scale-locks your performance-test device. You can use <a href=\"https://github.com/google/skia/blob/e25b4472cdd9f09cd393c9c34651218507c9847b/infra/bots/recipe_modules/flavor/android.py\">Skia’s recipe</a> for inspiration. You can also check out <a href=\"https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-devices-system-cpu\">Unix CPU API</a>.</li><li>You probably want something less generic and more lightweight unless you’re running a large benchmarking operation like Skia. Have a look at Developer Quest’s <a href=\"https://github.com/2d-inc/developer_quest/blob/master/tool/lock_android_scaling.sh\">shell script</a> for some pointers. For example, the following excerpt sets a CPU to the userspace governor (the only governor that doesn’t change CPU frequencies on its own).</li></ul><pre>#!/usr/bin/env bash</pre><pre>GOV=&quot;userspace&quot;<br>echo &quot;Setting CPU governor to: ${GOV}&quot;<br>adb shell &quot;echo ${GOV} &gt; /sys/devices/system/cpu/cpu${CPU_NO}/cpufreq/scaling_governor&quot;<br>ACTUAL_GOV=`adb shell &quot;cat /sys/devices/system/cpu/cpu${CPU_NO}/cpufreq/scaling_governor&quot;`<br>echo &quot;- result: ${ACTUAL_GOV}&quot;</pre><ul><li>Your goal here is not to simulate real-world performance (no user scale-locks their device), but to have comparable performance metrics between runs.</li><li>In the end, you need to experiment, and tailor the shell script to the device you’ll be using. It’s work, but until you do this, your performance data will lie to you.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*PVigpdSw-WlNfJHI\" /><figcaption>An early version of Developer Quest being exercised by Flutter Driver on my desk.</figcaption></figure><h3>Flutter Driver</h3><p>Flutter Driver lets you exercise your app automatically. Read the <a href=\"https://flutter.dev/docs/cookbook/testing/integration/profiling\">Performance profiling</a> section of flutter.dev for a concrete recipe on how to use it when profiling your app.</p><ul><li>Don’t exercise your app manually when performance testing. Always use Flutter Driver to ensure that you’re comparing apples to apples.</li><li>Write your Flutter Driver code so that it exercises what you really want to measure. If you’re after general app performance, try to walk through all parts of your app and do the things a user would.</li><li>If your app has an element of chance (Random, network events, etc.), mock these out. The walk throughs should be as similar to each other as possible.</li><li>If you want, add custom timeline events by using <a href=\"https://api.dartlang.org/stable/2.2.0/dart-developer/Timeline-class.html\">Timeline</a>’s startSync() and finishSync() methods. This is useful, for example, when you are interested in the performance of a particular function. Put startSync() at the beginning of it and finishSync() at its end.</li><li>Save both the summary (<a href=\"https://docs.flutter.io/flutter/flutter_driver/TimelineSummary/writeSummaryToFile.html\">writeSummaryToFile</a>) and, more importantly, the raw timeline (<a href=\"https://docs.flutter.io/flutter/flutter_driver/TimelineSummary/writeTimelineToFile.html\">writeTimelineToFile</a>).</li><li>For each version of your app, exercise it many times. For Developer Quest, I converged to 100 runs. (When you measure things that are noisier, like 99th percentile, you might need a lot more runs.) For POSIX-based systems, that just means running something like the following: for i in {1..100}; do flutter drive --target=test_driver/perf.dart --profile; done.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y7-lpotj3tTjqJyobYyKHw.png\" /><figcaption>Using Chrome’s timeline tool to inspect Flutter’s profile output.</figcaption></figure><h3>Timeline</h3><p>Timeline is the raw output of your profile run. Flutter dumps this information in a JSON file that can be loaded into chrome://tracing.</p><ul><li>Learn to open the full timeline in Chrome’s tracing timeline. You just open chrome://tracing in the Chrome browser, click “Load”, and select the JSON file. You can read more in <a href=\"https://aras-p.info/blog/2017/01/23/Chrome-Tracing-as-Profiler-Frontend/\">this short tutorial</a>. (There is also <a href=\"https://flutter.github.io/devtools/timeline\">Flutter’s timeline tooling</a>, currently in tech preview. I haven’t used that one because the Developer Quest project started before Flutter’s timeline tooling was ready.)</li><li>Use the WSAD keys to move around the timeline in chrome://tracing, and 1234 to change modes of operation.</li><li>When first setting up your performance testing, consider running Flutter Driver with full Android systrace. This gives you more insight on what’s actually happening in the device, including CPU scaling information. Don’t measure your app with systrace fully on, though, as it makes everything slower and less predictable.</li><li>How to run full Android systrace with Flutter Driver? First, start Android systrace with /path/to/your/android/sdk/platform-tools/systrace/systrace.py --atrace-categories=gfx,input,view,webview,wm,am,sm,audio,video,camera,hal,app,res,dalvik,rs,bionic,power,pm,ss,database,network,adb,pdx,sched,irq,freq,idle,disk,load,workq,memreclaim,regulators,binder_driver,binder_lock. Then, start the app with flutter run test_driver/perf.dart --profile --trace-systrace. Lastly, start the Flutter Driver with flutter drive --driver=test_driver/perf_test.dart --use-existing-app=http://127.0.0.1:NNNNN/ (where NNNNN is the port that flutter run above gives you).</li></ul><h3>Metrics</h3><p>It’s better to look at as many metrics as possible, but I’ve found some more useful than others.</p><ul><li>Build times and rasterization times (the metrics that are provided by default by TimelineSummary) are only useful for really tight performance tests that don’t include much besides building UI.</li><li>Don’t look at TimelineSummary.frameCount as a way to compute frames per second (FPS). Flutter’s profile tooling does not give you real frame rate information. TimelineSummary provides the countFrames() method, but it only counts the number of completed frame builds. A well optimized app that limits unnecessary rebuilds will have less frames per second than an unoptimized app that rebuilds often.</li><li>I personally get the most useful data by measuring the total CPU time spent running Dart code. This counts code executed both in your build methods and outside of them. Assuming you run your profile tests on a scale-locked device, total CPU time is a good approximation of how much more/less battery your app will consume.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/678/0*0S0itDkQHzRjcY1N\" /></figure><ul><li>The easiest way to find out the total CPU time spent running Dart code is to measure the extent of MessageLoop:FlushTasks events in the timeline. For Developer Quest, I have written <a href=\"https://github.com/2d-inc/developer_quest/blob/master/test_driver/parse_timeline.dart#L82\">a Dart tool</a> to extract these.</li><li>To detect jank (i.e. skipped frames), look for extremes. For example, for the particular case of Developer Quest and the device we have for testing, it was helpful to look at 95th percentile build times. (The 90th percentile build times were too similar even when comparing code with vastly different levels of efficiency, and 99th percentile numbers tend to be noisy. Your mileage may vary.)</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/660/0*ewPiWp1FMME8HDnV\" /></figure><ul><li>As mentioned above, exercise each version of your app several (perhaps 100) times. Then use average or percentile data with margins of error. Even better, use boxplots.</li></ul><h3>Results</h3><p>Once this is set up, you will be able to compare commits and experiments with confidence. Below, you can see an answer to a common dilemma: “is this optimization worth the maintenance overhead?”</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ynM53tboJVQFcpmxRuuu4A.png\" /></figure><p>I think that in <em>this particular</em> case, the answer is yes. With only a few more lines of code, each automated walkthrough of our app takes, on average, 12% less CPU time.</p><p>But—and that is the main message of this article—another optimization’s measurements might show something very different. It is tempting, but wrong, to try to extrapolate a performance measurement too broadly.</p><p>In other words: “it depends”. And we should embrace that sentence.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=df7669bb7df7\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/performance-testing-of-flutter-apps-df7669bb7df7\">Performance Testing of Flutter apps</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2019-07-25T16:17:19.000Z":{"title":"What do Flutter package users need? Findings from Q2 user survey","link":"https://medium.com/flutter/what-do-flutter-package-users-need-6ecba57ed1d6?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6ecba57ed1d6","category":["flutter","developer-experience","mobile-app-development","surveys","ux-research"],"dc:creator":"Ja Young Lee","pubDate":"Thu, 25 Jul 2019 16:17:19 GMT","atom:updated":"2019-07-25T20:32:13.237Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*JGPtcSX7QYbN8Dvn\" /><figcaption><em>A word cloud made with the Q2 survey comments </em>☁️<em> (link to the original </em><a href=\"https://raw.githubusercontent.com/timsneath/wordcloud_flutter/master/flutter_wordcloud.png\"><em>image</em></a><em>, </em><a href=\"https://github.com/timsneath/wordcloud_flutter\"><em>code</em></a><em>)</em></figcaption></figure><p>We recently ran our sixth quarterly user survey and collected responses from over 7,000 Flutter users. We found that 92.5% of the respondents are satisfied or very satisfied, which is slightly higher than the <a href=\"https://medium.com/flutter/insights-from-flutters-first-user-survey-of-2019-3659b02303a5\">last quarter</a>! We are thrilled to see a consistent level of satisfaction with Flutter. In this article, we cover some deep-dive questions around Flutter’s ecosystem, because we recognize that helping the Flutter community grow the ecosystem is important.</p><p>As of July, 2019, you can find over 2,800 Flutter-dependent packages published on <a href=\"https://pub.dev\">pub.dev</a>. At the same time last year, there were about 350 Flutter-dependent packages available, showing tremendous growth! And this does not include the thousands of additional Dart packages that are compatible with Flutter apps.</p><p>Even though the ecosystem has been exploding, we recognize that there is still plenty of work remaining to build an excellent ecosystem around the Flutter project. To better understand the needs and struggles of our users, we asked a number of questions related to Flutter’s ecosystem in this quarter’s survey. We’re sharing the results in this article to help package authors build more useful packages that serve the needs of more users.</p><p>Overall, 80.6% of 5,250 respondents were either <em>very satisfied</em> or <em>somewhat satisfied </em>with the Flutter ecosystem. This is not bad, but at the same time, it is one of the lower-scoring parts of the survey.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*MjrAD-ZGebXA-xaX\" /><figcaption><em>Satisfaction with ecosystem</em></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LDgXRVH9t_ZteWDV\" /><figcaption><em>Overall satisfaction with Flutter</em></figcaption></figure><p>When asked about the dissatisfaction with Flutter’s ecosystem, the reason selected by the most respondents was that “critical packages I need <strong>do not exist</strong> yet” (18%), which is perhaps to be expected for a relatively new technology.</p><p>However, we are happy to find that our community is actively adding to the Flutter package ecosystem. 15% of respondents had experience developing packages for Flutter, and 59% had published their packages to pub.dev, the site for sharing packages written for Flutter and Dart apps. If you’ve written a package but have not published yet, you can read <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages\">Developing packages &amp; plugins</a> on <a href=\"http://flutter.dev\">flutter.dev</a>, and contribute back to the Flutter community by publishing your package. It is not difficult — of those who had published to <a href=\"http://pub.dev\">pub.dev</a>, 81% thought that it was <em>very easy</em> or <em>somewhat easy</em>.</p><p>If you can’t decide which package to share with the Flutter community, visit the Flutter repository on GitHub and search for <a href=\"https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3A%22would+be+a+good+package%22+sort%3Areactions-%2B1-desc\">issues labeled with “would be a good package”</a> to see what has been requested. You can upvote your favorite requests to increase their visibility.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*UdtJOiVqBwXOmDl_\" /><figcaption><em>Reasons for dissatisfaction with Flutter’s ecosystem ( a multiple choice question)</em></figcaption></figure><p>However, there is an even better way to contribute to the ecosystem, if you’re interested in helping out. Note that all other reasons start with “critical packages I need do exist…”, meaning that package users were facing challenges even when packages exist. This tells us that we can improve the ecosystem by improving what is already there — by filing bugs, improving documentation, adding missing features, implementing support for the ‘other’ platform, adding tests, and so on. Consider finding a package that has potential but has not been loved enough and contribute towards it — with tests, bug reports, feature contributions, or examples!</p><p>The most common reason for dissatisfaction with existing packages is that “they are not well <strong>documented</strong>” (17%). This is another area where the community can help. The survey question “What would you like done to improve your overall experience with the package ecosystem?” resulted in the following suggestions:</p><ul><li>Include more diverse code usage examples</li><li>Include screenshots, animated gifs, or videos</li><li>Include a link to the corresponding code repository</li></ul><p>Here are some relevant quotes from the comment section:</p><blockquote><em>“There are still some packages that do not have code samples on the very first page. It should be mandatory to have at least a single simple example.”</em></blockquote><blockquote><em>“Emphasize to package developers to give more thorough examples of how to use their package.”</em></blockquote><blockquote><em>“Force all packages to have an animated gif or video demoing it (preferred) or a screenshot, and have an example Dart file.”</em></blockquote><blockquote><em>“A graphic display of an example package would be helpful. Many times it’s easier to see what a package is referring to than to run the example.“</em></blockquote><blockquote><em>“Would like to see the Example section filled out more often. Some packages don’t have any examples. Maybe have a clearer link on this page to the corresponding GitHub repo?”</em></blockquote><p>Also, as shown in the graph above, difficulties associated with the actual use of packages (such as dependency issues, bugginess of packages, setup of packages) are relatively less concerning to users as compared to activities associated with selecting suitable packages (such as missing features, trustworthiness of publishers, guidance for choice, adequate platform support).</p><p>The Flutter/Dart team at Google is also investigating ways to improve your experience with using, and contributing to, the ecosystem. Some of the options being considered include, but are not limited to:</p><ul><li>Provide a better pub.dev search experience</li><li>Make it easy to tell which platform(s) a package supports</li><li>Offer more reliable quality metrics</li><li>Improve testability</li></ul><p>In the meantime, it might be worth pointing out that each package on pub.dev already receives scores for popularity, health, and maintenance; these scores help users gauge the quality of a package. You can find details of the scoring system on <a href=\"https://pub.dev/help#scoring\">pub.dev/help#scoring</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/693/0*DSPe0z8OcY1Dzlet\" /><figcaption><em>Scoring example</em></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/686/0*Kxtw9kjb1h_6DTAK\" /><figcaption><em>Maintenance suggestions</em></figcaption></figure><p>With the scoring system, package authors can understand what they can do to improve the quality of the package, and package users can estimate the quality (for example, the outdatedness) of a package.</p><p>We expect the scoring system to expand over time to help users make more informed decisions. More specifically, we’d like to see test coverage added, and we’d like to expose better information about platform coverage, especially as the list of platforms that Flutter supports expands. We’d also like to provide a mark of whether a particular package is “recommended” so that users has a clear idea of what the Flutter community thinks is worth considering. As these scoring changes come about, we’ll communicate with our package authors to make sure that they have all of the information they need to meet the rising quality bar.</p><p>We want to convey a huge thank you to the more than 7,000 Flutter users who filled out the long survey. We learned a lot — some other highlights are listed below.</p><ul><li>Some Flutter users are not completely satisfied with the animation framework, not because it’s hard to achieve intended effects, but because it’s hard to get started. Respondents, especially new users, did not know where to begin, and it’s hard for them to understand how various concepts link together. Therefore, we are investing more into the learning materials for the animation framework.</li><li>For the API documentation on <a href=\"http://api.flutter.dev\">api.flutter.dev</a>, sample code in the class doc was rated as the most useful resource. We have added full code samples to some of the classes in the API docs with the 1.7 release, but will continue expanding this feature to more classes. (We also accept PRs against the API docs on the <a href=\"https://github.com/flutter/flutter/labels/d%3A%20api%20docs\">flutter/flutter repo</a>!)</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*PceEjhOlGlSQw1oK\" /></figure><ul><li>Lastly, many of you noticed that the number of unresolved issues in the GitHub repo is growing, which is an unfortunate side-effect of the exploding popularity of Flutter. While we closed over 1,250 issues in the last release, we have more work to do here. As mentioned in the Flutter 1.7 blog post, we’re working to increase staffing in this area, which will help with faster triaging of new bugs, faster attention to critical/crashing issues, closing and merging duplicate issues, and redirecting support requests to <a href=\"https://stackoverflow.com/questions/tagged/flutter\">StackOverflow</a>.</li></ul><p>We value your responses to the survey and will use this information when determining work priorities. Please participate in our Q3 survey, which will be launched in August, and will explore new topic areas.</p><p>Flutter’s UX research team performs a variety of user experience studies so that we can learn how to make your experience with Flutter more pleasant. If you are interested in participating, please <a href=\"http://flutter.dev/research-signup\">sign up</a> for future studies.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6ecba57ed1d6\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/what-do-flutter-package-users-need-6ecba57ed1d6\">What do Flutter package users need? Findings from Q2 user survey</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-05-06T15:01:01.000Z":{"title":"Announcing Flutter 1.17","link":"https://medium.com/flutter/announcing-flutter-1-17-4182d8af7f8e?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/4182d8af7f8e","category":["flutter","updates","releases"],"dc:creator":"Chris Sells","pubDate":"Wed, 06 May 2020 15:01:01 GMT","atom:updated":"2020-05-08T16:26:47.665Z","content:encoded":"<p><em>Includes Metal support for faster iOS performance, new Material components, new Network tracking tooling and more!</em></p><p><em>Posted by Chris Sells, Product Manager, Flutter developer experience</em></p><p>Today we’re pleased to announce Flutter 1.17, our first stable release of 2020.</p><p>This year has been a challenging one for everyone. Our goal is to ship stable releases on a roughly quarterly cadence; however, this release took a little longer because we’ve been <a href=\"https://medium.com/p/f723d898d7af#d6e5\">retooling our infrastructure for a new release process</a>. We continue to make quality our #1 priority and believe that the new release model will improve our ability to service the stable branch with quality hotfixes. This release is full of fixes, with an unprecedented 6,339 issues closed since our 1.12 stable release. A great deal of this increase is due to <a href=\"https://blog.codemagic.io/flutter-and-codemagic-join-forces-on-github/\">our partnership with Nevercode</a>, which has given us increased responsiveness when it comes to responding to customer issues. So far this year, we’ve closed more bugs than have been opened, resulting in a net decrease of ~800 issues. Many of these bugs were fixed by the 3,164 PRs we merged from 231 contributors. These are huge numbers and our heartfelt thanks goes out to everyone for their hard work and continued contributions during this challenging time.</p><p>If you’re interested in the full list of PRs we’ve merged in this release, you can see that on <a href=\"https://flutter.dev/docs/development/tools/sdk/release-notes/changelogs/changelog-1.17.0\">the flutter.dev site</a>. In addition to the quality improvements, we’ve managed to sneak some new features into this release as well, including Metal support on iOS, new Material components, new Network tracking tooling and more! This release also includes Dart 2.8, about which you can <a href=\"https://medium.com/dartlang/announcing-dart-2-8-7750918db0a\">read more on the Dart blog</a>.</p><h3>Mobile performance and size improvements</h3><p>A major focus of this release has been continued overall work on performance and memory improvements. Just by upgrading your app to this release, your users should see faster animations, smaller apps and lower memory utilization. In this release, you’ll see a <a href=\"https://github.com/flutter/flutter/pull/48900\">20%-37% speedup</a> for the default navigation case (opaque routes with no transparency). You’ll also see up to a 40% reduction in CPU/GPU usage for simple iOS animations, depending on the hardware (detailed in <a href=\"https://github.com/flutter/engine/pull/14104\">PR 14104</a> and in <a href=\"https://github.com/flutter/engine/pull/13976\">PR 13976</a>).</p><p>This release also provides a considerable app size improvement due to <a href=\"https://github.com/dart-lang/sdk/commit/f56b0f690789b6f0e2e5bc1340abf4eba414b7a0\">several</a> <a href=\"https://github.com/dart-lang/sdk/commit/a2bb7301c5795e6b28089a8dc96e6ab5ca798e22\">fixes</a> <a href=\"https://github.com/dart-lang/sdk/commit/d77f4913a18ecce8c4be95cbaa4299ff1521dc10\">that</a> <a href=\"https://github.com/dart-lang/sdk/commit/e2faac751e1ef3707730e6e48f4d8f22ecbf35c3\">add</a> <a href=\"https://github.com/dart-lang/sdk/commit/8e7ffafbafc8203361111ddcafe0e0fcc372edf8\">up</a> to a big result. For example, the Flutter Gallery sample for Android was 9.6MB at the end of 2019 and is now 8.1MB, which is an 18.5% reduction.</p><p>For memory usage, this release brings <a href=\"https://github.com/flutter/engine/pull/14265\">a 70% memory reduction</a> in fast scrolling through large images, which can also result in a performance increase depending on how much memory the device has.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*vwCZv9MQd_BLv7ii\" /><figcaption><em>Test app memory usage for PRs merged over time (shorter bars are better)</em></figcaption></figure><p>However the broadest performance improvement is the support for Metal in iOS.</p><h3>Metal support improves performance by 50% on iOS</h3><p>Apple’s support for Metal on iOS provides nearly direct access to the underlying GPU and is Apple’s recommended graphics API. On the iOS devices that fully support Metal, Flutter now uses it by default, making your Flutter apps run faster most of the time, increasing <a href=\"https://github.com/flutter/flutter/issues/53768\">rendering speeds by about 50% on average</a> (depending on your workload).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YPmVAVbn2SqtHpRF\" /><figcaption><em>Test iOS app frame rendering time for OpenGL vs. Metal (shorter bars are better)</em></figcaption></figure><p>For the devices that don’t support Metal fully (those prior to the A7 processor or those running iOS versions prior to 10), Flutter uses OpenGL as it has in the past, providing native rendering speeds for older devices. For more details, check out <a href=\"https://github.com/flutter/flutter/wiki/Metal-on-iOS-FAQ\">the Metal on iOS FAQ on the Flutter wiki</a>.</p><h3>Material widgets: NavigationRail, DatePicker and more</h3><p>We continue to evolve and improve the Material design system implemented in Flutter, based on feedback from internal and external customers. In this release, we’ve added <a href=\"https://master-api.flutter.dev/flutter/material/NavigationRail-class.html\">NavigationRail</a>, a new widget that offers a responsive app navigation model. It was <a href=\"https://material.io/components/navigation-rail\">designed</a> and implemented by the Google Material Design team. The NavigationRail is great for apps that can switch between mobile and desktop form factors because it’s very easy to swap in for a BottomNavigator as your app’s screen size increases.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/756/0*qB_uRnhlu9bb2C5i\" /><figcaption>The new NavigationRail widget</figcaption></figure><p>To see the NavigationRail in action, check out <a href=\"https://github.com/flutter/samples/tree/master/experimental/web_dashboard\">the web_dashboard sample</a> or try it <a href=\"https://dartpad.dev/b9c6cd345fd1cff643353c1f4902f888\">on DartPad</a>.</p><p>In addition to the new widget, this release includes updates to the Material <a href=\"https://api.flutter.dev/flutter/material/showDatePicker.html\">DatePicker</a> and text selection overflow widgets.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/396/1*Iy0WlfOaCAvgFwWwe4SKwQ.gif\" /><figcaption>Updated Material DatePicker widget</figcaption></figure><p>This DatePicker release includes new visuals to match the <a href=\"https://material.io/components/pickers/#mobile-pickers\">updated Material guidelines</a> as well as a new text input mode. You can read about the details in the <a href=\"https://flutter.dev/go/material-date-picker-redesign\">Material Date Picker Redesign</a> specification.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/202/0*RMNYoiBJv-U3OC5C\" /><figcaption>Updated text selection overflow on Android</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/202/0*vaELGcqyjmgMMF7W\" /><figcaption>Updated text selection overflow on iOS</figcaption></figure><p>The text selection menu now has improved fidelity for <a href=\"https://github.com/flutter/flutter/pull/49391\">Android</a> and <a href=\"https://github.com/flutter/flutter/pull/54140\">iOS</a> when the buttons are longer than can be displayed without overflow. This is particularly noticeable in locales where the menu item words can be longer.</p><p>In the same timeframe as Flutter 1.17 but delivered out-of-band, we have also shipped <a href=\"https://pub.dev/packages/animations\">the new Animations Package</a> that provides pre-built animations that implement <a href=\"https://material.io/design/motion/the-motion-system.html\">the new Material motion specification</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/1*4MIF2GwByNG1MJ7DNslb3Q.gif\" /><figcaption><em>Examples of Container transforms from the Animations package</em></figcaption></figure><p>In <a href=\"https://medium.com/google-design/implementing-motion-9f2839002016\">the Implementing Motion blog post</a>, the Material Design team defines four transition patterns that describe animations between components and fullscreen views: Container transform, Shared axis, Fade through, and Fade. While these animations have always been possible in Flutter, the Animations package makes it considerably easier to implement them. Drop them into your app and delight your users today!</p><h3>Material Text Scale: Modernizing Flutter Text Theming</h3><p>In this release, the Flutter team has completed their implementation of the <a href=\"https://material.io/design/typography/the-type-system.html#type-scale\">Type Scale portion of the 2018 Material Design specification</a> while not breaking existing Flutter apps. Opt-in support for the new configurations — but not the new names — was added in <a href=\"https://github.com/flutter/flutter/pull/22330\">PR 22330</a>, in October 2018. The existing text style names were not changed because doing so was a breaking API change that would likely affect most applications. This release updates the TextTheme API to match the current Material spec, but maintains the old names so that your code doesn’t break. The old names have been deprecated however, so you will get warnings to encourage you to adopt the new names.</p><p>The names and configurations of the 2018 Material TextStyles are summarized by the following table.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Jlt_w6Bs7KAae42rYkFlwg.png\" /></figure><p>Notice that the TextStyles called body1 and body2 in the Material Design specification are called bodyText1 and bodyText2 in the Flutter TextTheme API. Similarly, the TextStyles called H1-H6 in the specification are called headline1-headline6 in the TextTheme API.</p><h3>Google Fonts for Flutter</h3><p>Text and fonts go hand in hand, so if you’re excited about the new Material Text Scale implementation, then you’re probably also going to be excited about <a href=\"https://medium.com/flutter/introducing-google-fonts-for-flutter-v-1-0-0-c0e993617118\">the new Google Fonts for Flutter v1.0 release</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/0*_Vc08nu8x7JFksB0\" /><figcaption>Google Fonts are easy to use in your Flutter apps</figcaption></figure><p>Google Fonts allows developers to easily experiment with and use any of the fonts from fonts.google.com in their app. When the app is ready to publish, the developer then decides whether the user receives the font by downloading it from the API, or it’s pre-bundled with the app package.</p><h3>Accessibility and Internationalization</h3><p>Lastly, an important area of continued focus is accessibility, since we consider it a priority that Flutter apps are available to the broadest possible audience. In this release, we’ve done work across the board, including accessibility fixes for <a href=\"https://github.com/flutter/flutter/issues/43883\">scrolling</a>, <a href=\"https://github.com/flutter/flutter/issues/52487\">text</a> <a href=\"https://github.com/flutter/flutter/issues/53065\">fields</a>, and <a href=\"https://github.com/flutter/flutter/issues/49259\">other input widgets</a>. You’ll see a full list of the accessibility issues closed in this release on <a href=\"https://github.com/flutter/flutter/issues?q=is%3Aclosed+is%3Aissue+label%3A%22a%3A+accessibility%22+closed%3A2019-11-25..2020-04-02\">GitHub</a>. We encourage you to test your own apps for accessibility and have also updated our documentation in this release with <a href=\"https://flutter.dev/docs/development/accessibility-and-localization/accessibility\">some recommended best practices</a>.</p><p>On the internationalization front, we’ve been working on some issues affecting Samsung keyboard IMEs that affected text input in various East Asian languages. We’re pleased to report that we’ve completed this work, and <a href=\"https://github.com/flutter/flutter/issues/42273\">Korean developers in particular should find a lot to celebrate</a> in this release.</p><h3>Tooling: Dart DevTools port to Flutter, Fast Start for Android and more</h3><p>This release brings us very close to swapping out the current version of Dart DevTools with the new Flutter version. If you’d like to give it a try, start DevTools and click the “beaker” icon in the upper-right corner of DevTools.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/846/0*vjV5MYcLgBJmj_Ix\" /></figure><p>While you’re using the pre-release version of Dart DevTools implemented with Flutter, you’re likely to notice all kinds of improvements, but the biggest one is the new <strong>Network</strong> tab.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BitMBFadDAEiHFN5Al1mjQ.png\" /></figure><p>If you’re not seeing the Network tab in the prerelease version of Dart DevTools (for example, if you’re running it from the command line), you can update it manually using the following command:</p><pre>$ pub global activate devtools</pre><p>The Network tab shows you network traffic for your Flutter app once you press the Record button. Further, if you’d like to catch network traffic starting immediately from when you start your app, you can include this line of code in your main() method:</p><pre>void main() {<br>  <strong>// enable network traffic logging<br></strong>  <strong>HttpClient.enableTimelineLogging = true;<br>  </strong>runApp(MyApp());<br>}</pre><p>In addition to an updated Dart DevTools, this release also adds support for <a href=\"https://github.com/flutter/flutter/pull/46140\">an experimental “fast start” option</a>, which allows you to start your Flutter app debugging as much as 70% faster when targeting Android. You can access this option via flutter run —-fast-start -d &lt;your Android device&gt;. This option installs a generic Android app that only depends on your plugin code, excluding any Dart code or assets. This allows repeated flutter run commands to start up faster, since changes to Dart code or assets don’t require the APK to be rebuilt. This option bundles your app into a generic Android “wrapper” that doesn’t actually get installed on your device, which is different from our normal start options. Furthermore, there are some cases where it won’t work, e.g. when you’re using plugins that access background execution. On the other hand, if your Android debugging startup time is getting you down, give it a try.</p><p>Another change to note if you’re targeting Android is that now AndroidX is the only option when creating a new Flutter project. <a href=\"https://developer.android.com/jetpack/androidx\">AndroidX</a> libraries provide advanced Android functionality known as <a href=\"https://developer.android.com/jetpack/?gclid=Cj0KCQjwka_1BRCPARIsAMlUmEpxmZqWZyO2NTx1F_aYYRm0EUtwl6Rlr2ViKXwZpsQKo7ailItPdJkaAhnNEALw_wcB\">Android Jetpack</a>. In the last release, we deprecated the original Android Support Library and moved to AndroidX as the default for all new projects. With this release, the --androidx flag to flutter create is now the only option available. While existing applications that don’t use AndroidX can continue to be compiled with Flutter, <a href=\"https://flutter.dev/docs/development/androidx-migration\">now is a great time</a> to migrate over to the new library.</p><p>If you’re an Android Studio or IntelliJ user, you’ll find that the Hot Reload feature is more resilient. Prior to this change, if you had any analysis errors, Hot Reload wouldn’t reload your code. This can be pretty frustrating if the analysis error is something that didn’t affect the code that you’re currently running, like in unit tests. With <a href=\"https://groups.google.com/forum/m/#!topic/flutter-announce/tTgQcTgqrKg\">this change</a>, analysis errors aren’t enough to keep Hot Reload from working, depending instead on compiler errors from the VM.</p><p>If you’d like earlier access to changes like these in the Flutter plugin for Android Studio or IntelliJ, we now have a dev channel for the IntelliJ plugin that you may opt into for a faster cadence of updates. The goal with the Dev Channel is to gather feedback from Flutter developers on new IDE integration features before we make them more broadly available. If you’re adventurous and would like to provide early feedback to the Flutter tooling team, please <a href=\"https://groups.google.com/forum/m/#!topic/flutter-announce/tTgQcTgqrKg\">sign up today</a>!</p><p>For Visual Studio Code users, we recommend the new <strong>Dart: List Outdated Packages</strong> command that runs <a href=\"https://medium.com/dartlang/announcing-dart-2-8-7750918db0a\">the new ‘pub outdated’ command</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kfSA8iTjVjrsPIyG\" /></figure><p>This command is meant to help you track down versioning issues in your dependencies.</p><p>Last but not least, if you find yourself with a Flutter crash, you’ll be prompted to file the bug by the tools.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/649/1*OU1YDFMKeSUiaavoWohEUA.png\" /></figure><p>These bug reports are closely watched by the team for severity and frequency, so please do log them when prompted.</p><h3>Customer Shoutout: MGM and Superformula</h3><p>Of course, Flutter exists to enable beautiful application experiences. One example of a digital agency doing amazing things is <a href=\"https://superformula.com/flutter/\">Superformula</a>, who has recently worked with MGM Resorts to deliver <a href=\"https://www2.mgmresorts.com/app/\">a major update to their mobile application</a>, having completely rebuilt it in Flutter. They report that “adding Flutter to our core offerings has unlocked added speed and flexibility, which translates to real, measurable value for both our clients and their users.”</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*nT-kBS1YB0XqZE4C\" /></figure><p>Superformula worked with the MGM Resorts design team to create a new MGM design language for all major web, mobile, and kiosk experiences. With a smaller team and all-new Flutter codebase, they were able to get the app rebuilt and shipped to both app stores much faster than they were able to before, resulting in a 9% increase in booking conversions for MGM.</p><h3>Breaking Changes</h3><p>As always, we try to minimize the number of breaking changes with each new release of Flutter while still balancing our ability to ensure that Flutter provides an intuitive, flexible API that can support new idioms on new platforms. In <a href=\"https://medium.com/p/3659b02303a5#4bad\">a user survey last year</a>, you told us that you were tolerant of carefully-considered breaking changes that improve the framework. So we’re continuing to gently evolve the API. These are the breaking changes in this release.</p><ul><li><a href=\"https://github.com/flutter/flutter/pull/42100\">#42100</a> <a href=\"https://groups.google.com/g/flutter-announce/c/y0SvesRHlcE/m/39TuR5FVDQAJ\">Run secondary animation of previous route when using pushReplacement(…</a></li><li><a href=\"https://github.com/flutter/flutter/pull/45940\">#45940</a> Deprecate UpdateLiveRegionEvent</li><li><a href=\"https://github.com/flutter/flutter/pull/49389\">#49389</a> Defer image decoding when scrolling fast</li><li><a href=\"https://github.com/flutter/flutter/pull/49391\">#49391</a> Text Selection Overflow (Android)</li><li><a href=\"https://github.com/flutter/flutter/pull/49771\">#49771</a> <a href=\"https://groups.google.com/g/flutter-announce/c/gDfazJIBdDo/m/d5AC8gR3FQAJ\">Assert cache hints are not set for null painters</a></li><li><a href=\"https://github.com/flutter/flutter/pull/50318\">#50318</a> <a href=\"https://groups.google.com/g/flutter-announce/c/IdfjYvRBR4c/m/1_JxffXTGAAJ\">Live image cache</a></li><li><a href=\"https://github.com/flutter/flutter/pull/50354\">#50354</a> <a href=\"https://groups.google.com/g/flutter-announce/c/hVP699NQ7PQ/m/BgVgmsAdFwAJ\">Use strut box heights to calculate selection rectangles in order to ensure that they remain within visible bounds</a></li><li><a href=\"https://github.com/flutter/flutter/pull/50733\">#50733</a> Generate message lookup in gen_l10n</li><li><a href=\"https://github.com/flutter/flutter/pull/51435\">#51435</a> remove isinitialroute from RouteSettings</li><li><a href=\"https://github.com/flutter/flutter/pull/52781\">#52781</a> Move mouse_tracking.dart to rendering</li><li><a href=\"https://github.com/flutter/flutter/pull/44930\">#44930</a> <a href=\"https://groups.google.com/g/flutter-announce/c/DSAeObWGpoY\">Navigator 2.0: Refactor the imperative api to continue working in the new navigation system</a></li></ul><h3>Conclusion</h3><p>As our mobile support continues to mature while we bring the <a href=\"https://medium.com/flutter/flutter-web-support-updates-8b14bfe6a908\">web closer to production quality</a>, Flutter brings with it the promise of solving a problem that our industry has wrestled with for decades: how can you build great apps from a single source code base across multiple platforms? With all of the power and capability that Flutter provides, we think we’re on a good path to answer that question. What are you going to build?</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4182d8af7f8e\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-1-17-4182d8af7f8e\">Announcing Flutter 1.17</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-04-30T15:01:01.000Z":{"title":"Modern Flutter Plugin Development","link":"https://medium.com/flutter/modern-flutter-plugin-development-4c3ee015cf5a?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/4c3ee015cf5a","category":["flutter","flutter-plugin"],"dc:creator":"Chris Sells","pubDate":"Thu, 30 Apr 2020 15:01:01 GMT","atom:updated":"2020-04-30T15:01:00.892Z","content:encoded":"<p>by Amir Hardon, Chris Sells, Collin Jackson, Harry Terkelsen and Matt Carroll</p><p>2019 was a big year for advancements in technology for Flutter plugin authors. We introduced the Android Plugin API 2.0, which provides a more robust and full-featured way to implement Android support in your plugins. We updated the pubspec.yaml format to make it possible to clearly specify Android and iOS support but also web, macOS, Windows, and Linux. Furthermore, as we push Flutter to support multiple platforms, we enabled federation, making it possible for multiple teams with different expertise to bring their code together into a seamless experience for the Flutter developer using the plugin. And finally, we made great strides in testing plugins, with more to come.</p><h3>Android Plugin API 2.0</h3><p>In December of 2019, Flutter published a new version of its Android embedding. This is the Android code that is responsible for integrating Flutter within an Android app. It includes classes like FlutterActivity, FlutterFragment, FlutterView, and FlutterEngine. The v2 Android embedding includes support for standard Android lifecycle events and the separation of Flutter execution from the Android UI, which were missing in the v1 Android embedding. During the development of the v2 Android embedding it became clear that the existing API for Flutter plugins was insufficient to handle the new capabilities of the v2 Android embedding. A new Android plugin API was needed. We’ll discuss that API and how to use it.</p><p>First, it is important to understand the FlutterEngine class within the v2 Android embedding. A FlutterEngine object represents a single Flutter execution context. This means that a FlutterEngine controls a Dart isolate (your Dart code that begins with an entrypoint like main). It also means that a FlutterEngine sets up a number of standard platform channels that all Flutter apps require; it includes support for platform views, it knows how to paint a texture with a Flutter UI, and it handles all other fundamental requirements to execute a single Flutter/Dart app. Additionally, an Android app may contain multiple FlutterEngines at the same time.</p><p>The fundamental concept of “adding a plugin” to a Flutter app means applying that plugin to a single FlutterEngine. For example, if a Flutter app requires access to a camera, that capability is achieved by registering a camera plugin with a specific FlutterEngine instance. This registration is done for you automatically with a GeneratedPluginRegistrant, but it is important to understand that every FlutterEngine maintains its own set of Flutter plugins.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/912/1*V4h-nurkyQZvRIjJFifWUQ.png\" /></figure><p>In the old v1 Android embedding, all plugins were initialized and configured at the very beginning of the Android app and there was only ever one Flutter experience. In the v2 embedding, we make no assumption about when a plugin is initialized, and a plugin must be initialized once per FlutterEngine. As a result, all Flutter plugins for Android must now support instantiation instead of static initialization, and they must support being attached to, and detached from a FlutterEngine. The following code samples demonstrate the difference between the old v1 plugin initialization implementation and the new v2 plugin initialization process.</p><p><strong>Old plugin initialization</strong></p><pre>class MyOldPlugin {<br>  public static void registerWith(PluginRegistrar registrar) {<br>    // Obtain any references that the plugin requires from the <br>    // registrar.<br>    //<br>    // This plugin is now considered &quot;initialized&quot; and &quot;attached&quot; <br>    // to a Flutter experience.<br>  }<br>}</pre><p><strong>New plugin initialization</strong></p><pre><em>class</em> MyNewPlugin implements FlutterPlugin {<br>  public MyNewPlugin() {<br>    // All Android plugin classes must support a no-args <br>    // constructor. A no-arg constructor is provided by <br>    // default without declaring one, but we include it here for <br>    // clarity.<br>    //<br>    // At this point your plugin is instantiated, but it <br>    // isn&#39;t attached to any Flutter experience. You should not <br>    // attempt to do any work here that is related to obtaining <br>    // resources or manipulating Flutter.<br>  }</pre><pre>  @override<br>  public void onAttachedToFlutterEngine(FlutterPluginBinding binding) {<br>    // Your plugin is now attached to a Flutter experience <br>    // represented by the given FlutterEngine. <br>    //<br>    // You can obtain the associated FlutterEngine with<br>    // binding.getFlutterEngine()<br>    //<br>    // You can obtain a BinaryMessenger with <br>    // binding.getBinaryMessenger()<br>    // <br>    // You can obtain the Application context with<br>    // binding.getApplicationContext()<br>    //<br>    // You cannot access an Activity here because this <br>    // FlutterEngine is not necessarily displayed within an <br>    // Activity. See the ActivityAware interface for more info.<br>  }</pre><pre>  @override<br>  public void onDetachedFromFlutterEngine(FlutterPluginBinding binding) {<br>    // Your plugin is no longer attached to a Flutter experience. <br>    // You need to clean up any resources and references that you <br>    // established in onAttachedToFlutterEngine().<br>  }<br>}</pre><p>As shown in the new plugin API, your plugin must wait until onAttachedToFlutterEngine() completes before taking any meaningful actions, and it must respect onDetachedFromFlutterEngine() by releasing all resources. It’s possible that your plugin will be attached and detached multiple times.</p><p>Additionally, your plugin must not depend upon an Activity reference within onAttachedToFlutterEngine(). Just because your plugin is attached to a Flutter experience doesn’t mean that the Flutter experience is being displayed in an Activity. <strong>This is one of the most significant differences between the old and new plugin APIs.</strong> In the old v1 plugin API, plugin authors could depend upon an Activity being available immediately and permanently. This is no longer true.</p><p>Plugins that require access to an Activity must implement a 2nd interface called ActivityAware. The ActivityAware interface adds callbacks to your plugin class that tell your plugin when it’s sitting in an Activity, when that Activity goes through config changes, and when your plugin is no longer sitting in an Activity. Your plugin must respect these callbacks. The following example shows the outline of an ActivityAware plugin:</p><pre>class MyNewPlugin implements FlutterPlugin, ActivityAware {<br>  @override<br>  public void onAttachedToFlutterEngine(FlutterPluginBinding binding) {<br>    // ...<br>  }</pre><pre>  @override<br>  public void onDetachedFromFlutterEngine(FlutterPluginBinding binding) {<br>    // ...<br>  }</pre><pre>  @override<br>  public void onAttachedToActivity(ActivityPluginBinding binding) {<br>    // Your plugin is now associated with an Android Activity.<br>    // <br>    // If this method is invoked, it is always invoked after<br>    // onAttachedToFlutterEngine().<br>    //<br>    // You can obtain an Activity reference with<br>    // binding.getActivity()<br>    //<br>    // You can listen for Lifecycle changes with<br>    // binding.getLifecycle()<br>    //<br>    // You can listen for Activity results, new Intents, user<br>    // leave hints, and state saving callbacks by using the<br>    // appropriate methods on the binding.<br>  }<br>  <br>  @override<br>  public void onDetachedFromActivityForConfigChanges() {<br>    // The Activity your plugin was associated with has been<br>    // destroyed due to config changes. It will be right back<br>    // but your plugin must clean up any references to that<br>    // Activity and associated resources.<br>  }</pre><pre>  @override<br>  public void onReattachedToActivityForConfigChanges(<br>    ActivityPluginBinding binding<br>  ) {<br>    // Your plugin is now associated with a new Activity instance<br>    // after config changes took place. You may now re-establish<br>    // a reference to the Activity and associated resources.<br>  }</pre><pre>  @override<br>  public void onDetachedFromActivity() {<br>    // Your plugin is no longer associated with an Activity.<br>    // You must clean up all resources and references. Your<br>    // plugin may, or may not ever be associated with an Activity <br>    // again.<br>  }<br>}</pre><p>The new plugin API explicitly recognizes that a plugin may or may not have an Activity associated with it, and that any such Activity might be destroyed and recreated at any time due to configuration changes. These concerns should be familiar to all Android developers.</p><p>The key to writing a plugin for Flutter’s v2 Android embedding is to respect each plugin lifecycle callback that your plugin implements. As long as you wait until the right time to establish references, and you release those references at the appropriate time, your plugin will work as intended.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/868/1*I4K18qd0H98EZixwMmWGmg.png\" /></figure><p>Some plugins, like a camera plugin, only make sense when an Activity is available. So what are these plugins to do? In the case of UI-only plugins, those plugins can wait until onAttachedToActivity() executes before doing any work. Then, in onDetachedFromActivity(), those plugins can clean up all references and essentially deactivate themselves. There is no requirement that a plugin do anything special within onAttachedToFlutterEngine(). It’s OK for a plugin to only do work when attached to an Activity.</p><p>For more details about how to migrate your Android plugin from the v1 API to the v2 API, see <a href=\"https://flutter.dev/docs/development/packages-and-plugins/plugin-api-migration\">Supporting the new Android plugins APIs</a> on flutter.dev.</p><h3>New pubspec format</h3><p>Traditionally a Flutter plugin was a single package that enabled Flutter applications running on Android and iOS to access platform-specific functionality; technically a plugin was composed of Dart code backed by Android-specific and iOS-specific code. Even though the assumption that any Flutter plugin supports Android and iOS wasn’t accurate (for example, the android_intent plugin only supports Android), it was chosen to initially design the plugin ecosystem under that assumption. The assumption was mostly correct, which meant the overall cost for the few instances where it was wrong was low, and the simplified assumption enabled rapid progress and focus.</p><p>With Flutter growing to support many more platforms we have decided to lose this simplifying assumption as:</p><ol><li>We expect many plugins to only support a subset of Flutter’s supported platforms (even more so with federated plugins, described below).</li><li>We want to unlock tooling features that require knowledge of a plugin’s supported platforms (such as a smarter pub.dev search and platform-informed tool operations).</li></ol><p>The core missing piece was a clear indication for which platforms a plugin supports, and so we’ve redesigned the Flutter plugin’s pubspec schema around multi-platform support.</p><p>Under the previous pubspec schema the flutter.plugin key contained the different plugin configuration bits, instead we’ve introduced a new key per platform under the flutter.plugin.platforms key with the platform-specific plugin configuration. For example, here’s what the pubspec for a plugin that supports Android, iOS, macOS, and web looks like:</p><pre>flutter:<br>  plugin:<br>    platforms:<br>      android:<br>        package: com.example.hello<br>        pluginClass: HelloPlugin<br>      ios:<br>        pluginClass: HelloPlugin<br>      macos:<br>        pluginClass: HelloPlugin<br>      web:<br>        pluginClass: HelloPlugin<br>        fileName: hello_web.dart</pre><pre>environment:<br>  sdk: &quot;&gt;=2.1.0 &lt;3.0.0&quot;<br><strong>  # Flutter versions prior to 1.10 did not support<br>  # the flutter.plugin.platforms map.<br>  flutter: &quot;&gt;=1.10.0&quot;</strong></pre><p>A plugin that supports a subset of these platforms can omit platform keys from the platforms map, for example:</p><pre>flutter:<br>  plugin:<br>    platforms:<br>      android:<br>        package: com.example.hello<br>        pluginClass: HelloPlugin<br>      ios:<br>        pluginClass: HelloPlugin</pre><pre>environment:<br>  sdk: &quot;&gt;=2.1.0 &lt;3.0.0&quot;<br><strong>  # Flutter versions prior to 1.10 did not support<br>  # the flutter.plugin.platforms map.<br>  flutter: &quot;&gt;=1.10.0&quot;</strong></pre><p>Note that requiring a Flutter SDK greater than 1.10.0 is required when using the new schema as this is the first version where the Flutter tool supported this schema.</p><h3>Migrating an existing plugin to use the new schema</h3><p>This section uses the battery plugin as an example and walks through the migration of a sample plugin from the previous schema to the new one.</p><p>The most important thing to do when migrating is to only declare support for platforms that are supported by the plugin (this was not possible previously which meant that plugins which only supported Android had to include a no-op iOS implementation and vice versa).</p><p>These are the relevant parts of a sample plugin’s pubspec.yaml file prior to the migration:</p><pre>name: sample<br>version: 0.3.1+5</pre><pre>flutter:<br>  plugin:<br>    androidPackage: io.flutter.plugins.sample<br>    iosPrefix: FLT<br>    pluginClass: SamplePlugin</pre><pre>environment:<br>  flutter: &quot;&gt;=1.6.7 &lt;2.0.0&quot;</pre><p>Assuming that the plugin supports Android and iOS, upgrading to the new schema involves:</p><ul><li>Increasing the minimally required Flutter version to 1.10.0 (which is the first version that supports the new schema).</li><li>A minor version bump</li><li>Replacing the current fields in flutter.plugin with the new platforms field.</li><li>If the iosPrefix field was previously used, renaming the main iOS plugin file (more details below).</li></ul><p>The updated pubspec for this plugin looks like:</p><pre>name: sample<br>version: 0.3.2</pre><pre>flutter:<br>  plugin:<br>    platforms:<br>      android:<br>        package: io.flutter.plugins.sample<br>        pluginClass: SamplePlugin<br>      ios:<br>        pluginClass: FLTSamplePlugin</pre><pre>environment:<br>  flutter: &quot;&gt;=1.10.0 &lt;2.0.0&quot;</pre><p>Note that since the plugin supports Android and iOS these are the only keys under the flutter.plugin.platforms. The value of flutter.plugin.androidPackage field in the old schema becomes the value of flutter.plugin.platforms.android.package. The new schema has no equivalent for the iosPrefix field, as the pluginClass for iOS has a dedicated key we can use the prefix in the flutter.plugin.platforms.ios.pluginClass field which is set to FLTSamplePlugin.</p><h3>Plugins that were previously using the iosPrefix field</h3><p>The previous schema implied an inconsistency between the iOS plugin’s main interface name and its file name, e.g. for this sample plugin as defined with the previous schema, there would be a SamplePlugin.h file that declares an FLTSamplePlugin interface. This kind of inconsistency is no longer supported, which means the SamplePlugin.h file must be renamed to FLTSamplePlugin.h when upgrading to the new schema. Plugins that did not use the iosPrefix key don’t require renaming any files.</p><p>For more information about development plugins that support any number of platforms, see <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin\">Developing plugin packages</a> on flutter.dev.</p><h3>Federation</h3><p>Not only does the new pubspec schema allow you to specify exactly which platforms your plugin supports, it also gives you the flexibility to spread implementations across multiple packages. In the past, the plugin’s Dart code, the Android Java (or Kotlin) code, and the iOS Objective-C (or Swift) code all needed to be in the same Dart package. Now, if we want to add support for another platform (Web, Mac OS, Windows, etc.), it doesn’t need to be in the same package. Plugins that are distributed across multiple packages are called <em>federated plugins</em>.</p><p>Federated plugins have several advantages over single-package plugins, including:</p><ul><li>A plugin author does not need to have domain expertise for every supported Flutter platform (Android, iOS, Web, Mac OS, etc.).</li><li>You can add support for a new platform without the original plugin author needing to review and pull in your code.</li><li>Each package can be maintained and tested separately.</li></ul><p>So, how exactly do you create a <em>federated plugin</em>? Let’s start with some terminology:</p><ul><li><strong>app-facing package: </strong>This is the package you would import in your app in order to use the plugin. For example, package:url_launcher is an app-facing package. The app-facing package declares the app-facing API and works with various <em>platform packages</em> to perform platform-specific functionality.</li><li><strong>platform package</strong>: This is a package that implements the platform-specific functionality needed by the <em>app-facing package</em>. An example is package:url_launcher_web: this package is used by package:url_launcher to launch URLs when running the Flutter app on the web platform. Platform packages should not be imported in the app, they are only for use by the <em>app-facing package</em> to call into the required platform-specific code.</li><li><strong>platform interface package</strong>: This is the glue that holds the <em>app-facing package</em> and the <em>platform packages</em> together. Whereas the <em>app-facing package</em> declares an API that can be called from a Flutter app, the <em>platform interface package</em> declares an interface that each <em>platform package</em> must implement in order to support the <em>app-facing package</em>. Having a single package that defines this interface ensures that all <em>platform packages</em> implement the same functionality in a uniform way.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yM2BlF_ckdUzoDnSdAjPoA.png\" /></figure><p>The figure above shows the dependency graph between the app, the app-facing package, the platform packages, and the platform interface package. The app only ever imports the app-facing package (in this case package:url_launcher).</p><p>How does the <em>platform interface</em> glue together the app-facing package and the correct platform package? In the past, there were no “platform packages”, only a subfolder for the Android code and another subfolder for the iOS code. The app-facing package communicated to the platform code via a MethodChannel. You can think of the MethodChannel as the de-facto “platform interface” because the app-facing package calls into the MethodChannel, and the corresponding platform code must be listening on a MethodChannel for the correct methods with the correct arguments. There is no way to statically confirm that the Android code or iOS code is listening for the correct MethodChannel calls.</p><h3>Old way of launching a URL</h3><pre>Future&lt;void&gt; launch(String url) {<br>  channel.invokeMethod(&#39;launch&#39;, {<br>    &#39;url&#39;: url,<br>  });<br>}</pre><p>In the federated plugin structure, the <em>platform interface package</em> replaces the MethodChannel. The platform-specific functionality that the app-facing package needs from the platform packages is encapsulated in a platform interface. In our example, the app-facing package is package:url_launcher, and the only platform-specific functionality it needs is the ability to launch a URL on the given platform. A (very) simple platform interface would look like:</p><pre>abstract class UrlLauncherPlatform {<br>  /// Launches the given [url].<br>  Future&lt;void&gt; launch(String url);</pre><pre>  /// The live &quot;instance&quot; of this platform interface.<br>  ///<br>  /// This is set when the platform package is registered,<br>  /// usually when the platform is initializing.<br>  ///<br>  /// For example, the web platform package <br>  /// (package:url_launcher_web) would extend this class with an<br>  /// implementation that launched the URL in a new tab,<br>  /// and at initialization time would set itself to be the live<br>  /// instance with:<br>  ///<br>  ///     UrlLauncherPlatform.instance = WebUrlLauncher();<br>  static UrlLauncherPlatform instance;<br>}</pre><p>Now, instead of calling on the MethodChannel, the app-facing package would call into the platform interface.</p><h3>New way of launching a URL</h3><pre>Future&lt;void&gt; launch(String url) {<br>  return UrlLauncherPlatform.instance.launch(url);<br>}</pre><p>So, the <em>app-facing package</em> calls into the <em>platform interface</em>. How does the platform interface glue into the <em>platform packages</em>? The platform packages implement the platform interface, and register themselves as the default instance of the platform interface when the platform is initializing.</p><p>For example, if we wanted to write package:url_launcher_web, we would only need to write a class that extends UrlLauncherPlatform and launches a URL for the web platform. The code would look something like this:</p><pre>class UrlLauncherWeb extends UrlLauncherPlatform {<br>  /// The web platform automatically calls this when the app<br>  /// initializes.<br>  static void registerWith(Registrar registrar) {<br>    var webLauncher = UrlLauncherWeb();<br>    UrlLauncherPlatform.instance = webLauncher;<br>  }</pre><pre>  @override<br>  Future&lt;void&gt; launch(String url) =&gt; window.open(url, &#39;&#39;);<br>}</pre><p>The nice thing about migrating to a federated plugin structure, is that once you are set up with the app-facing package and platform interface package, adding support for a new platform is simple (and you don’t even have to do it yourself!) All that is required is to create a new platform package which extends the platform interface declared in the platform interface package.</p><p>For more details about federated plugins, see <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#federated-plugins\">Federate plugins</a> on flutter.dev.</p><h3>Testing plugins</h3><p>As you write new cross-platform plugins or add platforms to existing ones, you can save yourself time and future headaches by writing tests. Automated tests protect your plugin from functional regressions so that you can rapidly develop new features and merge contributions.</p><p>A well-tested plugin typically includes several styles of test spread across multiple packages. It’s possible to slow yourself down writing tests that are flaky or unlikely to never fail, so focus on the test writing that gives you confidence that the key use cases are still functional.</p><h3>AutomatedWidgetsFlutterBinding tests</h3><p>Tests that use AutomatedWidgetsFlutterBinding run on the development machine, rather than a device or browser. Because of this, they run faster and some functionality needs to be provided by mocks.</p><p><strong>In the app-facing package</strong> (such as myplugin), the package’s unit tests ensure that calls to the app-facing API result in expected interactions with the platform interface package. These tests typically import package:mockito to provide a fake platform interface and verify that it receives the correct calls. Here is an <a href=\"https://github.com/flutter/plugins/blob/master/packages/url_launcher/url_launcher/test/url_launcher_test.dart#L25\">example test</a> from package:url_launcher:</p><pre>test(&#39;returns true&#39;, () async {<br>  when(mock.canLaunch(&#39;foo&#39;)).thenAnswer((_) =&gt;<br>    Future&lt;bool&gt;.value(true));<br>  final bool result = await canLaunch(&#39;foo&#39;);<br>  expect(result, isTrue);<br>});</pre><p><strong>In the platform interface package </strong>(such as myplugin_platform_interface), a platform interface is an abstract class and cannot be instantiated directly. However, the platform interface package typically contains the method channel implementation of the platform interface as well, so that’s what you should test. Tests for this package should focus on the method channel invocations that result from calls to the platform interface and the method channel. These tests typically use <a href=\"https://api.flutter.dev/flutter/services/MethodChannel/setMockMethodCallHandler.html\">setMockMethodCallHandler</a> with the <a href=\"https://api.flutter.dev/flutter/flutter_test/isMethodCall.html\">isMethodCall</a> matcher to verify behavior.</p><pre>test(&#39;canLaunch&#39;, () async {<br>  await launcher.canLaunch(&#39;<a href=\"http://example.com/&#39;\">http://example.com/&#39;</a>);<br>  expect(<br>    log,<br>    &lt;Matcher&gt;[<br>      isMethodCall(&#39;canLaunch&#39;, arguments: &lt;String, Object&gt;{<br>        &#39;url&#39;: &#39;<a href=\"http://example.com/&#39;\">http://example.com/&#39;</a>,<br>      })<br>    ],<br>  );<br>});</pre><p><strong>In the platform tests </strong>(such myplugin_web), you can take advantage of platform-specific functionality. In the current Flutter SDK, flutter test provides an experimental —-platform flag that allows you to choose to run tests in a Chrome-like environment where dart:html is available.</p><p>This test mode is useful for writing tests in the platform implementation package (for example, myplugin_web).</p><pre>test(&#39;cannot launch &quot;tel&quot; URLs&#39;, () {<br>  expect(canLaunch(&#39;tel:5551234567&#39;), completion(isFalse));<br>});</pre><p>In addition, you can run your GUI tests in Chrome using <a href=\"https://github.com/flutter/flutter/wiki/Running-Flutter-Driver-tests-with-Web\">experimental support for ‘flutter drive’ testing on the web</a>.</p><p>For more information about plugin testing, see <a href=\"https://flutter.dev/docs/development/packages-and-plugins/plugin-api-migration#testing-your-plugin\">Testing your plugin</a> on flutter.dev.</p><h3>Summary</h3><p>As you can see, there’s a lot of new features for the Flutter plugin developer, allowing you to build more full-featured and more robust plugins across more platforms. If you’re interested in some web-specific details, I recommend Harry Terkelsen’s two-part series on How to Write a Flutter Web Plugin (<a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1\">part 1</a> and <a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-part-2-afdddb69ece6\">part 2</a>). For more information on writing plugins in general, the <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin\">Developing plugin packages</a> documentation on flutter.dev is also a great resource.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4c3ee015cf5a\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/modern-flutter-plugin-development-4c3ee015cf5a\">Modern Flutter Plugin Development</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-04-29T15:01:01.000Z":{"title":"Flutter web support updates","link":"https://medium.com/flutter/flutter-web-support-updates-8b14bfe6a908?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/8b14bfe6a908","category":["flutter","web-development","cross-platform"],"dc:creator":"Mariam Hasnany","pubDate":"Wed, 29 Apr 2020 15:01:01 GMT","atom:updated":"2020-04-29T15:01:01.035Z","content:encoded":"<h4>PWAs, better debugging, and CanvasKit-based rendering</h4><p><em>A quick note: we originally planned to release a new stable release of Flutter today, but we discovered a </em><a href=\"https://github.com/flutter/flutter/issues/54707\"><em>crashing bug</em></a><em> in final testing that we wanted to fix before releasing. We have a fix checked into the codebase, but we want to allow a little more bake time to be certain we didn’t introduce a new regression. We now plan to release the stable release next week. Thanks to several folks who reported the issue and worked with us to reproduce it.</em></p><p>Almost a year ago, we shared our first technical preview of Flutter’s support for targeting the web. Our vision for Flutter is to provide a portable toolkit for building beautiful experiences wherever you might want to paint pixels on the screen. Given the pervasiveness of the web, it’s a natural place to experiment with Flutter, but its characteristics are different from a mobile platform like Android and iOS.</p><p>Having Flutter code run in a web browser opens up an array of intriguing possibilities, including:</p><ul><li>Providing an easy path for developers to take their existing mobile apps to the web, whether as a fully-fledged app, PWA, or as a low-friction preview of the installed experience.</li><li>Enabling desktop app developers to build once and make a late-bound decision about whether to ship as a high-performance installed desktop app and/or a friction-free ephemeral web app.</li><li>Tools like <a href=\"https://dartpad.dev/b3ccb26497ac84895540185935ed5825\">DartPad</a> and <a href=\"https://codepen.io/topic/flutter/templates\">CodePen</a> that let you quickly experiment with Dart code, seeing the results in real time without needing to install anything locally on your machine.</li><li>Sharing code between mobile and web applications with minimal compromise.</li></ul><p>Flutter was built to be unapologetically app-centric in its framework and API choices. We believe it is a distinct offering that contributes to the broad tapestry of web development. If we are successful at our goals, Flutter’s web support will provide a framework that takes full advantage of all that the web platform offers, allowing developers to build beautiful rich interactive applications that feel completely at home in a browser.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*w9xtjSXgRDPcCtNJLYhzpQ.png\" /><figcaption><a href=\"https://ampstor.app/\">Ampstor</a>: a no-code tool for building better storytelling web pages, built with Flutter’s web support.</figcaption></figure><p><a href=\"https://ampstor.app/\">Ampstor</a> is a powerful example. The team set out to build an editing tool for building <a href=\"https://amp.dev/about/stories/\">AMP Stories</a>, a new format that helps content providers create visual narratives for mobile devices. Here’s what they had to say about using Flutter on the web:</p><blockquote>“As a startup that helps customers build highly-branded experiences, it’s critical that we can get to market quickly and iterate based on customer feedback. We chose Flutter because it gave us the freedom to focus on the product, not the platform itself. We’re delighted with our experiences so far and our customers love the app we’ve built.”</blockquote><p>Our early goal with web support was to prove the basic hypothesis that the Flutter framework could be ported to the web. Last summer, we unforked the web code back into the main framework, leading to a single codebase that supports mobile and web (as well as desktop!). Our focus has since shifted to delivering fast, jank-free performance using the latest web platform advances, improving behavioral consistency across Flutter target platforms, and rooting out and fixing scenarios that don’t yet feel natural on the web.</p><p>With that in mind, here is an update on what the team has been working on since web support landed in the beta channel last December.</p><h3>What’s new?</h3><h4>PWA Support</h4><p>Fans of <a href=\"https://web.dev/what-are-pwas/\">Progressive Web Apps</a> will be delighted to know that the default Flutter template for web apps now includes support for the core features needed for an installable, offline-capable PWA app:</p><figure><img alt=\"The Flutter “counter” template app, running as a PWA on macOS.\" src=\"https://cdn-images-1.medium.com/max/1024/0*qu7hcAYfSXorb3jx\" /><figcaption>The Flutter “counter” template app, running as a PWA on macOS.</figcaption></figure><p>Notice that this looks like a normal desktop app, but it’s really a Flutter web app that’s been installed into the browser as a PWA. You can see the difference with the added icon buttons in the title bar, which exposes Chrome functionality. Flutter-based PWAs can be <a href=\"https://web.dev/install-criteria/\">installed in the same way as any other web-based PWA</a>; the settings signaling that your Flutter app is a PWA are provided by manifest.json, which is produced by flutter create in the web/ subfolder.</p><p>PWAs are supported on major mobile and desktop browsers and are just one of the ways we are investing in <a href=\"https://www.youtube.com/watch?v=JKVZMqpiY7w\">bridging the gap</a> between the capabilities of the native platform and the web.</p><p>This remains a work in progress, so please give us feedback if you see something that doesn’t look right.</p><h4>Plugins</h4><p>When we launched beta, only a few plugins supported the web. Since then, we’re seeing <a href=\"https://pub.dev/flutter/packages?platform=web\">more plugins</a> add support for the web platform, thanks to some great contributions from the community, such as:</p><ul><li><a href=\"https://pub.dev/packages/audioplayers\">audioplayers</a>: play multiple audio files simultaneously</li><li><a href=\"https://pub.dev/packages/experimental_connectivity_web\">connectivity</a>: allows apps to discover network connectivity and configure accordingly</li><li><a href=\"https://pub.dev/packages/cloud_firestore\">cloud_firestore</a>: NoSQL cloud database, accessed through the Cloud Firestore API</li><li><a href=\"https://pub.dev/packages/cloud_functions\">cloud_functions</a>: access serverless cloud functions, hosted by Firebase</li></ul><p>While we plan on extending a few more popular Google-authored plugins for the web ourselves, we largely depend on the community to help bring web support to existing packages. To help you get started, we have published a couple of articles explaining <a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-5e26c689ea1\">how to write a web plugin</a>.</p><h4><strong>Web Debugging with Expression Evaluation</strong></h4><p>Debugging is a crucial step in the development process, and is one of the areas of active development for creating a richer Flutter web experience. If you use VS Code to develop Flutter applications, you’re probably expecting the full set of debug capabilities to be available to you, including evaluating expressions in the debug window, using the watch functionality, or hovering over variables to see their value.</p><p>Until recently, this was only available for debugging mobile Flutter apps. In the last couple of months, we have been working on connecting expression evaluation to Flutter on the web and now have experimental support ready to try out in VSCode. Support for other IDEs, such as <a href=\"https://github.com/flutter/flutter-intellij/issues/4519\">IntelliJ</a>, is still in progress.</p><p>This feature is available on the Flutter dev or master channel. Use the following instructions to set it up for VS Code:</p><p>Configure your project to <a href=\"https://flutter.dev/docs/get-started/web\">run on the web</a>. Within VS Code, enable expression evaluation for web in launch.json:</p><figure><img alt=\"launch.json file\" src=\"https://cdn-images-1.medium.com/max/1024/0*K0gsPz3gj7SVvjr1\" /></figure><p>Set a breakpoint and start debugging. Try expression evaluation in the debug console using the expression evaluation box as shown below. Additionally, you can use the watch window or hover over variables to evaluate your code using expressions.</p><figure><img alt=\"debug console\" src=\"https://cdn-images-1.medium.com/max/1024/0*Zg-bAhzitlDDVU9e\" /></figure><p>You can also try setting conditional breakpoints using expressions:</p><figure><img alt=\"breakpoint evaluation\" src=\"https://cdn-images-1.medium.com/max/1024/0*hWsTPLh33YwdFhYG\" /></figure><h4>Testing</h4><p>The latest builds of Flutter now support running automated Flutter driver UI tests against your Flutter web apps in just the same way that they work for mobile apps. To enable support for this experimental feature, you can <a href=\"https://github.com/flutter/flutter/wiki/Running-Flutter-Driver-tests-with-Web\">read the directions on the Flutter wiki</a>.</p><h3>Current priorities: testing, quality and performance</h3><p>Over the past few months, our focus has been spent on improving the infrastructure, quality and rendering for Flutter’s web support. While we still have a lot to do, we have made significant progress in all three areas.</p><h4><strong>Test infrastructure and benchmarks</strong></h4><p>Building test infrastructure is one of those improvements that isn’t always visible to those developing with Flutter but is nonetheless important to building a stable version of Flutter on the web.</p><p>This past quarter we have added automated testing to ensure correctness of the web engine and framework. We added screenshot tests on Chrome to make sure we are rendering consistently and correctly as we make changes to the code. We now run unit and integration testing on Chrome, Firefox and Safari. Running these tests on mobile browsers and Internet Explorer/Edge will be coming online soon. Additionally, we have added performance benchmark tests, enabling us to iterate quickly without introducing regressions.</p><h4>Quality</h4><p>Speaking of issues, we’ve been busy burning down issues to incrementally improve our quality through optimizations and correctness fixes.</p><p>Recently we landed an optimization in Flutter for web that improves scrolling for static content, meaning content that is not lazily loaded but is rendered all in the same frame. This should bring scrolling performance more in line with traditional web experiences.</p><p>We’ve also fixed several text rendering issues such as text disappearing behind the canvas or cursor problems with multiline text. These text correctness fixes are currently enabled behind the FLUTTER_WEB_USE_EXPERIMENTAL_CANVAS_TEXT flag; our plan is to make this the platform default soon.</p><p>At <a href=\"http://g.co/FlutterInteract\">Flutter Interact</a> last year, we announced that our new Gallery sample app runs on the web using Flutter. Since then we’ve made significant performance optimizations in web support as well as the app, so that it runs even faster and smoother. As a result of these changes, initial load time is now three times faster, and the code size has been reduced by 2.7x.</p><figure><img alt=\"Flutter Gallery app\" src=\"https://cdn-images-1.medium.com/max/1024/1*9FIv19QYzuwBQ-4Hx3EkGA.png\" /><figcaption>The Flutter Gallery app, running as a PWA on Windows.</figcaption></figure><p>Stay tuned for an upcoming blog series that will share more about what we’ve learned, as well as best practices for optimizing your Flutter app for performance. Until then, check out the updated <a href=\"https://gallery.flutter.dev\">Flutter Gallery app</a> for yourself.</p><h4>Rendering improvements with CanvasKit</h4><p>When we started our exploration into the web, we considered a variety of approaches for rendering UI, knowing that our choice would dictate how well we could build, layout, and paint Flutter widgets on the web.</p><p>We originally opted for an HTML DOM-based model that combines HTML, CSS, and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">Canvas API</a> to express output produced by the Flutter framework. We call this implementation our DomCanvas rendering system.</p><p>Over the last year, we have gained a better understanding of the performance and correctness characteristics of the various rendering technologies available on the web, and have been experimenting with a second approach that uses <a href=\"https://skia.org/user/modules/canvaskit\">CanvasKit</a>. CanvasKit brings <a href=\"https://skia.org/\">Skia</a> to the web using <a href=\"https://webassembly.org/\">WebAssembly</a> and <a href=\"https://get.webgl.org/\">WebGL</a>, enabling a hardware-accelerated drawing surface that improves our ability to render complex and intensive graphics efficiently.</p><p>We believe that both DomCanvas and CanvasKit offer advantages in different scenarios, and so we’re supporting both rendering models.</p><ul><li>DomCanvas offers the greatest compatibility with a wide variety of browsers, with a compact code size. However, repaint performance is poorer, which makes it less suitable for more graphically-intensive applications.</li><li>The CanvasKit backend offers superior performance, fidelity, and correctness, but it has poor initial startup time due to a larger code size.</li></ul><p>By default, Flutter’s web support uses DomCanvas, but you can enable the CanvasKit rendering engine with this command:</p><pre>flutter run -d chrome --release <br>            --dart-define=FLUTTER_WEB_USE_SKIA=true</pre><p>One word of caution: the CanvasKit engine still has a few rough edges; for early adopters who are putting Flutter into production, the DomCanvas engine offers the greatest stability.</p><h3>Known issues on our radar</h3><p>While we believe we’re making good progress at building a solid foundation, there are a few other areas we are planning to work on to fill out our web support.</p><ul><li><strong>Desktop-class UX. </strong>Supporting Flutter on desktop web browsers requires more than web support: there are typically significant UI differences between mobile and desktop experiences. We’re therefore adding features to support desktop-class experiences, such as <a href=\"https://material.io/components/navigation-rail/\">responsive widgets</a> and scrolling physics, that still need to be implemented.</li><li><strong>Autofill</strong> is a feature supported in most platforms, and in terms of the web, it means enabling the browser to store data and fill it in where appropriate. We <a href=\"https://github.com/flutter/flutter/pull/52126\">recently added initial autofill support</a> to the core framework, and now we are working on <a href=\"https://github.com/flutter/engine/pull/17986\">adding this feature to Flutter on the web</a>. This effort includes addressing browser differences, <a href=\"https://github.com/flutter/flutter/issues/55613\">saving fill information for future autofills,</a> and passing auto-fillable elements as a group to the engine.</li><li><strong>URL Routing. </strong>It’s a small issue, perhaps, but today Flutter web apps include a <a href=\"https://github.com/flutter/flutter/issues/33245\">hash marker for routing</a> even on the home page. We’re working to eradicate this and provide more control over URL routing, with <a href=\"https://github.com/flutter/engine/pull/17829\">contributions from the community</a> under review at present.</li><li><strong>Code size</strong> remains an area of active investigation. Today every Flutter web app downloads the engine code that it needs; we’re looking into possibilities to cache some of this logic to reduce startup time and download size.</li></ul><h3>Call to action</h3><p>We hope there are some fun surprises in this article: we’ve made a lot of progress since the December update. However, you should be aware that Flutter’s web support is still in beta, and you should be cautious about deploying it into production environments, since performance and browser compatibility work is still in progress.</p><p>If you are new to developing with Flutter on the web, check out <a href=\"https://flutter.dev/web\">flutter.dev/web</a> to learn more and try out your code on <a href=\"https://dartpad.dev/\">dartpad.dev</a> or <a href=\"https://codepen.io/flutter\">codepen.io/flutter</a>.</p><p>For those that are currently developing Flutter web apps, thank you for your support and contributions, we hope you continue experimenting, <a href=\"https://github.com/flutter/flutter/issues/new?title=[web]:+%3Cdescribe+issue+here%3E&amp;labels=%E2%98%B8+platform-web&amp;body=Describe+your+issue+and+include+the+command+you%27re+running,+flutter_web%20version,+browser+version\">filing issues</a> and <a href=\"https://medium.com/flutter/how-to-write-a-flutter-web-plugin-part-2-afdddb69ece6\">updating plugins</a> to support the web!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8b14bfe6a908\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/flutter-web-support-updates-8b14bfe6a908\">Flutter web support updates</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-04-23T14:01:01.000Z":{"title":"Introducing Google Fonts for Flutter v 1.0.0!","link":"https://medium.com/flutter/introducing-google-fonts-for-flutter-v-1-0-0-c0e993617118?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/c0e993617118","category":["typography","material-design","flutter","google-fonts","pub"],"dc:creator":"Anthony Robledo","pubDate":"Thu, 23 Apr 2020 14:01:01 GMT","atom:updated":"2020-04-23T14:01:01.302Z","content:encoded":"<p>By <a href=\"https://medium.com/u/40a15fe2c58f\">Anthony Robledo</a> and <a href=\"https://medium.com/u/4152a8734e54\">MH Johnson</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vbYvhj1bpvDjRNlKYq-cRg.png\" /></figure><p>Google Fonts for Flutter was first announced at Flutter Interact in December 2019. With help from the community (thank you!), we have added many new features and improved stability. After a successful time in beta, it is now ready for prime time use on Android, iOS, Web, and MacOS, as <a href=\"https://pub.dev/packages/google_fonts\">Google Fonts 1.0.0</a>.</p><p>Features added since beta:</p><ul><li>Get a list of all supported fonts with GoogleFonts.asMap()</li><li>Use a font with a dynamic name: GoogleFonts.getFont(‘Lato’)</li><li>Ensure secure downloads with checksum verification</li><li>Experience improved performance, especially on web</li><li>Pre-bundle fonts using pubspec assets</li><li>Optionally disable fetching fonts at runtime (useful when debugging or pre-bundling)</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/0*6ZIbMT1ySdIZoHK4\" /></figure><p>Google Fonts allows developers to easily experiment with and use any of the fonts from fonts.google.com in their app. When the app is ready to publish, the developer then decides whether the user receives the font by downloading it from the API, or it’s pre-bundled with the app package.</p><p>We have minimized the work needed to pre-bundle a font, and also kept it compatible with dynamic font loading so you don’t have to change your code if you decide to pre-bundle.</p><p>Check out the <a href=\"https://pub.dev/packages/google_fonts\">Getting Started Guide</a> to learn how to include fonts in your app via TextStyles or TextThemes. And once you are ready to publish, learn how to optionally pre-bundle fonts and add the font licenses to your app’s LicenseRegistry.</p><p>We hope you find this package useful for all of your Google Fonts needs. As always, please never hesitate to leave feedback, <a href=\"https://github.com/material-foundation/google-fonts-flutter/issues\">file an issue</a>, or open a pull request!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c0e993617118\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/introducing-google-fonts-for-flutter-v-1-0-0-c0e993617118\">Introducing Google Fonts for Flutter v 1.0.0!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-04-22T15:02:24.000Z":{"title":"Flutter Spring 2020 Update","link":"https://medium.com/flutter/flutter-spring-2020-update-f723d898d7af?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f723d898d7af","category":["user-interface","android-app-development","ios-development","flutter","mobile-apps"],"dc:creator":"Tim Sneath","pubDate":"Wed, 22 Apr 2020 15:02:24 GMT","atom:updated":"2020-04-22T15:02:24.015Z","content:encoded":"<h4>Continued momentum and enterprise growth, new release model</h4><p><em>Authored by Tim Sneath and Patrick Sosinski</em></p><p>For the engineers, product managers, UX researchers, technical writers, and developer relations engineers here at Google that work on Flutter, the last couple of months have been filled with various challenges; like most of you, we are all grappling with very different daily routines than normal. And yet, as an open source project, we are able to continue to develop using publicly available tools. Within the limitations of sometimes challenging and certainly novel working environments, along with the need to care for dependents, we’re continuing to make progress against our spring backlog and have also learned plenty about contributing “from the outside”! We hope that you’re also able to make progress and stay healthy and safe.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*T39T7UB0oJVIQy_H\" /></figure><h3>Flutter momentum</h3><p>We continue to see fast growth in Flutter usage, with over <strong>two million developers having used Flutter</strong> in the sixteen months since we released. Despite these unprecedented circumstances, in March we saw 10% month-over-month growth, with nearly half a million developers now using Flutter each month.</p><p>Some other interesting statistics:</p><ul><li>60% of you are developing with Windows, 27% are using macOS, and 13% are using Linux.</li><li>35% of you work for a startup, 26% are enterprise developers, 19% are self-employed, and 7% work for design agencies.</li><li>78% of Flutter developers use the stable channel, 11% use beta, and 11% use either dev or master.</li><li>The top five territories for Flutter are India, China, the United States, the EU, and Brazil.</li><li>There are approximately 50,000 Flutter apps published in the Play Store, with nearly 10,000 uploaded in the last month alone.</li><li>The most popular framework packages used in Flutter apps are <a href=\"https://pub.dev/packages/http\">http</a>, <a href=\"https://pub.dev/packages/shared_preferences\">shared_preferences</a>, <a href=\"https://pub.dev/packages/intl\">intl</a>, <a href=\"https://pub.dev/packages/meta\">meta</a>, <a href=\"https://pub.dev/packages/path_provider\">path_provider</a> and <a href=\"https://pub.dev/packages/pedantic\">pedantic</a>.</li><li>The most popular third-party packages used in Flutter apps are <a href=\"https://pub.dev/packages/provider\">provider</a>, <a href=\"https://pub.dev/packages/rxdart\">rxdart</a>, <a href=\"https://pub.dev/packages/cached_network_image\">cached_network_image</a>, <a href=\"https://pub.dev/packages/sqflite\">sqflite</a>, <a href=\"https://pub.dev/packages/font_awesome_flutter\">font_awesome_flutter</a> and <a href=\"https://pub.dev/packages/flutter_launcher_icons\">flutter_launcher_icons</a>.</li></ul><h3>Flutter in the enterprise</h3><p>Flutter usage is growing fast among enterprise customers in particular, and our research continues to show that the ability to build highly-branded experiences that support multiple platforms is a key reason why larger companies select Flutter. One recent example is <a href=\"https://nubank.com.br/en/\">Nubank</a>, the largest digital bank outside Asia with over 20 million customers. After conducting <a href=\"https://cdn.nubank.com.br/mobile/taskforce/nubank-mobile-architecture-task-force-mission-report.pdf\">a detailed investigation and analysis</a> of their choices for app development, Nubank selected Flutter and have since been able to unify their front-end development team on a single framework, enabling them to ship new features simultaneously on both iOS and Android.</p><p>Check out their developer story below, which explains some of the benefits they’re seeing with Flutter:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fvnj2i6RNo3g%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dvnj2i6RNo3g&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fvnj2i6RNo3g%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/bd2d3b52e178000a4425a1be9d30545c/href\">https://medium.com/media/bd2d3b52e178000a4425a1be9d30545c/href</a></iframe><p>One common request from enterprises is professional components. We’re partnering with <a href=\"https://www.syncfusion.com/\">SyncFusion</a>, whose Essential Studio product now includes a range of <a href=\"https://www.syncfusion.com/flutter-widgets\">high-quality Flutter components</a> including charting, PDF manipulation and barcode generation. With their <a href=\"https://www.businesswire.com/news/home/20200421005174/en/Syncfusion-Introduces-New-Flutter-Widgets-Web-Compatibility\">2020.1 release</a>, all components support Android, iOS <em>and</em> web out of the box, and they now have a <a href=\"https://flutter.syncfusion.com/#/\">web-based preview</a> of their controls.</p><h3>Updating our release process</h3><p>Lastly, as we look towards our next stable release, we wanted to share some changes we’re making to our release model that we think will further improve stability and predictability of our releases.</p><p>Today’s release process was designed to be simple and low maintenance. This process served Flutter well when we were a smaller team and a more nascent framework, but at our current scale, we have encountered some issues affecting Flutter contributors and developers including:</p><ul><li>lack of clarity on when the release would be built, and therefore what code was in it</li><li>lack of testing for branches causing hotfix releases to have regressions</li></ul><p>Starting with the April release of Flutter, we are moving to a branching model with a stabilization period for beta and stable releases. We will now branch at the beginning of the month for a beta release and stabilize this release by cherry-picking any critical fixes. Roughly once a quarter, the current beta branch will be promoted to our stable release. We will continue to do hotfixes on this release if necessary. Our infrastructure now supports testing against branches, meaning we can validate cherrypicks and will accept some requests based on severity.</p><p>We also took this opportunity to align the Flutter and Dart release processes and channels. As a result, Dart has added <a href=\"https://dart.dev/get-dart#release-channels\">a beta channel</a>, and moving forward releases will be synced (for example, Flutter beta releases will contain a Dart beta release).</p><p>If you’re already shipping a Flutter app based on the stable channel, we encourage you to test your app on beta candidate releases and influence the quality of the stable release by reporting any issues. You can also escalate regressions or blocking bugs on the stable channel following the new <a href=\"https://github.com/flutter/flutter/wiki/Flutter-Cherrypick-Process\">Flutter cherry-pick process</a> on the Flutter wiki.</p><p>We think this new process will both provide higher confidence in the quality and predictability of our releases, and an easier way to deliver hotfixes to the stable channel.</p><h3>Versioning changes</h3><p>As a part of this branching model, we are making some minor changes to the way releases are versioned.</p><p>The full technical details can be found at the <a href=\"https://github.com/flutter/flutter/wiki/Flutter-build-release-channels\">Flutter build release channels</a> wiki page; a quick summary follows:</p><p><em>Non-stable release versions</em> will be annotated with .pre in the version string to denote their pre-release status. Given a version string of x.y.z-n.m.pre, dev channel builds will increment n each time a new one is built from master.</p><ul><li>1.18.0–1.0.pre: first dev build after master moves to 1.18</li><li>1.18.0–2.0.pre: next dev build from a more recent point on master</li></ul><p><em>Beta releases</em> will be built from a dev release point, as above. When we do cherry-picks on one of these releases, the m version will increment. For example, if we took the 15th dev build from master as our 1.18 release from beta, the versioning would look like:</p><ul><li>1.18.0–15.0.pre: initial beta candidate (same release that went to dev)</li><li>1.18.0–15.1.pre: subsequent build on the (now)beta branch with some cherry-picks</li><li>1.18.0–15.2.pre: second subsequent build</li></ul><p><em>Stable releases</em> will be versioned x.y.0. Subsequent hotfix releases, if necessary, will increment the patch number. x.y.1, x.y.2, etc.)</p><ul><li>1.18.0–15.4.pre: last beta build on branch</li><li>1.18.0: stable release, same bits as 1.18.0–15.4-pre</li><li>1.18.1: potential hotfix of 1.18.0</li></ul><h3>What’s next?</h3><p>Our first release using this new versioning model will be <strong>our next stable release, which we plan to ship next week</strong>. Come back then for a full rundown of all the new features.</p><p>In the meantime, check out some of the other announcements we’ve made over the last couple of weeks. Last week, we announced <a href=\"https://medium.com/flutter/announcing-codepen-support-for-flutter-bb346406fe50\">CodePen support of Flutter</a>. We are enjoying seeing the pens that various creators have built over the last few days. Here are a few of our favorites:</p><ul><li><a href=\"https://codepen.io/mkiisoft/pen/KKdgdad\">Twitter clone</a> (mkiisoft)</li><li><a href=\"https://codepen.io/rx-labz/pen/WNQoNem\">Generative abstract art</a> (rxlabz)</li><li><a href=\"https://codepen.io/tahatesser/pen/GRpqbRY\">Chakra animation</a> (tahatesser)</li><li><a href=\"https://codepen.io/joshuadeguzman/pen/jObrzJB\">Rotating carousel</a> (joshuadeguzman)</li><li><a href=\"https://codepen.io/phillywiggins/pen/gOaPNPY\">Nougat animation</a> (phillywiggins)</li><li><a href=\"https://codepen.io/abhilas-csc/pen/qBOZKPj\">Double pendulum</a> (abhilas-csc)</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*vX4VeEgvAD364f_2\" /></figure><p>And if you’re looking for Flutter learning resources, we now have <a href=\"https://medium.com/flutter/learn-flutter-for-free-c9bc3b898c4d\">a free introductory Flutter training course</a> available online. This ten hour course presented by Angela Yu provides tutorials and labs to help you get started on your Flutter journey.</p><p>See you next week. In the meantime, stay home and stay healthy!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f723d898d7af\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/flutter-spring-2020-update-f723d898d7af\">Flutter Spring 2020 Update</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-04-17T16:08:09.000Z":{"title":"Animation deep dive","link":"https://medium.com/flutter/animation-deep-dive-39d3ffea111f?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/39d3ffea111f","category":["flutter","animation-and-design","flutter-app-development","flutter-animation"],"dc:creator":"Filip Hracek","pubDate":"Fri, 17 Apr 2020 16:08:09 GMT","atom:updated":"2020-04-19T01:13:04.215Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<p>Last year, I got to record one of the episodes in the Flutter Animations series, and I thought I’d publish the same content for those who prefer text over video.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FPbcILiN8rbo%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DPbcILiN8rbo&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FPbcILiN8rbo%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7d47b8b14929040b3a32a3f8f35335d9/href\">https://medium.com/media/7d47b8b14929040b3a32a3f8f35335d9/href</a></iframe><p>In the other episodes of the series, my colleagues talk about all the practical ways to build animations in Flutter. Not so in my episode. Here, you’ll learn how to implement animations in the <em>least</em> pragmatic way imaginable. (But, you’ll also learn some things along the way.)</p><p>Let’s start with something simple and lighthearted:</p><h4>What <em>is</em> motion, really?</h4><p>You see, motion is an illusion. Look at this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1017/1*4bIqmJ8DQLSnlFtkN6bjaA.gif\" /><figcaption>A video of Filip waving his hand.</figcaption></figure><p>It’s a lie. What you’re actually seeing are many still images shown in quick succession. This is how movies work. The individual pictures are called frames in cinema— and because digital screens work similarly— they’re called frames here too. Cinema normally shows 24 frames per second. Modern digital devices show 60 to 120 frames per second.</p><p>So, if motion is a lie, what are all these AnimationFoo and FooTransition widgets really doing? Surely, because the frames need to be constructed up to 120 times per second, the UI cannot be <em>rebuilt</em> every time.</p><h4>Or, can it?</h4><p>In fact, animations in Flutter are just a way to rebuild parts of your widget tree on every frame. There is no special case. Flutter is fast enough to do that.</p><p>Let’s look at one of the building blocks of Flutter animations: AnimatedBuilder. This widget is an AnimatedWidget, which is backed by _AnimatedState. In the State’s initState() method, we are listening on the Animation (or Listenable, as it is called here), and when it changes its value, we … call setState().</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*-T1fn-7fK2OU-z711XG_8A.gif\" /><figcaption>This confusing screencast is just showing that I am telling the truth in the previous paragraph. Animated Builder really does call setState() on every frame.</figcaption></figure><p>There you go. Animations in Flutter are just a quick succession of changing the state of some widget, 60 to 120 times per second.</p><p>I can prove it. Here’s an animation that “animates” from zero to the speed of light. Although it’s changing the text on every frame, from Flutter’s perspective, it’s just another animation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*y4Pbt8ehWTAEfL9_M8Aoog.gif\" /></figure><p>Let’s use Flutter’s animation framework to build that animation from first principles.</p><p>Normally, we would use the TweenAnimationBuilder widget or something similar, but in this article, we’ll ignore all that, and go with a ticker, a controller, and setState.</p><h3>Ticker</h3><p>Let’s talk about Ticker first. 99% of the time, you won’t use a ticker directly. But, I think it’s still helpful to talk about it — even if only to demystify it.</p><p>A ticker is an object that calls a function for every frame.</p><pre><strong>var </strong>ticker = Ticker((elapsed) =&gt; print(<strong>&#39;hello&#39;</strong>));<br>ticker.start();</pre><p>In this case, we’re printing ‘hello’ every frame. Admittedly, that’s not very useful.</p><p>Also, we forgot to call ticker.dispose(), so now our ticker will go on forever, until we kill the app.</p><p>That’s why Flutter gives you SingleTickerProviderStateMixin, the aptly named mixin you’ve seen in some of the previous videos.</p><p>This mixin takes care of the hassle of managing a ticker. Just slap it onto your widget’s state and now your state is secretly a TickerProvider.</p><pre><strong>class </strong>_MyWidgetState <strong>extends </strong>State&lt;MyWidget&gt; <br>    <strong>with </strong>SingleTickerProviderStateMixin&lt;MyWidget&gt; {</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    <strong>return </strong>Container();<br>  }<br>}</pre><p>What this means is that the Flutter framework can ask your state for a ticker. Most important, AnimationController can ask the state for a ticker.</p><pre><strong>class </strong>_MyWidgetState <strong>extends </strong>State&lt;MyWidget&gt;<br>    <strong>with </strong>SingleTickerProviderStateMixin&lt;MyWidget&gt; {<br>  AnimationController <strong>_controller</strong>;</pre><pre>  @override<br>  <strong>void </strong>initState() {<br>    <strong>super</strong>.initState();<br>    <strong>_controller </strong>= AnimationController(vsync: <strong>this</strong>);<br>  }</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    <strong>return </strong>Container();<br>  }<br>}</pre><p>AnimationController <em>needs</em> a ticker for it to function. If you use SingleTickerProviderStateMixin or its cousin TickerProviderStateMixin, you can just give this to the AnimationController, and you’re done.</p><h3>AnimationController</h3><p>AnimationController is what you normally use to play, pause, reverse, and stop animations. Instead of pure “tick” events, AnimationController tells us at which <em>point</em> of the animation we are, at any time. For example, are we halfway there? Are we 99% there? Have we completed the animation?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*nKjFR7DVd-2r7_sSgBprfA.gif\" /></figure><p>Normally, you take the AnimationController, maybe transform it with a Curve, put it through a Tween, and use it in one of the handy widgets like FadeTransition or TweenAnimationBuilder. But, for educational purposes, let’s not do that. Instead, we will directly call setState.</p><h3>setState</h3><p>After we initialize the AnimationController, we can add a listener to it. And, in that listener, we call setState.</p><pre><strong>class </strong>_MyWidgetState <strong>extends </strong>State&lt;MyWidget&gt;<br>    <strong>with </strong>SingleTickerProviderStateMixin&lt;MyWidget&gt; {<br>  AnimationController <strong>_controller</strong>;</pre><pre>  @override<br>  <strong>void </strong>initState() {<br>    <strong>super</strong>.initState();<br>    <strong>_controller </strong>= AnimationController(vsync: <strong>this</strong>);<br>    <strong>_controller</strong>.addListener(_update);<br>  }</pre><pre><strong>  void </strong>_update() {<br>    setState(() {<br>      <em>// </em><strong><em>TODO<br>    </em></strong>});<br>  }</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    <strong>return </strong>Container();<br>  }<br>}</pre><p>Now, we should probably have a state to set. Let’s keep it simple with an integer. And let’s not forget to actually use the state in our build method, and to change the state in our listener according to the current value of the controller.</p><pre><strong>class </strong>_MyWidgetState <strong>extends </strong>State&lt;MyWidget&gt;<br>    <strong>with </strong>SingleTickerProviderStateMixin&lt;MyWidget&gt; {<br>  AnimationController <strong>_controller</strong>;</pre><pre>  int <strong>i </strong>= 0;</pre><pre>  @override<br>  <strong>void </strong>initState() {<br>    <strong>super</strong>.initState();<br>    <strong>_controller </strong>= AnimationController(vsync: <strong>this</strong>);<br>    <strong>_controller</strong>.addListener(_update);<br>  }</pre><pre><strong>  void </strong>_update() {<br>    setState(() {<br>      <strong>i </strong>= (<strong>_controller</strong>.<strong>value </strong>* 299792458).round();<br>    });<br>  }</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    <strong>return </strong>Text(<strong>&#39;</strong>$<strong>i m/s&#39;</strong>);<br>  }<br>}</pre><p>This code assigns a value from zero to the speed of light depending on the animation’s progress.</p><h3>Running the animation</h3><p>Now, we just need to tell the animation how long it should take to complete, and start the animation.</p><pre><strong>class </strong>_MyWidgetState <strong>extends </strong>State&lt;MyWidget&gt;<br>    <strong>with </strong>SingleTickerProviderStateMixin&lt;MyWidget&gt; {<br>  AnimationController <strong>_controller</strong>;</pre><pre>  int <strong>i </strong>= 0;</pre><pre>  @override<br>  <strong>void </strong>initState() {<br>    <strong>super</strong>.initState();<br>    <strong>_controller </strong>= AnimationController(<br>      vsync: <strong>this</strong>, <br>      duration: <strong>const </strong>Duration(seconds: 1),<br>    );<br>    <strong>_controller</strong>.addListener(_update);<br>    <strong>_controller</strong>.forward();<br>  }</pre><pre><strong>  void </strong>_update() {<br>    setState(() {<br>      <strong>i </strong>= (<strong>_controller</strong>.<strong>value </strong>* 299792458).round();<br>    });<br>  }</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    <strong>return </strong>Text(<strong>&#39;</strong>$<strong>i m/s&#39;</strong>);<br>  }<br>}</pre><p>The widget animates as soon as it’s added to the screen. And it “animates” from zero to the speed of light in a second.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*uuyMl4qHr_bFZJENdMDimQ.gif\" /></figure><h3>Disposing of the controller</h3><p>Oh, and don’t forget to dispose of the AnimationController. Otherwise you have a memory leak in your app.</p><pre><strong>class </strong>_MyWidgetState <strong>extends </strong>State&lt;MyWidget&gt;<br>    <strong>with </strong>SingleTickerProviderStateMixin&lt;MyWidget&gt; {<br>  AnimationController <strong>_controller</strong>;</pre><pre>  int <strong>i </strong>= 0;</pre><pre>  @override<br>  <strong>void </strong>initState() {<br>    <strong>super</strong>.initState();<br>    <strong>_controller </strong>= AnimationController(<br>      vsync: <strong>this</strong>, <br>      duration: <strong>const </strong>Duration(seconds: 1),<br>    );<br>    <strong>_controller</strong>.addListener(_update);<br>    <strong>_controller</strong>.forward();<br>  }</pre><pre>  @override<br>  <strong>void </strong>dispose() {<br>    <strong>_controller</strong>.dispose();<br>    <strong>super</strong>.dispose();<br>  }</pre><pre><strong>  void </strong>_update() {<br>    setState(() {<br>      <strong>i </strong>= (<strong>_controller</strong>.<strong>value </strong>* 299792458).round();<br>    });<br>  }</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    <strong>return </strong>Text(<strong>&#39;</strong>$<strong>i m/s&#39;</strong>);<br>  }<br>}</pre><h3>Just use a built-in widget, maybe?</h3><p>As you can see, doing it all by yourself is not great. The same functionality can be achieved with the TweenAnimationBuilder in much fewer lines of code, and without having to juggle an AnimationController and calling setState.</p><pre><strong>class </strong>MyPragmaticWidget <strong>extends </strong>StatelessWidget {<br>  @override<br>  Widget build(BuildContext context) {<br>    <strong>return </strong>TweenAnimationBuilder(<br>      tween: IntTween(begin: 0, end: 299792458),<br>      duration: <strong>const </strong>Duration(seconds: 1),<br>      builder: (BuildContext context, int i, Widget child) {<br>        <strong>return </strong>Text(<strong>&#39;</strong>$i m/s<strong>&#39;</strong>);<br>      },<br>    );<br>  }<br>}</pre><h3>Summary</h3><p>We saw what Ticker really is. We saw how to manually listen to an AnimationController. And, we saw that, at the basic level, animations are just fast, consecutive rebuilds of a widget. You can do whatever you want on any frame.</p><p>This article is part of a series! Check out the other articles here:</p><ul><li><a href=\"https://medium.com/flutter/flutter-animation-basics-with-implicit-animations-95db481c5916\">Flutter Animation Basics with Implicit Animations</a></li><li><a href=\"https://medium.com/flutter/custom-implicit-animations-in-flutter-with-tweenanimationbuilder-c76540b47185\">Custom Implicit Animations in Flutter … with TweenAnimationBuilder</a></li><li><a href=\"https://medium.com/flutter/directional-animations-with-built-in-explicit-animations-3e7c5e6fbbd7\">Directional Animations with Built-in Explicit Animations</a></li><li><a href=\"https://medium.com/flutter/when-should-i-useanimatedbuilder-or-animatedwidget-57ecae0959e8\">When Should I use AnimatedBuilder or AnimatedWidget</a></li><li>Animations deep dive (this article!)</li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=39d3ffea111f\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/animation-deep-dive-39d3ffea111f\">Animation deep dive</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-04-15T18:01:01.000Z":{"title":"Announcing CodePen support for Flutter","link":"https://medium.com/flutter/announcing-codepen-support-for-flutter-bb346406fe50?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/bb346406fe50","category":["designer","codepen","flutter","design-process","flutter-app-development"],"dc:creator":"Zoey Fan","pubDate":"Wed, 15 Apr 2020 18:01:01 GMT","atom:updated":"2020-04-15T18:01:01.037Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6wPqdCz_TzB2gAXr\" /></figure><p>Today we’re excited to announce that <a href=\"http://codepen.io\">CodePen</a>, the leading social development environment for millions of front-end developers and designers, is adding <a href=\"https://codepen.io/flutter\">support for Flutter</a>! For web developers CodePen has long been a great place for sharing design explorations, new techniques, and ideas. Now with the introduction of Flutter, CodePen enables a new audience to learn, share and promote their creativity.</p><p>In the words of Alex Vazquez, one of the co-founders of CodePen:</p><blockquote>“CodePen has been a big fan of Flutter and the Dart programming language for years. We’re pretty pumped that Flutter now supports mobile <em>and</em> the web. The Flutter community is growing fast, which is why we’re excited to support Flutter with its own custom CodePen editor! Flutter is officially a first-class member of the CodePen community. We can’t wait to see what you build with Flutter on CodePen.”</blockquote><p>Since the inception of Flutter, we’ve designed it as a canvas for creative expression. It has been encouraging to see growing recognition of its design capabilities, from the partnerships we announced with Adobe and SuperNova at our design-orientated <a href=\"http://g.co/FlutterInteract\">Flutter Interact event</a>, to the naming of <a href=\"https://www.fastcompany.com/90442092/the-14-most-important-design-ideas-of-the-decade-according-to-the-experts\">Flutter as one of the most important design ideas of the decade</a> by Fast Company. With the new addition of a CodePen-based Flutter environment, creative professionals can now leverage CodePen to discover artistic Flutter inspirations, build up impressive Flutter portfolios, and showcase amazing Flutter ideas to the world!</p><p>CodePen’s Flutter editor is built on top of the same backend service, <a href=\"https://github.com/dart-lang/dart-services\">dart-services</a>, that currently powers <a href=\"http://www.dartpad.dev\">DartPad</a> (the web-based editor created by the Flutter and Dart teams that has been recently updated to support Flutter). When we built DartPad, we designed it to be an educational tool to help developers learn Flutter and Dart, and share code snippets with each other. We specifically decided to open-source <a href=\"https://github.com/dart-lang/dart-services\">dart-services</a> so that sites like CodePen could tailor it to new scenarios and audiences.</p><p>DartPad is an excellent tool for quickly testing an idea in code, or for sharing your snippet with other developers, and it’s useful for reproducing (and filing) bugs. You can do this in CodePen, too, but CodePen has the advantage of an active design community where you can share, comment, promote, try out design ideas, and get input from other designers. CodePen’s Flutter editor is more like your “right brain” that you use to prototype ideas for creative expression and design inspiration, while DartPad is more like your “left brain” when you need to quickly test an idea or code up a technical concept.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*uEJNcnBPZRxMr1EK0aqBRw.gif\" /><figcaption><a href=\"https://codepen.io/zoeyfan/pen/mdeebvy\"><em>“Light effect” animation</em></a><em> by </em><a href=\"https://gist.github.com/mkiisoft\"><em>Mariano Zorrilla</em></a></figcaption></figure><h3>Flutter editor on CodePen</h3><p>Let’s take a quick tour of the Flutter editor on CodePen. You can create a new Flutter pen (CodePen’s term for “code snippet”) either from <a href=\"https://codepen.io/pen/editor/flutter\">scratch</a> or from an existing <a href=\"https://codepen.io/topic/flutter/templates\">template</a>. Many thanks to our esteemed Flutter community members (<a href=\"https://github.com/aednlaxer\">@aednlaxer</a>, <a href=\"https://github.com/ayushnishad\">@ayushnishad</a>, <a href=\"https://github.com/diegoveloper/\">@diegoveloper</a>, <a href=\"https://github.com/divyanshub024\">@divyanshub024</a>, <a href=\"https://github.com/egorbelibov/\">@egorbelibov</a>, <a href=\"https://github.com/gskinnerTeam\">@gskinnerTeam</a>, <a href=\"https://gist.github.com/mkiisoft\">@mkiisoft</a>, <a href=\"https://github.com/orestesgaolin/\">@orestesgaolin</a>, <a href=\"https://github.com/SlaxXxX\">@SlaxXxX</a>, and others) for contributing some cool samples to the template list.</p><p>Let’s start with the <a href=\"https://codepen.io/zoeyfan/pen/ExVaXGK\">“GooeyEdge” template</a>. As you can see, the Flutter code is on the left side, and Flutter’s web output is on the right side. You can play with this interactive design by dragging the edge of the visual using your mouse.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*11R_BtjzdSuPel44qDByKA.gif\" /><figcaption><a href=\"https://codepen.io/zoeyfan/pen/ExVaXGK\"><em>“Gooey edge” animation</em></a><em> by </em><a href=\"https://github.com/gskinnerTeam\"><em>Grant Skinner</em></a></figcaption></figure><p>You can also make changes to the Flutter code, and see them take effect accordingly. For example, if we change the color of the page control indicator from “white” to “blue” (line 326), you can see the color gets updated within a few seconds! CodePen automatically recompiles your code each time you make a change. Just update a line, wait a few seconds, and the new output appears.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YdadfEdp4pALMekmxaPWFA.png\" /><figcaption>Page control indicator changed into blue</figcaption></figure><p>Now let’s see what happens if I introduce a syntax error. Say I accidentally delete a semicolon at the end of line 1. I’ll immediately see a red bar warning of the syntax error. This allows you to easily spot and correct mistakes.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/442/0*bPcKdz1gG_1UxR6D\" /><figcaption>Warning message when introducing a syntax error</figcaption></figure><h3>Social features</h3><p>What we particularly love about CodePen is the social and community features it offers. Once you create a new pen or discover Flutter “pens” created by the community, you can save, favorite, add to a collection, share on social media, or even fork to create your own version!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*zfGvzw1Zb8SwDcpv\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ulpFtxXC_93Qp59b\" /></figure><h3>Give it a try!</h3><p>We hope this new Flutter playground on <a href=\"https://codepen.io/flutter\">CodePen</a> empowers you to build and showcase your cool Flutter animations, ideas, vignettes, and more. Please share your designs with us on Twitter using <strong>#FlutterPen</strong>. We can’t wait to see what you build! If you missed last week’s announcement about <a href=\"https://medium.com/flutter/learn-flutter-for-free-c9bc3b898c4d\">free training</a>, you might want to check that out. And keep an eye out: we’ll have more news very soon.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bb346406fe50\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/announcing-codepen-support-for-flutter-bb346406fe50\">Announcing CodePen support for Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-04-08T14:01:01.000Z":{"title":"Announcing a free Flutter introductory course","link":"https://medium.com/flutter/learn-flutter-for-free-c9bc3b898c4d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/c9bc3b898c4d","category":["development","course","flutter","coding","learning"],"dc:creator":"Martin Aguinis","pubDate":"Wed, 08 Apr 2020 14:01:01 GMT","atom:updated":"2020-04-08T17:04:42.515Z","content:encoded":"<h4>Ten hours of video and hands-on tutorials to build beautiful apps</h4><p>As we navigate through the current global crisis together, we know a lot of people are looking to develop new skills. We want to help, so we’re announcing a partnership with the App Brewery to give away <a href=\"https://www.appbrewery.co/courses/intro-to-flutter\">a new introductory course</a> on Flutter, offering free access to the course to those who activate it within the next three months. This course requires no prior Flutter experience, and we hope this gives you the chance to build new development skills for iOS, Android, and the web.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*li3Xi9x6pYTCZYE2\" /></figure><p><a href=\"http://flutter.dev\">Flutter</a> is Google’s UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase. Over <a href=\"https://youtu.be/REJDzio_h7o\">a million developers worldwide</a> are using it, from individuals and startups to big companies like Alibaba, Capital One, and eBay.</p><p>We are giving away the <a href=\"https://www.appbrewery.co/courses/intro-to-flutter\"><em>Introduction to Flutter Development</em></a><em> </em>course for free with lifetime access if activated during the next three months. The course covers some of the fundamental concepts for Flutter development, teaching you how to code using Dart and walking you through building nine real-world apps that run on iOS and Android, even if you have no programming experience.</p><p>The course instructor, Angela Yu, takes you step-by-step through engaging online lessons that give you practical hands-on experience to succeed as a Flutter developer. The course includes 10+ hours of video tutorials and labs, during which you’ll build your programming knowledge and make real world apps such as a Choose Your Own Adventure game and a quiz app. You’ll even build a musical instrument!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3uBFOes60gr9dEUa\" /></figure><p>We are expecting a lot of people to take this course, so we have also worked with <a href=\"https://verygood.ventures\">Very Good Ventures</a>, one of the top Flutter development agencies, to add concierge support for questions and help in the associated Discord channel.</p><p>By the end of this course, you’ll be ready to start building your own Flutter apps and on your way to becoming a fully fledged Flutter developer. If you get through this course, then there are many more modules available for further learning on <a href=\"https://www.appbrewery.co/\">App Brewery</a>. You’ll end the course with a certificate of completion, along with a portfolio of apps that have taught you the fundamentals of working with Flutter and Dart.</p><p>We hope to see you there soon and that you’ll share your progress using #FreeFlutterCourse.</p><p>Enroll Here: <a href=\"https://www.appbrewery.co/courses/intro-to-flutter\">https://www.appbrewery.co/courses/intro-to-flutter</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rVqP5EWrGnR_h0cB63qbFg.png\" /><figcaption><em>Introduction to Flutter Development </em>Course Syllabus</figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c9bc3b898c4d\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/learn-flutter-for-free-c9bc3b898c4d\">Announcing a free Flutter introductory course</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-04-01T19:46:28.000Z":{"title":"How to Choose Which Flutter Animation Widget is Right for You?","link":"https://medium.com/flutter/how-to-choose-which-flutter-animation-widget-is-right-for-you-79ecfb7e72b5?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/79ecfb7e72b5","category":["flutter","flutter-widget","flutter-animation"],"dc:creator":"Andrew Fitz Gibbon","pubDate":"Wed, 01 Apr 2020 19:46:28 GMT","atom:updated":"2020-04-01T19:46:28.508Z","content:encoded":"<p><em>To watch this post in video form, check out </em><a href=\"https://youtu.be/GXIJJkq_H8g\"><em>our YouTube video here</em></a><em>.</em></p><p><em>This article was originally authored by Emily Fortuna, and has been posted on her behalf.</em></p><p>So, you’ve decided to include an animation in your Flutter app — how exciting! The thing is, there are a lot of different animation widgets so figuring out which one is most appropriate can feel overwhelming. Fortunately, this article is here to help!</p><p>I’ll walk through a series of questions you can ask yourself about the animation you have in mind, to help you determine how you should create it. The other thing to remember is that the animation widgets provided in the core Flutter library are pretty low-level. This means that if you have a complex animation in mind, I recommend you check out some of the animation packages available on <a href=\"https://pub.dev/\">pub.dev</a> that provide higher-level interfaces.</p><p>Take a look at the following decision tree, which I’ll explain in this article:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1019/0*T-YZa36Dv2a9xTLc\" /><figcaption><em>A pocket flow chart for all your animation decisions.</em></figcaption></figure><p>Broadly speaking, there are two main types of animations that you might want to include in your Flutter app: drawing-based animations, and code-based animations.</p><p><em>Code-based animations</em> are widget-focused and are rooted in standard layout and style primitives like rows, columns, colors, or text styles. That’s not to say they’re boring or simple, but at their heart they tend to enhance a particular existing widget’s appearance or transition rather than act as a standalone widget in their own right.</p><p><em>Drawing-based animations</em>, in contrast, look like someone drew them. They often are stand-alone sprites, like game characters, or involve transformations that would be challenging to express purely in code.</p><p>So the first question to ask yourself is: “Is my animation more like a drawing, or does it look like something that you can build out of Flutter widget primitives?” If your animation is more like a drawing, or you are working with a design team who will provide vector or raster image assets, then I recommend you use a third-party tool such as Rive or Lottie to build your animation graphically, and then export it to Flutter. There are several packages that can help you include these assets in your Flutter app.</p><p>Otherwise, if your animations involve mutating widgets — such as changing colors, shapes, or positions — you’ll get to write some Flutter code!</p><h3>Explicit or implicit?</h3><p>Flutter code-based animations come in two flavors: implicit and explicit animations. The next step is figuring out which type you need.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*LJO-BZLYkE68UdlX\" /><figcaption><em>Implicit Animation Widgets animate when the values change.</em></figcaption></figure><p>Implicit animations rely on simply setting a new value for some widget property and Flutter takes care of animating it from the current value to the new value. These widgets are easy to use and are amazingly powerful. All of the animations you see above are done with implicitly animated widgets. Implicit animations are a good place to start when looking to animate something.</p><p>Explicit animations require an AnimationController. They are called “explicit” because they only start animating when explicitly asked to. You can use explicit animations to do everything you can with implicit animations, plus a little more. The annoying thing is you have to manually manage the life-cycle of the AnimationController since it’s not a widget, which means putting it inside a stateful widget. For that reason, your code is generally simpler if you can get away with using an implicit animation widget.</p><p>There are three questions to ask yourself to determine what type of widget you need: Does my animation repeat forever? By “forever” I mean while it’s on a certain screen, or as long as a certain condition is true, such as music playing.</p><p>The second question to ask yourself is whether the values in your animation are discontinuous. An example of what I mean by a discontinuous animation is this growing circle animation. The circle repeatedly grows small-large, small-large. It never grows small-large and then shrinks back down again. In this case, the circle’s size is discontinuous.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/294/0*VMomX3dS34GVis3W\" /><figcaption><em>A circle that only grows, never shrinks. It’s a discontinuous animation!</em></figcaption></figure><p>The last question to ask yourself is whether multiple widgets are animating in a coordinated fashion together? For example:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/309/0*fjdxxt_qXL1o9y_V\" /><figcaption><em>Multiple boxes animating together.</em></figcaption></figure><p>If you answered “yes” to any of those three questions, you need to use an explicit widget. Otherwise, you can use an implicit widget! Once you’ve decided whether you need an implicit or explicit widget, the last question will lead you to finding the specific widget you need.</p><h3>Which widget?</h3><p>Ask yourself, is there a built-in widget for my needs? If you’re looking for a built-in implicit animation widget, look for widgets named AnimatedFoo where “<em>Foo</em>” is the property you want to animate, such as <a href=\"https://flutter.dev/docs/cookbook/animation/opacity-animation\">AnimatedOpacity</a>. Also check <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html\">AnimatedContainer</a> as it is an extremely powerful and versatile widget for many different implicit animations.</p><p>If you can’t find the built-in implicit animation you need, you can use <a href=\"https://api.flutter.dev/flutter/widgets/TweenAnimationBuilder-class.html\">TweenAnimationBuilder</a> to create a custom implicit animation. Conversely, if you’re looking for a built-in explicit widget, they are usually called <em>Foo</em>Transition, where “<em>Foo</em>” is the property you’re animating, such as <a href=\"https://api.flutter.dev/flutter/widgets/SlideTransition-class.html\">SlideTransition</a>.</p><p>If you can’t find a relevant built-in explicit animation, there is one last question you need to ask yourself: <em>Do I want my animation to be a standalone widget or part of another surrounding widget?</em> The answer to this is mostly of a matter of taste. If you want a standalone custom explicit animation, you should extend <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedWidget-class.html\">AnimatedWidget</a>. Otherwise, you can use <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedBuilder-class.html\">AnimatedBuilder</a>.</p><p>There’s one last option to consider if you’re seeing performance problems, and that is animating with CustomPainter. You can use it much like AnimatedWidget, but CustomPainter paints directly to the Canvas, without the standard widget build paradigm. When used well, you can create some neat, extremely custom effects or save on performance. When misused, though, your animation could cause more performance issues. So, take care and, much like manual memory management, make sure you know what you’re doing before sprinkling shared pointers everywhere.</p><h3>Conclusion</h3><p>In summary, there are a series of high-level questions you can ask yourself that guide how to create your animation. That sequence of questions creates a decision tree for determining what widget or package is right for your needs. If you collapse those end-points, they fall into a line, approximately indicating difficulty from left to right. Thanks for reading, and go forth and create great Flutter animations — through a third-party framework, or with packages, either explicitly, or implicitly!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oiCAPHSQGyFgZlUd\" /><figcaption><em>Animation widgets from easiest … to hardest.</em></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=79ecfb7e72b5\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/how-to-choose-which-flutter-animation-widget-is-right-for-you-79ecfb7e72b5\">How to Choose Which Flutter Animation Widget is Right for You?</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-03-30T16:29:12.000Z":{"title":"Flutter web: Navigating URLs using named routes","link":"https://medium.com/flutter/flutter-web-navigating-urls-using-named-routes-307e1b1e2050?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/307e1b1e2050","category":["app-development","flutter","flutter-web"],"dc:creator":"Per Classon","pubDate":"Mon, 30 Mar 2020 16:29:12 GMT","atom:updated":"2020-03-30T16:29:12.145Z","content:encoded":"<p>Named routes can be used to navigate between pages inside a Flutter mobile app, but they also work for URLs in Flutter web apps. This article explains how to add named routes to your app, and how you can customize them, to have pattern matching inside the routes.</p><h3>Defining named routes</h3><p>Named routes can be added to your application by defining them within the MaterialApp class. The MaterialApp.routes property contains a map listing each named route and its associated display widget. The MaterialApp.initialRoute property determines what route displays as the application starts. The initialRoute thus needs to be defined inside of the routes property. For example:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a8846895dc2456388075246244a5c6f1/href\">https://medium.com/media/a8846895dc2456388075246244a5c6f1/href</a></iframe><p>A good practice to keep your code organized is to put named routes inside static variables, for example, on the widgets themselves:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e92174fe9949d9bda38f5f45b95d77d1/href\">https://medium.com/media/e92174fe9949d9bda38f5f45b95d77d1/href</a></iframe><p>Next, refactor MaterialApp.routes with the named routes now defined as static variables:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f22ba3d60150d6710eb89fa2b230ac42/href\">https://medium.com/media/f22ba3d60150d6710eb89fa2b230ac42/href</a></iframe><h3>Navigating between pages</h3><p>To navigate from one page to another, simply push the named route to the navigator:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/4e94968ef14fd6062ac5dfe715356027/href\">https://medium.com/media/4e94968ef14fd6062ac5dfe715356027/href</a></iframe><p>See a <a href=\"https://dartpad.dev/embed-flutter.html?gh_owner=perclasson&amp;gh_repo=flutter_code&amp;gh_path=named_routes/lib&amp;theme=dark\">full interactive example of this on DartPad</a>. If you build and <a href=\"https://flutter.dev/docs/get-started/web\">run the application yourself for the web</a>, you can also just type in /#/overview inside the web browser. This pushes the route named <em>overview</em> to the Navigator, and takes you to the OverviewPage widget, as you can see in the following GIF:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/0*kDK1lFIWHzjcEVKA\" /><figcaption><a href=\"https://dartpad.dev/embed-flutter.html?gh_owner=perclasson&amp;gh_repo=flutter_code&amp;gh_path=named_routes/lib&amp;theme=dark\">See full interactive example on DartPad.</a></figcaption></figure><h3>Routing logic for dynamic URLs</h3><p>You may need to address more complex scenarios then addressed here, such as having pattern matching inside the routes to allow for dynamic URLs. To extend this example, assume that you have many different articles on the overview page. For each article you want to be able to navigate directly via URLs:</p><pre>/#/article/a-very-interesting-article<br>/#/article/newsworthy-news</pre><p>To define named routes for all of the articles within the MaterialApp does not scale very well. For such dynamic cases you need to do something more custom. As of this writing, the stable channel of Flutter is at v1.12, and there is no<em> simple way</em> to do this, though there are plans to add support for more advanced routing with the <a href=\"https://github.com/flutter/flutter/issues/45938\">new Navigator</a>.</p><p>For now you can use an external package, for example the <a href=\"https://pub.dev/packages/fluro/\">Fluro package</a> provides more advanced routing. It gives you wildcard pattern matching in routes, as well as parsing for query strings in URLs. There are probably many other available packages, so please leave a comment with the name of your favorite.</p><p>If you are up for the challenge, you can also get dynamic routes by making use of the MaterialApp.onGenerateRoute property. Use this to write routing logic for when a named route is not inside of MaterialApp.routes.</p><p>For each route, define a Path with a RegEx pattern. If the named route matches the pattern, return the associated widget. Next, define the Path class to support that:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a51a21266161783fb1cc7ab28faaaa33/href\">https://medium.com/media/a51a21266161783fb1cc7ab28faaaa33/href</a></iframe><p>For the overview page and the home route, it is quite simple and looks similar to what you had before. The following example creates a RegEx pattern that matches <a href=\"https://en.wikipedia.org/wiki/Clean_URL#Slug\">a slug</a> (lowercase letters with a dash) that is used to find the corresponding article:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a512016a4e3f5a561987aa01ccb7033b/href\">https://medium.com/media/a512016a4e3f5a561987aa01ccb7033b/href</a></iframe><p>All that remains is to create an onGenerateRoute function for MaterialApp. If the current named route (settings.name) is defined in the paths list, return the associated widget. Make sure to pass any named matches in the RegEx (in this example it is the slug). If no matches are found, simply return null, WidgetsApp.onUnknownRoute is called to handle such cases:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/89c3c4fe231d7a9e85d456752eaf3bb9/href\">https://medium.com/media/89c3c4fe231d7a9e85d456752eaf3bb9/href</a></iframe><p>Make sure to define the onGenerateRoute function inside the MaterialApp class; you have implemented dynamic URLs with Flutter, using named routes! You can <a href=\"https://dartpad.dev/embed-flutter.html?gh_owner=perclasson&amp;gh_repo=flutter_code&amp;gh_path=custom_named_routes/lib&amp;theme=dark\">see a full interactive example on DartPad</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/0*Uoo0IGsUFUf8GJsT\" /><figcaption><a href=\"https://dartpad.dev/embed-flutter.html?gh_owner=perclasson&amp;gh_repo=flutter_code&amp;gh_path=custom_named_routes/lib&amp;theme=dark\">See full interactive example on DartPad.</a></figcaption></figure><h3>Conclusion</h3><p>Whether you choose to write your own custom logic for routes, or simply use the routes support that exists within MaterialApp, you get URL support by default with a Flutter app on the web, when using named routes. Implementing named routes can also ensure that you decouple the presentation logic from the routing logic, which leads to less code duplication.</p><p>Let me know in the comments what solution you use in your app, whether it is writing your own custom logic or using an external package.</p><p>Happy hacking!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=307e1b1e2050\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/flutter-web-navigating-urls-using-named-routes-307e1b1e2050\">Flutter web: Navigating URLs using named routes</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-06-10T22:13:20.000Z":{"title":"Handling 404: Page not found error in Flutter","link":"https://medium.com/flutter/handling-404-page-not-found-error-in-flutter-731f5a9fba29?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/731f5a9fba29","category":["dart","routesetting","404-page","flutter",404],"dc:creator":"Jose Alba","pubDate":"Wed, 10 Jun 2020 22:13:20 GMT","atom:updated":"2020-06-11T17:10:34.861Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/850/1*eU-430nepv8cz3OYLIycng.png\" /></figure><p>Flutter has released web support that allows you to create dynamic websites. Flutter supports handling any error that might come from web usage such as 404 errors. But, how do you make a custom 404 page for your Flutter application?</p><p>This article describes how to create custom pages that are shown anytime a user navigates to a page that doesn’t exist.</p><h3>How to redirect clients to a custom 404 page in Flutter</h3><p>Everyone has encountered a “404: Page not found error” when browsing the internet. Flutter handles this issue by automatically redirecting you to the initial route. This is usually the home page of your application. But what if you want to have a fancy 404 page like the ones at <a href=\"https://36bvmt283fg61unuud3h7qua-wpengine.netdna-ssl.com/wp-content/uploads/2013/03/airbnb-404.gif\">AirBnb</a>, <a href=\"https://mamchenkov.net/wordpress/wp-content/uploads/2013/11/github-404.png\">GitHub</a>, or even the <a href=\"https://flutter.dev/foo\">Flutter website</a>? You can do this easily with Flutter.</p><p>To create a custom 404 page, your application needs to use the MaterialApp, CupertinoApp, or WidgetsApp widget. Most applications use one of these three widgets; it is the first widget you call when creating a Flutter application.</p><p>The MaterialApp configures the top-level Navigator to search for routes in the following order:</p><ol><li>For the / route, the <a href=\"https://api.flutter.dev/flutter/material/MaterialApp/home.html\">home</a> property, if non-null, is used.</li><li>Otherwise, the <a href=\"https://api.flutter.dev/flutter/material/MaterialApp/routes.html\">routes</a> table is used, if it has an entry for the route.</li><li>Otherwise, <a href=\"https://api.flutter.dev/flutter/material/MaterialApp/onGenerateRoute.html\">onGenerateRoute</a> is called, if provided. It should return a non-null value for any valid route not handled by <a href=\"https://api.flutter.dev/flutter/material/MaterialApp/home.html\">home</a> and <a href=\"https://api.flutter.dev/flutter/material/MaterialApp/routes.html\">routes</a>.</li><li>Finally if all else fails <a href=\"https://api.flutter.dev/flutter/material/MaterialApp/onUnknownRoute.html\">onUnknownRoute</a> is called.</li></ol><p>If your route isn’t handled in any of these tables then it uses the <a href=\"https://api.flutter.dev/flutter/material/MaterialApp/onUnknownRoute.html\">onUnknownRoute</a> property to handle your navigation. This callback is typically used for error handling. For example, this function might always generate a “not found” page that describes the route that wasn’t found. Unknown routes can arise either from errors in the app or from external requests to push routes, such as from Android intents.</p><p>The following example code demonstrates how to define an anonymous function for the onUnknownRoute property, which takes a RouteFactory, a factory method that takes a RouteSettings function as input and returns a Route. The following snippet shows how simple it can be to define the onUnknownRoute property:</p><pre>onUnknownRoute: (settings) {</pre><pre>  return MaterialPageRoute(builder: (_) =&gt; PageNotFound());</pre><pre>},</pre><p>PageNotFound is a custom widget that creates the 404 page . This page might explain what happened and redirect the user to the home page, but you can be as creative as you want when creating your 404 your page.</p><h3>Closing Remarks</h3><p>When creating a Flutter application it is important to handle any issues that might arise. Using the onUnknownRoute property within MaterialApp, CupertinoApp, or WidgetApp lets you handle the inevitable “page not found” errors in your website.</p><p>To learn more about routes in Flutter, see the Medium post <a href=\"https://medium.com/flutter/flutter-web-navigating-urls-using-named-routes-307e1b1e2050\">“Navigating URLs using named routes”</a>.</p><p><em>About the author: Jose recently graduated from university and now works on </em><a href=\"https://material.io\"><em>Material</em></a><em>, a design system that helps teams build high-quality digital experiences. Jose’s team maintains the Flutter </em><a href=\"https://api.flutter.dev/flutter/material/material-library.html\"><em>material library</em></a><em>. To learn more, visit his Jose’s pages on </em><a href=\"https://github.com/JoseAlba\"><em>GitHub</em></a><em>, </em><a href=\"https://www.linkedin.com/in/josealba1996/\"><em>LinkedIn</em></a><em>, </em><a href=\"https://www.youtube.com/channel/UCOdKA_On0oPe1tz02z1QfxA?view_as=subscriber\"><em>YouTube</em></a><em>, and </em><a href=\"https://www.instagram.com/jose.alba/\"><em>Instagram</em></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=731f5a9fba29\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/handling-404-page-not-found-error-in-flutter-731f5a9fba29\">Handling 404: Page not found error in Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-06-03T15:01:01.000Z":{"title":"Black Lives Matter","link":"https://medium.com/flutter/black-lives-matter-a8824c8cc245?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/a8824c8cc245","dc:creator":"Tim Sneath","pubDate":"Wed, 03 Jun 2020 15:01:01 GMT","atom:updated":"2020-06-03T15:01:01.179Z","content:encoded":"<p>We aren’t posting a #FlutterGoodNewsWednesday article this week.</p><p>Here on the Flutter and Dart teams, we want to take this moment to stand with the Black community and tell you: we stand with you, we see you and we support you. This week’s events in the USA are a painful reminder that systemic racism remains prevalent and that justice is distributed unevenly in our society.</p><p>We know that these are not issues that are solved with a few words; we need to engage individually and corporately. We also acknowledge that we’re part of the problem, and that many of us have work to do to examine our biases and privilege.</p><p>We’re encouraging our teams to take time this week to learn and reflect on how we can be better allies and better foster diversity in our own community. Some of us are reading books like <a href=\"https://newjimcrow.com/\">The New Jim Crow</a> and watching documentaries like <a href=\"https://www.netflix.com/title/80091741\">13th</a>; we have also found these guides to be helpful: <a href=\"https://tatianamac.com/posts/white-guyde/\">White Guyde To The Galaxy</a> and <a href=\"https://tatianamac.com/posts/save-the-tears\">Save the Tears: White Woman’s Guide</a>.</p><p>We’ll be quiet for the rest of this week and focus on amplifying <a href=\"https://www.linkedin.com/pulse/get-wrong-me-what-i-need-from-allies-megan-carpenter/?trackingId=xUb18B1MS1WaBOTqkw9xgA%3D%3D\">voices of color</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a8824c8cc245\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/black-lives-matter-a8824c8cc245\">Black Lives Matter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-05-27T15:01:01.000Z":{"title":"Two Months of #FlutterGoodNewsWednesday","link":"https://medium.com/flutter/two-months-of-fluttergoodnewswednesday-a12e60bab782?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/a12e60bab782","category":["mobile","ios","development","programming","flutter"],"dc:creator":"Tim Sneath","pubDate":"Wed, 27 May 2020 15:01:01 GMT","atom:updated":"2020-05-27T22:09:37.063Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>New apps and plugins, free training and tooling: oh my!</h4><p>When we realized that this was going to be a very different spring without the usual events and connection points, we decided to find a new way to share our various announcements with you. A few of us put our heads together, and <a href=\"https://twitter.com/hashtag/fluttergoodnewswednesday\">#FlutterGoodNewsWednesday</a> was born. Each week for the last two months, we’ve shared something new that we hope made you smile. This week, we thought we’d follow up on some of the announcements we’ve made so far and share some further updates.</p><h3>Free introductory training for Flutter developers</h3><p>We kicked things off with an announcement of a <a href=\"https://medium.com/flutter/learn-flutter-for-free-c9bc3b898c4d\">free 10+ hour introductory course covering the basics of Flutter development</a>, created in partnership with Angela Yu of the App Brewery. We’re delighted to see that <strong>over 75,000</strong> of you have signed up for the course, with nearly 5,000 completions already (my thirteen year-old son is one of them!) For those of you on the course, hopefully you’ve discovered the Discord group where <a href=\"https://verygood.ventures/\">Very Good Ventures</a> and a team of volunteers have been providing concierge support. We’ve been learning from you too — in particular, understanding where some of the early pitfalls are to getting started; we’ll use this knowledge to improve the documentation and the product itself.</p><p>If you’ve almost completed this course, you might be wondering “what next”? We have a few recommendations for you that cover intermediate topics:</p><ul><li><a href=\"https://www.udemy.com/course/flutter-bootcamp-with-dart/?referralCode=2B7724A180C0502A2547\">Part 2 of Angela’s course</a> covers calling web services and Firebase integration, more advanced widgets, state management, and animation.</li><li><a href=\"https://fluttercrashcourse.com/courses/tourismco\">Nick Manning’s Tourism &amp; Co course</a> puts what you learn in Angela’s course into action with a real, working app example, including unit and integration testing, asynchronous web service invocation, JSON APIs and custom views.</li><li>Similarly, <a href=\"https://courses.codewithandrea.com/\">Andrea Bizotto’s REST API crash course</a> builds on a popular API, showing how to call REST-based web services, cache returned data, and handle service degradation issues.</li></ul><h3>CodePen Flutter support</h3><p>We also shared about <a href=\"https://medium.com/flutter/announcing-codepen-support-for-flutter-bb346406fe50\">CodePen’s adoption of Flutter</a>. To date we’ve seen nearly 5,000 Flutter pens created by designers and developers from around the world. Some of you have boggled our minds with what you’ve created. Here are a few favorites that crossed our radar in the last weeks:</p><ul><li><a href=\"https://codepen.io/mkiisoft/full/bGVxrWK\">Retro Boy Color</a> (by <a href=\"https://codepen.io/mkiisoft\">Mariano Zorrilla</a>)</li><li><a href=\"https://codepen.io/orestesgaolin/full/xxwzdgJ\">Netflix Logo in Flutter</a> (by <a href=\"https://codepen.io/orestesgaolin\">Dominik Roszkowski</a>)</li><li><a href=\"https://codepen.io/orestesgaolin/full/qBOxpBK\">Flutter Space Program</a> (by <a href=\"https://codepen.io/orestesgaolin\">Dominik Roszkowski</a>)</li><li><a href=\"https://codepen.io/Darth_Paul/full/YzyrmGy\">Draggable C curve</a> (by <a href=\"https://codepen.io/Darth_Paul\">Paul Thomas</a>)</li><li><a href=\"https://codepen.io/blueaquilae/full/pojWyZg\">Liquid Polygon</a> (by <a href=\"https://codepen.io/blueaquilae\">Robert Felker</a>)</li><li><a href=\"https://codepen.io/jonathan_monga/full/wvKZbzG\">Long shadow animations</a> (by <a href=\"https://codepen.io/jonathan_monga\">Jonathan Monga</a>)</li><li><a href=\"https://codepen.io/Deven-Joshi/full/NWGdvgG\">Trigonometric Flutter</a> (by <a href=\"https://codepen.io/Deven-Joshi\">Deven Joshi</a>)</li><li><a href=\"https://codepen.io/chiziaruhoma-ogbonda/full/oNjObRm\">Color Test</a> (by <a href=\"https://codepen.io/chiziaruhoma-ogbonda/\">Chiziaruhoma Ogbonda</a>)</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*B33kcAC_6aXEEdVZ\" /><figcaption>New CodePens that use Flutter’s web support to showcase prototypes and experiments.</figcaption></figure><p>Keep exploring with CodePen: we have a challenge coming up for you!</p><h3>Flutter Momentum</h3><p>For our third #FlutterGoodNewsWednesday blog post, <a href=\"https://medium.com/flutter/flutter-spring-2020-update-f723d898d7af\">we shared some statistics about Flutter adoption, with two million developers now using Flutter</a>. There are now more developers using Flutter on a typical day than over the course of an entire week this time last year.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/805/0*h3Nhe6QdketsMi-z\" /><figcaption>The New York Times Spelling Bee game, implemented with Flutter.</figcaption></figure><p>At the time we shared that we’d seen about 50,000 apps uploaded to the Play Store. The pace of growth continues to accelerate, and we’re delighted to share that <strong>a further 10,000 Flutter apps have been uploaded in the month since that post</strong>. This level of momentum inspires us: thank you for your support!</p><p>A great example of one of those new apps is from the <a href=\"https://www.nytimes.com/subscription/games/lp8J6CG\">New York Times games team</a>, who shared some of their experiences with Flutter <a href=\"https://developers.googleblog.com/2019/05/Flutter-io19.html\">at the Google I/O ’19 event</a>. Their <a href=\"https://www.nytimes.com/puzzles/spelling-bee\">Spelling Bee</a> game is now rolling out to the iOS and Android stores as part of their <a href=\"https://play.google.com/store/apps/details?id=com.nytimes.crossword&amp;hl=en_US\">crossword app</a>: built entirely with Flutter, this addictive word game challenges you to make words out of a honeycomb of letters.</p><p>Since this blog post came out, we’ve <a href=\"https://medium.com/flutter/what-are-the-important-difficult-tasks-for-flutter-devs-q1-2020-survey-results-a5ef2305429b\">also released the results of our Q1 developer survey</a>, which over 6,000 of you responded to. 94.5% of you say that you’re satisfied or very satisfied with Flutter, but we’re also learning more about areas of difficulty. One challenge reported in a previous survey was animation, and we’ve subsequently added a <a href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU2v6UqYlt_KPaXlnjbYySua\">series of videos</a> and <a href=\"https://flutter.dev/docs/development/ui/animations\">more detailed documentation</a> targeting that subsystem in greater detail.</p><h3>Web Progress Update</h3><p>One area we’ve been working hard on over the last few months has been Flutter support for targeting web output. <a href=\"https://medium.com/flutter/flutter-web-support-updates-8b14bfe6a908\">As we reported in our web update</a>, we are particularly focused on improving both performance and conformance. In the post we announced that Flutter now supports Progressive Web Applications, and in the intervening weeks we’ve been refining this feature substantially with <a href=\"https://github.com/flutter/flutter/pull/56103\">more sophisticated service worker caching</a> to improve first-load performance.</p><p>In the last week, we’ve also begun a <a href=\"https://medium.com/flutter/optimizing-performance-in-flutter-web-apps-with-tree-shaking-and-deferred-loading-535fbe3cd674\">series of articles</a> talking about <a href=\"https://medium.com/flutter/improving-perceived-performance-with-image-placeholders-precaching-and-disabled-navigation-6b3601087a2b\">tips and tricks for maximizing performance of Flutter apps that run on the web</a>, based on learnings from optimizing the Flutter Gallery. Keep following this blog channel for more articles on this subject in the coming weeks!</p><h3>Flutter 1.17 and Dart 2.8</h3><p>Perhaps the biggest news so far with this slew of announcements was the <a href=\"https://medium.com/flutter/announcing-flutter-1-17-4182d8af7f8e\">release of Flutter 1.17</a>, including <a href=\"https://medium.com/dartlang/announcing-dart-2-8-7750918db0a\">Dart 2.8</a>. Flutter 1.17 offers performance and memory improvements on all platforms, but you’ll see the biggest boosts on iOS, with the <a href=\"https://medium.com/flutter/announcing-flutter-1-17-4182d8af7f8e#f303\">adoption of Apple’s Metal subsystem</a> for graphics rendering. For Android too, you’ll see improvements, particularly with the new optional <a href=\"https://github.com/flutter/flutter/pull/46140\">fast start debugging mode</a>, which offers a 3x speed boost with no changes to your code.</p><p>Beyond the new features mentioned in the blog post, one feature that some of you have discovered is the updated error display on release mode builds. For release mode builds only, we’ve <a href=\"https://github.com/flutter/flutter/issues/40452\">disabled the “red screen of death”</a> that appears when one of your widgets is incorrectly configured. Many of you told us you’d like to see a less… prominent message in the rare situation that you ship an application with a bug, and hopefully this changed default behavior is a better alternative. (For those of you who want something else, you can use the <a href=\"https://api.flutter.dev/flutter/widgets/ErrorWidget/builder.html\">ErrorWidget.builder</a> property to further customize this.)</p><p>It’s exciting to see that, as of the time of writing, <strong>two-thirds of you have already upgraded to 1.17</strong>. We’d encourage the rest of you to upgrade at your earliest convenience to take advantage of all that we’ve got to offer in this release!</p><p>In the intervening period, we’ve shipped one hotfix release for Flutter 1.17, and we plan further updates as required to improve stability and quality. You can find out which bug fixes are included in each hotfix release as well as learn how to ensure that you’re running the latest stable version by going to the <a href=\"https://github.com/flutter/flutter/wiki/Hotfixes-to-the-Stable-Channel\">relevant wiki page</a>.</p><h3>Adobe XD Plugin Preview Availability</h3><p>Another major piece of news for designers is the <a href=\"https://medium.com/flutter/announcing-adobe-xd-support-for-flutter-4b3dd55ff40e\">first public preview of Adobe XD support for Flutter</a>, published by Adobe themselves.</p><p>This week, Adobe released an update to the plugin that <a href=\"https://github.com/AdobeXD/xd-to-flutter-plugin/blob/master/CHANGELOG.md\">fixes a few opacity-related export bugs</a> and aggressively combines shapes for cleaner Dart code. In addition, Adobe <a href=\"https://theblog.adobe.com/xd-may-2020-offline-coediting-sharing-improvements/\">shipped an XD update last week</a> that <a href=\"https://adobexdplatform.com/plugin-docs/changes.html#new-api-features\">includes new APIs for access to responsive layout</a>. Once this is rolled out more broadly, stay tuned for a further update to the XD to Flutter plugin in the next few weeks that will improve flexibility of the generated Dart code.</p><h3>Plugins and Flutter Favorites</h3><p>Most recently, last week we <a href=\"https://medium.com/flutter/flutter-package-ecosystem-update-d50645f2d7bc\">announced our plans to take many of the Flutter team’s plugins to 1.0</a>, in addition to a new set of Flutter Favorites that includes <a href=\"https://pub.dev/packages/sign_in_with_apple\">Sign in with Apple</a>.</p><p>But it’s always worth calling out some of the unsung heroes. With over 10,000 packages, it’s tough to recognize them all, but this week we’re going to highlight an informal top ten list of cool packages that aren’t (yet) Flutter Favorites but are nevertheless worthy of attention:</p><ol><li><a href=\"https://pub.dev/packages/fl_chart\">fl_chart</a> offers beautiful business charts, including line and bar charts, scatter plots, and pie charts.</li><li><a href=\"https://pub.dev/packages/flutter_blurhash\">flutter_blurhash</a> provides quick placeholders for images that may take time to download.</li><li><a href=\"https://pub.dev/packages/font_awesome_flutter\">font_awesome_flutter</a> offers thousands of icons for easy inclusion in your Flutter app.</li><li><a href=\"https://pub.dev/packages/fab_circular_menu\">fab_circular_menu</a> provides an attractive popup menu.</li><li><a href=\"https://pub.dev/packages/flutter_staggered_animations\">flutter_staggered_animations</a> offers beautiful load animations for listviews, gridviews and columns.</li><li><a href=\"https://pub.dev/packages/device_preview\">device_preview</a> constrains your app to a custom device shell, allowing you, for example, to preview an iPhone output from macOS.</li><li><a href=\"https://pub.dev/packages/smooth_page_indicator\">smooth_page_indicator</a> allows you to transition through a carousel of infocards.</li><li><a href=\"https://pub.dev/packages/flame\">flame</a> provides a small Flutter game engine with a large set of tutorials.</li><li><a href=\"https://pub.dev/packages/flutter_launcher_icons\">flutter_launcher_icons</a> is a popular CLI tool which greatly simplifies the task of updating your Flutter app’s launcher icon.</li><li><a href=\"https://pub.dev/packages/smooth_star_rating\">smooth_star_rating</a> offers a compact control for selecting a star rating.</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VB60_VnsDmTKBsewFgus_Q.png\" /><figcaption>Some of the over 10,000 plugins on pub.dev that add everything from business charts, to 2D games engine support to Flutter.</figcaption></figure><p>By the way, if you’re writing a package, make sure you haven’t missed our <a href=\"https://medium.com/flutter/modern-flutter-plugin-development-4c3ee015cf5a\">article on tips and tricks for developing modern plugins</a>. And please fill out our <a href=\"https://google.qualtrics.com/jfe/form/SV_5oNFjVJWGRECS3z?Source=TwoMonths\">quarterly survey</a>, which has a module focused on plugin development.</p><h3>Flutter Day</h3><p>And last, but not least — we recently <a href=\"https://medium.com/flutter/save-the-date-flutter-day-june-25-2020-8e9f5fd03248\">announced Flutter Day</a>, which will take place in just a few weeks time on June 25th. We’ll have three technical sessions, #AskFlutter, and a set of new and updated codelabs to work through, getting you ready for the community-led <a href=\"https://flutterhackathon.com/#/\">#Hack20 hackathon</a> event that kicks off in the weekend that follows.</p><h3>More Good News To Come</h3><p>We’re not done: we have a number of announcements still in the pipeline as part of <a href=\"https://twitter.com/hashtag/fluttergoodnewswednesday\">#FlutterGoodNewsWednesday</a>. So keep tuning in, and if you have some good news of your own to share with us, please don’t hesitate to do so.</p><p>You can reach us at any time on Twitter at <a href=\"https://twitter.com/flutterdev\">@flutterdev</a>. We’d love to hear from you!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a12e60bab782\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/two-months-of-fluttergoodnewswednesday-a12e60bab782\">Two Months of #FlutterGoodNewsWednesday</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-05-26T16:45:57.000Z":{"title":"Improving perceived performance with image placeholders, precaching, and disabled navigation…","link":"https://medium.com/flutter/improving-perceived-performance-with-image-placeholders-precaching-and-disabled-navigation-6b3601087a2b?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6b3601087a2b","category":["performance","flutter","flutter-web"],"dc:creator":"Per Classon","pubDate":"Tue, 26 May 2020 16:45:57 GMT","atom:updated":"2020-05-26T16:45:57.087Z","content:encoded":"<h3>Improving perceived performance with image placeholders, precaching, and disabled navigation transitions</h3><p>Perceived performance is how fast an application feels to the user. This article covers three strategies that you can use in your application to improve perceived performance: image placeholders, precaching images, and disabling navigation transitions.</p><h3>Image placeholders to prevent content from jumping around</h3><p>When a user is waiting for images to load, and then they eventually show up, the layout can shift around. By leaving space in the layout for image placeholders, you can avoid this shifting to ensure a better user experience.</p><p>See the following GIF for an example of how it can look without using any placeholders:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*Pp2MNotBJdSHDcW3Fhz19A.gif\" /><figcaption><a href=\"https://dartpad.dev/embed-flutter.html?gh_owner=perclasson&amp;gh_repo=flutter_code&amp;gh_path=images_jumping_around/lib&amp;theme=dark\">See full interactive example on DartPad.</a></figcaption></figure><p>If you already have a placeholder image cached and loaded in your application you can use the <a href=\"https://api.flutter.dev/flutter/widgets/FadeInImage-class.html\">FadeInImage</a> widget to show placeholders. If you want to use a widget instead of an image as a placeholder, you can achieve this with the <a href=\"https://api.flutter.dev/flutter/widgets/Image/frameBuilder.html\">Image.frameBuiler</a> property.</p><p>The Image.frameBuilder property is responsible for building the Image widget and it has four arguments:</p><ol><li>The build context.</li><li>The image widget child.</li><li>A number representing the frame, which is null when the image is still loading.</li><li>A boolean wasSynchronouslyLoaded that is true if the image is already loaded.</li></ol><p>When implementing a placeholder widget, first check whether the image has already been loaded with wasSynchronouslyLoaded and, if so, return the child. If not, use <a href=\"https://api.flutter.dev/flutter/widgets/AnimatedSwitcher-class.html\">AnimatedSwitcher</a> to create a cross-fade between the placeholder and the image as it loads:</p><pre>class ImageWidgetPlaceholder extends StatelessWidget {<br>  const ImageWidgetPlaceholder({<br>    Key key,<br>    this.image,<br>    this.placeholder,<br>  }) : super(key: key);</pre><pre>  final ImageProvider image;<br>  final Widget placeholder;</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    return Image(<br>      image: image,<br>      frameBuilder: (context, child, frame, wasSynchronouslyLoaded) {<br>        if (wasSynchronouslyLoaded) {<br>          return child;<br>        } else {<br>          return AnimatedSwitcher(<br>            duration: const Duration(milliseconds: 500),<br>            child: frame != null ? child : placeholder,<br>          );<br>        }<br>      },<br>    );<br>  }<br>}</pre><p>After adding placeholders, the layout no longer shifts around, and instead the images fade in as they load:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*ZI2zrU2e21dkkHtn49qskw.gif\" /><figcaption><a href=\"https://dartpad.dev/embed-flutter.html?gh_owner=perclasson&amp;gh_repo=flutter_code&amp;gh_path=images_with_placeholders/lib&amp;theme=dark\">See full interactive example on DartPad.</a></figcaption></figure><h3>Precaching images before they are displayed</h3><p>If your app has a splash or welcome screen before images are shown, you can also precache those images by calling the <a href=\"https://api.flutter.dev/flutter/widgets/precacheImage.html\">precacheImage</a> function.</p><pre>precacheImage(NetworkImage(url), context);</pre><p>The following GIF shows an example of precaching images on a Welcome screen:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*iAiugn-WYkk7620I7TgMVg.gif\" /><figcaption><a href=\"https://dartpad.dev/embed-flutter.html?gh_owner=perclasson&amp;gh_repo=flutter_code&amp;gh_path=precached_images/lib&amp;theme=dark\">See full interactive example on DartPad.</a></figcaption></figure><h3>Disabling navigation transitions on Flutter web</h3><p><a href=\"https://material.io/design/navigation/navigation-transitions.html#about-navigation-transitions\">Navigation transitions</a> occur when a user moves between pages, and it can be a great way to let the user orient themselves in a mobile application. However, for web applications, it’s not something you would typically see. For a perceived performance improvement, you can disable the page transition animation.</p><p>By default, MaterialApp uses page transitions for routing relevant to the platform (slide in upwards for Android or from the side for iOS). To override this behavior, you can create your own <a href=\"https://api.flutter.dev/flutter/material/PageTransitionsTheme-class.html\">PageTransitionsTheme</a> class. To detect when the application runs on the web, use the <a href=\"https://api.flutter.dev/flutter/foundation/kIsWeb-constant.html\">kIsWeb</a> constant. If it is on the web, disable the transition by returning the child:</p><pre>import &#39;package:flutter/foundation.dart&#39;;<br>import &#39;package:flutter/material.dart&#39;;</pre><pre>class NoTransitionsOnWeb extends PageTransitionsTheme {<br>  <a href=\"http://twitter.com/override\">@override</a><br>  Widget buildTransitions&lt;T&gt;(<br>    route,<br>    context,<br>    animation,<br>    secondaryAnimation,<br>    child,<br>  ) {<br>    if (kIsWeb) {<br>      return child;<br>    }<br>    return super.buildTransitions(<br>      route,<br>      context,<br>      animation,<br>      secondaryAnimation,<br>      child,<br>    );<br>  }<br>}</pre><p>Set the pageTransitionsTheme for our MaterialApp:</p><pre>MaterialApp(<br>  theme: ThemeData(<br>    pageTransitionsTheme: NoTransitionsOnWeb(),<br>  ),<br>)</pre><p>The page transition without any animation:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*Db6XWyMRM9gGhSEpHY6w7A.gif\" /><figcaption><a href=\"https://dartpad.dev/embed-flutter.html?gh_owner=perclasson&amp;gh_repo=flutter_code&amp;gh_path=precached_images/lib&amp;theme=dark\">See full interactive example on DartPad.</a></figcaption></figure><h3><strong>Conclusion</strong></h3><p>I hope you found some useful tips in this article for how to improve the perceived performance in an application. This post is a part of a series about what we learned when improving performance for the <a href=\"https://gallery.flutter.dev/#/\">Flutter Gallery</a>. For the <a href=\"https://gallery.flutter.dev/#/\">Flutter Gallery</a>, we disabled the page transitions on the web and added placeholders for images to avoid a layout shift while loading. The implementation is similar to what is described in this article, and if you want to see the code you can find it on <a href=\"https://github.com/flutter/gallery\">GitHub</a>. Thank you for reading!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6b3601087a2b\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/improving-perceived-performance-with-image-placeholders-precaching-and-disabled-navigation-6b3601087a2b\">Improving perceived performance with image placeholders, precaching, and disabled navigation…</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-05-21T15:00:58.000Z":{"title":"Save the Date: Flutter Day, June 25, 2020","link":"https://medium.com/flutter/save-the-date-flutter-day-june-25-2020-8e9f5fd03248?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/8e9f5fd03248","category":["flutter","flutterday"],"dc:creator":"Chris Sells","pubDate":"Thu, 21 May 2020 15:00:58 GMT","atom:updated":"2020-05-21T15:00:58.709Z","content:encoded":"<h4>24 hours of supported codelabs with video streams from the Flutter team</h4><p>As a team, we’re used to plenty of travel, hanging out at various events and user groups, and connecting with folks in person; we miss our time with the Flutter community! So, while we’re not able to get together face-to-face, we’re going to do the next best thing: bring the gathering to you with a dedicated day of Flutter.</p><p>Flutter Day (<a href=\"http://g.co/FlutterDay\">g.co/FlutterDay</a>) starts at 9am Pacific Time on June 25th, 2020 and goes for 24 hours worldwide, enjoying all things Flutter: the technology, ecosystem and most importantly, the community.</p><p>First and foremost, we’ve got codelabs, both existing ones that have been lovingly updated and brand new ones! Whether you’re new to Flutter or a seasoned pro, you’re going to find something you like in this list. And to make sure you get the help you need, we’ll have a 24-hour support channel for you to get your codelab questions answered.</p><p>Then, we’ve got three one-hour video streams for you spread throughout the day so that you’ll find something no matter what time zone you’re in. We’ll recap and expand on some of the news we’ve announced over the last few weeks for both Flutter and Dart, focusing on front-end design and development with Flutter and showing some demos that we think you’ll like. And we want to hear from you — we’ve dedicated some time for the ever-popular #AskFlutter, where you get to connect with members of the team on topics that you want to hear more about.</p><p>We have a great lineup, including engineers, PMs, and developer advocates from the Flutter and Dart teams.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*siIoSIIiPLyDxPTP\" /></figure><p>For the Flutter Day details and to let us know that you’re interested in participating, <a href=\"http://g.co/flutterday\">register on the Flutter Day website today</a>!</p><h3>Flutter Day Near You</h3><p>Of course, Flutter Day is for everyone, so we’re also coordinating with local Flutter user groups around the world to gather all of the virtual meetups going on to recognize Flutter Day.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RDn0t0fyTKSy2x_k\" /></figure><p>No matter where you live, you’ll be able to find a local Flutter virtual meetup near you.</p><h3>Get Ready for Hack20</h3><p>And as if that weren’t enough, this year we’re teaming up with <a href=\"https://flutterhackathon.com/#/\">the #Hack20 International Flutter Hackathon</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*vValokazzfj52F2N\" /></figure><p>Right after you’re done with the day of Flutter codelabs, you’re ready to jump into a weekend of Flutter hacking with prizes for the best app and featuring mentors from the Flutter community.</p><h3>Something for Everyone</h3><p>Whether you’re trying Flutter for the first time, or a seasoned veteran, Flutter Day has something for you. Hang out with Flutter fans from around the world, get your Flutter questions answered, enjoy some Flutter content from around the world, and then spend the weekend at a hackathon. Don’t forget to register your interest and see the details at <a href=\"http://g.co/FlutterDay\">g.co/FlutterDay</a> today.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8e9f5fd03248\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/save-the-date-flutter-day-june-25-2020-8e9f5fd03248\">Save the Date: Flutter Day, June 25, 2020</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-05-20T14:59:07.000Z":{"title":"Flutter Package Ecosystem Update","link":"https://medium.com/flutter/flutter-package-ecosystem-update-d50645f2d7bc?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/d50645f2d7bc","category":["flutter-plugin","flutter","flutter-package"],"dc:creator":"Chris Sells","pubDate":"Wed, 20 May 2020 14:59:07 GMT","atom:updated":"2020-05-21T14:37:44.800Z","content:encoded":"<h4>New Flutter Favorites, Apple Sign In, and bringing prerelease Flutter plugins into production</h4><p>The Flutter team at Google has exactly one job: to unblock developers building beautiful, native applications across multiple platforms. When Flutter was new, the team accomplished that goal by focusing on a few initial customers. This resulted in the production of a portable rendering engine for text and graphics. Next up was to expand its reach, which the team accomplished by appealing to developers with a fast workflow combining the power of the Dart platform, Flutter APIs designed for ease-of-use, and native compilation across Android and iOS. As the customer base grew, so did their needs, motivating the team to leverage Dart’s pub.dev to provide a Flutter package manager and discovery mechanism that connected package authors with app developers.</p><p>This last step is especially important because it enabled the Flutter community to help each other without the Flutter team getting in the way. Nobody has to ask before they publish or use a package on <a href=\"https://pub.dev/\">pub.dev</a>. On the other hand, to foster this kind of ecosystem, it’s important to have a trusted agent that establishes the infrastructure on which modern Flutter apps are built. The Flutter team at Google provides the trusted platform on which the Flutter community can continue to grow and thrive.</p><h3>Package Publishers, Ratings and Favorites</h3><p>To help make the Flutter packages ecosystem trustworthy, we expose a number of metrics about each package on pub.dev:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8aAcj-L2pE08dBil\" /></figure><p>This is a screenshot of <a href=\"https://pub.dev/packages/provider\">the provider package</a>, which is at the top when it comes to popularity and quality in the Flutter ecosystem. This screenshot shows off several of the metrics we use to signal quality on pub.dev. The blue shield next to the domain name is the <a href=\"https://dart.dev/tools/pub/verified-publishers\">Verified Publisher</a> and lets you know that a package was published by someone whose identity has been verified. The thumbs-up icon and the number next to it shows the number of Likes, which lets you know how other members of the community feel about this package. And finally, the logo on the far right marks the package as a Flutter Favorite, which indicates a package that you should consider first when building your apps. As just one comparison, the average likeability of an actively maintained package over the last three months is 12 likes, whereas for a Flutter Favorite, it’s 270 likes. To find the highest quality packages, <a href=\"https://flutter.dev/docs/development/packages-and-plugins/favorites#metrics\">the Flutter Favorite measures</a> combine the pub.dev score along with a number of objective and subjective measures for quality, usability, and broad applicability, including an engineering code review from one of the contributors to the Flutter framework itself.</p><p>Because of the high bar, the Flutter Favorite designation is something you won’t see very often — it only appears on <a href=\"https://pub.dev/flutter/favorites\">a handful of packages</a>. Today I’m pleased to announce that the list has grown to include the following: <a href=\"https://pub.dev/packages/bloc\">bloc</a> and <a href=\"https://pub.dev/packages/flutter_bloc\">flutter_bloc</a>, <a href=\"https://pub.dev/packages/convex_bottom_bar\">convex_bottom_bar</a>, <a href=\"https://pub.dev/packages/geolocator\">geolocator</a>, <a href=\"https://pub.dev/packages/google_fonts\">google_fonts</a>, <a href=\"https://pub.dev/packages/location\">location</a>, and <a href=\"https://pub.dev/packages/sign_in_with_apple\">sign_in_with_apple</a>. Congratulations to all of those authors and thank you very much for your contributions to the Flutter package ecosystem.</p><h3>Sign In with Apple</h3><p>One of the most notable plugins from this round of Flutter Favorite awards is <a href=\"https://pub.dev/packages/sign_in_with_apple\">the sign_in_with_apple plugin</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/584/0*jAThFFycWDnklih_\" /></figure><p>Not only is it of high quality and broad applicability, but it fills an important gap in the Flutter feature set. <a href=\"https://developer.apple.com/news/?id=03262020b\">Apple has announced</a> that apps that use other third-party authentication, such as Google Sign In, must also enable Apple Sign In by June 30, 2020 to be accepted in the App Store. Obviously this was crucial functionality to provide for any Flutter developer targeting iOS, but instead of the Flutter team at Google building its own plugin to fill this gap, we leaned on our community. Reaching out to Timm Preetz and Henri Beck, the authors of sign_in_with_apple, we found them to be very responsive and quickly brought the plugin up to the required bar in record time.</p><h3>Increasing Quantity and Quality</h3><p>It’s only with the maturity and diversity of the Flutter package ecosystem that we were able to work with the community to achieve something like the sign_in_with_apple plugin. If you look at the number of Flutter-dependent packages over time, you can see the growth of the ecosystem.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wGtSijeLPe4ZesC5\" /><figcaption><em>Number of Flutter-dependent packages since the 1.0 release</em></figcaption></figure><p>Normally, you’d expect such amazing growth to be accompanied by an overall decrease in quality. However, the Flutter community is seeing just the opposite trend.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/676/0*TBaT0BabySTA5w7A\" /><figcaption><em>Percentage of high quality Flutter-dependent packages since 1.0 release</em></figcaption></figure><p>Here we’re measuring quality as the health and maintenance portion of the overall score on pub.dev. As you can see, since the Flutter 1.0 release, the overall quality of the package ecosystem has increased despite the enormous growth.</p><h3>Moving Google Flutter Plugins to 1.0</h3><p>It’s not just the community that produces plugins. A team of Googlers working on Flutter also provide <a href=\"https://pub.dev/publishers/flutter.dev/packages\">a set of plugins</a>. Many of those plugins are marked as Flutter Favorite packages, indicating high quality, including <a href=\"https://pub.dev/packages/shared_preferences\">shared_preferences</a>, <a href=\"https://pub.dev/packages/path_provider\">path_provider</a>, <a href=\"https://pub.dev/packages/url_launcher\">url_launcher</a> and more. However, those plugins are not all marked as “1.0”; for example, shared_preferences is marked as “0.5.7+2”, which may seem unintuitive when it comes to plugins we consider ready for production use. The reason lies in how Dart handles versions:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DcTQUTlLWP5XY08S\" /></figure><p>By convention, we advise developers to use the caret syntax when depending on a package, for example: ^current-version. This syntax is interpreted by ‘flutter pub get’ to mean “I’d like the highest available version equal to or greater than the version I’ve specified without changing the major version.” This is <a href=\"https://medium.com/@nex3/pubgrub-2fb6470504f\">Dart’s implementation</a> of <a href=\"https://semver.org/\">semantic versioning</a>, which states that major versions are to be used for breaking changes and should be chosen explicitly. However, in the case of this set of Flutter plugins maintained by Google, we’ve stabilized the API such that it’s safe to specify the version string to include 1.x versions, which you can do in your pubspec.yaml like so:</p><pre>dependencies:</pre><pre>  shared_preferences: <strong>‘&gt;=0.5.7+2 &lt;2.0.0’</strong></pre><p>For this set of plugins, you can use the following version strings to prepare for v1.0 instead of the conventional versions:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/892/1*xL8xSvDmpOJNRi8v-uLmmA.png\" /></figure><p>Until your pubspec.yaml is updated along these lines, if we were to bump the version numbers to 1.0.0, your apps and dependent packages won’t get the updates. And that’s fine for 1.0, since it’s not going to be different than the 0.x version listed above, but what about 1.1 and beyond? That’s why you want to make these changes.</p><p>In some cases, we can help. For example, there are 181 packages on pub.dev that depend on shared_preferences. If your app depends on shared_preferences &lt;2.0.0 and also depends on another package that in turn depends on shared_preferences &lt;1.0.0, then the Dart version solver is never going to give you 1.0.0 (or 1.1.0 or …). However, instead of waiting and hoping for the authors of these 181 packages to read this blog post and update their dependency version string for all of the plugins listed above, we’re actively working to submit PRs to the git repositories that contain the packages’ pubspec.yaml to match the version strings in the table above. That way, when we flip the version number to 1.0.0 on the set of Google Flutter plugins currently at 0.x, your apps will be all set and the packages that you depend on will be all set, too.</p><h3>Bringing Google Flutter Plugins to Production</h3><p>You may have noticed that not all of Google Flutter plugins are listed in the discussion above, like Firebase, Camera, Video Player, etc. That’s because we’ve got some more work to do on some plugins to bring them up to production quality; for example, the Firebase plugins need better, more thorough documentation as well as faster build times and simpler configuration. To help us get there, I’m happy to announce that we’ve engaged with <a href=\"http://invertase.io\">Invertase</a>, a UK-based consulting firm with deep expertise in Dart and Flutter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lfpUSCU8N0mJf1BH\" /></figure><p>In the coming months, Invertase is going to help us bring the remaining Google Flutter plugins to production quality. If you’d like more details on the Firebase plugins specifically, you can read about Invertase’s plans on <a href=\"https://github.com/FirebaseExtended/flutterfire/issues/2582\">the FlutterFire repo</a>.</p><h3>Summary</h3><p>The Flutter package manager is a thriving ecosystem, with a growing number of packages to fill the gaps that the Googlers on the Flutter team could never possibly manage themselves. Luckily, with the signals on pub.dev, including the score, ratings and the Flutter Favorite designation, as well as our partnership with Invertase, you can have confidence that you’ll have the quality signals you need to find the right packages for your next Flutter app. With all the power provided by the packages on pub.dev, what are you going to build?</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d50645f2d7bc\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/flutter-package-ecosystem-update-d50645f2d7bc\">Flutter Package Ecosystem Update</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-05-19T13:57:49.000Z":{"title":"Optimizing performance in Flutter web apps with tree shaking and deferred loading","link":"https://medium.com/flutter/optimizing-performance-in-flutter-web-apps-with-tree-shaking-and-deferred-loading-535fbe3cd674?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/535fbe3cd674","category":["flutter-web","performance","flutter","material-design"],"dc:creator":"Per Classon","pubDate":"Tue, 19 May 2020 13:57:49 GMT","atom:updated":"2020-05-19T15:05:18.857Z","content:encoded":"<p>For the best user experience it is important that an app loads fast. The initial load time of a Flutter web application can be improved by minimizing its JavaScript bundle. The Dart compiler includes features such as tree shaking and deferred loading, both of which minimize the JavaScript bundle. This article explains how they work and how you can use them in your application.</p><h3>Tree shaking by default</h3><p>When compiling a Flutter web application, the JavaScript bundle is generated by the <a href=\"https://dart.dev/tools/dart2js\">dart2js</a> compiler. A release build has the <a href=\"https://github.com/flutter/flutter/blob/7b1d24216e00eaa58ca04cc2d8911329fea991be/packages/flutter_tools/lib/src/build_system/targets/web.dart#L200\">highest level of optimization</a>, which includes tree shaking your code.</p><p><a href=\"https://en.wikipedia.org/wiki/Tree_shaking\">Tree shaking</a> is the process of eliminating dead code, by only including code that is guaranteed to be executed. This means that you do not need to worry about the size of your app’s included libraries because unused classes or functions are excluded from the compiled JavaScript bundle.</p><p>To see tree shaking in action:</p><ol><li>Create a Dart file greeter.dart:</li></ol><pre>abstract class Greeter {<br>  String greet(String name);<br>}</pre><pre>class EnglishGreeter implements Greeter {<br>  String greet(String name) =&gt; &#39;Hello $name!&#39;;<br>}</pre><pre>class SwedishGreeter implements Greeter {<br>  String greet(String name) =&gt; &#39;Hej $name!&#39;;<br>}</pre><pre>void main() {<br>  print(EnglishGreeter().greet(&#39;World&#39;));<br>}</pre><p>2. Run dart2js -O4 greeter.dart in your terminal and take a look at the generated output out.js.</p><p>In the generated JavaScript code, there aren’t any references to the SwedishGreeter class, or any inclusion of the string Hej $name, as it was removed during tree shaking by the compiler.</p><p>The compiler can only figure out what code is reachable, and what is dead code, with static analysis. Take the following example, where the greeter is defined depending on the system locale:</p><pre>Locale locale = Localizations.localeOf(context);<br>if (locale.languageCode == &#39;sv&#39;) {<br>  greeter = SwedishGreeter();<br>} else {<br>  greeter = EnglishGreeter();<br>}</pre><p>The compiler doesn’t know the user’s system locale, therefore both EnglishGreeter and SwedishGreeter are included in the JavaScript bundle. For such use cases deferred loading can help in minimizing the initial bundle size.</p><h3>Only load code when needed with deferred loading</h3><p><a href=\"https://dart.dev/guides/language/language-tour#deferred-loading\">Deferred loading</a>, also called lazy loading, allows you to load libraries if and when needed. It can be used to load rarely-used functionality of an application. Please note that deferred loading is a dart2js feature, so this is not available for Flutter mobile applications. In the simplest case, mark an imported package or file as deferred and wait for it to load before using it:</p><pre>import &#39;greeter.dart&#39; deferred as greeter;</pre><pre>void main() async {<br>  await greeter.loadLibrary();<br>  runApp(App(title: greeter.EnglishGreeter().greet(&#39;World&#39;)));<br>}</pre><p>Compiling this code generates two JavaScript files. When loadLibrary is called on the deferred import, it loads the greeter library.</p><p>In Flutter, where everything is a widget, you might want to make use of the <a href=\"https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html\">FutureBuilder</a>. A widget’s build method is expected to be synchronous, therefore you can’t call await on loadLibrary inside of a build method. However, you can return a FutureBuilder in a build method, and you can also use it to show a different UI while the library is loading:</p><pre>import &#39;greeter.dart&#39; deferred as greeter;</pre><pre>FutureBuilder(<br>  future: greeter.loadLibrary(),<br>  builder: (context, snapshot) {<br>    if (snapshot.connectionState == ConnectionState.done) {<br>      return Text(greeter.greet(&#39;World&#39;));<br>    } else {<br>      return Text(&#39;Loading...&#39;);<br>    }<br>  },<br>)</pre><p>To try it yourself (see a <a href=\"https://github.com/perclasson/flutter_code/tree/master/deferred_loading\">full example on GitHub</a>), open Chrome DevTools and click the <a href=\"https://developers.google.com/web/tools/chrome-devtools/network\"><strong>Network</strong> tab</a> to inspect network activity. Reload the page to see when the library is loaded and imported. In the following screenshot, loading the main.dart.js_1.part.js file is deferred:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Z8CmvWbWVXUb9Wy4\" /></figure><h3>Deferred loading of localizations in the Flutter Gallery</h3><p>The <a href=\"http://gallery.flutter.dev/\">Flutter Gallery</a> supports over 70 languages, but most users only use one. Deferring the loading of the localization strings is a great use of this feature. For example, after implementing deferred loading of localization strings in Flutter Gallery, the app’s initial JavaScript bundle size was cut in half. If you have a lot of localization strings in your Flutter web application, consider deferring the loading of those files. The <a href=\"https://github.com/flutter/flutter/blob/master/dev/tools/localization/bin/gen_l10n.dart\">gen_l10n.dart script</a> includes the flag --use-deferred-loading for this purpose (currently only available on the 1.19 SDK master channel).</p><p>This post is a part of a series about what we learned when improving performance for the <a href=\"https://gallery.flutter.dev/#/\">Flutter Gallery</a>. I hope you found it useful and that you learned something that you can apply to your Flutter web application!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=535fbe3cd674\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/optimizing-performance-in-flutter-web-apps-with-tree-shaking-and-deferred-loading-535fbe3cd674\">Optimizing performance in Flutter web apps with tree shaking and deferred loading</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-05-15T23:57:09.000Z":{"title":"What are the important & difficult tasks for Flutter devs? — Q1 2020 survey results","link":"https://medium.com/flutter/what-are-the-important-difficult-tasks-for-flutter-devs-q1-2020-survey-results-a5ef2305429b?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/a5ef2305429b","category":["developer-experience","mobile-development","surveys","flutter"],"dc:creator":"JaYoung Lee","pubDate":"Fri, 15 May 2020 23:57:09 GMT","atom:updated":"2020-05-15T23:57:09.902Z","content:encoded":"<h3>What are the important &amp; difficult tasks for Flutter devs? — Q1 2020 survey results</h3><p><em>Written by </em><a href=\"https://medium.com/@jayoung.lee\"><em>JaYoung Lee</em></a><em> and </em><a href=\"https://medium.com/@youyanghou\"><em>Youyang Hou</em></a></p><p>Every quarter, we survey Flutter developers to better understand how you’re using Flutter and what we can improve. Today we’re posting the results of the eighth quarterly survey, which took place in February 2020. We received about 6,000 responses over 8 days and were happy to learn that an all-time high of 94.5% of developers report positive satisfaction with Flutter. While we ask some questions every quarter to understand longitudinal trends, this quarter’s survey had a specific focus on identifying key tasks that are important and difficult to the users. Before we jump into the results, here are some other interesting findings.</p><h3>About Flutter users</h3><p>First, we learned that users are more satisfied with Flutter’s core framework (+2%) and ecosystem (+4%) than last quarter. But user satisfaction with the animation framework dropped slightly (-3%). To learn more about why this happened, we’ll ask a few more questions about your experience with the animation framework in the next survey. In the meantime, check out the “<a href=\"https://www.youtube.com/watch?v=GXIJJkq_H8g&amp;list=PLjxrf2q8roU2v6UqYlt_KPaXlnjbYySua\">Making Animations in Flutter</a>” playlist from our YouTube channel. All of these videos were recently released.</p><p>Next, about half of the respondents said that they’ve published apps with Flutter (51%). This number has been continuously growing — about a year ago, it was 34%. Those who published an app had a higher satisfaction rate with Flutter than those who haven’t.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*cqbZUVzw4XSlZyJR\" /><figcaption><em>Satisfaction with Flutter by the stage of app development. Developers who have published a Flutter app were more satisfied with Flutter than those who haven’t.</em></figcaption></figure><p>Similarly, when we asked about their primary purpose for using Flutter, 48% of the respondents said that they are using Flutter for their main job. This number is also growing. A year ago, it was 30%. The number of users evaluating Flutter for potential production use has been decreasing, from 36% in 2019 to 25% in 2020. This implies that many of the users have completed evaluation and adopted Flutter for more serious purposes.</p><p>Finally, we found that 69% of the developers who have published a complete production app are building both iOS and Android apps. 16% said that they are trying Web, in addition to the two mobile platforms. Currently, there are approximately 50,000 Flutter apps published in the Play Store. This number has been growing exponentially, and we hope to see this trend continue in the coming months.</p><p>For more stats, insights, and future plans, see the “<a href=\"https://medium.com/flutter/flutter-spring-2020-update-f723d898d7af\">Flutter Spring 2020 Update</a>” article.</p><h3>About tasks</h3><p>Some of the survey respondents were invited to take a longer survey. As a result, 43% of the respondents (N = 2,598) answered a set of questions where we asked for their thoughts on 29 Flutter-related tasks. The tasks covered UI development, framework and tooling, ecosystem, performance and troubleshooting, and testing and optimization. All 29 tasks in these areas were deemed to be critical to Flutter users. Yet, we hypothesized that some of the tasks are more important and difficult than others and thus require more attention from the team.</p><p>We structured the survey so that a random half of the selected respondents were asked which of the tasks are important to them, and another half of the respondents were asked which of the tasks are difficult to accomplish. By dividing the respondents into two groups (aka “between-subject design”), we were able to reduce the total number of questions asked to each person. Also, by asking users to rate the importance and difficulty of the tasks, we are able to identify top priority tasks that are both important and difficult to Flutter developers. Below is the quadrant that the team used to decide what to do with each of the tasks.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/681/0*vABPU2mLHiRog8Vw\" /><figcaption><em>Importance-difficulty quadrant supports decision making.</em></figcaption></figure><p>The following tasks were ranked to be the top 6 most important tasks. It is notable that the important tasks were widely spread across different stages of app development, from performance and testing to UI development.</p><ul><li>Debug errors and crashes in my Flutter app</li><li>Test my app to ensure it works on the range of platforms</li><li>Choose a state management approach for my Flutter app</li><li>Understand and resolve layout issues (such as text overflow)</li><li>Create UI based on design spec provided by a UX UI designer</li><li>Troubleshoot platform-specific issues with my Flutter app</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OfKgvG4OS6Jt7Wum\" /><figcaption><em>Relative importance of tasks. Blue dots are estimated importance scores for individuals, red dots are averages.</em></figcaption></figure><p>The tasks below were ranked to be the top 6 most difficult tasks. We found several tasks related to troubleshooting and performance are difficult for Flutter professional developers. Most of the UI-related tasks were rated to be not very difficult.</p><ul><li>Troubleshoot platform-specific issues with my Flutter app</li><li>Diagnose and fix memory issues in my Flutter app</li><li>Diagnose and fix CPU usage issues in my Flutter app</li><li>Add an existing platform-specific native API to my Flutter app</li><li>Diagnose and fix UI jank in my Flutter app</li><li>Develop a Flutter plugin (with a platform-specific implementation)</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*nPtVnwI_F22HmC_F\" /><figcaption><em>Relative difficulty of tasks. Blue dots are estimated importance scores for individuals, red dots are averages.</em></figcaption></figure><p>As you can see, some tasks appeared in the list of both highly important and difficult tasks (such as “troubleshooting platform-specific issues with my Flutter app”). This knowledge is valuable to the Flutter team, because they can prioritize these areas based on user input, and not by guesswork.</p><p>In addition, because Flutter usage is growing fast among enterprise customers (26% of the survey respondents work for an enterprise), we ran an additional analysis to find unique challenges that are specific to developers from larger companies. For this group of developers, we found that reducing app size, adding Flutter to an existing app (i.e. add-to-app), choosing state management techniques, understanding and resolving layout issues were more important and difficult than for other users.</p><p>The Flutter team is now better aware of tasks that you consider both important <em>and</em> difficult and will use this input to guide development focus. In addition, the team is going to keep track of improvements over time, and will re-grade the tasks to ensure that each step of development is healthy and well-supported.</p><h3>What’s next?</h3><p>One of the joys of working on an open source project like Flutter is having a community that is willing to offer insights and provide suggestions to improve the product, whether in surveys or by other forms of feedback such as GitHub issues. And so, we want to say a particular thank you to those of you who filled out the survey. Several of us read through every comment that was submitted.</p><p>We hope that these reports demonstrate that we’re deeply interested in understanding your feedback. For the next quarterly survey, we plan to follow up on some of the insights from this survey, in particular we seek a better understanding of the tasks that were highlighted above as important yet difficult. Please look out for the next survey, which will be available soon.</p><p>Flutter’s UX research team is also running a wide variety of user experience studies to make your experience with Flutter more pleasant. If you are interested in participating in future studies, please <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe0i4De809KXVCdljGKrjMj3lxhuzbuFKCtY5PEQPCYtGxFMg/viewform\">sign up</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a5ef2305429b\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/what-are-the-important-difficult-tasks-for-flutter-devs-q1-2020-survey-results-a5ef2305429b\">What are the important &amp; difficult tasks for Flutter devs? — Q1 2020 survey results</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-05-13T15:01:00.000Z":{"title":"Announcing Adobe XD support for Flutter","link":"https://medium.com/flutter/announcing-adobe-xd-support-for-flutter-4b3dd55ff40e?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/4b3dd55ff40e","category":["adobe","adobe-xd","flutter","design","prototyping"],"dc:creator":"Tim Sneath","pubDate":"Wed, 13 May 2020 15:01:00 GMT","atom:updated":"2020-05-13T17:26:18.459Z","content:encoded":"<h4>Create in XD and export to working Flutter code</h4><p>Our goal with Flutter is to provide a rich canvas for creative expression. With native performance on iOS and Android, full control over every pixel rendered on the screen, and the ability to iterate rapidly with stateful hot reload, we want to unleash the potential of designers and developers to build beautiful experiences that aren’t limited by artificial technical boundaries.</p><p>Last year at our <a href=\"https://www.youtube.com/watch?v=HjZxyTJzvYg&amp;feature=emb_logo\">Flutter Interact event</a>, we turned the spotlight on creators who are using Flutter to explore and experiment. We heard from digital artists like <a href=\"https://www.youtube.com/watch?v=DEppSs_ko48\">Robert Felker</a>, who uses Flutter to build ethereal forms with generative algorithms. We presented <a href=\"https://flutter.gskinner.com/\">the work of creative agencies like gskinner</a>, who created a series of innovative vignettes to demonstrate the potential of Flutter. And we saw a demonstration from Adobe of an <a href=\"https://www.youtube.com/watch?v=ukLBCRBlIkk&amp;feature=youtu.be&amp;t=3652\">early prototype of a plugin for Adobe XD</a> that exports Flutter code directly from their tool.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*llO5f0NhDCAp5Y7j.png\" /><figcaption>Flutter is a rich canvas for creative expression: a toolkit for beautiful, native experiences that aren’t limited by traditional technical boundaries. (Generative artwork built with Flutter, courtesy of Robert Felker.)</figcaption></figure><p>Today, <strong>we’re delighted to join Adobe in announcing that their XD to Flutter plugin is </strong><a href=\"https://adobe.com/go/xd_plugins_discover_plugin?pluginId=6eaf77ea\"><strong>now available as early access</strong></a> for broader public testing. <a href=\"https://www.adobe.com/products/xd.html\">Adobe XD</a> is a UI/UX design and collaboration tool that helps teams create and share designs for websites, apps, voice interfaces, games, and more. Part of Adobe’s class-leading <a href=\"https://www.adobe.com/creativecloud.html\">Creative Cloud</a>, XD allows designers to turn vector art, text, images, microinteractions, and animations into interactive prototypes that behave like working software products. The ability to export designs to Flutter further reduces the latency between creative ideas and product development, as an XD prototype can now become working Flutter code within minutes. Adobe XD supports design on Windows or macOS, and includes a <a href=\"https://www.adobe.com/products/xd/compare-plans.html\">free starter plan</a> to get you up and running.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Vjx2GfxTsr8Imvew\" /><figcaption>Exporting from Adobe XD to Flutter is now just a plugin away.</figcaption></figure><h3>Exporting Flutter code from Adobe XD</h3><p>Using the Flutter plugin in XD is straightforward. You can either export an individual drawing or component, or an artboard. Here’s how.</p><p>Start by installing the <a href=\"https://adobe.com/go/xd_plugins_discover_plugin?pluginId=6eaf77ea\">Flutter exporter plugin</a>. From Adobe XD, choose <em>Plugins &gt; Discover Plugins</em>, and search for Flutter. Once you’ve installed it, you can display the UI Panel shown in the screenshot above by choosing <em>Plugins &gt; Flutter &gt; UI Panel</em>.</p><p>Now add the <a href=\"https://pub.dev/packages/adobe_xd\">adobe_xd</a> package to your Flutter project by including it in your pubspec.yaml app manifest. This package provides helper functions to minimize boilerplate in the generated XD code.</p><p>To export a single element, simply select the individual widget you’d like to export to Flutter, and choose the <em>Copy Selected </em>button from the UI panel. This copies the relevant Dart code to your clipboard, which you can use as the basis for a stateless or stateful widget:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ADItKKHZGWwawDHa\" /><figcaption>Exported code can be integrated into your existing project and updated without reworking other files.</figcaption></figure><p>Another approach is to export the entire project. Assuming you’ve already got a Flutter app that you want to load the content into (including the adobe_xd package reference in pubspec.yaml), you can simply choose <em>Plugins &gt; Flutter &gt; Export All Widgets</em> from the UI panel, and set any additional configuration options you want.</p><p>This creates a series of classes in the lib/ subdirectory of your project, which you can then use directly. You can continue to tweak the XD prototype and export again with ⇧⌘F (Ctrl+Shift+F on Windows) and, if you have enabled the Dart <a href=\"https://dartcode.org/docs/settings/#dartpreviewhotreloadonsavewatcher\"><em>Hot Reload on Save Watcher</em> setting</a> in Visual Studio Code, your app automatically reloads with any updates when you re-export the widgets.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/818/0*N-K68XqE0DBUV0EK\" /><figcaption>Having a fast turnaround from XD to code gives you a new way to turn prototypes into apps.</figcaption></figure><p>As an early access preview, there are of course some limitations, which are described in the <a href=\"https://github.com/AdobeXD/xd-to-flutter-plugin/blob/master/README.md\">release notes</a>. One notable limitation is that responsive layout is not yet available, pending completion of a new XD API. But you’ll automatically get updates to the plugin as new features like this become available.</p><p>It’s been great working with Adobe on this. We’re thrilled to have them supporting Flutter, and the <a href=\"https://adobexdplatform.com/plugin-docs/\">new JavaScript-based APIs</a> make extending Adobe XD easy for everyone. Here’s what they have to say about this new plugin:</p><blockquote><em>“At Adobe, we’re always looking to simplify the designer-to-developer workflow that pains so many teams designing and building apps. Today, we’re excited to release an early access preview of the work that’s come out of our partnership with Flutter to remove guesswork, accelerate decision making, and help teams bring new experiences to market faster.”</em></blockquote><blockquote>- Vijay Vachani, Senior Director of Creative Cloud Platform &amp; Ecosystem, Adobe</blockquote><p>For more information, visit <a href=\"https://github.com/AdobeXD/xd-to-flutter-plugin\">Adobe’s page for the XD to Flutter plugin</a>. We’re looking forward to seeing what you create with it!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4b3dd55ff40e\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/flutter/announcing-adobe-xd-support-for-flutter-4b3dd55ff40e\">Announcing Adobe XD support for Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-10-22T22:25:59.000Z":{"title":"Dart sound null safety: technical preview 2","link":"https://medium.com/flutter/null-safety-flutter-tech-preview-cb5c98aba187?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/cb5c98aba187","category":["programming","dart","null-safety","announcements","flutter"],"dc:creator":"Michael Thomsen","pubDate":"Thu, 22 Oct 2020 22:25:59 GMT","atom:updated":"2020-10-22T22:25:59.356Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Announcing null-safe support for the Flutter framework</h4><p>Dart serves a special role in Flutter, powering developer features such as hot reload, and enabling multi-platform apps for mobile, desktop, and web via Dart’s flexible compiler technology. We strive to make the Dart language the most productive for Flutter app developers; for example, we added <a href=\"https://medium.com/dartlang/announcing-dart-2-3-optimized-for-building-user-interfaces-e84919ca1dff\">UI-as-code language constructs</a> to optimize the Dart syntax for coding Flutter widget trees.</p><p>In June we offered a <a href=\"https://medium.com/dartlang/announcing-sound-null-safety-defd2216a6f3\">first tech preview</a> of null safety for Dart. Today is another major milestone, which we’ve <a href=\"https://medium.com/dartlang/announcing-dart-2-10-350823952bd5\">looked forward to</a> for a while: We’re announcing a second tech preview of <strong>sound null safety</strong>, including support for the Flutter framework.</p><p>Null safety is a major new productivity feature that helps you avoid null exceptions, a class of bugs that are often hard to spot. As an added bonus, this feature also enables a range of performance improvements. We’re really looking forward to your feedback.</p><h3>Why null safety?</h3><p>Dart is a type-safe language. This means that when you get a variable of some type, the compiler can guarantee that it is of that type. But type safety by itself doesn’t guarantee that the variable is not null.</p><p>Null errors are very common. A search on GitHub leads to thousands of issues caused by unexpected nulls in Dart code, and even more thousands of commits trying to fix those issues. Try to see if you can spot the nullability problems in the following Flutter app, imagining that Config and WeatherService are backend services used by the app:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1965e36d06ffb1ff9dd35aec84050724/href\">https://medium.com/media/1965e36d06ffb1ff9dd35aec84050724/href</a></iframe><p>This app will certainly fail if getAppName() returns a null; in that case we’ll pass a null to the Text widget used in the title of AppBar.</p><p>But there are more subtle cases to consider: getTemperatures() could also return null. In that case the for-loop will fail. Or getTemperatures() could return a list as expected, but that list might contain null values, in which case we’ll call round() on null, and the app will fail.</p><p>The null safety feature makes these problems go away by <a href=\"https://nullsafety.dartpad.dev/28f1db5ef4401d9e063375e5c58f0f86\">validating your code</a> as you’re typing:</p><figure><img alt=\"Screenshot of the preceding code with null errors.\" src=\"https://cdn-images-1.medium.com/max/1024/0*FE-q5RdXwPgtRVE5\" /><figcaption>With null safety, Dart finds potential null errors in your code.</figcaption></figure><p>With null safety, you can reason about your code with more confidence. No more pesky runtime null dereferencing errors in deployed apps. Instead, you get static errors as you code.</p><h3>Null safety principles</h3><p>Dart null safety support is based on the following three core design principles:</p><ol><li><strong>Non-nullable by default</strong>. Unless you explicitly tell Dart that a variable can be null, it will be considered non-nullable. We chose this as the default because we found that non-null was by far the most common choice in APIs.</li><li><strong>Incrementally adoptable</strong>. There’s a lot of Dart code out there. It will be possible to migrate to null safety at a time when you choose to, and then incrementally, part by part. It will be possible to have null-safe and non-null-safe code in the same project. We’ll also provide tools to help you with the migration.</li><li><strong>Fully sound</strong>. Dart’s null safety is <em>sound</em>. This means that we can trust the type system: if it determines that something isn’t null, then it can <em>never</em> be null. This enables compiler optimizations. Once you migrate your whole project and your dependencies to null safety, you reap the full benefits of soundness — not only fewer bugs, but smaller binaries and faster execution.</li></ol><p>Let’s review these design principles in more detail.</p><h3>1. Non-nullable by default</h3><p>The core syntax is simple enough. Here are some non-nullable variables, declared in different ways. Remember, non-nullable is the default, so these declarations look like they do today, but their meaning changes.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/079238103c1142e62388962925f3ce71/href\">https://medium.com/media/079238103c1142e62388962925f3ce71/href</a></iframe><p>Dart will make sure that you never assign null to any of the above variables. If you try to do widget = null a thousand lines later, you’ll get a static analysis error and red squiggly lines, and your program will refuse to compile.</p><h4>Nullable variables</h4><p>If you want your variable to be nullable, you can use ?, like this:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/bdba421eef4db0e24cfd7962ca7376be/href\">https://medium.com/media/bdba421eef4db0e24cfd7962ca7376be/href</a></iframe><p>You can use the ? syntax in function parameters and return values, too:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1efb02aa225d7d667a6a256a0d4da14e/href\">https://medium.com/media/1efb02aa225d7d667a6a256a0d4da14e/href</a></iframe><p>But, once again, the dream is that you’ll rarely have to use ?. The majority of your types will be non-nullable.</p><h4>Being productive with null safety</h4><p>Null safety isn’t just about safety. We also want you to be productive when using the feature, which means that the feature must be easy to use. For example, look at this code, which uses if to check for a null value:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a93e5bf7e89acc67e564ec05c1cd5bb5/href\">https://medium.com/media/a93e5bf7e89acc67e564ec05c1cd5bb5/href</a></iframe><p>Note how the Dart tools can detect that by the time we pass that if-statement, the loudness variable cannot be null. And so Dart lets us call the clamp() method without jumping through hoops. This convenience is enabled by something called flow analysis: the Dart analyzer goes through your code as if it was executing it, figuring out additional information about your code automatically.</p><p>Here’s another example, which shows a case where Dart can be sure that a variable is non-null because we always assign a non-null value to it:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a7af8dc629471794b1f43b4c5b9fe541/href\">https://medium.com/media/a7af8dc629471794b1f43b4c5b9fe541/href</a></iframe><p>If you remove any of the assignments above (for example, by deleting the line statusText = &#39;Update failed&#39;;), Dart cannot guarantee that statusText will be non-null: you’ll get a static error and your code won’t compile. You can <a href=\"https://nullsafety.dartpad.dev/ecc0f87fa5af5cc7ff30d8bd3e3b12e2\">give this a try in DartPad</a>.</p><h3>2. Incrementally adoptable</h3><p>Because null safety is such a fundamental change to our typing system, it would be extremely disruptive if we insisted on forced adoption. We want to let you decide when the time is right, so null safety is an opt-in feature: you’ll be able to use the latest Dart and Flutter releases without being forced to enable null safety before you’re ready to do so. You can even depend on packages that have already enabled null safety from an app or package that hasn’t yet.</p><p>Once you choose to adopt, we strongly recommend migrating code in order, with the leaves of the dependency graph being migrated first. For example, if C depends on B which depends on A, migrate A to null safety first, then B, then C. This order applies whether A, B, and C are libraries, packages, or apps.</p><p>Why is the order important? Although you can make some progress migrating code before your dependencies migrate, you risk having to do a second migration pass if your dependencies change their APIs during their migration. When we get to the beta release, we’ll provide tools to help you find out which of your dependencies have migrated. If you’re a package author, then to avoid the risk of breaking your APIs, wait until all of your dependencies have migrated before you publish a null-safe version.</p><p>When your dependencies are ready, you can use our migration tool. The tool works by analyzing all of your existing code. The migration tool is interactive, so you can review the nullability properties that the tool has inferred. If you disagree with any of the tool’s conclusions, you can add nullability hints to change the inference. Adding a few migration hints can have a huge impact on migration quality.</p><figure><img alt=\"Screenshot of the migration tool\" src=\"https://cdn-images-1.medium.com/max/1024/0*vRDfouqMsEojq6t9\" /><figcaption>The migration tool helps you interactively migrate your code to null safety.</figcaption></figure><h3>3. Fully sound</h3><p>Once you’ve fully migrated, Dart’s null safety is <strong>sound</strong>. This means that Dart is 100% sure that in the above examples, the return variables, lists, and elements cannot be null. When Dart analyzes your code and determines that a variable is non-nullable, that variable is <strong>always</strong> non-nullable: if you inspect your running code in the debugger, you’ll see that non-nullability is retained at runtime. By contrast, some other implementations are unsound, and in many cases still need to perform runtime null checks. Dart shares <strong><em>sound</em> null safety</strong> with Swift, but not very many other programming languages.</p><p>The soundness of Dart’s null safety has another welcome implication: it means your programs can be smaller and faster. Because Dart is really sure that non-nullable variables are never null, Dart can optimize. For example, the Dart ahead-of-time (AOT) compiler can produce smaller and faster native code, because it doesn’t need to add checks for nulls when it knows that a variable isn’t null.</p><p>Note that to get sound null safety, you’ll need to migrate your whole project and all of your dependencies to null safety. If part of your app or dependencies haven’t been migrated you’ll get partial null safety, which retains most of the checks but isn’t fully optimized and doesn’t guarantee that the app is fully safe.</p><h3>The null safety roadmap</h3><p>When might null safety be ready for production use? Here is the current timeline:</p><ol><li><strong>Flutter experimentation with <em>technical preview 2</em></strong>: This is today. Because we’ve successfully migrated the core Flutter framework to null safety, you’re able to try null safety to learn the new language feature and experiment with a <a href=\"https://github.com/flutter/samples/tree/master/experimental/null_safety\">small Flutter sample</a>. If you’re a package author, you may also be able to do a trial migration, if you have a small dependency set that’s already been migrated by us. You need to pass an <a href=\"https://dart.dev/tools/experiment-flags\">experiment flag</a>, shouldn’t use it in production, and shouldn’t publish any migrated packages.</li><li><strong>Early package migration with <em>beta</em></strong>: Later this year, we’ll complete performance tuning and have sufficient test coverage to give us confidence that the feature works as intended, and that backwards compatibility is solid. At that time we’ll publish a beta version of the feature, and you won’t need to pass the experiment flag. We hope to see package owners begin migration of their packages to null safety, which will give us one last round of validation that the feature is ready for a stable release.</li><li><strong>Production use with <em>stable</em></strong>: Next, we’ll address feedback from beta, fix any remaining issues, and then publish to stable. It’s hard to state a concrete timeline for this, but we’re thinking early next year. Once the feature is stable, we hope to see lots of adoption of null safety, with null-safe apps published to stores and many null-safe packages published to pub.dev in stable versions.</li></ol><h3>Try it now</h3><p>You can start experimenting with null safety today! To get started quickly, check out this special version of <a href=\"https://nullsafety.dartpad.dev/\">DartPad with null safety</a>.</p><p>If you’d like to try null safety in VS Code, Android Studio, or the terminal, check out the <a href=\"https://github.com/flutter/samples/tree/master/experimental/null_safety\">Flutter null safety sample app</a>. This app contains execution instructions and two versions of a small weather app: one that doesn’t use null safety and has a few sporadic null errors in it, and one that uses null safety to ensure that these issues are handled. If you prefer experimenting with a new Flutter app, you can run flutter create and then follow the <a href=\"https://github.com/flutter/flutter/wiki/Experimenting-with-null-safety-in-Flutter\">experiment instructions</a> to enable null safety. Note that you will need a dev-channel Flutter SDK (version 1.24.0–3.0.pre or later), as the current stable and beta versions of Flutter don’t support null safety.</p><p>To learn more about the feature design, read our new <a href=\"https://dart.dev/null-safety/understanding-null-safety\">Understanding null safety</a> documentation. If you prefer a short video, check out <a href=\"https://www.youtube.com/watch?v=ZxSyZHq8gUg&amp;feature=youtu.be&amp;list=PLjxrf2q8roU1rBlI9vz01K2324nzIhYgp&amp;t=322\">the null safety video</a> from the <a href=\"https://events.withgoogle.com/flutter-day/#content\">Flutter Day event</a> a few months ago.</p><p>We’re very happy to bring sound null safety to Dart. Sound null safety is a distinctive feature of Dart that helps you write less error-prone code and get better performance. We hope you’ll <a href=\"https://github.com/flutter/flutter/wiki/Experimenting-with-null-safety-in-Flutter\">experiment</a> with the feature in tech preview, and <a href=\"https://github.com/dart-lang/sdk/issues/new?title=Null%20safety%20feedback:%20[issue%20summary]&amp;labels=NNBD&amp;body=Describe%20the%20issue%20or%20potential%20improvement%20in%20detail%20here\">give us feedback</a> through our issue tracker. Happy coding!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cb5c98aba187\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/null-safety-flutter-tech-preview-cb5c98aba187\">Dart sound null safety: technical preview 2</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-10-20T19:29:40.000Z":{"title":"Flutter on the web, slivers, and platform-specific issues: user survey results from Q3 2020","link":"https://medium.com/flutter/flutter-on-the-web-slivers-and-platform-specific-issues-user-survey-results-from-q3-2020-f8034236b2a8?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f8034236b2a8","category":["user-experience","developer-experience","flutter"],"dc:creator":"JaYoung Lee","pubDate":"Tue, 20 Oct 2020 19:29:40 GMT","atom:updated":"2020-10-21T22:02:20.021Z","content:encoded":"<p><em>Written by the Flutter UXR team (</em><a href=\"https://medium.com/@jayoung.lee\"><em>JaYoung Lee</em></a><em>, </em><a href=\"https://medium.com/@youyanghou\"><em>Youyang Hou</em></a><em>, </em><a href=\"https://medium.com/@jackhimself\"><em>Jack Kim</em></a><em>, </em><a href=\"https://medium.com/@taodong\"><em>Tao Dong</em></a><em>)</em></p><p>In August 2020, the Flutter team launched its 10ᵗʰ quarterly user survey. Over 10 days, 7,668 users responded to the survey globally. Each user spent about 7.4 minutes to complete the survey, which equals 39.4 days of developer time. We deeply appreciate the time everyone took to provide feedback to us, and we want to share the results with you.</p><p>Like we always do, we asked about your level of satisfaction with various parts of Flutter. This quarter, we also focused on getting feedback about additional topics, such as Flutter on the web, slivers (widgets for rich scrolling effects), and debugging platform-specific issues. We cover each of the topics in more detail in this article. If you’re interested, read on!</p><p><strong>Summary</strong></p><ul><li>94% of the respondents were positively satisfied (PSAT) with Flutter overall, and 58% were very satisfied (VSAT). While PSAT is stable, VSAT is increasing continuously.</li><li>The percentage of users working for enterprise companies increased from 26% to 31%. The proportion of advanced users is increasing as well.</li><li>59% of those who worked with Flutter on the web in the last 3 months were positively satisfied with the performance of it. 71% were positively satisfied with Flutter’s ability to create a UI that feels natural on the web.</li><li>79% of the users who wanted to implement rich scrolling effects with slivers tried using them. The biggest issue (36%) was difficulty finding the widget that met their needs.</li><li>71% of the users have experience debugging platform-specific issues. The common issues were with tooling (32%), visual differences (28%), and dependency management issues (28%).</li></ul><h3>Satisfaction and changes in user base</h3><p>The percentage of users that were <em>very satisfied</em> with Flutter hit a record high at 58% this quarter. Overall, Flutter users continued to be satisfied with the product (94%), even with the exponential growth of the community. The following graph shows how the level of satisfaction with Flutter has progressed over time.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*k_YiDB0OZTd8WQI2\" /><figcaption><em>58% of the users selected “Very satisfied” for the question asking, “Overall, how satisfied are you with Flutter?”</em></figcaption></figure><p>There were some notable changes to our user base. First, the percentage of users working for enterprise companies increased significantly to 31%, from 26% in Q1 and Q2, while the percentage of users working for start-ups remained stable at around 35% during this period.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*mTLE89U4VUtGDnEI\" /><figcaption><em>While most of the Flutter users are working for start-ups, the percentage of developers working for enterprises increased significantly from 26% to 31%.</em></figcaption></figure><p>Another notable change was in the perceived level of experience with Flutter. As you can see in the following graph, the proportion of novice users decreased over time, while the proportion of advanced users increased over time. This means that we have more experienced users in our community who can help share their knowledge with novice users. If you’re interested in gaining or sharing knowledge, you can participate in online conversations with other Flutter developers. Visit the <a href=\"https://flutter.dev/community\">Community tab</a> on flutter.dev.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_CopRAy_n9COQGqR\" /><figcaption><em>The proportion of advanced users is increasing continuously.</em></figcaption></figure><h3>Flutter on the web</h3><p>Flutter supports web development in beta, in addition to supporting mobile in the stable channel. In this survey, we asked about specific issues early adopters had regarding performance, web-like experience, workflows, and documentation, so that we can prioritize important issues.</p><p>Survey respondents were actively using Flutter to build web apps. About 33% said they have either evaluated Flutter on the web for potential production use (15%), have built a demo (11%), or published a production app (7%), as shown in the third row of the following graph.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*R7aSejQwaxUY2W9L\" /><figcaption><em>33% of the users (1,468 out of 4,449) reported that they have either evaluated Flutter on the web for production (15%), have built a demo </em>(11%), <em>or published a production app (7%).</em></figcaption></figure><p>More specifically, 29.5% of the users who had both mobile and web experience used Flutter on the web more seriously (for potential production) in the last 3 months. The percentage varied depending on the developers’ prior experience with the platforms. It appears that the respondents with web-only backgrounds were trying Flutter as an alternative web framework (22% tried Flutter on the web for potential production), and the respondents with mobile-only backgrounds were actively trying Flutter on the web as a gateway to web development (16% tried Flutter on the web).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*C0d4X2FddTe0fC6A\" /><figcaption><em>The percentage of users who tried Flutter on the web for production in the last 3 months varied depending on their prior experience with mobile and web platforms.</em></figcaption></figure><p>The Flutter web team also collected feedback regarding various issues around creating a web-like experience. First, we learned that the respondents found browser navigation and routing history (55%), copying/pasting selected text (34%), scrolling physics (33%), and selecting text (32%) as the most critical in creating a web-like experience. Respondents also asked for better documentation for routing and adapting mobile layouts to the web.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8WXtO7Mx_n5Gs0m_\" /><figcaption><em>Users selected “browser navigation and routing history” as the most critical feature in creating a web-like experience using Flutter.</em></figcaption></figure><p>The Flutter team is actively making improvements based on the feedback we receive. To address the top user issues around navigation and routing, the team recently released <a href=\"https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade\">Navigator 2</a>. We also added support for <a href=\"https://github.com/flutter/flutter/issues/47234\">copying/pasting selectable text</a>, and have plans to improve the <a href=\"https://github.com/flutter/flutter/projects/173#card-43620465\">selectable text</a> functionality (especially for rich text). We are continuing our efforts to enhance scrolling physics and performance based on issues reported by the community.</p><p>Finally, the team received feedback around workflows, performance, and third-party APIs. Within basic workflows, respondents found debugging the most difficult. Page loading speed and scrolling were the most common performance issues respondents ran into. Respondents wanted Flutter on the web to have better support for local storage (for example, SQLite), Firebase storage, and Google Maps. These areas will shape up as the team makes progress in Flutter on the web.</p><h3>Slivers</h3><p>Sliver widgets (widgets that start with “Sliver” such as SliverAppBar and SliverList) are used to create rich scrolling effects. While many scrolling effects can be achieved with widgets like ListView, GridView, PageView, or AnimatedList, sliver widgets help customize the scroll view and achieve a more beautiful UI.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/408/0*a-qk7SfiAnHAq2vU\" /><figcaption><em>You can achieve rich scrolling effects like this with sliver widgets.</em></figcaption></figure><p>The Flutter team has heard different stories about users’ experience with slivers. Some said that they don’t use slivers in their apps, and some said that they need more slivers to implement various effects. So, the team decided to add questions to this quarter’s survey, to better understand how Flutter users work with slivers.</p><p>The first thing we learned was that more users design their UIs with simple scrolling effects (49%) than with rich scrolling effects (39%). (An example of a simple scrolling effect and an example of a rich scrolling effect were presented in the survey.) For those who need rich scrolling effects, 78% said that they need slivers to implement the effects they want.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YNnoQE06DVStrvWV\" /><figcaption><em>More users design their UIs with simple scrolling effects (49%) than with rich scrolling effects (39%).</em></figcaption></figure><p>Out of those who needed slivers, 20% said that they haven’t tried slivers. What’s more interesting to us is that 35% of the users who said that they tried to use slivers had issues with slivers. When we asked about the biggest issues for them, as shown in the following graph, the discovery issue was the biggest (36%), followed by the learning issue (30%), and then the usability issue (19%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-P_8Vyu4EMCZ4ji0\" /><figcaption><em>Discovery was the biggest issue for sliver users, followed by the learning issue, and the usability issue.</em></figcaption></figure><p>Because we do not want you to compromise your UI as a consequence of these issues, we plan to update <a href=\"https://flutter.dev/\">flutter.dev</a>, so that the sliver widgets and relevant information about slivers are easier to find and easier to learn. If you’re looking for new slivers that aren’t in the Flutter framework, consider using community packages, such as <a href=\"https://pub.dev/packages/sliver_tools\">sliver_tools</a> or <a href=\"https://pub.dev/packages/sticky_headers\">sticky_headers</a>. The Flutter community always welcomes your contribution to this area as well.</p><p>In the meantime, if you’re new to slivers and want to learn more, visit the following resources:</p><ul><li><a href=\"https://medium.com/flutter/slivers-demystified-6ff68ab0296f\">Slivers, demystified</a> (Medium article)</li><li><a href=\"https://www.youtube.com/watch?v=Mz3kHQxBjGg\">Slivers explained — making dynamic layouts</a> (The Boring Flutter Development Show on YouTube, Ep. 12)</li></ul><h3>Debugging platform-specific issues</h3><p>In the <a href=\"https://medium.com/flutter/what-are-the-important-difficult-tasks-for-flutter-devs-q1-2020-survey-results-a5ef2305429b\">previous survey</a>, we found that <em>troubleshooting platform specific issues</em> and <em>testing apps across platforms</em> are the most difficult tasks for Flutter developers. Although we saw some bugs related to platform-specific issues, we didn’t know the relative priorities of the issues and if they’re bundled in themes or spread out. To find the true reasons why troubleshooting and testing are difficult to perform, we added questions that ask what specific issues users encountered.</p><p>First, we asked which platform-specific issues users debugged. We found the most <em>common</em> platform-specific issues are tooling issues (32%), visual differences in different platforms (28%), dependency management issues (28%), behavioral differences in different platforms (27%), plugin behavior differences in different platforms (26%), and missing native features (25%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YB3J0hC7A6F7NdXE\" /><figcaption><em>The most common platform-specific issues are tooling issues, visual differences, and dependency management issues.</em></figcaption></figure><p>Survey respondents also rated the importance and difficulty of each of the issues they debugged. The most <em>important</em> issues to debug are missing native features, performance discrepancies, behavioral differences, plugin behavior differences, and release issues. The most <em>difficult</em> issues to debug are missing native features, device-specific issues, performance discrepancies, dependency management, and tooling issues.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*WdHGeM6kI6hqtQGw\" /><figcaption><em>The importance and difficulty of platform-specific issues. (The error bar represents the 95% confidence interval.)</em></figcaption></figure><p>Regarding testing apps across multiple platforms, 85% of the respondents said that it’s very or extremely <em>important</em>. Yet, it was very or extremely <em>difficult</em> for 27% of the respondents. So, testing apps across multiple platforms is important, but most developers don’t feel it’s a big blocker for them. From the open-ended comments, we learned that the most common testing issues included difficulty testing for iOS (especially for Windows developers), testing for multiple screen sizes, and testing on multiple physical devices.</p><p>Our team will invest more time in the next quarter to aggressively reduce our bug queue and address major issues around tooling, dependency management, and release. We will also keep improving documentation around those areas. For example, we will improve documentation about how to use such as CI tools such as (for example, GitHub Actions and Bitrise) that help users to better test their to test apps on iOS.</p><h3>What’s next?</h3><p>Your input influences our decision-making every day. We will continue this tradition of basing our decisions on what you tell us in these surveys. So, please, continue to participate and share your thoughts. Flutter’s UX research team is also running a wide variety of user experience (UX) studies, to make your experience with Flutter more pleasant. If you are interested in participating in a study, <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe0i4De809KXVCdljGKrjMj3lxhuzbuFKCtY5PEQPCYtGxFMg/viewform\">sign up</a> to be considered for a future study.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f8034236b2a8\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-on-the-web-slivers-and-platform-specific-issues-user-survey-results-from-q3-2020-f8034236b2a8\">Flutter on the web, slivers, and platform-specific issues: user survey results from Q3 2020</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-10-15T19:34:38.000Z":{"title":"Testable Flutter and Cloud Firestore","link":"https://medium.com/flutter/testable-flutter-and-cloud-firestore-1cf2fbbce97b?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/1cf2fbbce97b","category":["dependency-injection","flutter","firebase","cloud-firestore","testing"],"dc:creator":"Craig Labenz","pubDate":"Thu, 15 Oct 2020 19:34:38 GMT","atom:updated":"2020-10-15T19:34:38.392Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pQJzBr81G169df-ffo24Cg.png\" /></figure><h3>Why Cloud Firestore?</h3><p>The <a href=\"https://firebase.flutter.dev/\">FlutterFire</a> tech stack, consisting of Flutter and Firebase (and specifically Cloud Firestore), unlock unprecedented development velocity as you build and launch your app. In this article, you’ll explore a robust integration between these two technologies with a focus on testing and using clean architectural patterns. However, instead of jumping straight to the final implementation, you’ll build your way there, one step at a time, so the reasoning behind each step is clear.</p><h3>What you’ll build</h3><p>To demonstrate a clean way to implement Cloud Firestore as your app’s backend, you’ll build a modified version of the classic Flutter counter app. The only difference is that the timestamp of each click is stored in Cloud Firestore, and the count displayed is derived from the number of persisted timestamps. You’ll use Provider and ChangeNotifier to keep the dependencies and state management code clean, and you’ll update the generated test to keep the code <em>correct</em>!</p><h3>Before you get started</h3><p>This article assumes that you have <a href=\"https://www.youtube.com/watch?v=Mx24wiPilHg\">watched and followed the steps in this tutorial</a> to integrate your app with Firebase. To recap:</p><ol><li>Create a new Flutter project, and call it firebasecounter.</li><li>Create a Firebase app <a href=\"https://console.firebase.google.com/\">in the Firebase console</a>.</li><li>Link your app to iOS and/or Android, depending on your development environment and target audience.</li></ol><blockquote>Note: If you configure your app to work on an Android client, make sure that you <a href=\"https://gist.github.com/henriquemenezes/70feb8fff20a19a65346e48786bedb8f\">create a </a><a href=\"https://gist.github.com/henriquemenezes/70feb8fff20a19a65346e48786bedb8f\">debug.keystore file</a> before generating your SHA1 certificate.</blockquote><p>After you generate your iOS or Android apps in Firebase, you are ready to proceed. The rest of the video contains great content that you will likely need for real projects, but it’s not required for this tutorial.</p><h3>In case you get stuck</h3><p>If any of the steps in this tutorial do not work for you, consult <a href=\"https://github.com/craiglabenz/flutter-firestore-counter\">this public repo</a>, which breaks down the changes into distinct commits. Throughout the tutorial, you will find links to each commit where appropriate. Feel free to use this to verify that you’ve followed along as intended!</p><h3>Create a simple state manager</h3><p>To begin the process of integrating your app with Cloud Firestore, you must first refactor the generated code so that the initial StatefulWidget communicates with a separate class instead of its own attributes. This allows you to eventually instruct that separate class to use Cloud Firestore.</p><p>Next to your project’s auto-generated main.dart file, create a new file named counter_manager.dart, and copy the following code in it:</p><pre>class CounterManager {<br>  /// Create a private integer to store the count. Make this private<br>  /// so that Widgets can&#39;t modify it directly, but instead must <br>  /// use official methods.<br>  int _count = 0;</pre><pre>  /// Publicly accessible reference to our state.<br>  int get count =&gt; _count;</pre><pre>  /// Publicly accessible state mutator.<br>  void increment() =&gt; _count++;<br>}</pre><p>With this code in place, add the following line to the top of firebasecounter/lib/main.dart:</p><pre>import &#39;package:firebasecounter/counter_manager.dart&#39;;</pre><p>Then, change _MyHomePageState’s code to this:</p><pre>class _MyHomePageState extends State&lt;MyHomePage&gt; {<br>  final manager = CounterManager();</pre><pre>  void _incrementCounter() {<br>    setState(() =&gt; manager.increment());<br>  }</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    return Scaffold(<br>      appBar: AppBar(<br>        title: Text(widget.title),<br>      ),<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: &lt;Widget&gt;[<br>            Text(&#39;You have pushed the button this many times:&#39;),<br>            Text(<br>              &#39;${manager.count}&#39;,<br>              style: Theme.of(context).textTheme.headline4,<br>            ),<br>          ],<br>        ),<br>      ),<br>      floatingActionButton: FloatingActionButton(<br>        onPressed: _incrementCounter,<br>        tooltip: &#39;Increment&#39;,<br>        child: Icon(Icons.add),<br>      ),<br>    );<br>  }<br>}</pre><p>After saving this code change, your app might appear to crash and show a red error screen. This is because you introduced a new variable, manager, whose opportunity to be initialized has passed. This is a common experience with Flutter when you change the way your state <em>is initialized</em>, and is easily solved with a hot restart.</p><p>After a hot restart, you should be back where you started: at a count of 0 and able to click the Floating Action Button as much as you want.</p><p>This is a good time to run the single test that Flutter provides in any new project. You can find its definition at test/widget_test.dart, and execute it by running:</p><pre>$ flutter test</pre><p>Assuming that the test passes, you should be ready to continue!</p><blockquote>Note: If you got stuck in this section, compare your changes to <a href=\"https://github.com/craiglabenz/flutter-firestore-counter/commit/483dd3b3833bf710b04db4a3ba347b1d1ecbe5de\">this commit</a> in the tutorial’s repo.</blockquote><h3>Persist timestamps</h3><p>The initial app description mentioned persisting the timestamp of each click. So far, you haven’t added any infrastructure to satisfy that second requirement, so create another new file named app_state.dart, and add the following class:</p><pre>/// Container for the entirety of the app&#39;s state. An instance of <br>/// this class should be able to inform what is rendered at any<br>/// point in time.<br>class AppState {<br>  /// Full click history. For super important auditing purposes.<br>  /// The count of clicks becomes this list&#39;s `length` attribute.<br>  final List&lt;DateTime&gt; clicks;</pre><pre>  /// Default generative constructor. Const-friendly, for optimal <br>  /// performance.<br>  const AppState([List&lt;DateTime&gt; clicks])<br>      : clicks = clicks ?? const &lt;DateTime&gt;[];<br>      <br>  /// Convenience helper.<br>  int get count =&gt; clicks.length;</pre><pre>  /// Copy method that returns a new instance of AppState instead<br>  /// of mutating the existing copy.<br>  AppState copyWith(DateTime latestClick) =&gt; AppState([<br>    latestClick,<br>    ...clicks,<br>  ]);<br>}</pre><p>From this point forward, the AppState class’s job is to represent the state of what should be rendered. The class contains no method that can mutate itself, only a single copyWith method that other classes will use.</p><p>Keeping testing in mind, you can begin making changes to the CounterManager concept. Having a single class won’t work in the long run, because the app eventually interacts with Cloud Firestore. Yet you don’t want to create real records every time you run the tests. To that end, you need an abstract interface that defines how the app should behave.</p><p>Open counter_manager.dart again, and add the following code at the top of the file:</p><pre>import &#39;package:firebasecounter/app_state.dart&#39;;</pre><pre>/// Interface that defines the functions required to manipulate<br>/// the app state.<br>///<br>/// Defined as an abstract class so that tests can operate on a <br>/// version that does not communicate with Firebase.<br>abstract class ICounterManager {<br>  /// Any `CounterManager` must have an instance of the state <br>  /// object.<br>  AppState state;</pre><pre>  /// Handler for when a new click must be stored. Does not require <br>  /// any parameters, because it only causes the timestamp to <br>  /// persist.<br>  void increment();<br>}</pre><p>The next step is to update CounterManager to explicitly descend from ICounterManager. Update its definition to this:</p><pre>class CounterManager implements ICounterManager {<br>  AppState state = AppState();</pre><pre>  void increment() =&gt; state = state.copyWith(DateTime.now());<br>}</pre><p>At this point, our helper code looks pretty good, but main.dart has fallen behind. There is no reference to ICounterManager in main.dart, when, in fact, that is the <em>only</em> Manager class it should know about. In main.dart, update apply the following changes:</p><ol><li>Add the missing import to the top of the main.dart:</li></ol><pre>import &#39;package:firebasecounter/app_state.dart&#39;;</pre><p>2. Update _MyHomePageState as follows:</p><pre>class _MyHomePageState extends State&lt;MyHomePage&gt; {<br>  final ICounterManager manager;<br>  _MyHomePageState({@required this.manager});</pre><pre>  void _incrementCounter() =&gt; setState(() =&gt; manager.increment());</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    return Scaffold(<br>      appBar: AppBar(<br>        title: Text(widget.title),<br>      ),<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: &lt;Widget&gt;[<br>            Text(&#39;You have pushed the button this many times:&#39;),<br>            Text(<br>              &#39;${manager.state.count}&#39;,<br>              style: Theme.of(context).textTheme.headline4,<br>            ),<br>          ],<br>        ),<br>      ),<br>      floatingActionButton: FloatingActionButton(<br>        onPressed: _incrementCounter,<br>        tooltip: &#39;Increment&#39;,<br>        child: Icon(Icons.add),<br>      ),<br>    );<br>  }<br>}</pre><p>This change should remove any red squiggly lines in your IDE from _MyHomePageState, but now MyHomePage complains because its createState() method doesn’t supply all required arguments to _MyHomePageState. You could make MyHomePage require this variable and pass the object through to its State-based class, but that could lead to long chains of widgets requiring and passing objects that they don’t actually care about, simply because some descendent widget requires it and some ancestor widget supplies it. Clearly, this needs a better strategy.</p><p>Enter: <a href=\"https://pub.dev/packages/provider\">Provider</a></p><h3>Using Provider to access application state</h3><p>Provider is a library that streamlines the use of Flutter’s InheritedWidget pattern. Provider allows a widget high in your widget tree to be directly accessible by all of its descendants. This may feel like a global variable, but the alternative is to pass your data models down through every intermediate widget, many of whom will have no intrinsic interest in them. This “variables <a href=\"https://en.wikipedia.org/wiki/Bucket_brigade\">bucket brigade</a>” anti-pattern blurs your app’s separation of concerns and can make refactoring layouts unnecessarily tedious. InheritedWidget and Provider bypass those problems by allowing widgets anywhere in your widget tree to get the data models they need directly.</p><p>To add Provider to your application, open pubspec.yaml, and add it under the dependencies section:</p><pre>dependencies:<br>  flutter:<br>    sdk: flutter<br>  # Add this<br>  provider: ^4.3.2+2</pre><p>After adding that line to your pubspec.yaml file, run the following to download Provider onto your machine:</p><pre>$ flutter pub get</pre><p>Next to main.dart, create a new file named dependencies.dart and copy the following code into it:</p><pre>import &#39;package:firebasecounter/counter_manager.dart&#39;;<br>import &#39;package:flutter/material.dart&#39;;<br>import &#39;package:provider/provider.dart&#39;;</pre><pre>class DependenciesProvider extends StatelessWidget {<br>  final Widget child;<br>  DependenciesProvider({@required this.child});</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    return MultiProvider(<br>      providers: [<br>        Provider&lt;ICounterManager&gt;(create: (context) =&gt; CounterManager()),<br>      ],<br>      child: child,<br>    );<br>  }<br>}</pre><p>A few notes about DependenciesProvider:</p><ol><li>It uses MultiProvider, despite having only one entry in its list. This technically could be collapsed to a single Provider widget, but a real app will likely contain many such services, so it’s often best to start with MultiProvider right away.</li><li>It requires a child widget, which follows the Flutter convention for widget composition and allows us to insert this helper near the top of the widget tree, making the ICounterManager instance available to the entire app.</li></ol><p>Next, make the new DependenciesProvider available to the entire app. A simple way to do this is to wrap the entire MaterialApp widget with it. Open main.dart, and update the main method to look like this:</p><pre>void main() {<br>  runApp(<br>    DependenciesProvider(child: MyApp()),<br>  );<br>}</pre><p>You also need to import dependencies.dart in main.dart:</p><pre>import &#39;package:firebasecounter/dependencies.dart&#39;;</pre><h3>Using a Consumer widget</h3><p>You already saw the MultiProvider widget in action (which is really just a nicer way to declare a series of single Provider widgets). The next step is to access the ICounterManager object by using the <a href=\"https://pub.dev/documentation/provider/latest/provider/Consumer-class.html\">Consumer</a> widget.</p><h3>Dependency injection</h3><p>If you’ve written a Flutter application using Cloud Firestore, then you probably discovered that Firestore can make good unit tests harder to write. After all, how do you avoid generating real records in your database when a Firestore integration is wired directly into your widget tree?</p><p>If you’ve had this experience, then you found the limitations of baking your dependencies directly into your UI code, which, in Flutter’s case, is widgets. This is the power of dependency injection: if your widgets accept helper classes that facilitate their interaction with dependencies (like Firebase, the device’s file system, or even network requests), then you can supply mocks or fakes instead of the real classes during tests. This allows you to test whether your widgets behave as expected without waiting on slow network requests, filling up your filesystem, or incurring Firebase billing charges.</p><p>To achieve this, you need to refactor the app so that there is a clean point where the tests can inject fakes that mimic real Cloud Firestore behavior. Luckily, the Consumer widget is perfect for this job.</p><p>Open main.dart and replace your MyApp widget with the following code:</p><pre>class MyApp extends StatelessWidget {<br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      title: &#39;Flutter Demo&#39;,<br>      theme: ThemeData(<br>        primarySwatch: Colors.blue,<br>        visualDensity: VisualDensity.adaptivePlatformDensity,<br>      ),<br>      home: Consumer&lt;ICounterManager&gt;(<br>        builder: (context, manager, _child) =&gt; MyHomePage(<br>          manager: manager,<br>          title: &#39;Flutter Demo Home Page&#39;,<br>        ),<br>      ),<br>    );<br>  }<br>}</pre><p>Also, import Provider at the top of main.dart:</p><pre>import &#39;package:provider/provider.dart&#39;;</pre><p>Wrapping MyHomePage in a Consumer widget allows you to reach arbitrarily high in the widget tree to access the desired resources and inject them into the widgets that need them. It may feel like unnecessary work in this tutorial, because you only reach back one layer to MyApp(), but this could stretch through dozens of widgets in real production apps.</p><p>Next, in the same file, make this edit to MyHomePage:</p><blockquote>Note: Don’t worry if you see a red screen after saving this change. More edits are needed to complete the refactor!</blockquote><pre>class MyHomePage extends StatefulWidget {<br>  final ICounterManager manager;<br>  MyHomePage({@required this.manager, Key key, this.title}) : super(key: key);</pre><pre>  final String title;</pre><pre>  @override<br>  _MyHomePageState createState() =&gt; _MyHomePageState();<br>}</pre><p>This simple constructor change allows the code to accept the variable passed in the previous snippet.</p><p>Finally, complete the refactor by making this edit to _MyHomePageState:</p><pre>class _MyHomePageState extends State&lt;MyHomePage&gt; {</pre><pre>  // No longer expect to receive a `ICounterManager object`</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    return Scaffold(<br>      appBar: AppBar(<br>        title: Text(widget.title),<br>      ),<br>      body: Center(<br>        child: Column(<br>          mainAxisAlignment: MainAxisAlignment.center,<br>          children: &lt;Widget&gt;[<br>            Text(&#39;You have pushed the button this many times:&#39;),<br>            Text(<br>              // Reference `widget.manager` instead of<br>              // `manager` directly<br>              &#39;${widget.manager.state.count}&#39;,<br>              style: Theme.of(context).textTheme.headline4,<br>            ),<br>          ],<br>        ),<br>      ),<br>      floatingActionButton: FloatingActionButton(<br>        // Reference `widget.manager` instead of `manager` directly<br>        onPressed: () =&gt; setState(() =&gt; widget.manager.increment()),<br>        tooltip: &#39;Increment&#39;,<br>        child: Icon(Icons.add),<br>      ),<br>    );<br>  }<br>}</pre><blockquote>Note: You will likely have to perform a hot restart to fix your app.</blockquote><p>As you might recall, all State objects contain a reference to their containing StatefulWidget wrappers in the widget attribute. Thus, the _MyHomePageState object can access this new manager attribute by changing its code from manager to widget.manager.</p><p>And, that’s it! You’ve injected dependencies into the widgets that need them instead of hardcoding production implementations.</p><h3>Test the app</h3><p>If you run flutter test right now, you’ll see that the test suite no longer passes. When you inspect widget_test.dart, the reason might be clear: the test function instantiates MyApp(), but doesn’t wrap it with DependenciesProvider like you did in the real code, so the Consumer widget added within MyApp cannot find a satisfying Provider in its ancestor widgets.</p><p>This is where dependency injection begins to pay dividends. Instead of mimicking the production code in tests (by wrapping MyApp with DependenciesProvider), change the test to initialize MyHomePage. Update widget_test.dart to look like this:</p><pre>import &#39;package:firebasecounter/counter_manager.dart&#39;;<br>import &#39;package:flutter/material.dart&#39;;<br>import &#39;package:flutter_test/flutter_test.dart&#39;;</pre><pre>import &#39;package:firebasecounter/main.dart&#39;;</pre><pre>void main() {<br>  testWidgets(&#39;Counter increments smoke test&#39;, (WidgetTester tester) async {<br>    // Build our app and trigger a frame.<br>    await tester.pumpWidget(<br>      MaterialApp(<br>        home: MyHomePage(<br>          manager: CounterManager(),<br>          title: &#39;Test Widget&#39;,<br>        ),<br>      ),<br>    );</pre><pre>    // Verify that our counter starts at 0.<br>    expect(find.text(&#39;0&#39;), findsOneWidget);<br>    expect(find.text(&#39;1&#39;), findsNothing);</pre><pre>    // Tap the &#39;+&#39; icon and trigger a frame.<br>    await tester.tap(find.byIcon(Icons.add));<br>    await tester.pump();</pre><pre>    // Verify that our counter has incremented.<br>    expect(find.text(&#39;0&#39;), findsNothing);<br>    expect(find.text(&#39;1&#39;), findsOneWidget);<br>  });<br>}</pre><p>By using a MyHomePage instance directly (along with a wrapping MaterialApp to provide valid BuildContext objects), you have set yourself up to have a unit-tested integration to Cloud Firestore!</p><blockquote>Note: If you got stuck in this section, compare your changes to <a href=\"https://github.com/craiglabenz/flutter-firestore-counter/commit/bb68c1d3bb3746eca5f2dea16bd799c98ff232f1\">this commit</a> in the tutorial’s repo.</blockquote><h3>Implementing Cloud Firestore</h3><p>So far, you’ve moved around a lot of code and introduced several helper classes, but you haven’t changed anything about how the app works. The good news is that everything is in place to begin writing some code that knows about Cloud Firestore. To start, open pubspec.yaml, and add these two lines:</p><pre>dependencies:<br>  # Add this<br>  cloud_firestore: ^0.14.1<br>  # Add this<br>  firebase_core: ^0.5.0<br>  flutter:<br>    sdk: flutter<br>  provider: ^4.3.2+2</pre><p>As always when you apply changes to pubspec.yaml (unless your IDE does this for you), run the following command to download and link your new libraries:</p><pre>$ flutter pub get</pre><blockquote>Note: If you have not yet created your database: visit the Firebase console for your project, click on the <strong>Cloud Firestore</strong> tab, and click the <strong>Create Database </strong>button.</blockquote><h3>Waiting on Firebase</h3><p>The first step to successfully use Cloud Firestore is to initialize Firebase and, most critically, <em>not attempting to use any Firebase resources until this task is successful</em>. Luckily, you can contain that logic with one StatefulWidget instead of sprinkling that task all over your code.</p><p>Create a new file at firebasecounter/lib/firebase_waiter.dart and add the following code:</p><pre>import &#39;package:firebase_core/firebase_core.dart&#39;;<br>import &#39;package:flutter/material.dart&#39;;</pre><pre>class FirebaseWaiter extends StatefulWidget {<br>  final Widget Function(BuildContext) builder;<br>  final Widget waitingChild;<br>  const FirebaseWaiter({<br>    @required this.builder,<br>    this.waitingChild,<br>    Key key,<br>  }) : super(key: key);</pre><pre>  @override<br>  _FirebaseWaiterState createState() =&gt; _FirebaseWaiterState();<br>}</pre><pre>class _FirebaseWaiterState extends State&lt;FirebaseWaiter&gt; {<br>  Future&lt;FirebaseApp&gt; firebaseReady;</pre><pre>  @override<br>  void initState() {<br>    super.initState();<br>    firebaseReady = Firebase.initializeApp();<br>  }</pre><pre>  @override<br>  Widget build(BuildContext context) =&gt; FutureBuilder&lt;FirebaseApp&gt;(<br>        future: firebaseReady,<br>        builder: (context, snapshot) =&gt; //<br>            snapshot.connectionState == ConnectionState.done<br>                ? widget.builder(context)<br>                : widget.waitingChild,<br>      );<br>}</pre><p>This class uses the pattern in Flutter of leveraging certain widgets to completely handle a specific dependency or problem within your app. To use this FirebaseWaiter widget, return to main.dart, and apply the following change to MyApp:</p><pre>// Add this import at the top<br>import &#39;package:firebasecounter/firebase_waiter.dart&#39;;</pre><pre>// Replace `MyApp` with this<br>class MyApp extends StatelessWidget {<br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      title: &#39;Flutter Demo&#39;,<br>      theme: ThemeData(<br>        primarySwatch: Colors.blue,<br>        visualDensity: VisualDensity.adaptivePlatformDensity,<br>      ),<br>      home: FirebaseWaiter(<br>        builder: (context) =&gt; Consumer&lt;ICounterManager&gt;(<br>          builder: (context, manager, _child) =&gt; MyHomePage(<br>            manager: manager,<br>            title: &#39;Flutter Demo Home Page&#39;,<br>          ),<br>        ),<br>        // This is a great place to put your splash page!<br>        waitingChild: Scaffold(<br>          body: const Center(child: CircularProgressIndicator()),<br>        ),<br>      ),<br>    );<br>  }<br>}</pre><p>Now, the app is able to wait for Firebase’s initialization, but can skip this process during tests by simply not using FirebaseWaiter.</p><blockquote>Note: The above changes may cause Flutter to complain about missing Firebase plugins. If it does, completely kill your app and start debugging again, which allows Flutter to install all platform-specific dependencies.</blockquote><h3>Getting data from Cloud Firestore</h3><p>First, import Cloud Firestore by adding the following line to the top of counter_manager.dart:</p><pre>import &#39;package:cloud_firestore/cloud_firestore.dart&#39;;</pre><p>Next, also in counter_manager.dart, add the following class:</p><pre>class FirestoreCounterManager implements ICounterManager {<br>  AppState state;<br>  final FirebaseFirestore _firestore;</pre><pre>FirestoreCounterManager()<br>      : _firestore = FirebaseFirestore.instance,<br>        state = const AppState() {<br>    _watchCollection();<br>  }</pre><pre>void _watchCollection() {<br>    // Part 1<br>    _firestore<br>        .collection(&#39;clicks&#39;)<br>        .snapshots()<br>        // Part 2<br>        .listen((QuerySnapshot snapshot) {<br>      // Part 3<br>      if (snapshot.docs.isEmpty) return;<br>      // Part 4<br>      final _clicks = snapshot.docs<br>          .map&lt;DateTime&gt;((doc) {<br>            final timestamp = doc.data()[&#39;timestamp&#39;];<br>            return (timestamp != null)<br>                ? (timestamp as Timestamp).toDate()<br>                : null;<br>          })<br>          // Part 5<br>          .where((val) =&gt; val != null)<br>          // Part 6<br>          .toList();<br>      // Part 7<br>      state = AppState(_clicks);<br>    });<br>  }</pre><pre>  @override<br>  void increment() {<br>    _firestore.collection(&#39;clicks&#39;).add({<br>      &#39;timestamp&#39;: FieldValue.serverTimestamp(),<br>    });<br>  }<br>}</pre><blockquote>Note: This class is almost correct, but creates a bug that is explored later. If you add this code to your app and run it right now, you will see that the behavior is not what you want. Read on for a thorough explanation of what is happening!</blockquote><p>There’s a lot going on here, so let’s step through it.</p><p>First, FirestoreCounterManager implements the ICounterManager interface, so it’s an eligible candidate to use in production widgets. (Eventually, it will be supplied byDependenciesProvider!) FirestoreCounterManager also maintains an instance of FirebaseFirestore, which is the live connection to the production database. FirestoreCounterManager also calls _watchCollection() during its initialization to set up a connection to the specific data you care about, and this is where things get interesting.</p><p>The _watchCollection() method does a lot and deserves its own examination.</p><p>In Part 1, _watchCollection() calls _firestore.collection(&#39;clicks&#39;).snapshots(), which returns a stream of updates any time data in the collection changes.</p><p>In Part 2, _watchCollection() immediately registers a listener to that stream using .listen(). The callback passed to listen() receives a new QuerySnapshot object on each change to the data. This update object is called a snapshot because it reflects the correct state of the database at one time, but, at any point, could be replaced by a new snapshot.</p><p>In Part 3, the callback short-circuits if the collection is empty.</p><p>In Part 4, the callback loops over the snapshot’s documents and returns a list of mixed null and DateTime values.</p><p>In Part 5, the callback discards any null values. These arise from the bug that will be fixed shortly, but this sort of defensive coding is always a good idea when dealing with data from Cloud Firestore.</p><p>In Part 6, the callback addresses the fact that map() returns an iterator, not a list. Calling .toList() on an iterator forces it to process the entire collection, which is what you want.</p><p>And last, in Part 7, the callback updates the state object.</p><p>To use the new class, open dependencies.dart, and replace its contents with this:</p><pre>import &#39;package:firebasecounter/counter_manager.dart&#39;;<br>import &#39;package:flutter/material.dart&#39;;<br>import &#39;package:provider/provider.dart&#39;;</pre><pre>class DependenciesProvider extends StatelessWidget {<br>  final Widget child;<br>  DependenciesProvider({<a href=\"http://twitter.com/required\">@required</a> this.child});</pre><pre><a href=\"http://twitter.com/override\">@override</a><br>  Widget build(BuildContext context) {<br>    return MultiProvider(<br>      providers: [<br>        Provider&lt;ICounterManager&gt;(<br>            create: (context) =&gt; FirestoreCounterManager()),<br>      ],<br>      child: child,<br>    );<br>  }<br>}</pre><h3>Diagnosing the bug</h3><p>If you run this code as is, you’ll <em>almost</em> see the desired behavior. Everything seems correct, except the screen is always rendered one click behind reality. What is happening?</p><p>The issue arises from an incompatibility with the initial counter implementation and the current, stream-based implementation. The FloatingActionButton’s onPressed handler looks like this:</p><pre>floatingActionButton: FloatingActionButton(<br>  onPressed: () =&gt; setState(() =&gt; widget.manager.increment()),<br>  ...<br>)</pre><p>That handler calls increment() and immediately invokes setState(), which tells Flutter to re-render.</p><p>This worked great when synchronously updating state held in the device’s memory. However, the new stream-based implementation starts a series of asynchronous steps. This means that, as-is, the code calls setState() immediately and then, only at an unknown future point, does the manager object update its state attribute. In short, the setState() call in the onPressed handler is happening too early! What’s worse, because all this activity happens inside a callback, deep within FirestoreCounterManager that no widgets know anything about, there is no Future that the widgets can await to solve the problem.</p><p>It’s almost as if the manager object needs to be able to tell the widgets when to redraw. 🤔</p><p>Enter: <a href=\"https://flutter.dev/docs/development/data-and-backend/state-mgmt/simple#changenotifier\">ChangeNotifier</a></p><blockquote>Note: If you got stuck during this section, compare your changes with <a href=\"https://github.com/craiglabenz/flutter-firestore-counter/commit/3bf17b9bfac6c907b8650e1c668fa19b1160a51d\">this commit</a> in the public repo. These changes include Xcode and build.gradle changes resulting from adding Firebase, but you can likely focus on changes to the Dart files.</blockquote><h3>Using ChangeNotifier to re-render the widget tree</h3><p>ChangeNotifier is a class that does exactly what its name suggests: it notifies widgets when changes occur that require a re-render.</p><p>The first step in this process is to update the ICounterManager interface to extend ChangeNotifier. To do this, open firebasecounter/lib/counter_manager.dart, and make the following changes to the ICounterManager declaration:</p><pre>// Add `extends ChangeNotifier` to your declaration<br>abstract class ICounterManager extends ChangeNotifier {<br>  // Everything inside the class is the same.<br>}</pre><p>If you haven’t imported flutter/material.dart yet, open firebasecounter/lib/counter_manager.dart, and add it to the top:</p><pre>import &#39;package:flutter/material.dart&#39;;</pre><p>You’re now ready to update the definitions of CounterManager and FirestoreCounterManager. For CounterManager, replace its code with the following implementation:</p><pre>class CounterManager extends ChangeNotifier implements ICounterManager {<br>  AppState state = AppState();</pre><pre>  /// Copies the state object with the timestamp of the most<br>  /// recent click and tells the stream to update.<br>  void increment() {<br>    state = state.copyWith(DateTime.now());<br>    // Adding this line is how `ChangeNotifier` tells widgets to<br>    // re-render themselves.<br>    notifyListeners();<br>  }<br>}</pre><p>And, for FirebaseCounterManager, apply the following changes:</p><ol><li>Edit its signature to match this:</li></ol><pre>class FirestoreCounterManager extends ChangeNotifier<br>    implements ICounterManager {<br>    ...<br>}</pre><p>2. Add the same notifyListeners(); line to the end of _watchCollection(), as follows:</p><pre>void _watchCollection() {<br>  _firestore<br>      .collection(&#39;clicks&#39;)<br>      .snapshots()<br>      .listen((QuerySnapshot snapshot) {<br>      <br>    // Generation of `_clicks` omitted for clarity, but do not<br>    // change that code.</pre><pre>    state = AppState(_clicks);<br>    <br>    // The only change necessary is to add this line!<br>    notifyListeners();<br>  });<br>}</pre><p>You’ve now set up half of the changes necessary for the ICounterManager classes to tell the widgets to re-render any time the data changes. The Manager classes are telling the widgets to re-render, but if you run your app now, you’ll see that the widgets aren’t listening.</p><p>To fix this, open dependencies.dart and replace the implementation of DependenciesProvider with the following:</p><pre>class DependenciesProvider extends StatelessWidget {<br>  final Widget child;<br>  DependenciesProvider({@required this.child});</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    return MultiProvider(<br>      providers: [<br>        // `Provider` has been replaced by ChangeNotifierProvider<br>        ChangeNotifierProvider&lt;ICounterManager&gt;(<br>          create: (context) =&gt; FirestoreCounterManager(),<br>        ),<br>      ],<br>      child: child,<br>    );<br>  }<br>}</pre><p>As a last change, remove setState from _MyHomePageState to skip an unnecessary re-render. Update its FloatingActionButton to look like this:</p><pre>      floatingActionButton: FloatingActionButton(<br>        // Remove setState()!<br>        onPressed: widget.manager.increment,<br>        tooltip: &#39;Increment&#39;,<br>        child: Icon(Icons.add),<br>      ),</pre><p>And, that’s it! ChangeNotifierProvider makes sure that the widgets are “listeners”, so that when notifyListeners() is called by an ICounterManager class, the widgets get the message to re-render.</p><p>At this point, you should be able to hot restart your app and see everything working!</p><p>Note: If you got stuck during this section, compare your changes against <a href=\"https://github.com/craiglabenz/flutter-firestore-counter/commit/dfb584f62d094d8fdb6067ea11ff3551b9186aed\">this commit</a> of the public repo.</p><h3>Fixing the tests</h3><p>While the last round of changes successfully implemented the desired functionality, unfortunately, they also broke the tests. Next, you’ll apply a few more tweaks to get everything working again, and you’ll be done.</p><p>In widget_test.dart, the code passes a CounterManager instance directly without an accompanying ChangeNotifierListener. The way this was handled in the widget tree was to wrap everything in DependenciesProvider, but that class knows about Firestore, and the whole point of this is to keep Firestore out of the tests.</p><p>One solution is to create TestDependenciesProvider, which can contain the testing versions of all of the dependencies. Open firebasecounter/lib/dependencies.dart, and add the following class:</p><pre>class TestDependenciesProvider extends StatelessWidget {<br>  final Widget child;<br>  TestDependenciesProvider({@required this.child});</pre><pre>  @override<br>  Widget build(BuildContext context) {<br>    return MultiProvider(<br>      providers: [<br>        ChangeNotifierProvider&lt;ICounterManager&gt;(<br>          create: (context) =&gt; CounterManager(),<br>        ),<br>      ],<br>      child: child,<br>    );<br>  }<br>}</pre><p>This class is almost identical to DependenciesProvider, but TestDependenciesProvider provides an instance of CounterManager() instead of FirestoreCounterManager().</p><p>Now, in test/widget_test.dart, update the test widget initialization to this:</p><pre>await tester.pumpWidget(<br>  TestDependenciesProvider(<br>    child: MaterialApp(<br>      home: Consumer&lt;ICounterManager&gt;(<br>        builder: (context, manager, _child) =&gt; MyHomePage(<br>          manager: manager,<br>          title: &#39;Flutter Test Home Page&#39;,<br>        ),<br>      ),<br>    ),<br>  ),<br>);</pre><p>If you haven’t yet, add these two imports near the top of test/widget_test.dart:</p><pre>import &#39;package:firebasecounter/dependencies.dart&#39;;<br>import &#39;package:provider/provider.dart&#39;;</pre><p>Run your tests again, and, viola!</p><p>Note: If you got stuck during this section, compare your changes against <a href=\"https://github.com/craiglabenz/flutter-firestore-counter/commit/cb8c876abfa80b013bb122ed289163ab5587f5cc\">this commit</a> of the public repo.</p><h3>Wrapping up</h3><p>In this article, you remodeled the classic Flutter counter app so that it persists all activity to Cloud Firestore. You also avoided mixing business logic into any widgets, meaning that the app is easy to test.</p><p>The state management techniques covered here are viable for many apps, but they aren’t the only or best ways. The Flutter community is rich with excellent state management solutions that are worth your investigation. Here are a few to consider:</p><ol><li><a href=\"https://pub.dev/packages/flutter_bloc\">Flutter Bloc</a> is particularly useful for anyone with <a href=\"https://redux.js.org/\">Redux</a> experience.</li><li>This <a href=\"https://www.youtube.com/playlist?list=PLB6lc7nQ1n4iS5p-IezFFgqP6YvAJy84U\">Flutter Firebase and DDD video tutorial series</a> by <a href=\"https://www.youtube.com/resocoder\">Reso Coder</a> walks you through the entire process of using Flutter Bloc, Cloud Firestore, and several other excellent libraries.</li><li>This <a href=\"https://pub.dev/packages/flutter_redux\">more direct port of Redux</a> is also popular.</li><li>The newest entry on the list; the creator of Provider released a new package, <a href=\"https://pub.dev/packages/riverpod\">Riverpod</a>, which is Provider’s successor.</li></ol><p>For more information on state management, see the <a href=\"https://flutter.dev/docs/development/data-and-backend/state-mgmt/intro\">State Management docs</a> on flutter.dev.</p><p>Whichever state management solution you choose, good luck, and happy coding!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1cf2fbbce97b\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/testable-flutter-and-cloud-firestore-1cf2fbbce97b\">Testable Flutter and Cloud Firestore</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-10-02T15:01:02.000Z":{"title":"Performance testing on the web","link":"https://medium.com/flutter/performance-testing-on-the-web-25323252de69?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/25323252de69","category":["flutter","performance-testing","testing","web"],"dc:creator":"Tianguang Zhang","pubDate":"Fri, 02 Oct 2020 15:01:02 GMT","atom:updated":"2020-11-25T14:40:07.036Z","content:encoded":"<p><em>This article was updated on Nov 25, 2020 to use the </em>web_benchmarks<em> package.</em></p><h3>Overview</h3><p>During development, we often want to test an app’s performance in the browser. Performance testing is useful, as it reveals potential bugs that make an app slower.</p><p>This article describes a way to test an app’s performance in Chrome. This method is similar to how we test the <a href=\"https://gallery.flutter.dev/#/\">new Flutter Gallery</a>’s performance.</p><h3>Example app</h3><p>We use a simple app that contains an appbar, a floating action button, and an infinite list of items. The list also shows the number of times the button is pushed.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*adwmyiS509VwCCYl\" /></figure><p>The app has a second page containing some information.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-d-mmdUUEW08ytWJ\" /></figure><p>You can clone the app here:</p><ul><li><a href=\"https://github.com/material-components/material-components-flutter-experimental/tree/develop/web_benchmarks_example\">https://github.com/material-components/material-components-flutter-experimental/tree/develop/web_benchmarks_example</a></li></ul><h3>What to test?</h3><p>We want to test the app’s performance in Chrome under the following usage scenarios:</p><ol><li>User scrolls through the infinite list.</li><li>User switches between the two pages.</li><li>User taps the floating action button.</li></ol><h3>Setting up the framework</h3><p>Add the following to pubspec.yaml:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ef0ca17199a2807e917e92cb92ffc891/href\">https://medium.com/media/ef0ca17199a2807e917e92cb92ffc891/href</a></iframe><p>This dependency pulls in <a href=\"https://pub.dev/packages/web_benchmarks\">web_benchmarks</a>, a minimal package that implements performance testing in Chrome.</p><p>This package is adapted from <a href=\"https://github.com/flutter/flutter/tree/master/dev/benchmarks/macrobenchmarks\">macrobenchmarks</a> and <a href=\"https://github.com/flutter/flutter/tree/master/dev/devicelab\">devicelab</a>, two packages used by Flutter for web performance testing on the Flutter Gallery. At the moment, these two packages are specialized for web performance testing within flutter/flutter, so it is easier to import the more general package, <a href=\"https://pub.dev/packages/web_benchmarks\">web_benchmarks</a>.</p><p>Run flutter pub get to pull in this package.</p><h3>Writing the first test</h3><p>Add a benchmarks directory under lib, and add a new dart file to it called runner.dart:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/712/0*tsvQSKBjpWJWkiKM\" /></figure><p>The contents of the file are as follows:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3a002aacd849a5e328e379e37450537c/href\">https://medium.com/media/3a002aacd849a5e328e379e37450537c/href</a></iframe><h4>What is this test doing?</h4><ul><li>When this app runs, a ScrollRecorder object is created, which drives the app by automatically making gestures. In this case, shortly after the app starts, it starts scrolling down the infinite list.</li><li>The ScrollRecorder class extends the AppRecorder class, which extends the WidgetRecorder class, which also records performance data as it drives the app.</li><li>runBenchmarks is a function defined in package:web_benchmarks/client.dart, which allows the user to select which benchmark to run, and displays the results in the browser.</li><li>The method automate uses the flutter_test package, which provides methods to make gestures or find certain widgets in an app.</li></ul><h3>Running the first test</h3><p>In the root directory of the project, run flutter run -d chrome -t lib/benchmarks/runner.dart. This tells Flutter to use runner.dart as the entry point, instead of main.dart.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*imb9-c_LS4XF0xDX\" /></figure><p>We only have one benchmark so far, so click “scroll” to start it.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3aZa4m2GbsqHECNw\" /></figure><p>The test begins, and the list automatically scrolls down.</p><p>The test ends in a few seconds, showing the following screen:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LitJY47Vl0J17C5V\" /></figure><p>This chart shows the time it took for the app to draw each (recorded) frame. The horizontal axis represents the flow of time; the vertical axis, the duration each frame took.</p><p>The first 2/3 of the chart has a gray background; these frames are considered “warm-up frames”, and are omitted from the statistics. Warm-up frames typically give the JIT compiler time to compile the code, and populate various caches, so that the measured frames produce numbers that reflect the “eventual” performance of the app, rather than the first few seconds of it. The warm-up phase should not be always ignored — it can provide valuable information about your app’s performance during the first few seconds, which can still influence the perception of the app’s quality.</p><p>Red frames are “outliers” — they are frames which take significantly longer than other frames to draw. Some outliers can be nearly unnoticeable. For example, jank at the beginning or the end of an animation up to a certain point will not be visible. However, a janky frame in the <em>middle</em> of an animation will be very noticeable.</p><p>Outliers provide a good indicator of the jankiness of the app. By improving your app, you can lower the values of outliers or reduce the number of outliers, which shows that your app has become smoother.</p><h3>Collecting data from Chrome’s DevTools</h3><p>This benchmark is entirely run from inside Chrome. Add the following file as test/run_benchmarks.dart:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5ce2ae71e67c98c50eef78779e9f1d35/href\">https://medium.com/media/5ce2ae71e67c98c50eef78779e9f1d35/href</a></iframe><p>Then, run dart test/run_benchmarks.dart.</p><p>After about one minute, you should see the following results:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2e95cfd7eb847b13e4d86219ca683123/href\">https://medium.com/media/2e95cfd7eb847b13e4d86219ca683123/href</a></iframe><p>The exact benchmark values may vary depending on the machine.</p><h4>What is this test doing?</h4><ul><li>Running test/run_benchmarks.dart builds the app for the web. Then, it starts a Chrome instance and runs the app in it.</li><li>test/run_benchmarks.dart connects to Chrome’s DevTools port, and listens and collects relevant performance data from it.</li></ul><h4>What do the results mean?</h4><ul><li>When rendering a frame, the <a href=\"https://api.flutter.dev/flutter/rendering/Layer-class.html\">layer tree</a> is walked twice.</li><li>“Preroll” is the first walk. It does not render anything, but it computes values that are later used for rendering. Examples include: transform matrices, the inverse of transforms, and clips.</li><li>“Apply frame” is the second walk where the UI is actually rendered.</li><li>“Draw frame” is the total time that the framework takes to render a frame. It includes “Preroll” and “Apply frame”, but it also includes the time spent on building and laying out the widgets.</li><li>“Total UI frame” includes everything in “Draw frame”, but it also includes some hidden work that the browser performs, such as layer tree updates, style recalculations, and browser-side layout (not to be confused with Flutter’s own layout).</li><li>When a dataset (a list of durations) is collected, the algorithm removes outliers.</li><li>First, the mean and standard deviation of the data are computed, and any data point that is higher than (mean + 1 standard deviation) is considered an outlier.</li><li>The mean and standard deviation of non-outliers (clean data) are used to compute the average and noise of the data set, which are then reported.</li><li>The mean of all outliers, as well as the ratio of the “outlier mean” and the “non-outlier mean” are also reported.</li><li>For each dataset, “outlierRatio” and “noise” are both good indicators of how much noise there is in the performance of the app. If the results are too noisy, it might indicate inconsistencies in performance (such as janky frames as GC pauses). By aiming to lower the noise, you can make your app perform more smoothly.</li></ul><h3>Add more tests</h3><p>Edit lib/benchmarks/runner.dart to add two more tests.</p><p>First, modify the main function:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/86e9a82223d28c5bb1beaf236dfb297a/href\">https://medium.com/media/86e9a82223d28c5bb1beaf236dfb297a/href</a></iframe><p>Finally, add two more classes that extend AppRecorder:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/4b6ad9219c3e3c13aba5cd2796cd6052/href\">https://medium.com/media/4b6ad9219c3e3c13aba5cd2796cd6052/href</a></iframe><h4>What are these tests doing?</h4><ul><li>We have added the two remaining benchmark tests: one for switching between pages, and the other for tapping on the floating action button.</li><li>animationStops repeatedly checks whether an animation is happening, and stops when all animation has stopped. This ensures, for example, a successful transition to the “about” page.</li><li>In the “page” and “tap” benchmarks, the _completed boolean tracks whether the automated gestures have finished.</li><li>In the “page” and “tap” benchmarks, overriding the shouldContinue method causes the AppRecorder to stop recording frames <strong>after</strong> all gestures have finished.</li></ul><h4>How to run these tests?</h4><p>To run these tests (and see the animations) in Chrome, run:</p><ul><li>flutter run -d chrome -t lib/benchmarks/runner.dart --profile</li></ul><p>To run these tests and collect DevTools data, run:</p><ul><li>dart test/run_benchmarks.dart</li></ul><h3>What next?</h3><p>Once you have a way to collect performance data, you can use it however you want:</p><ul><li>You can set up a job in CI that runs these benchmark tests whenever someone submits a PR, to avoid introducing performance-heavy changes.</li><li>You can also set up a dashboard that keeps track of the trend of performance benchmarks. This is what we are doing for the Flutter Gallery (see <a href=\"https://flutter-dashboard.appspot.com/#/build\">Flutter Dashboard</a>).</li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=25323252de69\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/performance-testing-on-the-web-25323252de69\">Performance testing on the web</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-10-01T14:57:05.000Z":{"title":"Announcing Flutter 1.22","link":"https://medium.com/flutter/announcing-flutter-1-22-44f146009e5f?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/44f146009e5f","category":["flutter","announcements","mobile-app-development","ios","android"],"dc:creator":"Chris Sells","pubDate":"Thu, 01 Oct 2020 14:57:05 GMT","atom:updated":"2020-10-05T17:44:37.232Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Supporting iOS 14 and Android 11, new i18n and l10n support, Google Maps and WebView plugins ready for production, a new App Size tool and much more!</h4><p>We’re delighted to introduce our latest release of Flutter, with extensive support for iOS 14 and Android 11. Flutter 1.22 builds on the foundation set by previous releases by enabling developers to build fast, beautiful user experiences for multiple platforms from a single codebase. Our quarterly stable releases package the latest features, performance improvements, and bug fixes, and are suitable for broad production use.</p><p>Since this is the season for new mobile OS versions, this release focuses on ensuring that Android 11 and iOS 14 work great with Flutter. Updates for both of these OSes include a lot of under-the-hood work to conform to the latest SDKs and to make sure everything passes our extensive test suite. For iOS 14, this release includes support for the new Xcode 12, new icons, and preview support for the new iOS 14 App Clips feature. For Android 11, the update supports the new types of display cutouts as well as smoother animation when bringing up the soft keyboard.</p><p>This release comes two months after our 1.20 release, so it was shorter than most. Even in that short time, we closed 3,024 issues and merged 1,944 PRs from 197 contributors. Of those contributors, 114 (58%) of them were from the community-at-large and they contributed 271 PRs. The largest single contributor was <a href=\"https://github.com/a14n\">a14n</a>, who makes our top contributor list again with 20 PRs, most of which were done as part of the work to support null safety in Flutter (more on that coming soon).</p><p>In addition to the support for the new mobile OS versions, there’s quite a bit more news to share, including a preview of one of the top-requested features for Android: state restoration, a new “universe” of Material buttons, new international and localization support that works with hot reload, a new Navigator, a stable release for Platform Views (the foundation for the Google Maps and WebView plugins), and a switch you can throw in your code to improve scrolling on devices with high frequency displays. We’ve also got a new tool for dissecting app size and for ensuring that the plugins that you’re building support only the platforms that you want to support.</p><h3>Targeting iOS 14</h3><p>Whenever a new version of a mobile OS is announced, we test it thoroughly, looking for incompatibilities or changes that affect Flutter and its tools.</p><p>In the case of iOS 14, we made quite a few changes to Flutter to ensure that it works the way developers want:</p><ul><li>Xcode 12 requires iOS 9.0 or up, so our default template increases its default from 8.0 to 9.0</li><li>iOS 14 specific crashes and font rendering issues were fixed in Flutter 1.22</li><li>Problems deploying to physical devices were fixed as of Flutter 1.20.4</li><li>A new policy that shows uses notifications when apps access their clipboard caused spurious notifications in Flutter apps, and was fixed as of Flutter 1.20.4</li><li>A restriction disables running debug apps on iOS 14 devices except as part of the debugging process</li><li>A new policy around network security for locally debugged Flutter apps causes iOS 14 to show a one-time confirmation dialog (only during development, not for released Flutter apps)</li></ul><p>Bottom line: if you’re targeting iOS 14 with your Flutter app, we strongly encourage you to rebuild it with Flutter 1.22 and deploy it to the App Store now to ensure that your iOS 14 users have the best experience.</p><p>For more details about targeting iOS 14 with Flutter, including some Add-to-App, deep linking, and notification considerations, refer to <a href=\"https://flutter.dev/docs/development/ios-14\">the iOS 14 documentation on flutter.dev</a>.</p><p>Hopefully, all of this work on the tooling and SDK support allows you to focus on the coding that you care about — taking advantage of new iOS 14 features.</p><p>One such feature is updated support for iOS’s new SF Symbols font, which inspired us to spend some time giving <a href=\"https://pub.dev/packages/cupertino_icons\">the </a><a href=\"https://pub.dev/packages/cupertino_icons\">cupertino_icon package</a> a refresh. Existing uses of CupertinoIcons will automatically map to the new style once you update your cupertino_icons dependency to the new 1.0 major version. If you use cupertino_icons 1.0 in conjunction with Flutter 1.22, you’ll also have access to ~900 new icons through the <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoIcons-class.html\">CupertinoIcons</a> API.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/864/0*ZGKu3IhnPNp6fS_e\" /></figure><p>You can see the complete list of icons on the <a href=\"https://flutter.github.io/cupertino_icons/\">cupertino_icons</a> preview page and <a href=\"https://flutter.dev/docs/release/breaking-changes/cupertino-icons-1.0.0\">a migration detail page on flutter.dev</a>.</p><p>Another feature for you to try with Flutter on iOS 14 is <a href=\"https://developer.apple.com/app-clips/\">App Clips</a>, a new iOS 14 feature that supports quick, no-install app executions of lightweight versions of apps under 10MB. In Flutter version 1.22, we have a preview of App Clip targets built with Flutter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8MER4IM-IEt2ye2a\" /><figcaption>A Flutter-powered App Clip experience</figcaption></figure><p>For more details on how to build App Clips with Flutter, check out <a href=\"https://flutter.dev/docs/development/platform-integration/ios-app-clip\">the docs on flutter.dev</a>. You could also consult this <a href=\"https://github.com/flutter/samples/tree/master/ios_app_clip\">simple sample project</a>.</p><h3>Android 11</h3><p>This release of Flutter also coincides with the launch of Android 11 this month. The Flutter framework and engine have been updated to support two new features introduced in the latest version of Android.</p><p>Firstly, Flutter now supports exposing the safe insets of Android notches, cutouts and edges of waterfall displays.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lPO4ueKwxvV0QP_I\" /></figure><p>By using the <a href=\"https://api.flutter.dev/flutter/widgets/MediaQuery-class.html\">MediaQuery</a> and <a href=\"https://api.flutter.dev/flutter/widgets/SafeArea-class.html\">SafeArea</a> APIs, you can ensure that you’re placing active UI and interactive elements in the non-obstructed regions of the device’s display. Also, you’ll want to avoid gesture detectors in the waterfall edge area that may be prone to accidental touches.</p><p>Secondly, the animation is synchronized with Android 11 as it displays the software keyboard.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DFRjYzbqIc5kOoDm\" /><figcaption>See the position animation of the FAB</figcaption></figure><p>Issue <a href=\"https://github.com/flutter/flutter/issues/19279\">#19279</a> has been a long-standing problem where the system keyboard show/hide animation isn’t synchronized with Flutter’s inset. This is fixed for Android 11.</p><p>One note about the Android embedding API. With Flutter version 1.12 last year, we rolled out a new set of Flutter engine and Flutter plugin APIs for Android. We created these v2 APIs to better support our add-to-app users on Android. A year later, over 80% of our Android plugins use the new Android APIs. Starting in 1.22, we’re deprecating the older v1 APIs.</p><p>If you’re still using the Android v1 API, here’s what this means for you:</p><ul><li>Newly created plugins will no longer target the v1 APIs</li><li>The Flutter tool’s —no-enable-android-embedding-v2 config flag has been removed and is now the default behavior</li><li>Older applications still using the v1 APIs will show a deprecation warning during build that points to the <a href=\"https://flutter.dev/docs/development/packages-and-plugins/plugin-api-migration\">Supporting the new Android plugins APIs</a> docs</li></ul><p>Meanwhile, if you still have a Flutter application based on v1 Android APIs, it will continue to work. However, you may start to encounter new plugins that only target the v2 API and that can’t be consumed by v1 Android APIs. For more details, see <a href=\"https://flutter.dev/docs/release/breaking-changes/android-v1-embedding-create-deprecation\">the breaking change documentation</a>.</p><h3>Expanding the Button “universe”</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/910/1*crNLxg7CCtlQkB4mLI_ErA.png\" /><figcaption>A new universe of Material Design buttons</figcaption></figure><p>Existing Flutter buttons look good but can be <a href=\"http://flutter.dev/go/material-button-system-updates\">hard to use</a>, especially when you need custom theming. Furthermore, the Material specification has expanded to include new buttons with new styles.</p><p>To keep Flutter up to date with Material guidelines, we’re happy to announce a whole new “universe” of buttons in Flutter 1.22.</p><p>Rather than try and evolve the existing button classes and their theme in-place, <a href=\"https://github.com/flutter/flutter/pull/59702\">this PR</a> introduces new, replacement button widgets and themes. In addition to freeing us from the backwards compatibility labyrinth that evolving the existing classes would entail, the new names sync Flutter with the <a href=\"https://material.io/components/buttons/\">Material Design spec</a>, which uses the new names for the button components.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*di6uPEKEsRHoFtRryHeWPg.png\" /></figure><p>The new themes follow the “normalized” pattern that Flutter has recently adopted for new Material widgets. If you’d like to play with a demo, there’s <a href=\"https://dartpad.dev/e560e1c2e4455ad53aac245079ccdcf2\">a great one here on DartPad</a>. This is not a breaking change as the semantics of FlatButton, OutlineButton, RaisedButton, ButtonBar, ButtonBarTheme, and ButtonTheme won’t change. You can mix and match the old buttons with the new. as you prefer.</p><h3>New internationalization and localization support</h3><p>Flutter has provided the core functionality you need for the internationalization (i18n) and localization (l10n) of your apps since Flutter’s inception. However, with this release, we’ve baked our opinions of best practices into our tools, even enabling hot reload support to update your app as you add new l10n information.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*UBVlGmhw5NUWbg5I\" /></figure><p>If you’d like more details about Flutter’s support for l10n, including localized messages, messages with parameters, dates, numbers, and currencies, <a href=\"http://flutter.dev/go/i18n-user-guide\">read the Flutter Internationalization User Guide</a>.</p><p>Furthermore, if you’re interested in i18n and l10n, then you’re probably also interested in strings with characters that don’t fit into plain old ASCII, like Unicode and emoji. Recently, the Dart team released <a href=\"https://pub.dev/packages/characters\">the </a><a href=\"https://pub.dev/packages/characters\">characters package</a>, which helps developers deal with Unicode (extended) grapheme clusters. This package helps solve problems like how to properly abbreviate a string like “A 🇬🇧 text in English” to the first 15 characters. Using the String class, that abbreviation would be “A 🇬🇧 text in”, which is only 12 user-perceived characters. On the other hand, using the characters package yields the correct abbreviation of “A 🇬🇧 text in Eng”.</p><p>With <a href=\"https://github.com/flutter/flutter/pull/59267\">this PR</a>, Flutter uses the characters package to properly handle these complex characters. For example, when using a TextField with a maxLength limit, characters like 👨‍👩‍👦 are now properly counted as a single character. Also, with <a href=\"https://github.com/flutter/flutter/pull/59620\">this PR</a>, the characters package is automatically available in projects wherever Flutter is, without needing to manually add it. Hopefully this makes it even easier to handle strings of all kinds from all locales. For more details about the characters package, check out the excellent article, <a href=\"https://medium.com/dartlang/dart-string-manipulation-done-right-5abd0668ba3e\">Dart string manipulation done right 👉</a>.</p><h3>Google Maps and WebView plugins ready for production</h3><p>Here on the Flutter team, we are often cautious about labeling something as “production ready” until we’ve tested it thoroughly ourselves. In the case of the <a href=\"https://pub.dev/packages/google_maps_flutter\">google_maps_flutter</a> and <a href=\"https://pub.dev/packages/webview_flutter\">webview_flutter</a> plugins, the gating factor has been the underlying <a href=\"http://flutter.dev/docs/development/platform-integration/platform-views\">Platform Views</a> implementation, which allows native UI components from both Android and iOS to be hosted in a Flutter app. With this release of Flutter, we’re happy to announce that we have hardened the framework plumbing enough to declare both of these plugins as production ready.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*luz0EiazQQqsAEC4\" /><figcaption>webview_flutter plugin hosting flutter.dev</figcaption></figure><p>In Flutter 1.22, we’ve added an alternative Platform Views implementation that fixes <a href=\"https://github.com/flutter/flutter/issues/61133\">all known keyboard, and accessibility issues for Android views</a>. Also, it works with Android API level 19 and above (it used to require level 20). We have also made threading improvements on iOS that make platform views more efficient and more robust (and no longer requires you to add the io.flutter.embedded_views_preview flag to your iOS Info.plist)<em>.</em></p><p>The webview_flutter plugin supports the new Android Platform Views mode but currently it needs to be <a href=\"https://github.com/flutter/plugins/blob/master/packages/webview_flutter/README.md#android\">enabled manually</a>. We’ll enable it by default in future versions once it’s gotten more use in the wider community.</p><p>The Google Maps and WebView plugins already benefit from the improvements in Platform Views. If you’d like to use Platform Views to host your own native UI components on iOS or Android, you can learn how to do so on <a href=\"https://flutter.dev/docs/development/platform-integration/platform-views\">Hosting native Android and iOS views in your Flutter app with Platform Views</a>.</p><h3>Navigator 2.0</h3><p>If you’ve used <a href=\"https://flutter.dev/docs/development/ui/navigation\">navigation</a> in your Flutter apps before, you may have noticed that the core data structure, the stack of pages that your user is navigating through, is hidden from you. Instead, to manage it, you call Navigator.pop()<em> </em>or Navigator.push(). For example, let’s say that you wanted to show a list of widgets on your home page and allow the user to tap on one to get to a detail page dedicated to just that color.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OVbaUaMkAXrpLQCy\" /></figure><p>The two screens could be implemented like so:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/72f4a4ffdac907c3e8eda2da84dda0f6/href\">https://medium.com/media/72f4a4ffdac907c3e8eda2da84dda0f6/href</a></iframe><p>Using the simplest Navigator 1.0 style allows you to navigate between these two screens in a way that looks pretty easy:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/05fab7a288dd55acf6ed63f02d36f916/href\">https://medium.com/media/05fab7a288dd55acf6ed63f02d36f916/href</a></iframe><p>The call to Navigator.push() is all that’s needed to push another page on top of the first one, creating a stack of two pages. However, unlike the list of Containers created in the build method of the ColorListScreen, that stack is hidden from you. And because it’s hidden, it’s hard to manage for other scenarios, like handling deep linking with an initial route provided by a native embedding, for example, or a URL from the web or intent from Android. It’s also exceedingly difficult to manage nested routing between different arrangements of the same page.</p><p>Navigator 2.0 solves these problems and more by making the stack of pages visible. Here’s an updated example of navigating between the same ColorListScreen and ColorScreen:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9db4a0d060729ba3e043ce6388465861/href\">https://medium.com/media/9db4a0d060729ba3e043ce6388465861/href</a></iframe><p>The app explicitly creates a Navigator and gives it a list of pages that represents the complete stack. We create an empty _selectedColor to indicate that no color has yet been selected, so we don’t show the ColorScreen initially. When the user selects a color, we call setState() as normal to indicate to Flutter that you’d like the build() method called again, which now creates a stack with the ColorScreen on top.</p><p>You update your state in the OnPopPage call back, for example, if the user popped, then they’ve “unselected” the current color and we no longer want to show that page.</p><p>If Navigator 2.0 looks like the rest of Flutter, that’s the intent — it’s declarative, unlike Navigator 1.0 which is imperative. The idea was to unify the models between navigation and the rest of Flutter while simultaneously fixing a bunch of issues and adding features. In fact, this little example barely scratches the surface of what’s in Navigator 2.0. For the details, I highly recommend the article on <a href=\"https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade\">Declarative navigation and routing in Flutter</a>.</p><p>Also, your existing use of Navigator 1.0 will continue to work just as it does today and won’t be removed anytime soon. If you prefer that model, you can certainly continue to use it. However, if you try Navigator 2.0, we think you’ll like it.</p><h3>Preview: State Restoration for Android</h3><p>A new feature that is available for you to experiment with in this release is support for <a href=\"https://developer.android.com/topic/libraries/architecture/saving-states\">State Restoration on Android</a>. This is one of our <a href=\"https://github.com/flutter/flutter/issues/6827\">most-requested features</a> with 217 thumbs up!</p><p>For those not familiar with the need for state restoration, mobile OSes might kill apps that are in the background to reclaim resources for foreground apps. When this happens, the OS notifies the app to be killed to save any UI state quickly so that it can be restored when the user cycles back to that app. When implemented correctly, this provides a seamless experience for the user while making better use of the device’s resources. Until now, Flutter didn’t support state restoration and it was very difficult to do it correctly without framework support. That’s why we’re very happy to be able to deliver the foundational implementation of this feature for Android.</p><p>Here’s <a href=\"https://api.flutter.dev/flutter/widgets/RestorationMixin-mixin.html#widgets.RestorationMixin.1\">a very simple sample</a> for restoring the state of the default Flutter Counter app:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5b53da24e0462f59d442d2af47bb265a/href\">https://medium.com/media/5b53da24e0462f59d442d2af47bb265a/href</a></iframe><p>Briefly, each widget gets a storage bucket, which is registered with the <a href=\"https://api.flutter.dev/flutter/widgets/RestorationMixin-mixin.html\">RestorationMixin</a> using a unique ID. By using a <a href=\"https://master-api.flutter.dev/flutter/widgets/RestorableProperty-class.html\">RestorableProperty</a> type (like RestorableInt used here) to store the UI-specific data, and by registering that data with the State Restoration feature, the data is automatically stored before Android kills the app, and restored when it’s brought back to life. And that’s it. Any data that’s stored in a Restoration* type, like RestorableInt, RestorableString and RestorableTextEditingController (we’ve got a bunch of them) will be restored. And if we don’t cover all of the types you’d like to have restored, you can create your own by extending <a href=\"https://api.flutter.dev/flutter/widgets/RestorableProperty-class.html\">RestorableProperty&lt;T&gt;</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/0*1298qhTKz_FjPuRN\" /></figure><p>For automated testing of state restoration, we’ve added <a href=\"https://api.flutter.dev/flutter/flutter_test/WidgetTester/restartAndRestore.html\">a new </a><a href=\"https://api.flutter.dev/flutter/flutter_test/WidgetTester/restartAndRestore.html\">restartAndRestore API to WidgetTester</a>. And to test manually, the easiest thing to do is to start your state restoration-enabled Flutter app on an Android device, enable “Don’t keep activities” in Android’s developer settings, run your Flutter app, put it into the background, and then return to it. At this point, Android will have killed and restored your app, so you can see if everything is working as you expect.</p><p>While we’re happy to put this preview version of State Restoration in your hands, there’s more work to do. For example, state restoration isn’t just for Android, iOS apps could benefit as well. Furthermore, we’re busy updating our own widgets to keep their state during restoration. We’ve already provided support in the Scrollable classes like ListView and SingleChildScrollView (to remember the user’s scroll position) and TextFields (to restore the text they’ve entered), and we plan to extend that to other widgets.</p><p>However, the key restoration support we have not yet added, and what makes this a preview release, is navigation (either 1.0 or 2.0). This means that where your user is in the app won’t be restored. That feature will be coming to a beta soon and to the next stable release of Flutter.</p><h3>Preview: Smooth scrolling for unmatched input and display frequencies</h3><p>Working with our internal Google partners, the Flutter team has greatly improved the performance of scrolling when the input and the display frequencies are not the same. For example, the Pixel 4 input runs at 120hz whereas the display runs at 90hz. This mismatch can cause a performance penalty when scrolling. With a new resamplingEnabled flag, you can take advantage of the performance work we’ve done in Flutter to address this issue:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ac9c676eb1233dd1597b234b73ffc8a3/href\">https://medium.com/media/ac9c676eb1233dd1597b234b73ffc8a3/href</a></iframe><p>Depending on the frequency discrepancies involved, you may see up to 97% less jank in scrolling by enabling this flag. When we’re sure this is the best experience, we plan to enable this flag by default in a future build.</p><h3>A new unified Dart developer tool</h3><p>As always, an update to Flutter doesn’t just mean the engine and the framework but the tooling as well. Flutter 1.22 includes a new version of Dart (2.10), and there’s a new dart CLI tool that you might find useful as well.</p><p>Dart historically has had many smaller developer tools (such as dartfmt for formatting, and dartanalyzer for code analysis). New in Dart 2.10 is a unified dart developer tool very similar to the flutter tool.</p><figure><img alt=\"Screenshot of the output of `dart help`.\" src=\"https://cdn-images-1.medium.com/max/700/1*9pvyafhpaMEMhJfLVsz1JQ.png\" /></figure><p>Starting with today’s Flutter 1.22 SDK, you will find that the &lt;flutter-sdk&gt;/bin folder (which you likely have in yourPATH) contains both flutter and dart commands. For more details, see the <a href=\"https://medium.com/@mit.mit/announcing-dart-2-10-350823952bd5\">Dart 2.10 blog post</a>.</p><h3>App size analysis tool</h3><p>The tooling released as part of Flutter 1.22 includes a new output size analysis utility. This tool helps diagnose Flutter whether the breakdown of your app’s size changes over time.</p><p>You can use the tool to gather the data necessary for analysis by passing an--analyze-size flag to any of the following commands:</p><ul><li>flutter build apk</li><li>flutter build appbundle</li><li>flutter build ios</li><li>flutter build linux</li><li>flutter build macos</li><li>flutter build windows</li></ul><p>Using this flag while building a Flutter output artifact prints a summary of the artifact’s size and composition. This includes native code, assets, and even a package-level breakdown of compiled Dart code.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/943/0*vfMD0AQZUOUwzfZ4\" /><figcaption>Example breakdown of the Flutter Gallery’s release APK</figcaption></figure><p>This summary is helpful in quickly identifying hotspots in the application’s package size usage. In addition, the gathered data is also available as a JSON file for use in Dart DevTools, which allows you to further explore your app’s contents, pinpoint size issues and see changes between two different JSON files by following <a href=\"https://flutter.dev/docs/development/tools/devtools/app-size\">the instructions on flutter.dev</a>. Once you load the JSON file, you’ll have an interface that gives you a tree map view of your app’s size.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gA2waLDAyITCzD7K\" /><figcaption>An example APK breakdown in Dart DevTools</figcaption></figure><p>For more details of the things you can do with the App Size tool, read <a href=\"https://flutter.dev/docs/development/tools/devtools/app-size\">the Using the app size tool docs</a> on flutter.dev.</p><h3>Preview: Updated Network Page in DevTools</h3><p>Another DevTools preview feature in this release is the ability to see HTTP and HTTPs response bodies as part of the <strong>Network</strong> tab.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/781/0*-FukCwELl9DLlefP\" /></figure><p>To enable this feature, make sure you’re on the Flutter dev channel via flutter channel dev and flutter channel upgrade.</p><p>In addition, for apps with lots of network traffic, we’ve provided the ability to search and filter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/994/0*k-fEpOpbV_MiX9Fn\" /></figure><p>For the <strong>Network</strong> tab docs, see <a href=\"https://flutter.dev/docs/development/tools/devtools/network\">Using the Network View</a> on flutter.dev.</p><h3>Hosted DevTools Inspector tab in IntelliJ</h3><p>For a while now, we’ve been maintaining two copies of some of our Flutter tools, like the <strong>Inspector</strong> pane in IntelliJ and the <strong>Inspector</strong> tab in Dart DevTools. Not only does this slow us down because we’ve got to maintain two codebases, but some features haven’t yet made it into the IntelliJ plugin, like the Layout Explorer. So, to solve both of those problems, we’ve enabled the ability to host the <strong>Inspector</strong> tab from Dart DevTools directly inside of IntelliJ.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RQZ-EVyFP1-BqBIX\" /></figure><p>Notice the addition of the Layout Explorer, which you can use right next to your code. To toggle this option on, go to <strong>Preferences</strong> &gt;<strong> Languages &amp; Frameworks</strong> &gt; <strong>Flutter</strong> &gt; <strong>Enable embedded DevTools inspector</strong>.</p><h3>Improved output linking in Visual Studio Code</h3><p>A regular activity that all Flutter developers face is going from the error output in the terminal or in their stack traces. In the most recent release of the Flutter extension for Visual Studio Code, these links are now properly parsed for you to enable links directly from the output.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*prigrwpp7gE6ChCE\" /></figure><p>It seems like a small thing, but initial feedback is already very positive on this feature.</p><p>As always, there are too many tooling changes list here, but I recommend the following announcements for details:</p><ul><li><a href=\"https://groups.google.com/g/flutter-announce/c/UxMv8MzE_uo/m/ED539pi2AAAJ\">Dart DevTools — 0.9.0</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/y27h86ATFJM\">Dart DevTools — 0.9.1</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/24LppkXdMtM\">Dart DevTools — 0.9.3</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/nvgDi3RLAUE/m/Fx4Ze0vrBAAJ\">Flutter IntelliJ Plugin M48.1 Release</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/-ZMKRIBRtGU\">Flutter IntelliJ Plugin M49 Release</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/u0zU6zv3o44/m/2y0JsX1_AwAJ\">Flutter IntelliJ Plugin M50 Release</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/8e8e-ZrgySY\">VS Code extensions v3.14.0</a></li><li><a href=\"https://dartcode.org/releases/v3-15/\">VS Code extensions v3.15.0</a></li></ul><h3>Customer Spotlight: EasyA</h3><p>EasyA is a subscription app designed to give school-age students access to brilliant tutors via instant messaging, and is written in Flutter. Recently it was featured by Apple as <a href=\"https://apps.apple.com/gb/story/id1527472788\">their App of the Day</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*yLWTxV_YTJ2HKhuz\" /></figure><blockquote><em>“When schools began to go online earlier this year, we knew we needed to launch our tutoring app quickly to help students. The sheer speed of development with Flutter meant we were able to implement award-winning designs for both iOS and Android, and also publish to the web — just in time for lockdown! Normally, this would have been practically impossible. But since Flutter allows us to target all three platforms at once, we were able to share code efficiently and leverage our small team of developers to the fullest.”</em></blockquote><blockquote><em>— Phil Kwok, Co-founder, </em><a href=\"https://easya.io/\"><em>EasyA</em></a></blockquote><h3>Breaking Changes</h3><p>As always, we attempt to keep the number of breaking changes to a minimum. Here’s the list from the Flutter 1.22 release.</p><ul><li><a href=\"https://github.com/flutter/flutter/pull/56413\">56413</a> <a href=\"https://docs.google.com/document/d/1BZhxy176uUnqOCnXdnHM1XetS9mw9WIyUAOE-dgVdUM/edit?usp=sharing\">Prevent viewport.showOnScreen from scrolling the viewport if the specified Rect is already visible</a>.</li><li><a href=\"https://github.com/flutter/flutter/pull/62395\">62395</a> [gen_l10n] Synthetic package generation by default</li><li><a href=\"https://github.com/flutter/flutter/pull/62588\">62588</a> Build routes even less.</li></ul><h3>Summary</h3><p>The Flutter 1.22 stable release may have come quickly on the heels of the previous release, but there’s so much good stuff in it that this post couldn’t mention it all. We hope this release helps you build amazing apps for iOS and Android, and we can’t wait to see what you have in store! Thank you for your support — we build Flutter for you.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=44f146009e5f\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-1-22-44f146009e5f\">Announcing Flutter 1.22</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-09-30T01:28:59.000Z":{"title":"Learning Flutter’s new Navigation and Routing system","link":"https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/7c9068155ade","category":["flutter-routing","flutter-navigator","flutter","flutter-web"],"dc:creator":"John Ryan","pubDate":"Wed, 30 Sep 2020 01:28:59 GMT","atom:updated":"2020-09-30T21:16:30.829Z","content:encoded":"<h3>Learning Flutter’s new navigation and routing system</h3><p>This article explains how Flutter’s new Navigator and Router API works. If you follow Flutter’s open <a href=\"https://flutter.dev/docs/resources/design-docs\">design docs</a>, you might have seen these new features referred to as <a href=\"https://docs.google.com/document/d/1Q0jx0l4-xymph9O6zLaOY4d_f7YFpNWX_eGbzYxr9wY/edit#heading=h.l6kdsrb6j9id\">Navigator 2.0 and Router</a>. We’ll explore how these APIs enable more fine-tuned control over the screens in your app and how you can use it to parse routes.</p><p>These new APIs are <em>not</em> breaking changes, they simply add a new <a href=\"https://flutter.dev/docs/get-started/flutter-for/declarative\"><em>declarative</em> API</a>. Before Navigator 2.0, it was <a href=\"https://github.com/flutter/flutter/issues/12146\">difficult to push or pop multiple pages</a>, or remove a page underneath the current one. However, if you are happy with how the Navigator works today, you can keep using it in the same (imperative) way.</p><p>The Router provides the ability to handle routes from the underlying platform and display the appropriate pages. In this article, the Router is configured to parse the browser URL to display the appropriate page.</p><p>This article helps you choose which Navigator pattern works best for your app, and explains how to use Navigator 2.0 to parse browser URLs and take full control over the stack of pages that are active. The exercise in this article shows how to build an app that handles incoming routes from the platform and manages the pages of your app. The following GIF shows the example app in action:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PYHrYurwAGyQC8vsnAaWiA.gif\" /></figure><h3>Navigator 1.0</h3><p>If you’re using Flutter, you’re probably using the Navigator and are familiar with the following concepts:</p><ul><li><a href=\"https://master-api.flutter.dev/flutter/widgets/Navigator-class.html\"><strong>Navigator</strong></a> — a widget that manages a stack of Route objects.</li><li><a href=\"https://master-api.flutter.dev/flutter/widgets/Route-class.html\"><strong>Route</strong></a> — an object managed by a Navigator that represents a screen, typically implemented by classes like MaterialPageRoute.</li></ul><p>Before Navigator 2.0, Routes were pushed and popped onto the Navigator’s stack with either <em>named routes </em>or <em>anonymous routes. </em>The next sections are a brief recap of these two approaches.</p><h4>Anonymous routes</h4><p>Most mobile apps display screens on top of each other, like a stack. In Flutter, this is easy to achieve by using the <a href=\"https://api.flutter.dev/flutter/widgets/Navigator-class.html\">Navigator</a>.</p><p>MaterialApp and CupertinoApp already use a Navigator under the hood. You can access the navigator using <a href=\"https://api.flutter.dev/flutter/widgets/Navigator/of.html\">Navigator.of()</a> or display a new screen using <a href=\"https://api.flutter.dev/flutter/widgets/Navigator/push.html\">Navigator.push()</a>, and return to the previous screen with <a href=\"https://api.flutter.dev/flutter/services/SystemNavigator/pop.html\">Navigator.pop()</a>:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2e1833446bde7b9ee5a95289372375af/href\">https://medium.com/media/2e1833446bde7b9ee5a95289372375af/href</a></iframe><p>When push() is called, the DetailScreen widget is placed on top of the HomeScreen widget like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/412/1*v77nG0BRIWrOghj8fCq_EA.png\" /></figure><p>The previous screen (HomeScreen) is still part of the widget tree, so any State object associated with it stays around while DetailScreen is visible.</p><h4>Named routes</h4><p>Flutter also supports named routes, which are defined in the routes parameter on MaterialApp or CupertinoApp:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7b25282a3af04785848309af09055588/href\">https://medium.com/media/7b25282a3af04785848309af09055588/href</a></iframe><p>These routes must be predefined. Although you can <a href=\"https://flutter.dev/docs/cookbook/navigation/navigate-with-arguments\">pass arguments to a named route</a>, you can’t parse arguments from the route itself. For example, if the app is run on the web, you can’t parse the ID from a route like /details/:id.</p><h4>Advanced named routes with onGenerateRoute</h4><p>A more flexible way to handle named routes is by using onGenerateRoute. This API gives you the ability to handle all paths:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8a46c7c8e0be87b330f8f09c5f19713d/href\">https://medium.com/media/8a46c7c8e0be87b330f8f09c5f19713d/href</a></iframe><p>Here’s the complete example:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0b90278fd76fb7a8cbbd7c98011509dd/href\">https://medium.com/media/0b90278fd76fb7a8cbbd7c98011509dd/href</a></iframe><p>Here, settings is an instance of <a href=\"https://api.flutter.dev/flutter/widgets/RouteSettings-class.html\">RouteSettings</a>. The name and arguments fields are the values that were provided when <a href=\"https://api.flutter.dev/flutter/widgets/Navigator/pushNamed.html\">Navigator.pushNamed</a> was called, or what <a href=\"https://api.flutter.dev/flutter/material/MaterialApp/initialRoute.html\">initialRoute</a> is set to.</p><h3>Navigator 2.0</h3><p>The Navigator 2.0 API adds new classes to the framework in order to make the app’s screens a function of the app state and to provide the ability to parse routes from the underlying platform (like web URLs). Here’s an overview of what’s new:</p><ul><li><a href=\"https://master-api.flutter.dev/flutter/widgets/Page-class.html\"><strong>Page</strong></a> — an immutable object used to set the navigator’s history stack.</li><li><a href=\"https://master-api.flutter.dev/flutter/widgets/Router-class.html\"><strong>Router</strong></a> — configures the list of pages to be displayed by the Navigator. Usually this list of pages changes based on the underlying platform, or on the state of the app changing.</li><li><a href=\"https://master-api.flutter.dev/flutter/widgets/Router/routeInformationParser.html\"><strong>RouteInformationParser</strong></a>, which takes the <a href=\"https://master-api.flutter.dev/flutter/widgets/RouteInformation-class.html\">RouteInformation</a> from <a href=\"https://master-api.flutter.dev/flutter/widgets/RouteInformationProvider-class.html\">RouteInformationProvider</a> and parses it into a user-defined data type.</li><li><a href=\"https://master-api.flutter.dev/flutter/widgets/RouterDelegate-class.html\"><strong>RouterDelegate</strong></a> — defines app-specific behavior of how the Router learns about changes in app state and how it responds to them. Its job is to listen to the RouteInformationParser and the app state and build the Navigator with the current list of Pages.</li><li><a href=\"https://master-api.flutter.dev/flutter/widgets/BackButtonDispatcher-class.html\"><strong>BackButtonDispatcher</strong></a> — reports back button presses to the Router.</li></ul><p>The following diagram shows how the RouterDelegate interacts with the Router, RouteInformationParser, and the app’s state:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hNt4Bc8FZBp_Gqh7iED3FA.png\" /></figure><p>Here’s an example of how these pieces interact:</p><ol><li>When the platform emits a new route (for example, “books/2”) , the RouteInformationParser converts it into an abstract data type T that you define in your app (for example, a class called BooksRoutePath).</li><li>RouterDelegate’s setNewRoutePath method is called with this data type, and must update the application state to reflect the change (for example, by setting the selectedBookId) and call notifyListeners.</li><li>When notifyListeners is called, it tells the Router to rebuild the RouterDelegate (using its build() method)</li><li>RouterDelegate.build() returns a new Navigator, whose pages now reflect the change to the app state (for example, the selectedBookId).</li></ol><h3>Navigator 2.0 exercise</h3><p>This section leads you through an exercise using the Navigator 2.0 API. We’ll end up with an app that can stay in sync with the URL bar, and handle back button presses from the app and the browser, as shown in the following GIF:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PYHrYurwAGyQC8vsnAaWiA.gif\" /></figure><p>To follow along, <a href=\"https://flutter.dev/docs/development/tools/sdk/upgrading#switching-flutter-channels\">switch to the master channel</a>, <a href=\"https://flutter.dev/docs/get-started/web#create-a-new-project-with-web-support\">create a new Flutter project with web support</a>, and replace the contents of lib/main.dart with the following:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/cfd1389f1cea52fd826cb2f0d3c41710/href\">https://medium.com/media/cfd1389f1cea52fd826cb2f0d3c41710/href</a></iframe><h3>Pages</h3><p>The Navigator has a new pages argument in its constructor. If the list of Page objects changes, Navigator updates the stack of routes to match. To see how this works, we’ll build an app that displays a list of books.</p><p>In _BooksAppState, keep two pieces of state: a list of books and the selected book:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/845c5fd2aae489e174819bafe385665e/href\">https://medium.com/media/845c5fd2aae489e174819bafe385665e/href</a></iframe><p>Then in _BooksAppState, return a Navigator with a list of Page objects:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/293236ea6a501d939a6c2a0c88cd559f/href\">https://medium.com/media/293236ea6a501d939a6c2a0c88cd559f/href</a></iframe><p>Since this app has two screens, a list of books and a screen showing the details, add a second (detail) page if a book is selected (using <a href=\"https://dart.dev/guides/language/language-tour#collection-operators\">collection if</a>):</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/30d1e88faa7b68b3559e229ea7e167cf/href\">https://medium.com/media/30d1e88faa7b68b3559e229ea7e167cf/href</a></iframe><p>Note that the key for the page is defined by the value of the book object. This tells the Navigator that this MaterialPage object is different from another when the Book object is different. Without a unique key, the framework can’t determine when to show a transition animation between different Pages.</p><p><strong>Note</strong>: If you prefer, you can also extend Page to customize the behavior. For example, this page adds a custom transition animation:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/574ae43f34ab37f0f3f276530e5d588c/href\">https://medium.com/media/574ae43f34ab37f0f3f276530e5d588c/href</a></iframe><p>Finally, it’s an error to provide a <a href=\"https://api.flutter.dev/flutter/widgets/Navigator/pages.html\">pages</a> argument without also providing an <a href=\"https://api.flutter.dev/flutter/widgets/Navigator/onPopPage.html\">onPopPage</a> callback. This function is called whenever Navigator.pop() is called. It should be used to update the state (that determines the list of pages), and it must call didPop on the route to determine if the pop succeeded:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d6d6bd8b3e7fd7d25f53c064c6ef33ab/href\">https://medium.com/media/d6d6bd8b3e7fd7d25f53c064c6ef33ab/href</a></iframe><p>It’s important to check whether didPop fails before updating the app state.</p><p>Using setState notifies the framework to call the build() method, which returns a list with a single page when _selectedBook is null.</p><p>Here’s the full example:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/bcd25ca6bdad3e3c696cb3b4af81f475/href\">https://medium.com/media/bcd25ca6bdad3e3c696cb3b4af81f475/href</a></iframe><p>As it stands, this app only enables us to define the stack of pages in a declarative way. We aren’t able to handle the platform’s back button, and the browser’s URL doesn’t change as we navigate.</p><h3>Router</h3><p>So far, the app can show different pages, but it can’t handle routes from the underlying platform, for example if the user updates the URL in the browser.</p><p>This section shows how to implement the RouteInformationParser, RouterDelegate, and update the app state. Once set up, the app stays in sync with the browser’s URL.</p><h4><strong>Data types</strong></h4><p>The RouteInformationParser parses the route information into a user-defined data type, so we’ll define that first:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d53bacff37bb54de3e82c883673eacae/href\">https://medium.com/media/d53bacff37bb54de3e82c883673eacae/href</a></iframe><p>In this app, all of the routes in the app can be represented using a single class. Instead, you might choose to use different classes that implement a superclass, or manage the route information in another way.</p><h4><strong>RouterDelegate</strong></h4><p>Next, add a class that extends RouterDelegate:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/96b856ebffe0283cc5595a29a0a9620e/href\">https://medium.com/media/96b856ebffe0283cc5595a29a0a9620e/href</a></iframe><p>The generic type defined on RouterDelegate is BookRoutePath, which contains all the state needed to decide which pages to show.</p><p>We’ll need to move some logic from _BooksAppState to BookRouterDelegate, and create a GlobalKey. In this example, the app state is stored directly on the RouterDelegate, but could also be separated into another class.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ea8c72e1a8b1742705d6aca9152c7e19/href\">https://medium.com/media/ea8c72e1a8b1742705d6aca9152c7e19/href</a></iframe><p>In order to show the correct path in the URL, we need to return a BookRoutePath based on the current state of the app:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/6f459a26de1d686bf3d8fca7aafbd431/href\">https://medium.com/media/6f459a26de1d686bf3d8fca7aafbd431/href</a></iframe><p>Next, the build method in a RouterDelegate needs to return a Navigator:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/a46807df165f002a1c86f873dd5fbb9e/href\">https://medium.com/media/a46807df165f002a1c86f873dd5fbb9e/href</a></iframe><p>The onPopPage callback now uses notifyListeners instead of setState, since this class is now a ChangeNotifier, not a widget. When the RouterDelegate notifies its listeners, the Router widget is likewise notified that the RouterDelegate&#39;s currentConfiguration has changed and that its build method needs to be called again to build a new Navigator.</p><p>The _handleBookTapped method also needs to use notifyListeners instead of setState:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ce4cf764a0951209deacf3d8af3f9997/href\">https://medium.com/media/ce4cf764a0951209deacf3d8af3f9997/href</a></iframe><p>When a new route has been pushed to the application, Router calls setNewRoutePath, which gives our app the opportunity to update the app state based on the changes to the route:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/df6a5bbbc57d2bfae0cdd2fa5e127a2e/href\">https://medium.com/media/df6a5bbbc57d2bfae0cdd2fa5e127a2e/href</a></iframe><h4><strong>RouteInformationParser</strong></h4><p>The RouteInformationParser provides a hook to parse incoming routes (RouteInformation) and convert it into a user defined type (BookRoutePath). Use the Uri class to take care of the parsing:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/82d55d2673dc5cfe048869da4c5ff433/href\">https://medium.com/media/82d55d2673dc5cfe048869da4c5ff433/href</a></iframe><p>This implementation is specific to this app, not a general route parsing solution. More on that later.</p><p>To use these new classes, we use the new MaterialApp.router constructor and pass in our custom implementations:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f8524f0e27ed08d99cf48761019e0729/href\">https://medium.com/media/f8524f0e27ed08d99cf48761019e0729/href</a></iframe><p>Here’s the complete example:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/08b2e895238b4f74ea44d8ad176c8dc2/href\">https://medium.com/media/08b2e895238b4f74ea44d8ad176c8dc2/href</a></iframe><p>Running this sample in Chrome now shows the routes as they are being navigated, and navigates to the correct page when the URL is manually edited.</p><h4><strong>TransitionDelegate</strong></h4><p>You can provide a custom implementation of TransitionDelegate that customizes how routes appear on (or are removed from) the screen when the list of pages changes. If you need to customize this, read on, but if you are happy with the default behavior you can skip this section.</p><p>Provide a custom TransitionDelegate to a Navigator that defines the desired behavior:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/37c2ae786609d0af69a2458bcbb4d91b/href\">https://medium.com/media/37c2ae786609d0af69a2458bcbb4d91b/href</a></iframe><p>For example, the following implementation disables all transition animations:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5e3d7b4a485b8905bc531be5688bb91e/href\">https://medium.com/media/5e3d7b4a485b8905bc531be5688bb91e/href</a></iframe><p>This custom implementation overrides resolve(), which is in charge of marking the various routes as either pushed, popped, added, completed, or removed:</p><ul><li>markForPush — displays the route with an animated transition</li><li>markForAdd — displays the route <em>without</em> an animated transition</li><li>markForPop — removes the route with an animated transition and completes it with a result. “Completing” in this context means that the result object is passed to the onPopPage callback on AppRouterDelegate.</li><li>markForComplete — removes the route without a transition and completes it with a result</li><li>markForRemove — removes the route with no animated transition and without completing.</li></ul><p>This class only affects the <em>declarative</em> API, which is why the <strong>back</strong> button still displays a transition animation.</p><p><strong>How this example works: </strong>This example looks at both the new routes and the routes that are exiting the screen. It goes through all of the objects in newPageRouteHistory and marks them to be added without a transition animation using markForAdd. Next, it loops through values of the locationToExitingPageRoute map. If it finds a route marked as isWaitingForExitingDecision, then it calls markForRemove to indicate that the route should be removed without a transition and without completing.</p><p><a href=\"http://gist.github.com/5ce79aee5b5f83cfababa97c9cf0a204\">Here’s the full sample(Gist)</a>.</p><h4>Nested routers</h4><p>This larger demo shows how to add a Router within another Router. Many apps require routes for the destinations in a BottomAppBar, and routes for a stack of views above it, which <a href=\"https://medium.com/flutter/getting-to-the-bottom-of-navigation-in-flutter-b3e440b9386\">requires two Navigators</a>. To do this, the app uses an application state object to store app-specific navigation state (the selected menu index and the selected Book object). This example also shows how to configure which Router handles the back button.</p><p><a href=\"http://gist.github.com/bbca91e23bbb4d39247fa922533be7c9\">Nested router sample(Gist)</a></p><h3>What’s next</h3><p>This article explored how to use these APIs for a specific app, but could also be used to build a higher-level API package. We hope that you’ll join us in exploring what a higher-level API built on top of these features can do for users.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7c9068155ade\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade\">Learning Flutter’s new Navigation and Routing system</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-09-29T15:24:10.000Z":{"title":"Integration Testing with flutter_driver","link":"https://medium.com/flutter/integration-testing-with-flutter-driver-36f66ede5cf2?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/36f66ede5cf2","category":["testing","integration-testing","flutter","flutter-package"],"dc:creator":"Pierre-Louis Guidez","pubDate":"Tue, 29 Sep 2020 15:24:10 GMT","atom:updated":"2020-10-06T08:34:44.417Z","content:encoded":"<h3>Integration testing with flutter_driver</h3><p>Unit tests ensure that individual parts of your application work as intended, but what about your application as a whole? This is where integration testing comes in.</p><h3>Flutter driver</h3><p>If you’ve never done integration testing in Flutter (or anywhere), fear not! Adding integration tests to your app is a straightforward task in Flutter. A very helpful set of articles will guide you.</p><ol><li><a href=\"https://flutter.dev/docs/cookbook/testing/integration/introduction\">An introduction to integration testing</a>: What even is this thing, and how do I set it up?</li><li><a href=\"https://flutter.dev/docs/cookbook/testing/integration/scrolling\">Handle scrolling</a>: How do I handle the common pattern of scrolling to something?</li></ol><p>Getting to this point ensures that your app can run without crashing, that certain screens can be reached, that specific actions have some result, and so on. What tests you create depends on your needs. You can have one test that opens every screen of your app, or tests that go through specific user journeys.</p><p>But we can go further with flutter_driver by using it for performance testing.</p><h3>Performance profiling</h3><p>Simply wrapping your test with flutterDriver.traceAction records the performance of your app as your test is running. This output data (in JSON format) can be used in Continuous Integration (CI) testing, to ensure, for example, that certain metrics remain above or below a particular threshold. The data can also be used to debug performance issues. For details on how to do performance profiling, see the article on integration testing, <a href=\"https://flutter.dev/docs/cookbook/testing/integration/profiling\">Performance profiling</a>.</p><p>For reference, the Flutter Gallery has an <a href=\"https://github.com/flutter/gallery/tree/master/test_driver\">integration test</a> that goes through all demos and captures performance metrics for a subset of them.</p><h3>Screenshot testing</h3><p><em>Screenshot testing</em> is the technique of rendering the UI, capturing a screenshot of the output, and then comparing the result to an expected image. An easy way to add screenshot tests to your app is to use flutterDriver.screenshot. To learn more and see a real code example, see the Medium article, <a href=\"https://medium.com/flutter-community/testing-flutter-ui-with-flutter-driver-c1583681e337#8561\">Testing Flutter UI with Flutter Driver</a>, by community member Darshan Kawar.</p><p>This method can be easily integrated into your continuous integration testing setup to prevent UI regressions. The Flutter Gallery has a few <a href=\"https://github.com/flutter/gallery/tree/master/golden_test\">screenshots tests</a> and a <a href=\"https://github.com/flutter/gallery/blob/master/.github/workflows/golden.yml\">GitHub workflow configuration</a> to automatically test incoming PRs.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3821c3795913217d187d26b04dbdc1a4/href\">https://medium.com/media/3821c3795913217d187d26b04dbdc1a4/href</a></iframe><h3>a11y testing</h3><p><em>a11y</em>, or accessibility<em> </em>testing, is a type of usability testing performed to ensure that the application is usable by people with disabilities, such as vision impairment, hearing loss, a motor disability, and so on. Use flutterDriver.getSemanticsId to verify semantic labels, for example, to verify that all images have semantic labels.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9712bbcd895e55e14cb2ede49659854b/href\">https://medium.com/media/9712bbcd895e55e14cb2ede49659854b/href</a></iframe><p>Learn more about testing for accessibility in another great article by Darshan Kawar, <a href=\"https://medium.com/flutter-community/developing-and-testing-accessible-app-in-flutter-1dc1d33c7eea\">Developing and testing accessible apps in Flutter</a>.</p><h3>i18n testing</h3><p><em>i18n</em>, or internationalization testing, is the process of testing that an application can be used in various languages and regions without any changes.</p><p>Depending on how your localization code is set up, you might change locales using your localizations’ delegate.</p><pre>ExampleAppLocalizationsDelegate.load(Locale(‘fr’));</pre><p>Alternatively, when using MaterialApp, simply allow overriding the locale for the app to run in a different locale.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/faf86fe011e8553d226ef1e531f6bb2c/href\">https://medium.com/media/faf86fe011e8553d226ef1e531f6bb2c/href</a></iframe><p>In the driver file that launches the app, set the locale.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e56e6c3f196adf5990428f6f77a79e9e/href\">https://medium.com/media/e56e6c3f196adf5990428f6f77a79e9e/href</a></iframe><h3>Extra tip</h3><p>Want to know if an element is present on the page?</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7bc1030109a119c1862a5dc5513e34ea/href\">https://medium.com/media/7bc1030109a119c1862a5dc5513e34ea/href</a></iframe><p>You can choose whatever timeout works for your app.</p><h3>Closing remarks</h3><p>By now you should have a good idea of what is possible with flutter_driver. You can combine methods to fit your needs; for example, performing screenshot tests using different locales. If we forgot something, let us know in the comments! For more information, see the <a href=\"https://api.flutter.dev/flutter/flutter_driver/flutter_driver-library.html\">flutter_driver</a> API docs.</p><p><em>About the author: Pierre-Louis is a recent undergrad for the University of Waterloo. Based in Munich, he is part of a team that maintains the Flutter Material library. He has a keen interest in UI, UX, and app development. You can connect with him on </em><a href=\"https://www.linkedin.com/in/guidezpl\"><em>LinkedIn</em></a><em> and </em><a href=\"https://github.com/guidezpl\"><em>GitHub</em></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=36f66ede5cf2\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/integration-testing-with-flutter-driver-36f66ede5cf2\">Integration Testing with flutter_driver</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-09-23T14:57:38.000Z":{"title":"Announcing Flutter Windows Alpha","link":"https://medium.com/flutter/announcing-flutter-windows-alpha-33982cd0f433?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/33982cd0f433","category":["flutter","windows","programming","cross-platform-apps","announcements"],"dc:creator":"Chris Sells","pubDate":"Wed, 23 Sep 2020 14:57:38 GMT","atom:updated":"2020-09-23T21:31:15.464Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Native Windows app compilation, some early plugins, and a desktop-ready Flutter Gallery app</h4><p>Our mission is to provide developers with an open source, high-productivity framework for building beautiful, native apps on any platform. So far, we’ve shipped production-quality support for Android and iOS, with eight stable releases and over 100,000 apps shipped to the Google Play Store alone. We continue to broaden our focus to include other platforms including web, macOS, and Linux. Today, we’re pleased to announce an additional target for Flutter with the alpha release of Flutter support for Windows.</p><p>Windows remains a popular choice for desktop and laptop devices, with Microsoft reporting over <a href=\"https://blogs.windows.com/windowsexperience/2020/03/16/windows-10-powering-the-world-with-1-billion-monthly-active-devices/\">one billion active devices running Windows 10</a>. Our own statistics show that over half of all Flutter developers use Windows, so it’s a natural target for Flutter. Native desktop support opens up a variety of exciting possibilities for Flutter, including improved developer tooling, reduced friction for new users, and of course apps that can reach any device a user might have from a single codebase.</p><h3>Adding Windows to Flutter</h3><p>As described in our <a href=\"https://flutter.dev/docs/resources/architectural-overview\">architectural overview</a>, Flutter is a cross-platform UI toolkit that is designed to allow code reuse across operating systems such as iOS and Android, while also allowing applications to interface directly with underlying platform services. The goal is to enable developers to deliver high-performance apps that feel natural on different platforms, embracing differences where they exist while sharing as much code as possible. At the core of Flutter is the engine, which supports the primitives necessary to support all Flutter applications. The engine is responsible for rasterizing composited scenes whenever a new frame needs to be painted. It provides the low-level implementation of Flutter’s core API, including graphics, text layout, file and network I/O, accessibility support, plugin architecture, and a Dart runtime and compile toolchain.</p><p>Each new platform we add to Flutter expands the core framework with new services to enable it to shine on that platform. We started on Android and iOS with Material Design as well as a touch-based, mobile-centric user interface that is designed to be pixel-perfect on both mobile platforms. Adding support for desktop form factors with web, Windows, macOS, and Linux brings a whole new set of services, including robust support for keyboards, mice, mouse wheels and controllers on the input side as well as widgets that adapt or even work best at the larger screen sizes that come with web and desktop apps.</p><p>Furthermore, each new platform doesn’t just influence the Flutter framework and engine, but a lot of other things as well:</p><ul><li><strong>Toolchain updates: </strong>adding a new target to the CLI and IDE tools (in this case Windows)</li><li><strong>Shell: </strong>support for handling input from Windows via WM_* messages and output via <a href=\"https://opensource.google/projects/angle\">ANGLE</a>, which uses <a href=\"https://skia.org/\">Skia</a> to render at native speed to an underlying DirectX surface</li><li><strong>Runner: </strong>every project gets a shell application for the supported targets. For Windows, it’s a Win32/C++ program that loads your Flutter code and executes it at runtime. It’s a good place to add native code to your app if you need it.</li><li><strong>Plugins: </strong>A plugin is a mixture of Dart code and native code for each of the platforms that the plugin supports. That native code needs to be added for each plugin that is compiled into your Flutter app on Windows.</li></ul><p>This alpha release offers a solid foundation that we’ll stabilize over the coming months. With support for Windows 7 and above, we hope this gives adventurous developers something to get started with.</p><h3>Exploring some sample apps</h3><p>To see Flutter support for Windows in action, you might want to try out some of the sample apps that we’ve created that run well on Windows with our newly-added support. The first, the Flokk app, was created in concert with the designers and developers at <a href=\"http://gskinner.com\">gskinner.com</a>. The goal was to demonstrate that Flutter was ready for the desktop by creating an innovative, beautiful Flutter desktop app. Flokk is an app that works with your real Google Contacts data as well as showing your contacts’ activity on GitHub and Twitter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*39MKtw4ICepbL_8d\" /></figure><p>If you’d like to use the Flokk app on your Windows machine, you can <a href=\"https://github.com/gskinnerTeam/Flokk/releases\">download the latest release on GitHub</a>. And if you’d like to read about how gskinner built this app, see their excellent blog post: <a href=\"https://blog.gskinner.com/archives/2020/09/flokk---how-we-built-a-desktop-app-using-flutter.html\">Flokk — How we built a Desktop App Using Flutter</a>.</p><p>In addition, the Flutter Gallery app, our showcase app for all things Flutter, was completely rewritten recently to add support for desktop form factors. This allowed us to check that it works well on <a href=\"https://gallery.flutter.dev\">the web</a> as well as Windows, macOS, and Linux.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*N_tKeqs435R4yICO\" /></figure><p>Many studies in the Gallery demonstrate ideas for different app styles that we recommend when designing your own Windows app with Flutter. When you find something you like, <a href=\"https://github.com/flutter/gallery\">the code is available on GitHub</a>.</p><h3>Getting started with Flutter for Windows</h3><p>Get started by installing the Flutter SDK according to the <a href=\"https://flutter.dev/docs/get-started/install/windows\">Windows install instructions</a>. To target Windows desktop, you first need to <a href=\"https://flutter.dev/desktop#additional-windows-requirements\">install the tooling described in the desktop docs</a>. By default, Flutter assumes that you’re building production software and isn’t configured to develop Windows apps. However, that’s easily fixed from the command line:</p><pre>$ flutter channel dev<br>$ flutter upgrade<br>$ flutter config --enable-windows-desktop</pre><p>The first command sets Flutter to use the experimental-quality “dev” channel (instead of the “stable” channel, which is the default). This allows you to use platform support that’s still in alpha, like Windows. The second command pulls down the latest bits on that channel. The third command enables Windows app development on your PC.</p><p>Once you’ve set it up, every time you create a new Flutter app, using the extension support for either <a href=\"https://flutter.dev/docs/get-started/editor?tab=androidstudio\">Android Studio</a> or <a href=\"https://flutter.dev/docs/get-started/editor?tab=vscode\">Visual Studio Code</a>, or from the command line, it creates a windows subfolder.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O-akivVSsv0tL0wI\" /></figure><p>If you’re curious, running the default app on Windows looks like the following:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/838/1*fsnlPFkpQWZjYIv-NCE6Vg.png\" /></figure><p>And finally, once you’ve created your app, building it creates a release-mode, native EXE file as well as the necessary supporting DLLs. At that point, if you want to experiment with running your new Windows app on any Windows 10 machine, even those that don’t have Flutter installed, you can follow <a href=\"https://flutter.dev/desktop#distribution\">the steps to zip up the necessary files</a> and go.</p><h3>Plugins for Windows</h3><p>Even though we’ve just reached the alpha release, the Flutter community has already been working on plugins for Windows. Here are a few:</p><ul><li><a href=\"https://pub.dev/packages/url_launcher\">url_launcher</a>: launch URLs in the browser from your app</li><li><a href=\"https://pub.dev/packages/path_provider\">path_provider</a>: find the path to special directions on the user’s machine like Documents or temp</li><li><a href=\"https://pub.dev/packages/shared_preferences\">shared_preferences</a>: keep user preferences serialized on disk between sessions of your app</li><li><a href=\"https://pub.dev/packages/biometric_storage\">biometric_storage</a>: storage encrypted by biometrics</li><li><a href=\"https://pub.dev/packages/flutter_audio_desktop\">flutter_audio_desktop</a>: play audio from your desktop apps</li></ul><p>The benefit of using these plugins is that most of them also support other Flutter platforms, which enables you to target your apps at Android, iOS, web, etc. as well as Windows. Furthermore, while about one-third of the available packages on <a href=\"http://pub.dev\">pub.dev</a> (the package manager for Dart and Flutter) are plugins with platform-specific code, most are not. For instance, <a href=\"https://pub.dev/flutter/favorites\">many of the highest quality and most used packages</a> are part of the Flutter Favorite program and most of them work on Windows. If you’d like to see the full list of packages that run on Windows, you can <a href=\"https://pub.dev/flutter/packages?platform=windows\">run this query on pub.dev</a>.</p><h3>Interop with Windows</h3><p>If you’d like to build your own plugins for Windows, you can. Once you’re on the dev channel and you have Windows enabled for your machine, you can get started with the following command:</p><pre>$ flutter create --template plugin --platforms windows hello_plugin</pre><p>At that point, you’ll be able to add your Flutter code to the lib subfolder and your Windows code to the windows subfolder in your plugin project. You’ll communicate between the two stacks using <a href=\"https://flutter.dev/docs/development/platform-integration/platform-channels\">Platform Channels</a>, which is essentially message passing between your Dart and C++ code. For a well crafted example of this, <a href=\"https://github.com/flutter/plugins/tree/master/packages/url_launcher/url_launcher_windows\">see the url_launcher implementation</a>.</p><p>However, Platform Channels are not your only option for interop with Windows. If you like, you can use the <a href=\"https://flutter.dev/docs/development/platform-integration/c-interop\">Dart FFI (Foreign Function Interface)</a> to load libraries and call into C-style APIs, such as the Win32 API. Unlike url_launcher, which uses Platform Channels, the path_provider plugin was implemented using FFI, as you can see in <a href=\"https://github.com/flutter/plugins/tree/master/packages/path_provider/path_provider_windows\">the GitHub repo</a>. Instead of going back and forth between Dart and C++, FFI allows you to write code to import the API that you want directly. For example, here’s the code for calling the MessageBox API:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b635c5481c5c0f1ab18e10657790d617/href\">https://medium.com/media/b635c5481c5c0f1ab18e10657790d617/href</a></iframe><p>This code doesn’t incur the overhead of transitioning between two threads like Platform Channels. FFI includes support for many different kinds of APIs, including Win32, WinRT, and COM. But before you run off and wrap the entire C-based Windows API, please check out <a href=\"https://pub.dev/packages/win32\">the win32 plugin</a>, which is already well on its way to doing just that. In fact, the <a href=\"https://pub.dev/packages/path_provider\">path_provider</a> plugin was itself implemented using the win32 plugin. For the details of how the win32 plugin was developed and how it works, check out the blog post, <a href=\"https://medium.com/@timsneath/windows-fun-with-dart-ffi-687c4619e78d\">Windows fun with Dart FFI</a>.</p><h3>Flutter for Windows resources</h3><p>Wherever you are in your Flutter for Windows journey, you should be sure to <a href=\"http://flutter.dev/desktop\">read the desktop documentation on flutter.dev</a>, which includes the latest details. Also, you’ll want to take a spin through the Flutter <a href=\"https://codelabs.developers.google.com/codelabs/flutter-github-graphql-client\">codelab for writing a Windows, macOS, and Windows desktop-targeted application</a>, which includes code for real-world scenarios like authentication using OAuth, accessing the GitHub API, and using GraphQL. Or, for another good example of Flutter desktop code that works on Windows, <a href=\"https://github.com/flutter/samples/tree/master/experimental/desktop_photo_search\">check out the Photo Search sample</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/816/0*3OlPPAMAvO84mJ6M\" /></figure><p>It uses the standard Windows File Open dialog, a tree view widget, a splitter widget, and integrates the results with a real-world REST API.</p><p>For other helpful desktop-oriented widgets, we recommend <a href=\"https://github.com/google/flutter-desktop-embedding/tree/master/plugins/menubar\">the menubar plugin</a>, <a href=\"https://api.flutter.dev/flutter/material/NavigationRail-class.html\">the NavigationRail widget</a>, and <a href=\"https://api.flutter.dev/flutter/material/DataTable-class.html\">the DataTable widget</a>. You might also be interested in <a href=\"https://api.flutter.dev/flutter/widgets/InteractiveViewer-class.html\">the InteractiveViewer widget</a>, which has full desktop support for mouse gestures to pan and zoom child widgets.</p><p>Another useful set of widgets to explore are <a href=\"https://pub.dev/publishers/syncfusion.com/packages\">those from SyncFusion</a>, who are already well-known in the Windows development community. They provide a wide range of enterprise-quality widgets for creating charts, gauges, data grids, and more.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*dY1TC_i0KyjKNrvh\" /></figure><p>These widgets have a community and enterprise license, so you can find the right fit for your project.</p><h3>Flutter for Windows in the wild</h3><p>In addition to packages and plugins for Windows (and Flutter desktop in general), Flutter developers have also been building great apps to target Windows, like this experimental build from <a href=\"https://www.invoiceninja.com/\">Invoice Ninja</a>:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZuwlwG4e6fwCeQ_1\" /></figure><p>Invoice Ninja is an invoicing company that depends on Flutter to bring in its revenue. They target Android and iOS in production today and have <a href=\"https://demo.invoiceninja.com\">a web-based demo</a> for you to try, but are also looking ahead to providing a desktop version.</p><blockquote>“At Invoice Ninja we’ve struggled in the past to support just web and mobile, at one point maintaining three separate codebases. With Flutter, and more recently Flutter Desktop, we’ve been able to build apps for every major platform with a single codebase. Not only do we basically get a free desktop version of our app but it has the best performance of them all!”</blockquote><blockquote>— Hillel Coren, Co-Founder, Invoice Ninja</blockquote><p>If you’re interested in the implementation of a real-world, revenue-generating Flutter app that works on mobile and desktop form factors, <a href=\"https://github.com/invoiceninja/flutter-client\">the source code is available on GitHub</a>.</p><p><a href=\"https://drone-detection-system.com/\">Aartos</a> is another company building great things, including a real-time drone detection system with <a href=\"https://drone-detection-system.com/aartos-dds/product-overview/\">a multi-platform client written in Flutter</a>. Here’s an early version of the Windows client running right next to the mobile client:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FmGvPCT7Vc2Y%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DmGvPCT7Vc2Y&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FmGvPCT7Vc2Y%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/38e6826574e5d1090eb7a453f02c2480/href\">https://medium.com/media/38e6826574e5d1090eb7a453f02c2480/href</a></iframe><p>Both of these versions, targeting iOS and Windows, share the exact same codebase.</p><p>If you’re an experienced Flutter developer and you find yourself switching between different versions of Flutter; for example, one version to ship your production mobile apps and another to experiment with the Windows alpha, then you might appreciate the Flutter Version Manager, which now comes with <a href=\"https://github.com/leoafarias/fvm/releases\">a Windows GUI that you can download</a>.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F_WA71wSt2ww%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D_WA71wSt2ww&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F_WA71wSt2ww%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"640\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b310e5f337134761f21ce3e179076a42/href\">https://medium.com/media/b310e5f337134761f21ce3e179076a42/href</a></iframe><p>This tool is open source, so can <a href=\"https://github.com/leoafarias/fvm\">see for yourself</a> how Leo makes it look so great.</p><h3>What’s next</h3><p>Now that we’ve released the alpha, our attention shifts to completing the feature set and stabilizing the product for release. As an open source project, you can follow our <a href=\"https://github.com/flutter/flutter/projects/55\">progress to beta on our GitHub site</a>, with remaining work to complete including accessibility, globalization and localization, enhanced keyboard and text handling, support for command line arguments, and more.</p><p>In addition to supporting the classic Win32 API, we’re also experimenting with <a href=\"https://docs.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide\">a UWP-based version of the Flutter shell</a>, which allows Flutter to reach an even broader variety of Windows-based devices, including Xbox. As part of that experiment, this week we released a UWP-based version of the <a href=\"https://www.microsoft.com/en-us/p/flutter-gallery/9pdwctdfc7qq\">Flutter Gallery to the Windows Store</a>.</p><p>The following screenshot shows the UWP-based Flutter Gallery running on an Xbox:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*cNcLDSm8fwlwux15\" /></figure><p>And here’s the same app running on a dual-screen Windows device running on the <a href=\"https://docs.microsoft.com/en-us/dual-screen/windows/get-dev-tools\">Windows 10X emulator</a>:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZIxhg4Lx_KI5v4bc1zi5zg.png\" /></figure><p><a href=\"https://github.com/flutter/flutter/issues/14967#issuecomment-697108439\">You can read more about the progress on Flutter for UWP on GitHub</a>.</p><h3>Summary</h3><p>With this release, we bring the power of Flutter to Windows, with its declarative, composable, reactive framework for developer productivity, its adaptable implementation of the Material spec so you can make your apps look and feel the way you want them to, as well as the full set of Flutter development and debugging tools. When complete, your app is compiled to native 64-bit code that you can package and bring to other Windows machines just like any other native app. And finally, you can use that same codebase to create an app targeting Android, iOS, web, macOS, and Linux.</p><p>If you’d like to start building Windows apps with Flutter, we’d love <a href=\"https://github.com/flutter/flutter/issues\">your feedback</a>! If you prefer to use your Windows expertise to <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin\">build out the Windows implementation of popular plugins</a>, or build some Windows-centric tooling for Flutter (perhaps a CLI that creates MSIXs from the output of a flutter build windows command…), that’s also welcome!</p><p>With the new support for Windows in Flutter, what are you going to build?</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=33982cd0f433\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-windows-alpha-33982cd0f433\">Announcing Flutter Windows Alpha</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-09-21T13:31:41.000Z":{"title":"Handling Web Gestures in Flutter","link":"https://medium.com/flutter/handling-web-gestures-in-flutter-e16946a04745?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/e16946a04745","category":["flutter","gestures","dart","web-development","keyboard"],"dc:creator":"Jose Alba","pubDate":"Mon, 21 Sep 2020 13:31:41 GMT","atom:updated":"2020-09-21T13:31:40.974Z","content:encoded":"<h3>Handling web gestures in Flutter</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BzcKF4qdbLIFFB6XL8x-9A.png\" /></figure><p>Flutter has released web support that allows you to create dynamic websites. With Flutter web, MacOS, Linux, and Windows operating systems (even on mobile devices connected to a mouse, keyboard, or other peripherals), you now have access to platform-specific behaviors including focus support, keyboard input, custom mouse cursors, and hover input. But, how do you make use of these platform behaviors in Flutter?</p><p>This article explains how to use the FocusableActionDetector widget, which handles keyboard input, focus input, hover input, and custom mouse cursors.</p><h3>How to use the Focusable Action Detector widget</h3><p>The Focusable Action Detector widget allows you to handles several web-specific actions, including:</p><ol><li>Keyboard input</li><li>Focus input</li><li>Hover input</li><li>Custom mouse cursors</li></ol><p>See the FocusableActionDetector in action in the <a href=\"https://dartpad.dev/d16345202d0e26d40fe14904657dc24a\">DartPad #1</a> example.</p><blockquote><strong>Note</strong>: This article uses two DartPad examples, though there are multiple links to each. <a href=\"https://dartpad.dev/d16345202d0e26d40fe14904657dc24a\">DartPad #1</a> shows the FocusableActionDetector sample, and <a href=\"https://dartpad.dev/5544c57e20454fe212e3ec5cf10b1f0a\">DartPad #2</a> demonstrates hover and focus support for FocusableActionDetector.</blockquote><h3>Keyboard input</h3><p>Flutter lets you define custom actions to handle keyboard input. Let’s say you want to have a hidden menu or your application has to handle a lot of custom keyboard input. This is easy to achieve with the FocusableActionDetector widget.</p><p>First, add the following import:</p><p>import ‘package:flutter/services.dart’;</p><p>Next, from the class where the FocusableActionDetector is called, initialize two private variables. These variables map the keyboard input to the desired action:</p><pre>Map&lt;LogicalKeySet, Intent&gt; _shortcutMap;</pre><pre>Map&lt;Type, Action&lt;Intent&gt;&gt; _actionMap;</pre><p>Define a FocusableActionDetector widget. Note that the custom keyboard input activates only when the child widget is in focus:</p><pre>FocusableActionDetector(</pre><pre>  actions: _actionMap,</pre><pre>  shortcuts: _shortcutMap,</pre><pre>  child:</pre><pre>)</pre><p>This class maps the enums and keyboard input type to the Intent class. The following setup is necessary because the actions and shortcuts parameter requires a class that extends Intent:</p><pre>class _ShowSecretMessageIntent extends Intent {</pre><pre>  const _ShowSecretMessageIntent({@required this.type});</pre><pre>  const _ShowSecretMessageIntent.P() : type = _SecretMessageType.P;</pre><pre>  const _ShowSecretMessageIntent.L() : type = _SecretMessageType.L;</pre><pre>  const _ShowSecretMessageIntent.A() : type = _SecretMessageType.A;</pre><pre>  const _ShowSecretMessageIntent.T() : type = _SecretMessageType.T;</pre><pre>  const _ShowSecretMessageIntent.F() : type = _SecretMessageType.F;</pre><pre>  const _ShowSecretMessageIntent.O() : type = _SecretMessageType.O;</pre><pre>  const _ShowSecretMessageIntent.R() : type = _SecretMessageType.R;</pre><pre>  const _ShowSecretMessageIntent.M() : type = _SecretMessageType.M;</pre><pre>  final _SecretMessageType type;</pre><pre>}</pre><pre>enum _SecretMessageType {</pre><pre>  P,</pre><pre>  L,</pre><pre>  A,</pre><pre>  T,</pre><pre>  F,</pre><pre>  O,</pre><pre>  R,</pre><pre>  M,</pre><pre>}</pre><p>Within the initState method, initialize the mapping previously defined:</p><pre>void initState() {</pre><pre>  _shortcutMap = &lt;LogicalKeySet, Intent&gt;{</pre><pre>    LogicalKeySet(LogicalKeyboardKey.keyP):</pre><pre>      const _ShowSecretMessageIntent.P(),</pre><pre>    LogicalKeySet(LogicalKeyboardKey.keyL):</pre><pre>      const _ShowSecretMessageIntent.L(),</pre><pre>    LogicalKeySet(LogicalKeyboardKey.keyA):</pre><pre>      const _ShowSecretMessageIntent.A(),</pre><pre>    LogicalKeySet(LogicalKeyboardKey.keyT):</pre><pre>      const _ShowSecretMessageIntent.T(),</pre><pre>    LogicalKeySet(LogicalKeyboardKey.keyF):</pre><pre>      const _ShowSecretMessageIntent.F(),</pre><pre>    LogicalKeySet(LogicalKeyboardKey.keyO):</pre><pre>      const _ShowSecretMessageIntent.O(),</pre><pre>    LogicalKeySet(LogicalKeyboardKey.keyR):</pre><pre>      const _ShowSecretMessageIntent.R(),</pre><pre>    LogicalKeySet(LogicalKeyboardKey.keyM):</pre><pre>      const _ShowSecretMessageIntent.M(),</pre><pre>    };</pre><pre>  _actionMap = &lt;Type, Action&lt;Intent&gt;&gt;{</pre><pre>    _ShowSecretMessageIntent: CallbackAction&lt;_ShowSecretMessageIntent&gt;(</pre><pre>      onInvoke: _actionHandler,</pre><pre>    ),</pre><pre>  };</pre><pre>}</pre><p>The action handler links the keyboard input to a certain function within the application. Any time a character is pressed, an expanded container is added to the main part of the application. But in your application, you can use it for more creative purposes:</p><pre>void _actionHandler(_ShowSecretMessageIntent intent) {</pre><pre>  switch (intent.type) {</pre><pre>    case _SecretMessageType.P:</pre><pre>      setState(() {</pre><pre>        children.add(</pre><pre>          Expanded(</pre><pre>            child: Container(</pre><pre>              color: Colors.orange,</pre><pre>              child: Text(‘Press L’),</pre><pre>            ),</pre><pre>          ),</pre><pre>        );</pre><pre>      });</pre><pre>    break;</pre><pre>    …</pre><pre>  }</pre><pre>}</pre><h3>Focus input</h3><p>The FocusableActionDetector widget lets you perform action calls any time the specified widget is in focus.</p><p>The focus tree allows you to navigate through your application using the tab key. This allows people with visual impairment to navigate through your website.</p><p>The FocusableActionDetector child widget is selected as the initial focus when no other node in its scope is currently focused. It’s important to set the autofocus parameter variable to true if you want your custom keyboard input to work regardless of whether your child widget has focus or not. This is because, by default, this FocusableActionDetector widget won’t be in focus, hence you won’t be able to use custom keyboard inputs:</p><pre>FocusableActionDetector(</pre><pre>  autofocus: true,</pre><pre>  child : …</pre><pre>),</pre><p>Let’s say you want your child widget to have a different color when focused to identify that this widget is currently in focus. If you need to set custom actions whenever your widget has focus, use the onShowFocusHighlight property.</p><p>The <a href=\"https://dartpad.dev/5544c57e20454fe212e3ec5cf10b1f0a\">DartPad #2</a> example shows how to use the onShowFocusHighlight property.</p><p>Focus is an advanced topic. Learn more about focus by reading the API docs for the <a href=\"https://api.flutter.dev/flutter/widgets/Focus-class.html\">Focus</a> class</p><h3>Hover input</h3><p>The FocusableActionDetector widget lets you handle hover input. That way, anytime a cursor hovers over a certain widget, custom actions can happen. Similar to the onShowFocusHighlight property, the onShowHoverHighlight property lets you create custom actions anytime the mouse cursor hovers over a certain widget.</p><p>Check out the <a href=\"https://dartpad.dev/5544c57e20454fe212e3ec5cf10b1f0a\">DartPad #2</a> example, which demonstrates how to implement custom hover and focus action.</p><p>In the <a href=\"https://dartpad.dev/5544c57e20454fe212e3ec5cf10b1f0a\">DartPad #2</a> example, anytime the mouse hovers over the widget it changes the color of the widget. If you are navigating the application using tab, then you’ll notice that the widget in focus applies a different shade to the widget compared to the widget that is currently being hovered over.</p><p>This means you can have different custom actions anytime the widget is in focus or a mouse cursor hovers over that widget. You can tell this if you hover and focus over on the same widget. That widget is applying two shades at the same time to that widget. For more information, see the API docs for the <a href=\"https://api.flutter.dev/flutter/widgets/FocusableActionDetector-class.html\">FocusableActionDetector</a> class.</p><h3>Custom mouse cursors</h3><p>The FocusableActionDetector widget lets you implement custom mouse cursors. For example, if you want your users to know that a widget is draggable, changing the mouse cursor is a good indicator that you can do this. The FocusableActionDetector widget has a mouseCursor parameter.</p><p>mouseCursor: SystemMouseCursors.grabbing</p><p>The <a href=\"https://dartpad.dev/d16345202d0e26d40fe14904657dc24a\">DartPad #1</a> example demonstrates the different types of mouse cursors within Flutter. Click any of the icons in the app bar to try. There are nine different system default mouse cursors:</p><ol><li>SystemMouseCursors.basic</li><li>SystemMouseCursors.text</li><li>SystemMouseCursors.click</li><li>SystemMouseCursors.forbidden</li><li>SystemMouseCursors.grab</li><li>SystemMouseCursors.grabbing</li><li>SystemMouseCursors.horizontalDoubleArrow (not in stable)</li><li>SystemMouseCursors.verticalDoubleArrow (not in stable)</li><li>SystemMouseCursors.none</li></ol><h3>Closing remarks</h3><p>In Flutter you have access to web-specific APIs. The FocusableActionDetector widget lets you handle web-specific functions in Flutter. To learn more about Flutter web, see the Medium post, <a href=\"https://medium.com/flutter/handling-404-page-not-found-error-in-flutter-731f5a9fba29\">Handling 404: Page not found error in Flutter</a>.</p><p><em>About the author: Jose recently graduated from university and now works on </em><a href=\"https://material.io/\"><em>Material</em></a><em>, a design system that helps teams build high-quality digital experiences. Jose’s team maintains the Flutter </em><a href=\"https://api.flutter.dev/flutter/material/material-library.html\"><em>material library</em></a><em>. To learn more, visit his Jose’s pages on </em><a href=\"https://github.com/JoseAlba\"><em>GitHub</em></a><em>, </em><a href=\"https://www.linkedin.com/in/josealba1996/\"><em>LinkedIn</em></a><em>, </em><a href=\"https://www.youtube.com/channel/UCOdKA_On0oPe1tz02z1QfxA?view_as=subscriber\"><em>YouTube</em></a><em>, and </em><a href=\"https://www.instagram.com/jose.alba/\"><em>Instagram</em></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e16946a04745\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/handling-web-gestures-in-flutter-e16946a04745\">Handling Web Gestures in Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-09-16T17:39:09.000Z":{"title":"Supporting iOS 14 and Xcode 12 with Flutter","link":"https://medium.com/flutter/supporting-ios-14-and-xcode-12-with-flutter-15fe0062e98b?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/15fe0062e98b","category":["ios","mobile-app-development","developer-tools","flutter","xcode"],"dc:creator":"Chris Sells","pubDate":"Wed, 16 Sep 2020 17:39:09 GMT","atom:updated":"2020-09-16T17:39:09.499Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<p>As always, our goal is to make developers successful on Flutter regardless of the platform you’re targeting. Since the announcement of iOS 14 in June, we’ve been working on adding new features to Flutter that support this release, including updates to <a href=\"https://github.com/flutter/flutter/issues/60133\">support Xcode 12</a>, as well as adding new features and improvements to <a href=\"https://github.com/flutter/flutter/issues/61047\">support iOS 14</a>.</p><p>If your iOS 14 app uses <a href=\"https://api.flutter.dev/flutter/material/TextField-class.html\">TextField</a>, <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoTextField-class.html\">CupertinoTextField</a>, or <a href=\"https://api.flutter.dev/flutter/material/TextFormField-class.html\">TextFormField</a>, you’ll want to make sure that it’s built with Flutter 1.20 or later to ensure that your users are not bothered by unnecessary clipboard notification messages, as per Apple’s updated clipboard policy.</p><p><strong>Otherwise, existing production apps will run just fine on your end-users’ iOS 14 devices.</strong> However, if you’re upgrading your development phone to iOS 14 today and want to continue to use it with Flutter, you have two choices.</p><p>Your first choice is to use the <a href=\"https://github.com/flutter/flutter/wiki/Hotfixes-to-the-Stable-Channel\">latest hotfix release of Flutter</a> on the stable channel (1.20.4), which supports development-time deployment to physical iOS 14 devices. Unfortunately, there’s another change that is quite a bit more intrusive (and therefore more risky) which is needed for debugging and hot reload on iOS 14. We’re deferring this fix to our next stable release, which we are planning to release in the next few weeks.</p><p>Your second choice is to use the beta for the upcoming Flutter 1.22 that we’ve released today. This release includes more comprehensive support for iOS 14, including updated visuals, app clips, and Xcode 12 support. We’ll share more about its feature set when it is published to the stable channel, but in the meantime we recommend using this beta if you need support for iOS 14 immediately.</p><p>To obtain the Flutter 1.22 beta, use the following commands:</p><pre>$ flutter channel beta<br>$ flutter upgrade</pre><p>In either case, you’ll want to check out <a href=\"https://flutter.dev/docs/development/ios-14\">the Developing for iOS 14 page</a> for helpful information about targeting iOS 14 with Flutter. If you have any trouble with iOS 14, please <a href=\"https://github.com/flutter/flutter/issues\">file issues on the Flutter repo</a>. If you have any questions, please post them on <a href=\"https://groups.google.com/g/flutter-dev\">the flutter-dev group</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=15fe0062e98b\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/supporting-ios-14-and-xcode-12-with-flutter-15fe0062e98b\">Supporting iOS 14 and Xcode 12 with Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-11-19T16:02:13.000Z":{"title":"Announcing Dart null safety beta","link":"https://medium.com/flutter/announcing-dart-null-safety-beta-4491da22077a?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/4491da22077a","category":["flutter","announcements","dart","nullpointerexception","programming"],"dc:creator":"Michael Thomsen","pubDate":"Thu, 19 Nov 2020 16:02:13 GMT","atom:updated":"2020-11-19T16:02:13.171Z","content:encoded":"<h4>Beginning the journey to migrate packages to a sound, safer state</h4><p><em>Cross-posted here and on the </em><a href=\"https://medium.com/dartlang\"><em>Dart blog</em></a><em>.</em></p><p>Today we’re announcing that <strong>sound null safety is available in beta</strong> for Dart and Flutter. Null safety is our latest major productivity feature, intended to <a href=\"https://dart.dev/null-safety\">help you avoid null errors</a>, a class of bugs that are often hard to spot. If you’re looking for a quick summary of why we’re excited about null safety, check out this new video:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FiYhOU9AuaFs%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DiYhOU9AuaFs&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FiYhOU9AuaFs%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/34cc7c47f5441fbc839569d7a3cee7be/href\">https://medium.com/media/34cc7c47f5441fbc839569d7a3cee7be/href</a></iframe><p>With null safety graduating to beta, <strong>it’s time to start community migration</strong> of the thousands of packages available on <a href=\"https://pub.dev/\">pub.dev</a>. We’ve migrated the Dart core libraries, the Flutter framework, and <a href=\"https://pub.dev/packages?q=&amp;prerelease-null-safe=1\">more than 40</a> Dart and Flutter packages. With that we hope to see the community embrace null safety by migrating their packages.</p><figure><img alt=\"Timeline of Dart sound null safety support, from Technical Preview 1 to Stable in early 2021\" src=\"https://cdn-images-1.medium.com/max/960/1*kr-aQjGvnhY0JDCx1CGzRg.png\" /></figure><p>With beta, we’re also starting the home stretch before shipping a stable version of the null safety feature. We hope that you’ll use the feature and let us know if parts of it can be improved, if UI messages can be made easier to understand, or if documentation can be made clearer. We’re <strong>really looking forward to </strong><a href=\"https://github.com/dart-lang/sdk/issues/new?title=Null%20safety%20feedback:%20[issue%20summary]&amp;labels=NNBD&amp;body=Describe%20the%20issue%20or%20potential%20improvement%20in%20detail%20here\"><strong>your feedback</strong></a>.</p><h3>Opting in to null safety</h3><p>Before we discuss null safety migration, it’s important to repeat that (as stated in our <a href=\"https://dart.dev/null-safety#null-safety-principles\">null safety principles</a>) you’re in control of when to begin null safety adoption. Apps and packages will only run with null safety if their minimum <a href=\"https://dart.dev/null-safety#enable-null-safety\">Dart SDK constraint</a> is at least a Dart 2.12 prerelease:</p><pre>environment:<br>  sdk: &quot;<strong>&gt;=2.12.0-0</strong> &lt;3.0.0&quot;</pre><p>To experience this, try to create a small null-safe hello app (for example, using dart create) containing code like shown below. You can then try to run the app both before and after changing the SDK constraint and running dart pub get, and experience how the program behavior changes. (Make sure to use an SDK that reports 2.12 in dart --version.)</p><pre><strong><em>bin/hello.dart:<br></em></strong>...<br>void main() {<br>  var hello = &#39;Hello Dart developers&#39;;<br>  if (someCondition) {<br>    hello = null;<br>  }<br>  print(hello);<br>}</pre><pre><strong><em>Before changing the SDK constraint:<br></em></strong>$ dart run</pre><pre>null</pre><pre><strong><em>After changing the SDK constraint (and running dart pub get):<br></em></strong>$ dart run</pre><pre>bin/hello.dart:6:13: Error: Null can&#39;t be assigned to a variable of type &#39;String&#39; because &#39;String&#39; is not nullable.</pre><pre>hello = null;<br>            ^</pre><h3>Migrating to null safety</h3><p>To migrate a package (or simple app) to null safety, follow these five steps, which are fully documented in the <a href=\"https://dart.dev/null-safety/migration-guide\">migration guide</a> on dart.dev.</p><h4>Step 1: Check if your dependencies are ready</h4><p>We strongly recommend migrating code in order, with the leaves of the dependency graph being migrated first. For example, if C depends on B which depends on A, migrate A to null safety first, then B, then C. This order applies whether A, B, and C are libraries, packages, or apps.</p><figure><img alt=\"Illustration of dependency order vs. migration order\" src=\"https://cdn-images-1.medium.com/max/454/0*fM8TG0L56zVeJVlG\" /></figure><p>Why is the order important? Although you can make some progress migrating code before your dependencies migrate, you risk having to do a second migration pass if your dependencies change their APIs during their migration. If a few of your dependencies aren’t null safe, consider reaching out to the package publishers using the contact details listed for each package on pub.dev.</p><h4>Verifying that dependencies are ready</h4><p>To verify whether your app or package is ready to begin migration, you can use dart pub outdated in null-safety mode. The example below shows that this app is ready to migrate if it upgrades its dependencies to the prerelease versions of path, process, and pedantic as listed in the <strong>Resolvable</strong> column.</p><figure><img alt=\"Screenshot of `dart pub outdated` output\" src=\"https://cdn-images-1.medium.com/max/1024/0*zrUdYSzsjWZGr7Or\" /></figure><p>If null safety support is available in minor new versions, you’ll see those in the <strong>Upgradable</strong> column. Often null safety support will be available in major new versions; in that case you’ll see the versions listed under <strong>Resolvable</strong> in the outdated output. To upgrade to those, edit your pubspec.yaml file to allow those major versions. For example, you might change<br>process: ^3.0.13 to process: ^4.0.0-nullsafety.</p><p>You can also find packages with null safety support on pub.dev using the new <strong>Null safety</strong> tags on package pages (for example <a href=\"https://pub.dev/packages/collection/versions/1.15.0-nullsafety.5\">collection 1.15</a>) and a new <strong>Advanced</strong> <strong>search</strong> <a href=\"https://pub.dev/packages?q=&amp;prerelease-null-safe=1\">null safety search option</a>.</p><figure><img alt=\"Screenshot of pub.dev search\" src=\"https://cdn-images-1.medium.com/max/1024/1*P2ufPitLRaJRAD__KUfbvg.png\" /></figure><h4>Step 2: Migrate using the migration tool</h4><p>If your dependencies are ready, you can proceed to migrating your app or package using the migration tool, dart migrate.</p><p>The migration tool is interactive, so you can review the nullability properties that the tool has inferred. If you disagree with any of the tool’s conclusions, you can add nullability hints to change the inference. Adding a few migration hints can have a huge impact on migration quality.</p><figure><img alt=\"Screenshot of the migration tool UI\" src=\"https://cdn-images-1.medium.com/max/1024/0*dPlSded52Mt6P5tY\" /></figure><p>We’ve had a small number of Dart package authors test-drive migration using early preview builds of null safety, and their feedback has been encouraging. The migration guide has additional tips on how to use the migration tool.</p><h4>Step 3: Statically analyze your migrated code</h4><p>Update your packages using pub get in your IDE or on the command line. Then use your IDE or the command line to perform static analysis on your Dart code:</p><pre>$ dart pub get<br>$ dart analyze</pre><p>Or on your Flutter code:</p><pre>$ flutter pub get<br>$ flutter analyze</pre><h4>Step 4: Ensure tests pass</h4><p>Run your tests and make sure that they pass. You might need to update tests that expect null values, in case you changed your package code to no longer allow nulls.</p><h4>Step 5: Publish your null-safe package</h4><p>When the migration is complete and tests are passing, you can publish your package as a prerelease. Here’s a brief summary of best practices:</p><ul><li>Increment your version number to the next major version (for example, 2.3.x to 3.0.0). This best practice ensures that users of your package don’t upgrade to it before they’re ready to use null safety themselves, and it gives you the freedom to refactor your APIs to best leverage null safety.</li><li>Version and publish your package as a <a href=\"https://dart.dev/tools/pub/publishing#publishing-prereleases\">prerelease version on pub.dev</a>. (For example, use 3.0.0-nullsafety.0, not 3.0.0.)</li></ul><p>For full details on migration and versioning, see the <a href=\"https://dart.dev/null-safety/migration-guide\">migration guide</a>.</p><h3>The benefits of sound null safety</h3><p>Our previous blog posts for the technical previews of null safety <a href=\"https://medium.com/dartlang/announcing-sound-null-safety-defd2216a6f3\">in Dart</a> and <a href=\"https://medium.com/flutter/null-safety-flutter-tech-preview-cb5c98aba187\">in Flutter</a> have discussed the benefits of null safety via a number of examples. Now that null safety is nearing completion, we’re seeing several real-world examples of this benefit.</p><h4>Safer code</h4><p>Just recently, we <a href=\"https://github.com/flutter/flutter/issues/69863\">discovered a bug</a> in the Flutter master channel where various flutter tool commands would crash on certain machine configurations with a null error: The method &#39;&gt;=&#39; was called on null. The underlying issue was a recent pull request to add support for detecting Android Studio 4.1. That PR added code like this:</p><pre>final int major = version?.major;<br>final int minor = version?.minor;<br>if (globals.platform.isMacOS) {<br>  /// plugin path of Android Studio changed after version 4.1.<br>  if (major &gt;= 4 &amp;&amp; minor &gt;= 1) {<br>    ...</pre><p>Can you spot the error? Because the version may be null, both major and minor may be null also. This bug may seem easy to spot here in isolation, but in practice code like this slips through all the time, even with a rigorous code review process like the one used in the Flutter repo. With null safety, static analysis <a href=\"https://dartpad.dev/0e9797be7488d8ec6c3fca92b7f2740f\">catches this issue immediately</a>:</p><figure><img alt=\"Screenshot of analysis output in an IDE\" src=\"https://cdn-images-1.medium.com/max/1024/0*AwqXx58arqVt6PhL\" /></figure><p>That was a pretty simple error. During our early use of null safety in code internally at Google, we’ve seen much more intricate errors be caught and then resolved via null safety. Here are a few examples:</p><ul><li>An internal team found that they were often checking for null values in code that null safety knew could never be null. This problem was most frequently seen in code using <a href=\"https://developers.google.com/protocol-buffers\">protobuf</a>, where optional fields return a default value when unset, and never null. This caused code to incorrectly check for the default condition, by confusing default values and null values.</li><li>The Google Pay team found bugs in their Flutter code where they would fail when trying to access Flutter State objects outside of the context of a Widget. Before null safety, those would return null and mask the error; with null safety, the sound analysis determined that those properties could never be null, and threw an analysis error.</li><li>The Flutter team found a bug where the Flutter engine could potentially crash if null was passed to the scene parameter in Window.render(). During null safety migration, they added a hint to <a href=\"https://github.com/cbracken/engine/blob/bad869e229a8a02cad6e63d12e80807b33b5c12f/lib/ui/window.dart#L1069\">mark Scene as non-nullable</a>, and were then able to easily prevent potential app crashes that null would have triggered if passed.</li></ul><h4>Leveraging sound null safety during compilation</h4><p>The soundness of Dart’s null safety has another welcome implication: it means the Dart compilers can leverage the nullability information. This can potentially make your programs smaller and faster. We don’t have a lot of real-world apps fully migrated to sound null safety yet (as we’re just now kicking off the ecosystem migration of packages that these apps depend on for soundness), but we’re seeing very encouraging results from the core framework.</p><p>We recently did a test recompilation of the <a href=\"https://github.com/flutter/flutter/blob/master/examples/hello_world/lib/main.dart\">hello_world</a> sample to measure the impact of null safety on app size.This is a minimal example that simply displays “hello world”. In <a href=\"https://gist.github.com/mit-mit/64e160f9dc3bf6c69c7ef2f81384594a\">comparing </a>the overall size of the compiled code, the uncompressed (installed on device) code size shrank by 3.5% without doing anything but recompiling with sound null safety. This was possible, despite this app being just 10 lines of code, because the code size of all included libraries shrank; for example the Flutter framework itself (package:flutter) shrank by 3.9%.</p><p>As for code speed, having to enforce a sound type system potentially adds overhead. However, having fewer null checks also potentially makes the code faster. Our initial analysis of benchmarks shows that performance is on par with previous releases, and that the new additional type information creates the potential for us to do new kinds of performance improvements in the future. We plan on writing more about our performance work in future blog posts.</p><p>In some cases we’ve already seen null safety lead to performance gains, typically when migration to null safety has uncovered a flaw in the code logic. For example, we found an issue in the Flutter web text layout cache. This cache was using a key that was nullable, and then some logic to use TextAlign.start when null. This logic caused a flaw in the cache where elements would look like they had changed even though they still had a default value. As a result, there were frequent cache misses. Adding a non-nullable textAlign getter helped fix the caching flaw, resulting in a <strong>14x increase</strong> of text rendering performance in cases where the text is cached.</p><h3>Get started today!</h3><p>Beta versions of Dart and Flutter that contain null safety are ready today. If you develop with Flutter, you can switch to beta with flutter channel beta followed by flutter upgrade. Otherwise, you can get the standalone Dart SDK from the <a href=\"https://dart.dev/tools/sdk/archive#beta-channel\">Dart SDK archive</a>.</p><p>If you develop packages, we encourage you to read our <a href=\"https://dart.dev/null-safety/migration-guide\">migration guide</a> and plan your migration. Please <a href=\"https://github.com/dart-lang/sdk/issues/new?title=Null%20safety%20feedback:%20[issue%20summary]&amp;labels=NNBD&amp;body=Describe%20the%20issue%20or%20potential%20improvement%20in%20detail%20here\">let us know</a> about any issues or suggestions you have.</p><p>If you’re an app developer, you may prefer to delay migration until the feature is in our stable channels. We plan on addressing the feedback from beta quickly, fixing any remaining issues. It’s hard to state a concrete timeline for when null safety will be in a stable release, but we’re thinking early next year.</p><p>Thanks for your support and feedback as we work to make Dart a more robust language, and Flutter a stronger framework!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4491da22077a\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-dart-null-safety-beta-4491da22077a\">Announcing Dart null safety beta</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-11-18T00:06:01.000Z":{"title":"Deprecation Lifetime in Flutter","link":"https://medium.com/flutter/deprecation-lifetime-in-flutter-e4d76ee738ad?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/e4d76ee738ad","category":["policy","deprecated","flutter","open-source","breaking-changes"],"dc:creator":"Kate Lovett","pubDate":"Wed, 18 Nov 2020 00:06:01 GMT","atom:updated":"2020-11-18T00:06:01.324Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<p>Reliably removing deprecated code on a scheduled basis.</p><p>A new year is approaching, and on the Flutter team, we’re getting ready for a clean start to 2021.</p><p>In preparation, we’re going to remove some of the deprecated APIs in the Flutter framework.</p><p>Removing deprecations in the Flutter framework isn’t new. I’ve done it myself <a href=\"https://github.com/flutter/flutter/pull/57065\">in the past</a>. A <a href=\"https://github.com/flutter/flutter/pulls?q=is%3Apr+is%3Aclosed+issues%3A+66020+64483+57065+51240+24115+67478\">quick search</a> shows that deprecations were removed without a defined timeline or schedule because <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#deprecation\">our deprecation policy</a> doesn’t stipulate when to remove them. Because we want to provide a consistent and reliable experience for our users, we decided to create a standard lifetime for deprecations.</p><p>This article discusses our current policies for breaking changes and deprecations, how they’re put into practice, and how they’re evolving to provide a better experience to our users.</p><h3>Breaking changes in Flutter</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kp3Y8CnUirX421Fi\" /><figcaption>Photo by <a href=\"https://unsplash.com/@chuttersnap?utm_source=medium&amp;utm_medium=referral\">CHUTTERSNAP</a> on <a href=\"https://unsplash.com?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>The process for deprecating code in Flutter begins with <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">our breaking change policy</a>. Deprecations are considered breaking changes, which means that they must follow the <a href=\"https://flutter.dev/docs/resources/design-docs\">public design document</a> guidelines which requires a period for discussion. (The design document for this proposal is <a href=\"https://docs.google.com/document/d/1Gc3ecrMghzc7WU4pgzKB8uBaTPpRdWfozn0otBbxR7s/edit\">Implementing a Lifetime for Deprecations</a>.) In addition to providing a design document, we reach out on the <a href=\"https://github.com/flutter/flutter/wiki/Chat\">Flutter Contributor Discord</a> and popular groups like <a href=\"https://groups.google.com/g/flutter-announce\">flutter-announce</a> and <a href=\"https://groups.google.com/g/flutter-dev\">flutter-dev</a>, all before making any changes. This is one of my favorite parts of the process as an engineer: I get to hear from you. Our wonderful community is incredibly engaged with this process, and we are better for it. On multiple occasions, I’ve seen the design of a feature improve greatly — all thanks to feedback from our community — after publicizing it through these channels.</p><p>Authors of breaking changes migrate customer code affected by a breaking change. In the last update to our breaking change policy, <a href=\"https://groups.google.com/g/flutter-announce/c/Z09a317E21o\">we invited</a> you to submit your tests to our <a href=\"https://github.com/flutter/tests\">customer test repo</a>. These tests are our signal that a change is breaking, and we are committed to working with the test authors to migrate their code before making the change.</p><p>We also provide <a href=\"https://flutter.dev/docs/release/breaking-changes\">migration guides</a> for our breaking changes. These guides are intended to help users migrate their code after updating to the latest version of Flutter. If you’ve seen one of our <a href=\"https://medium.com/flutter/announcing-flutter-1-22-44f146009e5f\">release announcements</a>, we also call out breaks in a given release, and we point users to helpful resources for updating their applications.</p><p>In a <a href=\"https://medium.com/flutter/insights-from-flutters-first-user-survey-of-2019-3659b02303a5\">past survey</a>, we asked users about their preferences for breaking changes. We learned that our users thought breaking changes made code cleaner and were valuable to them, which is why we usually prefer a breaking change over a deprecation. According to the study:</p><p>Overall, 78% said that they prefer breaking changes that result in the cleanest possible API; this also makes the API easier to learn and use.</p><p>Our breaking change policy is based on this study. As always, there are exceptions to every rule. I recently deprecated <a href=\"https://github.com/flutter/flutter/pull/67947\">some very popular methods</a> in favor of a new widget. If we know a particular change is a significant break that affects many users, we’ll deprecate. Deprecating allows for a migration grace period, while still providing all of the tools generated by the breaking change policy.</p><h3>Aging deprecations</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*n5eFBwWfgtkuLtDf\" /><figcaption>Photo by <a href=\"https://unsplash.com/@dilja96?utm_source=medium&amp;utm_medium=referral\">Dilyara Garifullina</a> on <a href=\"https://unsplash.com?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>The migration grace period begins when the deprecation is released on the <a href=\"https://flutter.dev/docs/development/tools/sdk/releases?tab=windows\">stable channel</a>. The timeline for when the grace period ends is 1 calendar year or 4 stable releases, whichever is longer. In order to come up with a timeline that we thought was comfortable, we looked at our growth and adoption, and we evaluated some of the Flutter applications and packages that are open sourced.</p><p>We want our users to be able to count on this schedule, rather than wondering if the next release will bring an unexpected barrier to upgrading because a deprecation disappeared. We also want to make sure that we communicate these changes well ahead of time, and we commit to announcing deprecations reaching the end of their lifetimes before we start removing them. In that spirit, I’d like to share with you <a href=\"http://flutter.dev/go/deprecation-lifetime\">the first batch of deprecations that are reaching their end of life</a>, now that Flutter 1.22 is available.</p><p>Because this is the first time that we’re putting this policy into practice, there are quite a few deprecations — some pre-dating Flutter 1.0! Several of these deprecations also pre-date our breaking change policy. We’ll be working on migration tools and guidance for all of them. Expect to see these deprecations removed from the Flutter framework by our next stable release, with announcements occurring in our usual channels as they’re removed.</p><p>While we get underway implementing these changes, we hope to hear from you! We’re always accepting submissions to our customer test repo where we work with you to migrate your code before making a break. To learn more about the test repo and how to submit your tests, take a look at the <a href=\"https://github.com/flutter/tests/blob/master/README.md\">Flutter tests README</a>. As we make these changes, we’ll use the <a href=\"https://github.com/flutter/flutter/wiki/Chat\">Flutter Contributor Discord</a>, <a href=\"https://groups.google.com/g/flutter-announce\">flutter-announce</a>, and <a href=\"https://groups.google.com/g/flutter-dev\">flutter-dev</a> channels to notify you and request your feedback. So, if you haven’t joined one of these groups, please do! We look forward to hearing from you and working together.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e4d76ee738ad\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/deprecation-lifetime-in-flutter-e4d76ee738ad\">Deprecation Lifetime in Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-11-11T19:57:23.000Z":{"title":"New ad formats for Flutter","link":"https://medium.com/flutter/new-ads-beta-inline-banner-and-native-support-for-the-flutter-mobile-ads-plugin-e48a7e9a0e64?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/e48a7e9a0e64","category":["ads","google-ads","flutter-plugin","flutter","monetization"],"dc:creator":"Justin Haddadnia","pubDate":"Wed, 11 Nov 2020 19:57:23 GMT","atom:updated":"2020-11-11T20:01:14.361Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Beta program opens for inline banner and native ads support</h4><p>There are many ways that mobile app developers get paid for their work. Monetizing apps via ads is one popular path for many mobile developers, including those using Flutter.</p><p><a href=\"https://github.com/flutter/flutter/issues/12114\">Native ad format support</a>, in particular, is one of the top five requested features for Flutter. The previously available Google ads plugin (also known as the firebase_admob plugin) provided by the Flutter team supported overlay banner, interstitial, and rewarded video, but couldn’t render formats such as inline banner or native ads.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0kWrLLh_g2Ywwgcs_iAL-w.png\" /></figure><h3>Inline Banner and Native Ads</h3><p>As the name suggests, inline banner ads let you integrate an ad unit as a part of the Flutter view, instead of overlaying the banner on top of the UI. Similarly, native ads allow you to design an ad experience that feels like a natural part of your app content. Some developers let us know that the lack of inline banner and native ads would hinder their ability to create beautiful and natural ads experiences, and others indicated that not having these features could potentially block them from adopting Flutter into their applications.</p><p>In response to your requests, we’ve been developing support for these formats. One year ago, we started collaborating closely with Google Ads to implement a robust and trustworthy inline ads solution for Flutter. We also refactored the plugin code entirely to improve performance and stability. Today, after completing our implementation and a round of alpha testing, we are glad to announce invite-only access to a beta release of this updated plugin.</p><p>With this beta, we built upon the existing plugin and added support for new formats across AdMob &amp; Ad Manager. As with all beta releases, there are still kinks to work out, and feature support may change without notice. If selected for the beta, we strongly recommend that you thoroughly test the integration within your apps, before shipping to your users.</p><h3>Apply now</h3><p>To apply for our beta test, please fill out <a href=\"https://forms.gle/5d1MfrbaCLX9PS2Z9\">our application form</a>. We’re particularly looking for customers who have an existing Flutter app in the store and are willing to use our beta release in their production app, in partnership with our team. If you are accepted into the beta you will receive an email with further instructions.</p><p>Based on the results of this beta, we expect to open this up to a broader audience in early 2021.</p><p>We hope that inline banner and native ads help you unlock more revenue growth for your Flutter apps.</p><p>Happy coding and advertising!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e48a7e9a0e64\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/new-ads-beta-inline-banner-and-native-support-for-the-flutter-mobile-ads-plugin-e48a7e9a0e64\">New ad formats for Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-11-04T16:03:20.000Z":{"title":"Accessible expression with Material Icons and Flutter","link":"https://medium.com/flutter/accessible-expression-with-material-icons-and-flutter-e3f3f622200b?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/e3f3f622200b","category":["accessibility","flutter","material-design","icons"],"dc:creator":"André Labonté","pubDate":"Wed, 04 Nov 2020 16:03:20 GMT","atom:updated":"2020-11-04T16:03:18.594Z","content:encoded":"<p>Material Design and Flutter both help developers build experiences that are flexible, accessible, and expressive, while delivering great performance and efficiency. Now we’re pleased to give you even more ways to create distinctive UIs with improved support for Material Icons in Flutter.</p><p><a href=\"https://material.io/resources/icons\">Material Icons</a> are beautifully crafted symbols for common actions and items, including everything from simple arrows and indicators for navigation, to symbols representing concepts like accessibility, bug reporting, and even hand washing.</p><p>Flutter now has support for all four icon styles —<em> filled, outlined, sharp, and round</em> — to help you make your app or web site familiar and accessible for your users, while allowing you to uniquely communicate your brand. And with support for tree-shaking, Flutter optimizes your app build to include only the symbols you’re using, making load times and memory use more efficient.</p><p>Here are a few icons that showcase the range of options you’ll find in Material’s catalog. You can browse the full set of icons and download bitmap or vector versions for use in your favorite design tool on <a href=\"https://material.io/resources/icons/\">Material.io</a>, or view Flutter’s versions on the <a href=\"https://api.flutter.dev/flutter/material/Icons-class.html\">Icons</a> API page.</p><figure><img alt=\"Sample of 4 icons: shopping_cart, chat, masks, wash shown in the 4 supported styles: filled, outlined, rounded, sharp.\" src=\"https://cdn-images-1.medium.com/max/716/1*kcT41A5GvXp8XrjHjiuc4A.png\" /><figcaption>Sample of 4 icons: shopping_cart, chat, masks, wash. Displayed in the 4 supported styles: filled, outlined, rounded, sharp.</figcaption></figure><p><strong>Getting started</strong></p><p>To get started with the <a href=\"https://master-api.flutter.dev/flutter/widgets/Icon-class.html\">Icon class</a>, make sure to set uses-material-design: true in your project’s pubspec.yaml file. This tells Flutter to include the icon assets in your application.</p><p>Icons in Flutter are delivered as vectors via an icon font, so you can infinitely adjust size and color without worrying about losing image quality. Checkout <a href=\"https://github.com/material-components/material-components-flutter/tree/develop/medium/material_icons\">GitHub</a> for the code that generated the set of icons above.</p><p><strong>Don’t skip the semantic label!</strong></p><p>In order for users of assistive technologies like screen readers to effectively navigate your app or site, it’s important to provide a semantic label that is meaningful and contextually appropriate.</p><p>By default screen readers read aloud any text that’s visible onscreen. To accurately translate visual elements like icons into text-based UI, you need to thoughtfully label those elements.</p><p>For example, when an icon is used in conjunction with an action element, like a button, you should always set your semantic label to a string that describes what happens when a user clicks on it.</p><p><a href=\"https://material.io/design/usability/accessibility.html#writing\">Material.io offers guidance</a> on indicating UI elements by action. A common mistake is to default the semantic label to the name of the icon, as opposed to the action that is performed when that icon is selected.</p><figure><img alt=\"an example of what to do: a Pencil icon with the label “edit” and what not to do: a Pencil icon with the label “Pencil”\" src=\"https://cdn-images-1.medium.com/max/1024/1*sZKrpmVM5f5bRSgy453T1Q.png\" /></figure><p>To learn more about the importance of building accessible digital experiences, see <a href=\"https://flutter.dev/docs/development/accessibility-and-localization/accessibility\">Accessibility</a> on flutter.dev.</p><p><strong>Only ship what you use!</strong></p><p>When you build your app for release, the Flutter compiler performs “tree shaking”, removing unused code and assets (including icons) to optimize your app’s footprint and help minimize download and load times. Use all the icons you want! During compilation, a custom icon font is generated, containing only the subset of icons used in your project. This offers great reduction in binary size — everybody wins!</p><p>In addition to tree-shaking, here is a great community post about <a href=\"https://medium.com/@suryadevsingh24032000/size-matters-reducing-flutter-app-size-best-practices-ca992207782\">best practices for reducing Flutter app size</a>.</p><p><strong>Show us what you’ve got!</strong></p><p>Developers all around the world are using Material icons to ensure readability and clarity at both large and small sizes; these icons have been optimized for beautiful display on all of Flutter’s supported platforms and display resolutions.</p><p>Follow us at @<a href=\"https://twitter.com/materialdesign\">MaterialDesign</a> <a href=\"https://twitter.com/FlutterDev\">@FlutterDev</a> and show how you are using Material Design and Flutter to create beautiful, accessible digital experiences!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e3f3f622200b\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/accessible-expression-with-material-icons-and-flutter-e3f3f622200b\">Accessible expression with Material Icons and Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2020-12-09T16:02:21.000Z":{"title":"Updates on Flutter Testing","link":"https://medium.com/flutter/updates-on-flutter-testing-f54aa9f74c7e?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f54aa9f74c7e","category":["announcment","flutter","testing"],"dc:creator":"Chris Sells","pubDate":"Wed, 09 Dec 2020 16:02:21 GMT","atom:updated":"2020-12-09T16:02:19.874Z","content:encoded":"<h4>Updated integration testing that supports Firebase Test Lab on mobile; stand-alone support for web and desktop, too!</h4><p>Flutter’s goal is to provide an open framework for quickly building beautiful native apps on multiple platforms. A large part of achieving that goal is the ability for you to easily test your Flutter apps to make sure that they work and look the way you want them to on the platforms you’re targeting. Some of that testing can be handled by unit tests written using <a href=\"https://dart.dev/guides/testing\">the unit test framework built into Dart</a>. Dart unit testing works exceedingly well for non-UI testing; it runs on your development machine and doesn’t rely on the GUI of your Flutter app.</p><p>Integration testing (also called end-to-end testing or GUI testing) is a step up from unit testing because integration testing attempts to simulate a user interacting with your app by doing things like pushing buttons, selecting items, and typing on the keyboard. This testing is automated, to avoid having humans do that kind of repetitive work because, frankly, we’re not that great at it. Our initial solution to avoiding human interaction was a special way to write Flutter tests. These tests are run from the host like Dart unit tests, and drive the app running on a real or virtual device, just as a person would. These kinds of tests were called Flutter driver tests because you use the flutter_driver package and the flutter drive command line to drive the GUI of your app.</p><p>Unfortunately, Flutter driver tests have a number of issues. One issue is that tests run from the development machine and communicate with the app on the device, which means that the tests aren’t suitable for running on a device farm like <a href=\"https://firebase.google.com/docs/test-lab\">Firebase Test Lab</a>. Another issue is that having a separate process for your tests makes it difficult to check the state of your app. You can check the output, but how do you know, for example, the internal state of the app. And, finally, the flutter_driver API is more complicated than it needs to be, particularly when it comes to writing the code to find the appropriate widgets on the screen to test against.</p><p>And so, to solve these problems and continue to improve the Flutter testing experience across a growing number of targets, we’re happy to announce version 1.0 of <a href=\"https://pub.dev/packages/integration_test\">the integration_test plugin</a>, a simpler way to test your Flutter apps that also supports Firebase Test Lab.</p><h3>Getting started with integration_test</h3><p>Using the integration_test plugin requires two steps. First, add the plugin to your pubspec.yaml file as a development dependency, and use flutter pub get to pull the plugin into your project:</p><pre># pubspec.yaml<br>…<br>dev_dependencies:<br>  flutter_test:<br>    sdk: flutter<br>  integration_test: ^1.0.0<br>…</pre><p>Then, use theintegration_test package in your test code:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0d519dd00f2679bf9a3081b755235b24/href\">https://medium.com/media/0d519dd00f2679bf9a3081b755235b24/href</a></iframe><p>Notice the import of the integration_test package and the call to IntegrationTestWidgetsFlutterBinding.ensureInitialized(), which ensures that the package is properly initialized. Also notice the standard WidgetTester test code. This is the same test code generated by the default Counter app template during flutter create.</p><p>While integration_test enables your tests to be bundled into your app in a stand-alone way (which is a requirement for device farms like Firebase Test Lab), it requires some build magic that we’ll cover below. During the testing development process, however, it’s handy to just be able to run your tests interactively via the command line and for that, you’ll need a new entry point:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/4750db849a92134603f929d29eebf4ba/href\">https://medium.com/media/4750db849a92134603f929d29eebf4ba/href</a></iframe><p>This call to integrationDriver is a convenience wrapper around the integrationDriver plugin to enable you to run your new tests with the flutter drive command:</p><pre>$ flutter drive \\<br>  --driver=test_driver/integration_test.dart \\<br>  --target=test/widget_integration_test.dart</pre><p>This command deploys your app to the simulator, executes your tests, and shows you the results.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hurt3UPLzo0bnzMi\" /><figcaption>Flutter integration_test in action</figcaption></figure><p>This particular test is running on iOS, but the integration_test plugin also works for Android by changing the--device-id option, as appropriate. Furthermore, you can run your integration tests against the web and desktop targets, too, although this functionality is still is pre-release.</p><h3>Running on Firebase Test Lab</h3><p>After you know that your tests work locally using either virtual or physical hardware, you can set your app loose on the plethora of devices available through Firebase Test Lab.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*PEc27voy2YR_winG\" /><figcaption>Firebase Test Lab console</figcaption></figure><p>Firebase Test Lab is a cloud-based, app testing infrastructure. With one operation, you can test your Android or iOS app across a wide variety of devices and device configurations, and see the results — including logs, videos, and screenshots — in the Firebase console. One of the major advancements of the integration_test plugin is the ability to run your Flutter apps targeting Android and iOS on Firebase Test Lab, giving you the ability to test across hundreds of devices simultaneously in order to find platform, form factor, or device-specific issues before shipping your app.</p><p>To run a test on Firebase Test Lab, you need to do some configuration and use Gradle commands to build an instrumentation test for both Android and iOS, as appropriate. For those details, check out <a href=\"http://flutter.dev/docs/testing/integration-tests\">the new integration test documentation on flutter.dev</a>.</p><h3>Migrating from Flutter driver tests</h3><p>For those of you with existing flutter_driver tests, moving to the new API isn’t too difficult. In addition to the appropriate initialization that was previously mentioned, you also need to move to the new WidgetTester API.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*aUliGJHIQ51Djk84\" /><figcaption>flutter_driver API (left) vs. WidgetTesting API (right)</figcaption></figure><p>The flutter_driver API (shown on the left) and the WidgetTester API (shown on the right) are conceptually very similar, but you can see that a lot of the details are different. For example, instead of calling the waitFor method on the flutter_driver, you call the pumpAndSettle method on the WidgetTester. The former waits for a specific widget to appear, whereas the latter waits for the app’s UI rendering phase to settle. After you have a specific widget, you act on it similarly with the two APIs, but you use different objects. The WidgetTest API is more in-line with what you’re used to seeing in Dart unit tests. As you can see, the expect method is used to ensure that the contents of a widget are what you expect.</p><p>For the details about how to move your tests from flutter_driver to integration_test and WidgetTester, see <a href=\"http://flutter.dev/docs/testing/integration-tests#migrating-from-flutter_driver\">the migration docs on flutter.dev</a>.</p><h3>Native UI testing</h3><p>If you have an existing Android or iOS app to which you’re adding Flutter using <a href=\"https://flutter.dev/docs/development/add-to-app\">Add-to-App</a>, then you’re likely to have existing integration tests for those native apps that you want to leverage. In that case, add the tests for your Flutter screens to those existing tests. For Android, you can add the tests if they’re written using the Espresso framework using <a href=\"https://pub.dev/packages/espresso\">the espresso plugin</a>, which provides bindings for Espresso tests of Flutter Android apps. We’ll have a similar plugin to support native iOS tests created using Earl Grey soon.</p><h3>Summary</h3><p>This announcement presents a new foundation for integration testing using the new integration_test plugin for Flutter. Not only is the API simpler and more consistent, tests written using integration_test can run on hundreds of different devices using the Firebase Test Lab. The Flutter team plans to build on this new foundation by updating the flutter create template to use integration_test out of the box, adding updates to the test output to support existing testing tools using the JUnit format, adding the ability to take screenshots during tests for golden testing comparisons, and more. For the full list of details about our new integration testing recommendations for your Flutter apps and plugins, see <a href=\"http://flutter.dev/docs/testing/integration-tests\">the testing docs on flutter.dev</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f54aa9f74c7e\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/updates-on-flutter-testing-f54aa9f74c7e\">Updates on Flutter Testing</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-04-29T14:03:19.000Z":{"title":"Announcing XD to Flutter v2.0!","link":"https://medium.com/flutter/announcing-xd-to-flutter-v2-0-c743bac2aeeb?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/c743bac2aeeb","category":["adobe-xd","flutter-app-development","mobile-app-development","flutter","app-development"],"dc:creator":"Grant Skinner","pubDate":"Thu, 29 Apr 2021 14:03:19 GMT","atom:updated":"2021-04-29T14:03:15.612Z","content:encoded":"<h4><em>Giving designers a fast path to production Flutter code</em></h4><figure><img alt=\"XD to Flutter\" src=\"https://cdn-images-1.medium.com/max/1024/1*OoVDCYfw18QB91Fpe5jDAg.png\" /></figure><p>Flutter is Google’s open-source UI toolkit for building beautiful apps for mobile, desktop, web, and embedded devices from a single codebase. Over the last couple of years, it has become the leading choice for developers who want to build apps for multiple platforms; but designers need a visual tool for prototyping and creating Flutter UI, rather than handcrafting Dart source code. Enter <a href=\"https://github.com/AdobeXD/xd-to-flutter-plugin\"><em>XD to Flutter</em></a>!</p><p>It’s been almost a year since the first preview release of the plugin, and we’ve continued to refine and improve it with a handful of minor updates, a major v1.0 launch last summer, and now a v2.0 release to match with the launch of Flutter 2!</p><h3>Wait, what is XD to Flutter?</h3><p>The name probably gives it away, but the XD to Flutter plugin is a powerful, easy-to-use tool to export your stunning <a href=\"https://www.adobe.com/products/xd.html\">Adobe XD</a> designs into clean, functional code for Flutter. You can copy code for specific visual elements from your design, export reusable widgets, or even entire views.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FraG7NjM0p0k%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DraG7NjM0p0k&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FraG7NjM0p0k%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1d6faec4a7d9de9a3356bfb9cedd6126/href\">https://medium.com/media/1d6faec4a7d9de9a3356bfb9cedd6126/href</a></iframe><p>That means that, with the XD to Flutter plugin, you can get your designs running on virtually any device with the click of a button. It’s not going to code your whole app for you, but it’ll give you a head start.</p><p>XD to Flutter is built by <a href=\"https://gskinner.com/\">gskinner</a> in partnership with Adobe, and is published as a plugin for Adobe XD itself, so you can use it with any existing Adobe XD design you’re building.</p><h3>Awesome! So what’s new?</h3><p>The initial release of XD to Flutter had great support for outputting all the different visual elements in a design — vector graphics, images, rich text, background blurs, blend modes, shadows, and similar — but the result could be static and inflexible.</p><p>While it was handy for grabbing an icon or text style, we wanted it to do more! XD empowers designers to create dynamic UIs, with tools like responsive layout, scrollable areas, stacks, and grids; we want the plugin to support every one of those capabilities, and with v2.0 we’ve made a lot of progress.</p><h4>Responsive Resize</h4><p>XD to Flutter supports the responsive layout features of XD, which lets you “pin” elements within their enclosing parent and precisely control how they resize.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ep_TKKdQqNDhNGtYjXSmzQ.png\" /><figcaption>Responsive design in Adobe XD</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/707/1*A6Kateq9HjSt3XADTQzaow.gif\" /><figcaption>Responsive resize in Flutter</figcaption></figure><p>This is achieved in Flutter by using a custom Pinned layout widget in the open-source <a href=\"https://pub.dev/packages/adobe_xd\">adobe_xd</a> package that developers can leverage directly in their projects.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*F_lxL7fE3-MkjobRiJLqpA.png\" /><figcaption>Pinned widget code example</figcaption></figure><h4>Stacks &amp; Scroll Groups</h4><p>“Stacks” and Scroll Groups provide new ways to lay out content on-screen dynamically in Adobe XD. Stacks in XD let you arrange a bunch of different elements in a horizontal or vertical list, with varying spacing between them; they are more similar to a Flex widget in Flutter than their namesake Stack widget.</p><p>Scroll Groups predictably let you define an area to scroll a larger group of content vertically or horizontally, right inside your design.</p><p>XD to Flutter v2.0 supports both of these features, converting them into common Flutter widgets (Column, Row, and SingleChildScrollView). You can even put a stack into a scroll group to easily create a scrolling list of items.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*avGeBrHwEcAyptu0aKyc4w.gif\" /><figcaption>Stacks &amp; Scroll Groups in XD (left) and Flutter (right)</figcaption></figure><h4>Padding &amp; Background Elements</h4><p>Another new feature is background elements, which let you designate a visual element as the background for a group. This can be paired with padding to space the background’s edges from the content.</p><p>The Flutter export uses a Stack widget to layer the background element behind the content, which is placed into a Padding widget.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-nUSSGKplXOzmySlrEUwXg.gif\" /><figcaption>Padding &amp; Background in XD (left) and Flutter (right)</figcaption></figure><h4>Flutter 2 &amp; null safety</h4><p>The layout features described above enable much more responsive UI, complimenting Flutter 2’s increased support for form factors like desktop and web.</p><p>Flutter 2 also introduces sound null safety — a language feature that helps developers catch nullability issues before they cause problems in apps. XD to Flutter v2.0 includes a new setting to “Export Null Safe Code”, ensuring that the generated code is future-ready.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4Gdqc7x5Vk85t47tQIocmw.png\" /><figcaption>“Export Null Safe Code” setting and output</figcaption></figure><h4>Sounds great! How do I get started?</h4><p>Whether you’re using it to copy the code for a tricky gradient, or to export fully responsive, parameterized, interactive widgets, it’s simple to join the thousands of creative professionals that are already using the XD to Flutter plugin.</p><p>You can install it by selecting “Browse Plugins…” from Adobe XD’s “Plugin” menu and searching for “Flutter” (strangely, searching for “XD to Flutter” doesn’t work), or just visit <a href=\"https://adobe.com/go/xd_to_flutter\">adobe.com/go/xd_to_flutter</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aSDHtLA_ZQyiyXX3y9j2Ng.png\" /></figure><p>Once you have it installed, open the XD to Flutter panel from the plugins panel, and tap the “Need help?” link to check out the <a href=\"https://github.com/AdobeXD/xd-to-flutter-plugin/blob/master/README.md\">plugin documentation</a>.</p><p>Flutter 2 is an exciting step forward for the framework, with a focus on building beautiful apps that run virtually anywhere. At <a href=\"https://gskinner.com/\">gskinner</a>, we’re thrilled to be working with Adobe and Google to ensure that XD to Flutter continues to make the process of faithfully translating a delightful design to a working product even easier.</p><p>Stay tuned for more exciting updates to the plugin soon!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c743bac2aeeb\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-xd-to-flutter-v2-0-c743bac2aeeb\">Announcing XD to Flutter v2.0!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-03-03T18:47:06.000Z":{"title":"Flutter web support hits the stable milestone","link":"https://medium.com/flutter/flutter-web-support-hits-the-stable-milestone-d6b84e83b425?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/d6b84e83b425","category":["web","web-development","ui","programming","flutter"],"dc:creator":"Mariam Hasnany","pubDate":"Wed, 03 Mar 2021 18:47:06 GMT","atom:updated":"2021-03-03T20:42:39.939Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Publish to web and mobile from the same codebase</h4><figure><img alt=\"Flutter’s web support is now available in stable\" src=\"https://cdn-images-1.medium.com/max/960/1*bbkcrsggiQLxNDRAgHiSBQ.png\" /></figure><p>Our vision for Flutter is to be a portable UI framework for building beautiful app experiences on any platform. Today, as part of <a href=\"https://medium.com/flutter/whats-new-in-flutter-2-0-fe8e95ecc65\">Flutter 2</a>, we’re announcing that Flutter’s web support has hit the stable milestone.</p><p>The first Flutter release supported iOS and Android, and has been used to bring over 150,000 apps to mobile app stores. Now, adding web support means that those same apps can reach an even broader audience, as well as opening up new ways to build interactive experiences on the web.</p><p>In this initial release of web support, we’re focusing on three app scenarios:</p><ul><li><strong>Progressive web apps (PWAs)</strong> that combine the web’s reach with the capabilities of a desktop app.</li><li><strong>Single page apps (SPAs)</strong> that load once and transmit data to and from internet services.</li><li><strong>Expanding existing Flutter mobile apps to the web</strong>, enabling shared code for both experiences.</li></ul><p>This article describes what we’ve built so far, and explores examples of how you can take advantage of Flutter’s web support in your own apps.</p><figure><img alt=\"iRobot Education developed the iRobot Coding app using Flutter to offer their learn-to code experience to everyone anywhere by making it available on the web.\" src=\"https://cdn-images-1.medium.com/max/1024/0*yDQInopKQv6QR0Hb\" /><figcaption><a href=\"https://edu.irobot.com/the-latest/building-a-coding-experience-for-all\">iRobot Education</a> developed the <a href=\"https://code.irobot.com/\">iRobot Coding app</a> using Flutter to offer their learn-to code experience to everyone anywhere by making it available on the web.</figcaption></figure><h3>Our journey to the web</h3><p>Today’s web platform is richer than ever, with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API\">hardware-accelerated 2D and 3D graphics</a>, <a href=\"https://web.dev/progressive-web-apps/\">offline and installation support</a>, and <a href=\"https://web.dev/fugu-status/\">access to the underlying operating system and hardware</a>. The web has allowed a <a href=\"https://vuejs.org/\">broad</a> <a href=\"https://angular.io/\">array</a> <a href=\"https://flask.palletsprojects.com/\">of</a> <a href=\"https://reactjs.org/\">frameworks</a> that build on this underlying platform to offer developers great flexibility in how they create apps for the web.</p><p>Since Flutter is written in <a href=\"https://dart.dev/\">Dart</a>, a language that offers JavaScript compilation, it was a natural next step to explore the web as a target. This also builds towards our vision of providing a portable framework for building beautiful UI wherever you want to paint pixels.</p><p>Our approach is to build a consistent toolkit that works across all platforms (rather than have two separate frameworks that have subtle deviations of behavior), to ensure that your own code runs without surprises.</p><figure><img alt=\"Flutter web support’s architecture diagram\" src=\"https://cdn-images-1.medium.com/max/1024/0*ai8xTn_dMUTB6af6\" /></figure><p>At an architectural level, Flutter is a <a href=\"https://flutter.dev/docs/resources/technical-overview#layer-cakes-are-delicious\">multilayer system</a> with:</p><ul><li>A <strong>framework</strong> that provides abstractions for common idioms like widgets, animation, and gestures.</li><li>An <strong>engine</strong> that renders to the target device using the system APIs it exposes.</li></ul><p>The framework itself is written in Dart, and the roughly 700,000 lines of core Flutter framework code are the same across all platforms: mobile, desktop, and now web. The same is true for your code; we use either the Dart development compiler<em> </em>(<a href=\"https://dart.dev/tools/dartdevc\">dartdevc</a>) or the Dart deployment compiler (<a href=\"https://dart.dev/tools/dart2js\">dart2js</a>) to compile your code into JavaScript, which can then be hosted on a server.</p><p>With Dart’s ability to compile the Flutter framework (as well as your app code) into JavaScript, our work to support the web involved replacing the low-level C++ rendering engine used by mobile apps with code that maps to web platform APIs. Flutter doesn’t merely transpile to HTML equivalents of its widgets. Instead, Flutter’s web engine offers a choice of two renderers: an HTML renderer that is optimized for size and broad compatibility, and a CanvasKit renderer that uses WebAssembly and WebGL to render Skia paint commands to the browser canvas.</p><p>Our goal for Flutter is to offer a new way to target the web platform, build on existing foundations, and provide new insights that improve the web for everyone.</p><h3>Delivering a production-quality stable release</h3><p>Since our <a href=\"https://medium.com/flutter/web-support-for-flutter-goes-beta-35b64a1217c0\">beta release of web support</a> a year ago, we’ve learned a lot about how early adopters are using it, and we’ve worked with a few customers who have now shipped their Flutter web apps to production.</p><p>Over this period, we have made major architectural improvements and added features that extend and optimize Flutter for the web, focusing on four areas: <strong>performance</strong>, <strong>web-specific features</strong>, <strong>desktop form factors, </strong>and <strong>plugins.</strong></p><figure><img alt=\"Flutter web support’s stable release features\" src=\"https://cdn-images-1.medium.com/max/960/1*eq4uks7XD1mMWrTQVTUY6w.png\" /></figure><h4>Performance</h4><p>The biggest area of improvement since our early releases is performance. During development, we’ve gained a better understanding of the performance and correctness characteristics of the various rendering technologies available on the web.</p><p>We originally started with an HTML, DOM-based model. In this model, Flutter’s web engine translates each generated Flutter scene into HTML, CSS, or Canvas, and renders a frame onto the page as a tree of HTML elements. Even though the HTML renderer offered the greatest compatibility with a wide variety of browsers and had a smaller code size, the HTML renderer’s repaint performance was less suitable for more graphic-intensive applications like <a href=\"https://rive.app/\">Rive</a>, a collaborative tool built with Flutter to create motion graphics.</p><figure><img alt=\"Rive, a tool for creating custom animations, rebuilt their app using Flutter on the web and it is now available in beta.\" src=\"https://cdn-images-1.medium.com/max/1024/0*kS0WlZkECsmnqaY7\" /><figcaption><a href=\"https://rive.app/\">Rive</a>, a tool for creating custom animations, rebuilt their app using Flutter on the web and it is now available in beta.</figcaption></figure><p>To handle the fidelity required to render intensive graphics efficiently, we started experimenting with <a href=\"https://skia.org/user/modules/canvaskit\">CanvasKit</a>, which enables rendering Skia paint commands in the browser using <a href=\"https://webassembly.org/\">WebAssembly</a> and <a href=\"https://www.khronos.org/webgl/\">WebGL</a>. We discovered that CanvasKit can deliver superior performance, fidelity, and correctness, enabling the level of graphical horsepower expressed in this <a href=\"https://flutterplasma.dev/\">demo</a> by <a href=\"https://github.com/felixblaschke\">Felix Blaschke</a>, a talented member of the Flutter community.</p><figure><img alt=\"Flutter Plasma, a demo created by Felix Blaschke, running on Safari, Firefox, Edge and Chrome.\" src=\"https://cdn-images-1.medium.com/max/1024/0*PHaTJqBxdvTDycOh\" /><figcaption><a href=\"https://flutterplasma.dev/\">Flutter Plasma</a>, a demo created by Felix Blaschke, running on Safari, Firefox, Edge and Chrome.</figcaption></figure><p>Each renderer offers advantages in different scenarios, so Flutter is supporting both rendering modes:</p><ul><li><strong>HTML renderer:</strong> Uses a combination of HTML elements, CSS, Canvas elements, and SVG elements. This renderer has a smaller download size.</li><li><strong>CanvasKit renderer:</strong> This renderer is fully consistent with Flutter mobile and desktop, has faster performance with higher widget density, but adds about 2MB in download size.</li></ul><p>To optimize your Flutter web app for the characteristics of each device, the rendering mode is set by default to auto. This means that your app runs with the HTML renderer on mobile browsers and with CanvasKit on desktop browsers.</p><p>You can also use --web-renderer html or --web-renderer canvaskit to explicitly choose which renderer your app uses. For more information, see <a href=\"https://flutter.dev/docs/development/tools/web-renderers\">Web renderers</a>.</p><h4>Web-specific features</h4><p>A Flutter app running in the browser should feel like a web app. So we added features to Flutter that help you use the best of the web.</p><p>The web has many strengths, especially its global reach. One of the many reasons to bring your existing Flutter app to the web is to reach users outside of app stores. To do that, we added support for <a href=\"https://flutter.dev/docs/development/ui/navigation/url-strategies\">custom URL strategies</a>, to ensure that it’s possible for your users to reach your app anywhere with just a click of a URL. With this feature, you have control over the URLs shown in the address bar as well as the routing of your app on the web.</p><figure><img alt=\"Flutter Plasma demo’s showroom page is an example of the url_strategy plugin, based on Flutter’s custom URL strategies, in action.\" src=\"https://cdn-images-1.medium.com/max/1024/0*bf3e0LQ8MVQb0ETI\" /><figcaption><a href=\"https://flutterplasma.dev/\">Flutter Plasma demo</a>’s showroom page is an example of the <a href=\"https://pub.dev/packages/url_strategy\">url_strategy plugin</a>, based on Flutter’s custom URL strategies, in action.</figcaption></figure><p>Hyperlinks are also critical to how users navigate the web. A new <a href=\"https://pub.dev/documentation/url_launcher/latest/link/Link-class.html\">link widget</a> in the url_launcher package enables users to deep link to anchors within your app or to external websites. You can use link on relevant widgets, including buttons, inline text, images, and specify whether the link opens in the same tab or in a new tab.</p><p>Another integral part of any app is text rendering. Developing a layout system for text was one of the biggest challenges to support Flutter on the web. Since the web lacks a direct-text layout API, Flutter must perform various measurements on the <a href=\"https://api.flutter.dev/flutter/dart-ui/Paragraph-class.html\">paragraph</a> by triggering a <a href=\"https://api.flutter.dev/flutter/dart-ui/Paragraph/layout.html\">layout()</a>. These measurements can become quite expensive, so a new <a href=\"https://github.com/flutter/flutter/issues/33523\">canvas-based text measurement</a> adds supports for both plain and rich text. Now, Flutter can do detailed measurements efficiently on the web, enabling things like painting highlight boxes accurately on selected text.</p><p>Interacting with text is just as important as being able to render text quickly and accurately. Text can now be selected, copied, <em>and</em> pasted by using SelectableText and EditableText widgets. Also, form text fields support <a href=\"https://api.flutter.dev/flutter/widgets/AutofillGroup-class.html\">autofill</a> by enabling the browser to store data and handle cases for future autofills.</p><p>Flutter 2 is particularly suitable for implementing Progressive Web Apps, or PWAs. PWAs are a good fit for bridging the gap between mobile and web apps in a safe and trusted manner through the efforts of Chrome’s <a href=\"https://web.dev/fugu-status/\">Project Fugu</a>.</p><figure><img alt=\"Invoice Ninja, an invoice management app, launched the PWA app using the same codebase as their existing Flutter mobile apps.\" src=\"https://cdn-images-1.medium.com/max/1024/0*W5BGuCaX7v9rvtjh\" /><figcaption><a href=\"https://www.invoiceninja.com/\">Invoice Ninja</a>, an invoice management app, launched the PWA app using the same codebase as their existing Flutter mobile apps.</figcaption></figure><p>When you create a Flutter web app, we include a PWA web manifest file, as well as code to setup service workers. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\">manifest file</a> provides metadata about how your app should run, including information like icons and an app title. <a href=\"https://developers.google.com/web/ilt/pwa/introduction-to-service-worker\">Service workers</a> enable caching of resources and running your app offline. When running a Flutter app in the browser as a PWA, you’ll see the opportunity to install it to your device, whether as a mobile or desktop app.</p><h4>Support for desktop form factors</h4><p>We want to make Flutter web experiences feel right, regardless of the shape and size of your browser window. On mobile browsers, Flutter apps already have excellent support for gestures and scrolling physics inherited from mobile app support. But desktop browsers offer different UI affordances, and so we’ve updated Flutter accordingly.</p><p>For instance, there is an expectation for content on the desktop to display scrollbars that can be controlled by a mouse or keyboard. So the new <a href=\"http://flutter.dev/go/update-scrollbars\">customizable interactive scrollbars</a> support a <a href=\"https://api.flutter.dev/flutter/material/ScrollbarTheme-class.html\">theme</a>, a track, and the ability to scroll by dragging a thumb. The <a href=\"https://api.flutter.dev/flutter/widgets/PrimaryScrollController-class.html\">PrimaryScrollController</a> has been expanded so that you can use<a href=\"http://flutter.dev/go/default-scroll-action\"> keyboard shortcuts to scroll</a> without having to wire up your own scroll views.</p><figure><img alt=\"Property management solution for Zurich Insurance, built by Spica Technologies, is a great example of the business apps Flutter’s web support can enable on desktop browsers.\" src=\"https://cdn-images-1.medium.com/max/1024/0*6XtFgsx4cz1OY88N\" /><figcaption>Property management solution for <a href=\"https://www.zurich.com/\">Zurich Insurance</a>, built by <a href=\"https://spicatech.co.uk/\">Spica Technologies</a>, is a great example of the business apps Flutter’s web support can enable on desktop browsers.</figcaption></figure><p>We also increased the <a href=\"https://github.com/flutter/flutter/issues/43350\">default content density</a>, because mouse pointers support a tighter density than touch devices. And we added a superset of <a href=\"https://github.com/flutter/flutter/issues/60641\">system mouse cursors</a> in the framework to support all platforms.</p><p>Finally, to support <em>all</em> users, Flutter’s web semantic features are expanded to support accessibility for Windows, macOS, and ChromeOS. On the web, a second DOM tree called the <a href=\"https://api.flutter.dev/flutter/semantics/SemanticsNode-class.html\">SemanticsNode</a> tree is generated in parallel to the <a href=\"https://api.flutter.dev/flutter/rendering/RenderObject-class.html\">RenderObject</a> DOM tree. The SemanticsNode tree translates the flags, actions, labels, and other semantic properties into <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA attributes</a>. Now you can use <a href=\"https://support.microsoft.com/en-us/windows/complete-guide-to-narrator-e4397a0d-ef4f-b386-d8ae-c172f109bdb1\">Narrator</a>, <a href=\"https://www.apple.com/accessibility/vision/\">VoiceOver</a>, <a href=\"https://support.google.com/accessibility/android/answer/6007100?hl=en\">TalkBack</a>, or <a href=\"https://support.google.com/chromebook/answer/7031755?hl=en#:~:text=You%20can%20turn%20ChromeVox%20on,then%20ChromeVox%20will%20start%20speaking.\">ChromeVox</a> screen readers to navigate a Flutter web app.</p><h4>Plugin ecosystem</h4><p>Finally, web support was added to some of the most-used plugins, making it possible to bring your existing Flutter apps to the web. <a href=\"https://pub.dev/\">Flutter plugins</a> allow your code to interact with native libraries for the platform you are running on. When you run your Flutter app on the web, you can access existing JavaScript libraries through plugins.</p><p>Since the beta release and with help from the community, support for the following plugins was added:</p><ul><li><a href=\"https://pub.dev/packages/image_picker_for_web\">image_picker</a></li><li><a href=\"https://pub.dev/packages/google_maps\">google_maps</a></li><li><a href=\"https://pub.dev/packages/firebase_analytics\">firebase_analytics</a></li><li><a href=\"https://pub.dev/packages/firebase_storage\">firebase_storage</a></li><li><a href=\"https://pub.dev/packages/experimental_connectivity_web\">connectivity</a></li><li><a href=\"https://pub.dev/packages/cloud_firestore\">cloud_firestore</a></li><li><a href=\"https://pub.dev/packages/cloud_functions\">cloud_functions</a></li><li><a href=\"https://pub.dev/packages/cross_file\">cross_file</a></li></ul><h3>Looking forward</h3><p>A few years ago, it wouldn’t have been possible to deliver Flutter on the web with an acceptable level of quality and performance. However, the introduction of new web technologies and continued advances in the platform allowed us to harness much more of the potential of the underlying device. With support for the web, Flutter encompasses every device on the internet with a consistent experience across all modern browsers and devices.</p><p>Much of this release was defined by the feedback shared by early web adopters, and by issues filed by the community. And for that, we thank you! Going forward, our primary goal is to address your feedback and resolve issues quickly so that you can stay focused on shipping a high-quality, Flutter app across <em>all</em> of your target platforms.</p><figure><img alt=\"Moi Mobiili, a modern Mobile Virtual Network Operator, recently launched their web app using Flutter.\" src=\"https://cdn-images-1.medium.com/max/1024/0*eLfOUS1mLRtcDr4j\" /><figcaption><a href=\"https://www.moi.fi/\">Moi Mobiili</a>, a modern Mobile Virtual Network Operator, recently launched their web app using Flutter.</figcaption></figure><p>Performance will likely always be an area of investment. Our goal is to reduce code size and increase frames per second (fps). Today, every Flutter web app downloads the engine code that it needs. We’re looking into possibilities to cache some of this logic, reducing startup time and download size. We recently did work in the Flutter Gallery demo app to reduce code size using deferred libraries and plan to share what we learned soon.</p><p>We’re also continuing to refine a few areas over the coming months:</p><ul><li>While CanvasKit is stable, there are a couple of edge cases that aren’t covered, such as <a href=\"https://github.com/flutter/flutter/issues/74741\">font fallbacks</a> for special characters or properly supporting <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">Cross-Origin Resource Sharing (CORS)</a> images.</li><li>PWAs currently <a href=\"https://github.com/flutter/flutter/issues/75861\">cache a subset of resources</a>, so our full offline support still requires <a href=\"https://github.com/flutter/flutter/issues/70101\">extra manual steps to work for CanvasKit</a>.</li><li>Text rendering and functionality, like selecting heavily styled text, is still one of the most complex features we will continue to work on.</li><li>Our plugin ecosystem is something we will also continue to invest in so that Google-published packages have greater parity across mobile and web.</li></ul><figure><img alt=\"Simplebet used Flutter’s web support to build highly interactive embeddable NFL &amp; NBA betting experiences within Fanduel’s existing suite of mobile apps.\" src=\"https://cdn-images-1.medium.com/max/960/0*O9LlG-FDFRIFAsX0\" /><figcaption><a href=\"https://simplebet.io/\">Simplebet</a> used Flutter’s web support to build highly interactive embeddable NFL &amp; NBA betting experiences within Fanduel’s existing suite of mobile apps.</figcaption></figure><h3>Getting started with Flutter on the web</h3><p>With the portability of Dart, the power of the web platform, and the flexibility of the Flutter framework, you can now build apps for iOS, Android, and the browser from the same codebase.</p><p>For those of you who already have an existing Flutter web app, you can now build your app in the <a href=\"https://github.com/flutter/flutter/wiki/Flutter-build-release-channels#stable\">stable channel</a>. If you are new to building Flutter web apps, check out <a href=\"http://flutter.dev/web\">flutter.dev/web</a>, our <a href=\"https://flutter.dev/docs/get-started/codelab-web\">get started codelab</a>, and the Flutter Engage <a href=\"https://youtu.be/HAstl_NkXl0\">web breakout session</a>. And, as you’re building your web app, be sure to file any issues on <a href=\"https://goo.gle/flutter_web_issue\">GitHub</a>.</p><p>We can’t wait to see what you build with Flutter’s new web support!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d6b84e83b425\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-web-support-hits-the-stable-milestone-d6b84e83b425\">Flutter web support hits the stable milestone</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-03-03T18:46:16.000Z":{"title":"What’s New in Flutter 2.0","link":"https://medium.com/flutter/whats-new-in-flutter-2-0-fe8e95ecc65?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/fe8e95ecc65","category":["desktop","web","dart","flutter","web-development"],"dc:creator":"Chris Sells","pubDate":"Wed, 03 Mar 2021 18:46:16 GMT","atom:updated":"2021-03-03T19:09:49.230Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h3>What’s New in Flutter 2</h3><h4>Flutter web and Null Safety move to stable, Flutter desktop moves to beta and so much more!</h4><p>Today, we’re pleased to announce the release of Flutter 2. It’s been a little more than two years since the Flutter 1.0 release, but in that short time, we’ve closed 24,541 issues and merged 17,039 PRs from 765 contributors. Just since the Flutter 1.22 release in September, we’ve closed 5807 issues and merged 4091 PRs from 298 contributors. Special thanks go out to our volunteer contributors who generously give their spare time to improve the Flutter project. The top volunteer contributors for the Flutter 2 release were <a href=\"https://github.com/xu-baolin\">xu-baolin</a> with 46 PRs, <a href=\"https://github.com/a14n\">a14n</a> with 32 PRs that focused on bringing Flutter to null safety, and <a href=\"https://github.com/hamdikahloun\">hamdikahloun</a> with 20 PRs that improved a number of the Flutter plugins. But it’s not just coders that contribute to the Flutter project; a great set of volunteer PR reviewers were also responsible for reviewing 1525 PRs, including <a href=\"https://github.com/hamdikahloun\">hamdikahloun</a> (again!), <a href=\"https://github.com/CareF\">CareF</a> and <a href=\"https://github.com/YazeedAlKhalaf\">YazeedAlKhalaf</a> (who’s only 16!). Flutter is truly a community effort and we couldn’t have gotten to version 2 without the issue raisers, PR contributors, and code reviewers. This release is for all of you.</p><p>There are a lot of exciting things happening as part of the Flutter 2 release. For an overview of what’s new across Flutter 2 and Dart 2.12, as well as how our customers and partners are using Flutter 2, see <a href=\"https://developers.googleblog.com/2021/03/announcing-flutter-2.html\">Announcing Flutter 2</a>. For a detailed look at Dart 2.12, see <a href=\"https://medium.com/dartlang/announcing-dart-2-12-499a6e689c87\">Announcing Dart 2.12</a>. For how best to take advantage of Flutter web now that it’s recommended for production use, see <a href=\"https://medium.com/flutter/web-post-d6b84e83b425\">Flutter web support hits the stable milestone</a>.</p><p>And, to see what’s new in Flutter 2 itself, keep reading!</p><h3>Web</h3><p>As of today, Flutter’s web support has transitioned from beta to the stable channel. With this initial stable release, Flutter pushes reusability of code to another level with the support of the web platform. So now when you create a Flutter app in stable, web is just another device target for your app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*KQZef4s2-koToHMA\" /><figcaption><a href=\"https://www.moi.fi/\">Moi Mobiili</a>, a modern Mobile Virtual Network Operator striving for operational excellence through digitalization, chose Flutter to build their Mun Moi Account manager app and recently launched their web app.</figcaption></figure><p>By leveraging the web platform’s many strengths, Flutter built a foundation for building rich interactive web applications. We primarily focused on performance and improvements to our rendering fidelity. In addition to our HTML renderer, we added a new CanvasKit-based renderer. We’ve also added web-specific features, such as a <a href=\"https://pub.dev/documentation/url_launcher/latest/link/Link-class.html\">Link widget</a>, to make sure your app running in the browser feels like a web app.</p><p>Find more details about this stable release in <a href=\"https://medium.com/flutter/web-post-d6b84e83b425\">Flutter’s web support blog post</a>.</p><h3>Sound Null Safety</h3><p>Sound null safety is a significant addition to the Dart language, which further strengthens the type system by distinguishing nullable types from non-nullable types. This enables developers to prevent null error crashes, a common reason for apps to crash. By incorporating null checks into the type system, these errors can be caught during development, thus preventing crashes in production. Sound null safety is fully supported in stable as of Flutter 2, which contains Dart 2.12. For more details, see the <a href=\"https://medium.com/dartlang/announcing-dart-2-12-499a6e689c87\">Dart 2.12 blog post</a>.</p><p>The pub.dev package repository already has <a href=\"https://pub.dev/packages?q=&amp;null-safe=1\">more than 1,000 null safe</a> packages published, including hundreds of packages by the <a href=\"https://pub.dev/packages?q=publisher%3Adart.dev&amp;sort=popularity&amp;null-safe=1\">Dart</a>, <a href=\"https://pub.dev/packages?q=publisher%3Aflutter.dev&amp;sort=popularity&amp;null-safe=1\">Flutter</a>, <a href=\"https://pub.dev/packages?q=publisher%3Afirebase.google.com&amp;sort=popularity&amp;null-safe=1\">Firebase</a>, and <a href=\"https://pub.dev/packages?q=publisher%3Amaterial.io&amp;sort=popularity&amp;null-safe=1\">Material</a> teams. If you are a package author, review the <a href=\"https://dart.dev/null-safety/migration-guide\">migration guide</a> and consider migrating today.</p><h3>Desktop</h3><p>In this release, we’re pleased to announce that Flutter’s desktop support is available in the stable channel under an early release flag. What this means is that we’re ready for you to give it a try as a deployment target for your Flutter apps: you can think of it as a “beta snapshot” that previews the final stable release coming later this year.</p><p>To bring Flutter desktop to this degree of quality, there have been improvements both big and small, starting with working to ensure that text editing operates like the native experience on each of the supported platforms, including foundational features like <a href=\"https://github.com/flutter/flutter/pull/71756\">text selection pivot points</a> and being able to stop propagation of<a href=\"https://github.com/flutter/flutter/issues/33521\"> a keyboard event once it’s been handled</a>. On the mouse input side, dragging with a high precision pointing device now starts immediately instead of waiting for the lag needed when handling touch input. Also, a built-in context menu has been added to the TextField and TextFormField widgets for <a href=\"https://github.com/flutter/flutter/pull/74286\">Material</a> and <a href=\"https://github.com/flutter/flutter/pull/73882\">Cupertino</a> design languages. Finally, <a href=\"https://github.com/flutter/flutter/pull/74299\">grab handles have been added</a> to the ReorderableListView widget.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*uxIQpd8XEMIsyePK\" /><figcaption>The ReorderableListView now has grab handles for easy drag ’n’ drop with a mouse</figcaption></figure><p>The ReorderableListView was always good at moving items around with very little effort on your part as a developer, but it required the user to initiate a drag using a long-press. That made sense on a mobile device, but few desktop users would think to long-press on an item with their mouse to move it around, so this release includes a grab handle suitable for mouse or touch input. Another improvement for platform-idiomatic functionality is <a href=\"https://github.com/flutter/flutter/pull/71664\">an updated scrollbar</a> that shows up correctly for the desktop form-factor.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*n6Lap1ZNfF-RL-Dd\" /><figcaption>This release includes an updated Scrollbar widget that works great in a desktop environment</figcaption></figure><p>The Scrollbar widget has been updated to provide the interactive features that are expected on the desktop, including the ability to drag the thumb, click on the track to page up and down, and to show a track when the mouse hovers over any part of the scrollbar. Furthermore, since the Scrollbar is themeable using <a href=\"https://api.flutter.dev/flutter/material/ScrollbarTheme-class.html\">the new ScrollbarTheme class</a>, you can style it to match your app’s look and feel.</p><p>For additional desktop-specific functionality, this release also enables command-line argument handling for Flutter apps so that simple things like a double-click on a data file in the Windows File Explorer can be used to open the file in your app. We’ve also worked hard to make resizing much smoother for both <a href=\"https://github.com/flutter/engine/pull/23701\">Windows</a> and <a href=\"https://github.com/flutter/engine/pull/23924\">macOS</a>, and to enable IME (Input Method Editors) for international users.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/761/0*W1aGfw-fJXfFiqWR\" /><figcaption>Flutter desktop now supports intuitive IME input</figcaption></figure><p>In addition, we have provided <a href=\"https://flutter.dev/desktop#distribution\">updated docs on what you need to do to begin preparing your desktop app for deployment to the appropriate OS-specific stores</a>. Give them a try and please provide feedback if we’ve missed anything.</p><p>When it comes to trying the beta for Flutter desktop, you can access it by switching to the beta channel as expected as well as setting the config flags for the platforms you’re targeting according to <a href=\"https://flutter.dev/desktop#create-a-new-project\">the directions on flutter.dev</a>. In addition, we’ve also made a snapshot of the beta bits available on the stable channel. If you use ‘flutter config’ to enable one of the desktop config settings (for example, enable-macos-desktop), then you can try out the beta functionality of the desktop support w/o having to go through the lengthy process of moving to the beta channel and pulling down all the latest beta of the Flutter SDK, building the tools, etc. This is great for giving it a try or using the desktop support as a simple “Flutter Emulator.”</p><p>However, if you choose to stay on the stable channel to access the desktop beta, you won’t get new features or bug fixes as quickly as switching to the beta or dev channels. So, if you’re actively targeting Windows, macOS, or Linux, we recommend switching to a channel that provides updates more quickly.</p><p>As we approach our first full production-quality release of Flutter desktop, we know we have more to do, including support for integration with native top-level menus, text editing that feels more like the experience of the individual platforms, and accessibility support, as well as general bug fixes and performance enhancements. If there are other things you think need doing before the desktop moves to production quality, <a href=\"http://github.com/flutter/flutter/issues\">please be sure to provide your feedback</a>.</p><h3>Platform Adaptive Apps: Flutter Folio Sample</h3><p>Now that Flutter supports three platforms for production apps (Android, iOS, and the web) and three more in beta (Windows, macOS, and Linux), a natural question arises: how do you write an app that adapts itself <em>well</em> to multiple different form factors (small, medium, and large screens), different input modes (touch, keyboard, and mouse) and different idioms (mobile, web, and desktop)? To answer this question for ourselves as well as for Flutter developers everywhere, we commissioned the Flutter Folio scrapbooking app.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fx4xZkdlADWo&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dx4xZkdlADWo&amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2Fx4xZkdlADWo%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/32520821906189798358518bad5671d7/href\">https://medium.com/media/32520821906189798358518bad5671d7/href</a></iframe><p>Folio is meant to be a simple example of an app that you’d want to run well on multiple platforms from a single code base. And by “well,” we mean that it looks good on small, medium, and large screens, that it takes advantage of touch, keyboard, and mouse input, and that it works well for the idioms of the platform, (for example, by using links on the web and menus on desktop). We call this kind of app “platform adaptive” because it adapts well to whatever platform it’s running on.</p><p>If you’d like to see how you can make your own apps platform adaptive, you can check out <a href=\"https://github.com/gskinnerTeam/flutter-folio\">the source code for Folio</a>. In the future, expect to find docs and codelabs that explore this topic more deeply. In the meantime, check out Aloïs Deniel’s <a href=\"https://aloisdeniel.com/#/posts/adaptative-ui\">excellent blog post and video</a> on this very topic.</p><h3>Google Mobile Ads to Beta</h3><p>In addition to Flutter desktop moving to beta, today we’re excited to announce an open beta for<a href=\"https://pub.dev/packages/google_mobile_ads\"> Google Mobile Ads SDK for Flutter</a>. This is a brand new plugin that provides inline banner and native ads, in addition to the existing overlay formats (overlay banner, interstitial, and rewarded video ads). This plugin unifies support for Ad Manager and Admob, so no matter what size publisher you are, this plugin can be tailored to your scenarios.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h4J8qtxzJXTg769G\" /></figure><p>We’ve been piloting this plugin with some of our early customers in a private beta program, and many of them have successfully launched their apps with these new formats. For example, Sua Musica (largest Latin American music platform for independent artists with more than 15k verified artists and 10M MAU) launched their new Flutter app with the Google Mobile Ads SDK for Flutter plugin. They saw an 350% increase on Impressions with a 43% increase on CTR and 13% increase on eCPM.</p><p>This <a href=\"https://pub.dev/packages/google_mobile_ads\">plugin</a> is available for you to use today. As part of Flutter Engage, Andrew Brogdon and Zoey Fan presented a session on “Monetizing apps with Flutter” (<a href=\"http://goo.gle/EngageOnDemand\">available on the Flutter Engage</a> site), where they talk about monetization strategies for apps built with Flutter, and how you can load ads in your Flutter app. Moreover, we created a new <a href=\"http://flutter.dev/ads\">Ads</a> page on flutter.dev where you can find all helpful resources such as the <a href=\"https://developers.google.com/admob/flutter\">plugin implementation guide</a>, the <a href=\"https://codelabs.developers.google.com/codelabs/admob-inline-ads-in-flutter\">inline banner and native ads</a> codelab, and the <a href=\"https://codelabs.developers.google.com/codelabs/admob-ads-in-flutter#0\">overlay banner, interstitial and rewarded video ads</a> codelab. Please be sure to check them out!</p><h3>New iOS features</h3><p>Just because we’re continuing to increase the quality of support for other platforms, don’t think we’re forgetting iOS. In fact, this release brings with it 178 PRs merged that are iOS-related, including <a href=\"https://github.com/flutter/engine/pull/23495\">23495</a>, which brings State Restoration to iOS, <a href=\"https://github.com/flutter/flutter/pull/67781\">67781</a>, which fulfills a long-standing request to build an IPA directly from the command line without opening Xcode, and <a href=\"https://github.com/flutter/flutter/pull/69809\">69809</a>, which updates the CocoaPods version to match the latest tooling. In addition, a few iOS widgets have been added to the Cupertino design language implementation.</p><p>A new <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoSearchTextField-class.html\">CupertinoSearchTextField</a> offers the iOS search bar UI.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/628/0*sm8nQOLfY63_D6p8\" /></figure><p>The <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoFormSection-class.html\">CupertinoFormSection</a>, <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoFormRow-class.html\">CupertinoFormRow</a>, and <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoTextFormFieldRow-class.html\">CupertinoTextFormFieldRow</a> widgets make it easier to produce validated form fields with iOS’s sectioned visual aesthetics.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/706/0*HwoWeVZall4b0VB5\" /></figure><p>In addition to the feature work for iOS, we’re continuing to <a href=\"https://github.com/flutter/flutter/issues/60267#issuecomment-762786388\">research performance improvements</a> for iOS and Flutter in general when it comes to shaders and animation. iOS continues to be a premier platform for Flutter and we’ll continue to work to bring important new features and performance improvements.</p><h3>New widgets: Autocomplete and ScaffoldMessenger</h3><p>This release of Flutter comes with two additional new widgets, AutocompleteCore and ScaffoldMessenger. <a href=\"https://github.com/flutter/flutter/pull/62927\">AutocompleteCore</a> represents the minimal functionality required to get auto-complete functionality into your Flutter app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/255/0*3GGvtXibNB3-X8jA\" /></figure><p>Autocomplete is an often-requested feature for Flutter, so this release starts to provide this functionality. You can use it today, but if you’re curious about the design for the complete feature, check out <a href=\"https://docs.google.com/document/d/1fV4FDNdcza1ITU7hlgweCDUZdWyCqd-rjz_J7K2KkfY/\">the autocomplete design document</a>.</p><p>Likewise, <a href=\"https://github.com/flutter/flutter/pull/64101\">the ScaffoldMessenger</a> was created to deal with a number of SnackBar-related issues, including the ability to easily create a SnackBar in response to an AppBar action, creating SnackBars to persist between Scaffold transitions, and being able to show SnackBars at the completion of an asynchronous action, even if the user has navigated to a page with a different Scaffold.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/0*vGJ5uq6V58RaGO5o\" /></figure><p>All of this goodness can be yours with a couple of lines of code that you should be using from now on to display your SnackBars:</p><pre>final messenger = ScaffoldMessenger.of(context);<br>messenger.showSnackBar(SnackBar(content: Text(‘I can fly.’)));</pre><p>As you might imagine, there’s more to it than that; for the details, check out <a href=\"https://www.youtube.com/watch?v=sYG7HAGu_Eg\">an excellent video from Kate Lovett on ScaffoldMessenger</a>.</p><h3>Multiple Flutter instances with Add-to-App</h3><p>We know from talking with many Flutter developers that a significant number of you don’t have the luxury of starting a brand new app but you <em>can</em> take advantage of Flutter by adding it to your existing iOS and Android apps. This feature, called <a href=\"https://flutter.dev/docs/development/add-to-app\">Add-to-App</a>, is an excellent way to reuse your Flutter code across both mobile platforms while still preserving your existing native code base. However, for those of you doing that, we’ve sometimes heard that it’s unclear how to go beyond integrating the first screen into Flutter. Interweaving Flutter and native screens makes navigation states difficult to maintain, and integrating multiple Flutters at the view level uses a lot of memory.</p><p>In the past, additional Flutter instances had the same memory cost as the first instance. In Flutter 2, we’ve reduced the static memory cost of creating additional Flutter engines by ~99% to ~180kB per instance.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/280/0*huNKqtnnHVtbYW3_\" /></figure><p>The new APIs to enable this are in preview on the beta channel and are <a href=\"https://flutter.dev/docs/development/add-to-app/multiple-flutters\">documented on flutter.dev</a> along with <a href=\"https://github.com/flutter/samples/tree/master/add_to_app/multiple_flutters\">a set of sample projects demonstrating this new pattern</a>. With this change, we no longer hesitate to recommend creating multiple instances of the Flutter engine in your native apps.</p><h3>Flutter Fix</h3><p>Whenever any framework matures and gathers users with larger and larger code bases, the tendency over time is to avoid making any changes to the framework API to avoid breaking an increasing number of lines of code. With over 500,000 Flutter developers across a growing number of platforms, Flutter 2 is quickly falling into this category. However, for us to continue to improve Flutter over time, we want to be able to make breaking changes to the API. The question becomes, how to continue to improve the Flutter API without breaking our developers?</p><p>Our answer is <a href=\"http://flutter.dev/docs/development/tools/flutter-fix\">Flutter Fix</a>.</p><p>Flutter Fix is a combination of things. First, there’s a new command-line option to the dart CLI tool called dart fixthat knows where to look for a list of deprecated APIs and how to update code using those APIs. Second, it’s the list of available fixes itself, which is bundled with the Flutter SDK as of version 2. And finally, it’s an updated set of Flutter extensions for the VS Code, IntelliJ,and Android Studio IDEs that know how to expose that same list of available fixes as quick fixes with little light bulbs that will help you to change the code with a click of your mouse.</p><p>As an example, let’s say you had the following line of code in your app:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*Ky80dLtF0OQ81U3ohMc5jg.png\" /><figcaption>Creating a Flutter widget using a deprecated argument</figcaption></figure><p>Because the argument to this constructor is deprecated, it should be replaced with the following:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*CsdmVrVcS7jYSBzldzIzzg.png\" /><figcaption>Creating a Flutter widget with the deprecated argument replaced</figcaption></figure><p>Even if you’re familiar with all of the many Flutter deprecations, the larger the number of changes you have to make in your code, the harder it is for you to apply all of the fixes and the easier it is to make mistakes; humans are not great at these kinds of repetitive tasks. But computers are; by executing the following command, you can see all of the fixes we know how to make across your entire project:</p><pre>$ dart fix --dry-run</pre><p>If you’d like to apply them in bulk, you can easily do so:</p><pre>$ dart fix --apply</pre><p>Or, if you’d like to apply these fixes interactively in your favorite IDE, you can do that, too.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/602/0*I9GWJb-XsUhJUKrH\" /></figure><p>While we’ve been marking old APIs as deprecated for a number of years now, now that we have <a href=\"https://medium.com/flutter/deprecation-lifetime-in-flutter-e4d76ee738ad\">a policy about when we will actually remove deprecated APIs</a>, Flutter 2 is the first time that we’ve done so. Even though we haven’t yet captured all of the deprecated APIs as data to feed Flutter Fix, we continue to add more from previously deprecated APIs and will continue to do so with future breaking changes. Our goal is to do our best to make Flutter’s API the best it can be while also keeping your code up to date as we do it.</p><h3>Flutter DevTools</h3><p>To make it clear that DevTools is a tool that should be used for debugging your Flutter apps, we’ve renamed it to be Flutter DevTools when it’s debugging a Flutter app. In addition, we’ve done a lot of work to bring it to production quality worthy of Flutter 2.</p><p>One new feature that helps you zero in on your issues even before you’ve launched DevTools is the ability for Android Studio, IntelliJ, or Visual Studio Code to notice when there’s a common exception and offer to bring it up in DevTools to help you debug it. For example, the following shows an overflow exception has been thrown in your app, which brings up an option in Visual Studio Code to debug the issue in DevTools.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*O7zZDDpTc9cK-2X0\" /><figcaption>The Flutter IDE extensions notice when your app throws a layout overflow exception</figcaption></figure><p>Pressing that button brings you right to the Flutter Inspector in DevTools on the widget that’s causing the trouble so you can fix it. We’re only doing this for layout overflow exceptions today but our plan is to include this kind of handling for all kinds of common exceptions for which DevTools can be the solution.</p><p>Once you’ve got DevTools running, new error badges on the tabs help you track down specific issues in your app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/764/0*q1ug8VRx6ewqU_Ks\" /><figcaption>The red dots in DevTools helps you focus on the parts of your app with errors</figcaption></figure><p>Another new feature in DevTools is the ability to easily see an image that’s at a higher resolution than it’s displayed, which helps track down excessive app size and memory usage. To enable this feature, enable the Invert Oversized Images in the Flutter Inspector.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xoGJox6uQxSbN3G3\" /><figcaption>Enable the “Invert Oversized Images” option to highlight images that are bigger than they need to be</figcaption></figure><p>Now, when you display an image that’s significantly larger in resolution than its display size, it will appear upside-down to make it easy to find in your app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/836/0*gqIT_20hrbHlG8d_\" /><figcaption>The “Invert Oversized Images” option in action</figcaption></figure><p>Also, by popular demand, in addition to showing details about flexible layouts in the Flutter Inspector’s Layout Explorer, we’ve added the capability to show fixed layouts as well, enabling you to debug layouts of all kinds.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/989/0*oW2lFF9KTVUTaXeo\" /><figcaption>The new Layout Explorer shows layout details for fixed as well as flex layouts</figcaption></figure><p>And that’s not all. Here’s just a summary of a few more of the new features in Flutter DevTools 2:</p><ul><li>Added average FPS information and usability improvements to the Flutter frames chart</li><li>Calling out failed network requests in the network profiler with red error labels</li><li>New memory view charts are faster, smaller and easier to use, including a new hovercard to describe activity at a specific time</li><li>Added search and filtering to the Logging tab</li><li>Track logs from before DevTools is started so you can see the complete logging history when you do start it up</li><li>Renamed the “Performance” view to “CPU Profiler” to make it more clear what functionality it provides</li><li>Added timing grid to CPU Profiler flame charts</li><li>Renamed the “Timeline” view to “Performance” to make it more clear what functionality it provides</li></ul><p>And that’s <em>still</em> not all. For the full set of changes, I recommend the following announcements:</p><ul><li>DevTools <a href=\"https://groups.google.com/g/flutter-announce/c/mx_hBxuXM9Q/m/Kjy9dqS3AAAJ\">0.9.4</a></li><li>DevTools <a href=\"https://groups.google.com/g/flutter-announce/c/mNqTNPUwBKw/m/_1qyXwTBAQAJ\">0.9.5</a></li><li>DevTools <a href=\"https://groups.google.com/g/flutter-announce/c/Ta5HR39P3go/m/2a43w7iSCwAJ\">0.9.6</a></li><li>DevTools <a href=\"https://groups.google.com/g/flutter-announce/c/IJ97oJ2HpxM/m/909J9Kl8AQAJ\">0.9.7</a></li><li>DevTools <a href=\"https://groups.google.com/g/flutter-announce/c/0xQhJR4nQbI\">2.0</a></li></ul><h3>Android Studio/IntelliJ Extension</h3><p>The Flutter plugin for the IntelliJ family of IDEs has gained a number of new features for Flutter 2 as well. To start, there’s a new project wizard, which matches the new wizard style in IntelliJ.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RPj9uHm2n8Zx1w1X\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*vu31pLbeCjWZvvJI\" /></figure><p>Also, if you’re using IntelliJ or Android Studio on Linux to program against the <a href=\"https://snapcraft.io/flutter\">Flutter SDK installed from the Snap Store</a>, the Flutter snap path has been added to the list of known SDK paths. This makes it easier for users of the Flutter snap to configure the Flutter SDK in Settings. Thanks to MarcusTomlinson@ for this contribution!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*N86bmi_l8Zx-UOnE\" /><figcaption>Android Studio on Linux is easier to use with the Flutter SDK installed via Snap</figcaption></figure><p>There’s a lot more good stuff you can read about in the announcements for the recent updates:</p><ul><li>IntelliJ Plugin <a href=\"https://groups.google.com/g/flutter-announce/c/w65rD73R83Q/m/gV5p0qf2AAAJ\">M51</a></li><li>IntelliJ Plugin <a href=\"https://groups.google.com/g/flutter-announce/c/tQqqMOIg6V0/m/wj7Kbv4-AgAJ\">M52</a></li><li>IntelliJ Plugin <a href=\"https://groups.google.com/g/flutter-announce/c/V335xbsPWUs/m/14LSp05kAQAJ\">M53</a></li><li>IntelliJ Plugin <a href=\"https://groups.google.com/g/flutter-announce/c/-jYDrwG7PmA\">M54</a></li></ul><h3>Visual Studio Code Extension</h3><p>The Flutter extension for Visual Studio Code has improved for Flutter 2 as well, starting with a number of testing enhancements, including the ability to re-run just failed tests.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*htJEMRQ54MN7hfcl\" /></figure><p>After two years in development, the LSP (Language Server Protocol) support for Dart is rolling out now as the default way to get to the Dart analyzer for integration into Visual Studio Code for the Flutter extension. The LSP support enables a number of improvements for Flutter development, including the ability to apply all fixes of a certain kind in the current Dart file and to cause code completion to generate complete function calls, including parenthesis and required arguments.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/570/0*YRyYVK1ObQ252jSL\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/504/0*eQD12Fr7liueGZXF\" /></figure><p>And the LSP support isn’t just for Dart; it also supports code completion in the pubspec.yaml and analysis_options.yaml files.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/536/0*IOR7QJ3FOqaGWIn9\" /></figure><p>These are just a few of the updates that the Visual Studio Code extension for Flutter has enjoyed recently. You can read the full list in these announcements:</p><ul><li>Visual Studio Code Plugin <a href=\"https://dartcode.org/releases/v3-16/\">v3.16</a></li><li>Visual Studio Code Plugin <a href=\"https://dartcode.org/releases/v3-17/\">v3.17</a></li><li>Visual Studio Code Plugin <a href=\"https://dartcode.org/releases/v3-18/\">v3.18</a></li><li>Visual Studio Code Plugin <a href=\"https://dartcode.org/releases/v3-19/\">v3.19</a></li><li>Visual Studio Code Plugin <a href=\"https://dartcode.org/releases/v3-20/\">v3.20</a></li></ul><h3>DartPad updated to support Flutter 2</h3><p>This list of tooling updates would not be complete without a mention of DartPad, which has been updated to support Flutter 2.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2bw4yhTolgWmIv1V\" /><figcaption>DartPad has been updated for Flutter 2</figcaption></figure><p>Now you can try the new null safe version of Flutter without leaving the comfort of your favorite browser.</p><h3>Ecosystem updates</h3><p>The Flutter development experience includes more than the framework and the tools; it also includes the wide range of packages and plugins available for Flutter apps. In the time since the last Flutter stable release, much has happened in that space as well. For example, between the camera and the video_player plugins, nearly 30 PRs have been merged to greatly increase the quality of both. If you’ve had trouble using either of these in the past, you should have another look; we think you’ll find them much more robust.</p><p>Also, if you’re a Firebase user, we are pleased to announce that the most popular plugins have been brought to production quality, including null safety support, and <a href=\"http://firebase.flutter.dev\">a full set of reference documentation and common usage tutorials</a> for Android, iOS, web, and macOS. These plugins include the following:</p><ul><li>Core</li><li>Authentication</li><li>Cloud Firestore</li><li>Cloud Functions</li><li>Cloud Messaging</li><li>Cloud Storage</li><li>Crashlytics</li></ul><p>Also, if you’re looking for crash reporting for your app, you may want to consider Sentry, which has <a href=\"https://blog.sentry.io/2021/03/03/with-flutter-and-sentry-you-can-put-all-your-eggs-in-one-repo/\">announced a new SDK for Flutter apps</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rGuUHqseWvUJ2FPl\" /><figcaption>The Sentry crash reporting tool now supports Flutter</figcaption></figure><p>With Sentry’s SDK for Flutter, you can be notified of errors that occur on Android, iOS, or native platforms in real-time. You can see the details in <a href=\"https://docs.sentry.io/platforms/flutter/\">the Sentry documentation</a>.</p><p>In addition, if you haven’t yet seen <a href=\"http://plus.fluttercommunity.dev/\">the Flutter Community “plus” plugins</a>, you’ll want to check them out. They’ve forked a number of the popular plugins initially developed by the Flutter team and have added null safety support, support for additional platforms and a whole new set of <a href=\"https://plus.fluttercommunity.dev/docs/overview/\">documentation</a> as well as beginning to fix appropriate issues from the flutter/plugins repository. This plugins include the following:</p><ul><li>Android Alarm+</li><li>Android Intent+</li><li>Battery+</li><li>Connectivity+</li><li>Device Info+</li><li>Network Info+</li><li>Package Info+</li><li>Sensors+</li><li>Share+</li></ul><p>At this point, the set of Flutter-compatible packages and plugins numbers greater than 15,000, which makes it hard to find those you should consider first. For this reason, we publish the Pub Points (static analysis scoring), popularity rank, likes and, for exceptionally high quality, a special designation for those packages marked as a <a href=\"https://flutter.dev/docs/development/packages-and-plugins/favorites\">Flutter Favorite</a>. In time for Flutter 2, we’ve added several new packages to the list of favorites:</p><ul><li>animated_text_kit</li><li>bottom_navy_bar</li><li>chopper</li><li>font_awesome_flutter</li><li>flutter_local_notifications</li><li>just_audio</li></ul><p>Congratulations to the authors of these packages! If you haven’t checked them out yet, or <a href=\"https://pub.dev/flutter/favorites\">the rest of the packages on the list</a>, you should.</p><p>And last but certainly not least, for package authors or package users interested in whether the latest version of a package works on a recent version of Flutter, you’ll want to check out Codemagic’s new <a href=\"http://pub.green\">pub.green</a> site.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-Ichbk_jGmhmdj3B\" /><figcaption>Codemagic’s new <a href=\"http://pub.green\">pub.green</a> site shows compatibility for the top packages with recent Flutter releases</figcaption></figure><p>The pub.green site tests the compatibility of Flutter and Dart packages available on pub.dev with different Flutter versions. Think of it as the “can I use” for Flutter. For more details, I recommend <a href=\"https://blog.codemagic.io/pub-green/\">the announcement blog post from the CodeMagic team</a>.</p><h3>Breaking Changes</h3><p>We’ve made the following breaking changes for Flutter 2, many of which can be automatically mitigated using the dart fix command or the quick fixes in your IDE of choice:</p><ul><li><a href=\"https://github.com/flutter/flutter/pull/61366\">61366</a> Continue the clipBehavior breaking change</li><li><a href=\"https://github.com/flutter/flutter/pull/66700\">66700</a> Default FittedBox’s clipBehavior to none</li><li><a href=\"https://github.com/flutter/flutter/pull/68905\">68905</a> Remove nullOk parameter from Cupertino color resolution APIs</li><li><a href=\"https://github.com/flutter/flutter/pull/68908\">69808</a> Remove nullOk from Scaffold.of and ScaffoldMessenger.of, create maybeOf for both</li><li><a href=\"https://github.com/flutter/flutter/pull/68910\">68910</a> Remove nullOk parameter from Router.of and make it return a non-nullable value</li><li><a href=\"https://github.com/flutter/flutter/pull/68911\">68911</a> Add maybeLocaleOf to Localizations</li><li><a href=\"https://github.com/flutter/flutter/pull/68736\">68736</a> Remove nullOK in Media.queryOf</li><li><a href=\"https://github.com/flutter/flutter/pull/68917\">68917</a> Remove nullOk parameter from Focus.of, FocusTraversalOrder.of, and FocusTraversalGroup.of</li><li><a href=\"https://github.com/flutter/flutter/pull/68921\">68921 Remove nullOk parameter from Shortcuts.of, Actions.find, and Actions.handler</a></li><li><a href=\"https://github.com/flutter/flutter/pull/68925\">68925</a> Remove nullOk parameter from AnimatedList.of and SliverAnimatedList.of</li><li><a href=\"https://github.com/flutter/flutter/pull/69620\">69620</a> Remove deprecated methods from BuildContex</li><li><a href=\"https://github.com/flutter/flutter/pull/70726\">70726</a> Remove the nullOk parameter from Navigator.of and add Navigator.maybeOft</li><li><a href=\"https://github.com/flutter/flutter/pull/72017\">72017</a> Remove deprecated CupertinoTextThemeData.brightness</li><li><a href=\"https://github.com/flutter/flutter/pull/72395\">72395</a> Remove deprecated [PointerEnterEvent, PointerExitEvent].fromHoverEvent</li><li><a href=\"https://github.com/flutter/flutter/pull/72532\">72532</a> Remove deprecated showDialog.child</li><li><a href=\"https://github.com/flutter/flutter/pull/72890\">72890</a> Remove deprecated Scaffold.resizeToAvoidBottomPadding</li><li><a href=\"https://github.com/flutter/flutter/pull/72893\">72893</a> Remove deprecated WidgetsBinding.[deferFirstFrameReport, allowFirstFrameReport]</li><li><a href=\"https://github.com/flutter/flutter/pull/72901\">72901</a> Remove deprecated StatefulElement.inheritFromElement</li><li><a href=\"https://github.com/flutter/flutter/pull/72903\">72903</a> Remove deprecated Element methods</li><li><a href=\"https://github.com/flutter/flutter/pull/73604\">73604</a> Remove deprecated CupertinoDialog</li><li><a href=\"https://github.com/flutter/flutter/pull/73745\">73745</a> Remove deprecated actionsForegroundColor from Cupertino[Sliver]NavigationBar</li><li><a href=\"https://github.com/flutter/flutter/pull/73746\">73746</a> Remove deprecated ButtonTheme.bar</li><li><a href=\"https://github.com/flutter/flutter/pull/73747\">73747</a> Remove span deprecations</li><li><a href=\"https://github.com/flutter/flutter/pull/73748\">73748</a> Remove deprecated RenderView.scheduleInitialFrame</li><li><a href=\"https://github.com/flutter/flutter/pull/73749\">73749</a> Remove deprecated Layer.findAll</li><li><a href=\"https://github.com/flutter/flutter/pull/74657\">75657</a> Remove vestigial nullOk parameter from Localizations.localeOf</li><li><a href=\"https://github.com/flutter/flutter/pull/74680\">74680</a> Remove nullOk from Actions.invoke, add Actions.maybeInvoke</li></ul><h3>Summary</h3><p>In closing, from all of us here on the Flutter Team at Google we want to say — thank you. Thank you ×150,000 for the more than 150,000 Flutter apps launched in the community in just the past two years. In case you missed it, we compiled a few of our favorite Flutter apps in this Mashup Video dedicated to you, the community, played at the opening of the Flutter Engage keynote.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FA3ltMaM6noM&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DA3ltMaM6noM&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9940be680a3c80e0404b3fb0d8986a5c/href\">https://medium.com/media/9940be680a3c80e0404b3fb0d8986a5c/href</a></iframe><p>Without your continued support and excitement for what we’re all creating, it wouldn’t have been possible to become one of the most vibrant global developer communities in the world. We can’t wait to see what you’ll build next.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fe8e95ecc65\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-2-0-fe8e95ecc65\">What’s New in Flutter 2.0</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-02-12T01:32:30.000Z":{"title":"Flutter Performance Updates in the first half of 2020","link":"https://medium.com/flutter/flutter-performance-updates-in-the-first-half-of-2020-5c597168b6bb?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/5c597168b6bb","category":["flutter","performance"],"dc:creator":"Yuqian Li","pubDate":"Fri, 12 Feb 2021 01:32:30 GMT","atom:updated":"2021-02-12T01:32:30.080Z","content:encoded":"<h3>Flutter performance updates in the first half of 2020</h3><p>By <a href=\"https://medium.com/u/9fb96b11de78?source=post_page-----4c170934f914--------------------------------\">Yuqian Li</a> and <a href=\"https://medium.com/u/4631513e40c0?source=post_page-----4c170934f914--------------------------------\">Shams Zakhour</a></p><p>Being fast is a key pillar to Flutter. This article highlights performance improvements from the first half of 2020 implemented by folks from the Flutter community.</p><p>If you’ve helped out with performance after June 2020, we will cover that in a future post. We hope that sharing this with you, the Flutter community, inspires you to help us with this effort!</p><h3>Quantified improvements</h3><h4>[app size] 18.5% reduction in Flutter Gallery app size</h4><p>contributors: <a href=\"https://github.com/alexmarkov\">alexmarkov</a>, <a href=\"https://github.com/sstrickl\">sstrickl</a>, <a href=\"https://github.com/mkustermann\">mkustermann</a>, <a href=\"https://github.com/askeksa-google\">askeksa-google</a>, <a href=\"https://github.com/rmacnak-google\">rmacnak-google</a>, <a href=\"https://github.com/mraleph\">mraleph</a>, <a href=\"https://github.com/crelier\">crelier</a></p><ul><li>Commit <a href=\"https://github.com/dart-lang/sdk/commit/f56b0f690789b6f0e2e5bc1340abf4eba414b7a0\">f56b0f</a>, <a href=\"https://github.com/dart-lang/sdk/commit/a2bb7301c5795e6b28089a8dc96e6ab5ca798e22\">a2bb73</a>, <a href=\"https://github.com/dart-lang/sdk/commit/d77f4913a18ecce8c4be95cbaa4299ff1521dc10\">d77f49</a>, <a href=\"https://github.com/dart-lang/sdk/commit/e2faac751e1ef3707730e6e48f4d8f22ecbf35c3\">e2faac</a>, <a href=\"https://github.com/dart-lang/sdk/commit/8e7ffafbafc8203361111ddcafe0e0fcc372edf8\">8e7ffa</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/126648\">76c628</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/131833\">4ab9c7</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/132603\">1c2d37</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/132663\">27e64c</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/134294\">6a7e4e</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/152323\">054929</a></li><li>18.5% reduction (<a href=\"https://golem.corp.goog/Benchmark?team=flutter&amp;benchmark=flutter_gallery_total_size\">9.6MB to 8.1MB</a>) the Flutter Gallery sample for Android</li></ul><h4>[app size] 100KB size reduction for Gallery app by font subsetting</h4><p>contributors: <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/jonahwilliams\">jonahwilliams</a>, <a href=\"https://github.com/zanderso\">zanderso</a>, <a href=\"https://github.com/jmagman\">jmagman</a>, <a href=\"https://github.com/blasten\">blasten</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/14828\">#14828</a>, <a href=\"https://github.com/flutter/flutter/pull/49737\">#49737</a>, <a href=\"https://github.com/flutter/flutter/pull/49842\">#49842</a>, <a href=\"https://github.com/flutter/flutter/pull/50224\">#50224</a>, <a href=\"https://github.com/flutter/flutter/pull/51808\">#51808</a></li><li>100kb <a href=\"https://github.com/flutter/flutter/pull/49737#issue-368790736\">size reduction</a> in Flutter Gallery app</li><li>Fixed “Tree shake material icons <a href=\"https://github.com/flutter/flutter/issues/16311\">#16311</a>”, “Build hb-subset as part of engine builds and upload to cloud storage <a href=\"https://github.com/flutter/flutter/issues/43642\">#43642</a>”, “Consume font-subset in flutter_tools and treeshake icon fonts <a href=\"https://github.com/flutter/flutter/issues/43644\">#43644</a>”, “Wire up font subsetting for all platforms <a href=\"https://github.com/flutter/flutter/issues/49730\">#49730</a>”</li></ul><h4>[speed, memory] 9x speedup and 99+% memory reduction on dart2js tools</h4><p>contributors: <a href=\"https://github.com/rmacnak-google\">rmacnak-google</a>, <a href=\"https://github.com/a-siva\">a-siva</a></p><ul><li>Commit <a href=\"https://dart-review.googlesource.com/c/sdk/+/130621\">5b8c4e</a></li><li><a href=\"https://dart-review.googlesource.com/c/sdk/+/130621\">9x speedup (46 to 5s) and 99+% memory reduction (537 to 1.5MB)</a> on dart2js self compile, 1.5GB heap, 400MB heap snapshot</li></ul><h4>[speed] Up to 50% speedup for iOS average render speed by moving from OpenGL to Metal</h4><p>contributors: <a href=\"https://github.com/chinmaygarde\">chinmaygarde</a>, <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/jason-simmons\">jason-simmons</a>, <a href=\"https://github.com/cbracken\">cbracken</a>, <a href=\"https://github.com/amirh\">amirh</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/8936\">#8936</a>, <a href=\"https://github.com/flutter/engine/pull/9383\">#9383</a>, <a href=\"https://github.com/flutter/engine/pull/11070\">#11070</a>, <a href=\"https://github.com/flutter/engine/pull/13056\">#13056</a>, <a href=\"https://github.com/flutter/engine/pull/13367\">#13367</a>, <a href=\"https://github.com/flutter/engine/pull/17080\">#17080</a>, <a href=\"https://github.com/flutter/engine/pull/17162\">#17162</a>, <a href=\"https://github.com/flutter/engine/pull/17154\">#17154</a>, <a href=\"https://github.com/flutter/engine/pull/17431\">#17431</a></li><li>50% speedup (<a href=\"https://github.com/flutter/flutter/issues/53768\">6ms to 4ms</a>) for flutter_gallery_ios__transition_perf average_frame_rasterizer_time_millis</li><li>Fixed “Flutter should use Metal instead of OpenGL on iOS <a href=\"https://github.com/flutter/flutter/issues/18208\">#18208</a>”</li></ul><h4>[speed] 2–5x speedup for the worst frame raster time caused by shader compilations</h4><p>contributors: <a href=\"https://github.com/liyuqian\">liyuqian</a>, <a href=\"https://github.com/jonahwilliams\">jonahwilliams</a>, <a href=\"https://github.com/chinmaygarde\">chinmaygarde</a>, <a href=\"https://github.com/iskakaushik\">iskakaushik</a>, <a href=\"https://github.com/zanderso\">zanderso</a>, <a href=\"https://github.com/sfshaza2\">sfshaza2</a>, <a href=\"https://github.com/filiph\">filiph</a>, <a href=\"https://github.com/acoutts\">acoutts</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5WEbz38iKKh5EfCj55mGYw.png\" /></figure><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/17300\">#17300</a>, <a href=\"https://github.com/flutter/flutter/pull/53859\">#53859</a>, <a href=\"https://github.com/flutter/engine/pull/17601\">#17601</a>, <a href=\"https://github.com/flutter/engine/pull/17861\">#17861</a>, <a href=\"https://github.com/flutter/flutter/pull/58743\">#58743</a>, <a href=\"https://github.com/flutter/flutter/pull/56638\">#56638</a>, <a href=\"https://github.com/flutter/website/pull/4430\">#4430</a>, <a href=\"https://github.com/flutter/engine/pull/12412\">#12142</a></li><li>2.25x speedup (<a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1597812484&amp;end=1597873497&amp;queries=branch%3Dmaster%26sub_result%3Dworst_frame_rasterizer_time_millis%26test%3Dflutter_gallery_sksl_warmup__transition_perf%26test%3Dflutter_gallery__transition_perf\">90ms to 40ms</a>) for Android flutter_gallery__transition_perf worst_frame_rasterizer_time_millis</li><li>5x speedup (<a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1597686064&amp;end=1597961767&amp;numCommits=190&amp;queries=branch%3Dmaster%26sub_result%3Dworst_frame_rasterizer_time_millis%26test%3Dflutter_gallery_sksl_warmup_ios32__transition_perf%26test%3Dflutter_gallery_ios32__transition_perf&amp;showZero=false\">300ms to 60ms</a>) for iOS flutter_gallery_ios32__transition_perf worst_frame_rasterizer_time_millis</li><li>3.75x speedup (<a href=\"https://github.com/flutter/flutter/issues/61045#issuecomment-668609516\">229ms to 61ms</a>) for some real apps.</li><li>Fixed “SkSL-based shader warmup <a href=\"https://github.com/flutter/flutter/issues/53607\">#53607</a>”, “cubic bezier regression <a href=\"https://github.com/flutter/flutter/issues/35142\">#35142</a>”, and “<a href=\"https://github.com/flutter/flutter/issues/61045#issuecomment-673409491\">saved</a>” some customers.</li></ul><h4>[speed] 15.8x speedup for mouse hit testing</h4><p>contributors: <a href=\"https://github.com/dkwingsmt\">dkwingsmt</a>, <a href=\"https://github.com/yjbanov\">yjbanov</a>, <a href=\"https://github.com/goderbauer\">goderbauer</a>, <a href=\"https://github.com/gspencergoog\">gspencergoog</a></p><ul><li>PR <a href=\"https://github.com/flutter/flutter/pull/59803\">#59803</a> <a href=\"https://github.com/flutter/flutter/pull/59883\">#59883</a></li><li>15.8x (<a href=\"https://github.com/flutter/flutter/pull/59883#issue-437275465\">79ms to 5ms</a>) speedup for bench_mouse_region_grid_scroll frame duration (web).</li><li>Fixed “Poor performance when subscribing to MouseRegion events <a href=\"https://github.com/flutter/flutter/issues/41194\">#41194</a>”</li></ul><h4>[speed] 13.9x speedup for platform message response handling</h4><p>contributors: <a href=\"https://github.com/zljj0818\">zljj0818</a>, <a href=\"https://github.com/jason-simmons\">jason-simmons</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/18838\">#18838</a>, <a href=\"https://github.com/flutter/engine/pull/18945\">#18945</a>, both of which are inspired by <a href=\"https://github.com/flutter/engine/pull/18808\">#18808</a></li><li>Fixed “Image.asset will block UI thread when load large image <a href=\"https://github.com/flutter/flutter/issues/58572\">#58572</a>”</li><li>13.9x (<a href=\"https://flutter-engine-perf.skia.org/e/?begin=1593164913&amp;end=1594241999&amp;num_commits=290&amp;queries=test%3DBM_PlatformMessageResponseDartComplete\">9164us to 660us</a>) speedup in PlatformMessageResponseDartComplete</li></ul><h4>[speed] 20%-37% speedup for frame build time with opaque routes</h4><p>contributors: <a href=\"https://github.com/goderbauer\">goderbauer</a>, <a href=\"https://github.com/dnfield\">dnfield</a></p><ul><li>PR <a href=\"https://github.com/flutter/flutter/pull/48900\">#48900</a></li><li>20% (<a href=\"https://github.com/flutter/flutter/pull/48900#issuecomment-577297920\">7.38ms to 6.13ms</a>) speedup in flutter_gallery_ios32__transition_perf average_frame_build_time_millis</li><li>37% (<a href=\"https://github.com/flutter/flutter/pull/48900#issuecomment-577297920\">50.45ms to 36.63ms</a>) speedup in flutter_gallery_ios32__transition_perf 99th_percentile_frame_build_time_millis</li><li>Fixed “Optimize unneeded rebuild when pushing overlay/navigator opaque content <a href=\"https://github.com/flutter/flutter/issues/45797\">#45797</a>”</li></ul><h4>[speed] 4.8x speedup for blur using ImageFiltered instead of BackdropFilter</h4><p>contributors: <a href=\"https://github.com/flar\">flar</a>, <a href=\"https://github.com/hixie\">hixie</a>, <a href=\"https://github.com/yjbanov\">yjbanov</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/14491\">#14491</a>, <a href=\"https://github.com/flutter/flutter/pull/47489\">#47489</a>, <a href=\"https://github.com/flutter/flutter/pull/58277\">#58277</a>,</li><li>4.8x speedup (<a href=\"https://gist.github.com/flar/1cafb43533652e8e16ea224d93c8a1ec\">29ms/frame to 6ms/frame</a>) for a demo app on Moto G4.</li><li>Fixed “ImageFilter widget <a href=\"https://github.com/flutter/flutter/issues/13489\">#13489</a>”</li></ul><h4>[speed] Up to 14x speedup when scrolling large static content with Flutter web</h4><p>contributors: <a href=\"https://github.com/yjbanov\">yjbanov</a>, <a href=\"https://github.com/ferhatb\">ferhatb</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/17621\">#17621</a></li><li>14.01x speedup (<a href=\"https://docs.google.com/spreadsheets/d/10AXb-4ulJipM6ZtiieFEBXhmybB6-_gTV6HDQlgcQdA/edit#gid=2047450737&amp;range=D85\">463.74ms to 33.10ms</a>) for text_canvas_cached_layout.html.layout.average</li><li>Fixed “Jank when scrolling large static content with Flutter Web <a href=\"https://github.com/flutter/flutter/issues/42987\">#42987</a>” and “Drawing text outside canvas’ bounds is expensive on the Web <a href=\"https://github.com/flutter/flutter/issues/48516\">#48516</a>”</li></ul><h4>[speed] 6.8x speedup for Flutter engine shell initialization</h4><p>contributors: <a href=\"https://github.com/scutlight\">scutlight</a>, <a href=\"https://github.com/jason-simmons\">jason-simmons</a>, <a href=\"https://github.com/gaaclarke\">gaaclarke</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/18225\">#18225</a></li><li>6.8x speedup (<a href=\"https://flutter-engine-perf.skia.org/e/?begin=1590623523&amp;end=1590741783&amp;keys=X0fffad7016a0440022353623dc52ae28&amp;xbaroffset=17822\">18.3ms to 2.7ms</a>) for BM_ShellInitialization</li></ul><h4>[speed] 5x speedup by skipping calling builder when constraints are the same</h4><p>contributors: <a href=\"https://github.com/yjbanov\">yjbanov</a>, <a href=\"https://github.com/hixie\">hixie</a></p><ul><li>PR <a href=\"https://github.com/flutter/flutter/pull/55414\">#55414</a></li><li>5x speedup (~10FPS to ~50FPS) on scrolling the contacts list with the Flokk customer app.</li><li>Fixed “LayoutBuilder should cache constraints and not rebuild if unchanged <a href=\"https://github.com/flutter/flutter/issues/6469\">#6469</a>”</li></ul><h4>[speed] 2x speedup for shadows and animation on web</h4><p>contributors: <a href=\"https://github.com/ferhatb\">ferhatb</a>, <a href=\"https://github.com/mdebbar\">mdebbar</a>, <a href=\"https://github.com/yjbanov\">yjbanov</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/17864\">#17864</a>, <a href=\"https://github.com/flutter/engine/pull/17866\">#17866</a>, <a href=\"https://github.com/flutter/engine/pull/17867\">#17867</a></li><li>2x speedup (<a href=\"https://github.com/flutter/flutter/issues/54507#issue-598145549\">30fps</a> to <a href=\"https://github.com/flutter/flutter/issues/54507#issuecomment-628235938\">60fps</a>) for a <a href=\"https://dev.gskinner.com/flutter_perf/shadows/#/\">sample web app</a>.</li><li>Fixes “Web: Poor performance when using Shadows + Animation <a href=\"https://github.com/flutter/flutter/issues/54507\">#54507</a>”</li></ul><h4>[speed] 3X speedup in web Flutter Gallery start-up</h4><p>contributors: <a href=\"https://github.com/ferhatb\">ferhatb</a>, <a href=\"https://github.com/clocksmith\">clocksmith</a>, <a href=\"https://github.com/rami-a\">rami-a</a></p><ul><li>PR <a href=\"https://github.com/flutter/gallery/pull/109\">#109</a>, <a href=\"https://github.com/flutter/gallery/pull/183\">#183</a></li><li>3X speedup (<a href=\"https://github.com/flutter/gallery/pull/109#issue-406182087\">6077ms to 2039ms</a>) in web Flutter Gallery start-up</li></ul><h4>[speed] 2.8x speedup for average frame rasterizer time by enabling raster cache in Fuchsia</h4><p>contributors: <a href=\"https://github.com/dreveman\">dreveman</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a>, <a href=\"https://github.com/chinmaygarde\">chinmaygarde</a>, <a href=\"https://github.com/arbreng\">arbreng</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/17753\">#17753</a></li><li>2.8x speedup (~10ms to ~3.5ms) for frame_rasterizer_times_avg</li><li>Fixed “Poor performance on Fuchsia due to raster cache being disabled <a href=\"https://github.com/flutter/flutter/issues/54950\">#54950</a>”</li></ul><h4>[speed] 1.85x speedup in 90th percentile frame build time by excluding invisible animated images</h4><p>contributors: <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a>, <a href=\"https://github.com/tvolkert\">tvolkert</a>, <a href=\"https://github.com/digiter\">digiter</a></p><ul><li>PR <a href=\"https://github.com/flutter/flutter/pull/50851\">#50851</a>, <a href=\"https://github.com/flutter/flutter/pull/50842\">#50842</a></li><li>1.85x speedup (<a href=\"https://github.com/flutter/flutter/pull/50851#issuecomment-586625240\">3.148 ms to 1.699 ms</a>) for animated_placeholder_perf 90th percentile frame build time</li><li>Fixed “flutter gives low frame rates when long lists with list builder inside cards giving(avg 20–35fps) #<a href=\"https://github.com/flutter/flutter/issues/35592\">35592</a>”</li></ul><h4>[speed] 2x speedup for Google smart displays P10 FPS</h4><p>contributors: <a href=\"https://github.com/chinmaygarde\">chinmaygarde</a>, <a href=\"https://github.com/dnicoara\">dnicoara</a>, <a href=\"https://github.com/cbracken\">cbracken</a>, <a href=\"https://github.com/jason-simmons\">jason-simmons</a>, <a href=\"https://github.com/asakhart\">asakhart</a>, <a href=\"https://github.com/rdaum\">rdaum</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/15980\">#15980</a></li><li>2x speedup (30fps to 60fps) by giving embedders a way to tune thread priority.</li><li>Fixed issue <a href=\"https://github.com/flutter/flutter/issues/49551\">49551</a></li></ul><h4>[speed] 2.45x speedup for ImageFilterLayer by enhancing its child cache</h4><p>contributors: <a href=\"https://github.com/flar\">flar</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a></p><ul><li>PR <a href=\"https://github.com/flutter/engine/pull/17175\">#17175</a>, <a href=\"https://github.com/flutter/flutter/pull/54903\">#54903</a>, <a href=\"https://github.com/flutter/flutter/pull/58277\">#58277</a></li><li>2.45x speedup (<a href=\"https://github.com/flutter/engine/pull/17175#issuecomment-647778369\">18.41 ms to 7.53 ms</a>) for ImageFiltered Transform average_frame_rasterizer_time_millis</li><li>Also fixed “Transition performance regressed slightly due to OpacityLayer raster cache miss <a href=\"https://github.com/flutter/flutter/issues/52864\">#52864</a>”</li></ul><h4>[speed] 15% speedup for very large dart2js compilation</h4><p>contributors: <a href=\"https://github.com/rmacnak-google\">rmacnak-google</a>, <a href=\"https://github.com/a-siva\">a-siva</a></p><ul><li>Commit <a href=\"https://dart-review.googlesource.com/c/sdk/+/133660\">d67fbe</a></li><li>1.15x speedup (<a href=\"https://dart-review.googlesource.com/c/sdk/+/133660\">545 to 472 seconds</a>) very large dart2js compile, 9% reduction (<a href=\"https://dart-review.googlesource.com/c/sdk/+/133660\">13.057 to 11.861 GB</a>) in very large dart2js compile max heap capacity.</li><li>Fixed “Growth policy misinformed by concurrent sweep <a href=\"https://github.com/dart-lang/sdk/issues/21364\">#21364</a>”</li></ul><h4>[speed] 1.8x speedup in AOT compilation time of a large app</h4><p>contributors: <a href=\"https://github.com/alexmarkov\">alexmarkov</a>, <a href=\"https://github.com/mraleph\">mraleph</a>, <a href=\"https://github.com/sigurdm\">sigurdm</a>, <a href=\"https://github.com/cskau-g\">cskau-g</a></p><ul><li>Commit <a href=\"https://dart-review.googlesource.com/c/sdk/+/152100\">467c98</a></li><li>1.8x speedup (<a href=\"https://dart-review.googlesource.com/c/sdk/+/152100\">274s to 152s</a>) in AOT compilation time of a large app ( — from-dill)</li></ul><h4>[speed] 5x-13x speedup on Dart RegExp matching in AOT mode</h4><p>contributors: <a href=\"https://github.com/mraleph\">mraleph</a>, <a href=\"https://github.com/rmacnak-google\">rmacnak-google</a></p><ul><li>Commit <a href=\"https://dart-review.googlesource.com/c/sdk/+/151515\">2c922b</a></li><li>5x speedup improvement on benchmark from issue <a href=\"https://github.com/dart-lang/sdk/issues/42366\">42366</a></li><li>13x speedup (<a href=\"https://dart-review.googlesource.com/c/sdk/+/151515\">17863744.009 us to 1301678.797 us</a>) of RegExp(RunTime) benchmark on a Linux workstation</li><li>Fixed “RegExp is very slow in AOT mode <a href=\"https://github.com/dart-lang/sdk/issues/42366\">#42366</a>”</li></ul><h4>[speed] Up to 5x speedup in Dart UTF8 decoding</h4><p>contributors: <a href=\"https://github.com/askeksa-google\">askeksa-google</a>, <a href=\"https://github.com/mkustermann\">mkustermann</a>, <a href=\"https://github.com/rakudrama\">rakudrama</a></p><ul><li>Commit <a href=\"https://dart-review.googlesource.com/c/sdk/+/148762\">cf6f89</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/150925\">e35ca3</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/146785\">78df4a</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/142025\">fa2fd4</a></li><li><a href=\"https://dart-review.googlesource.com/c/sdk/+/146785\">5.02x speedup</a> in X64JIT TwoByteString benchmark</li><li>Fixed “Fast path Uint8List to _OneByteString conversion <a href=\"https://github.com/dart-lang/sdk/issues/41703\">#41703</a>”, “Write UTF-8 result directly to strings <a href=\"https://github.com/dart-lang/sdk/issues/41704\">#41704</a>”</li></ul><h4>[speed] 35–65% speedup in async/sync* functions</h4><p>contributors: <a href=\"https://github.com/cskau-g\">cskau-g</a>, <a href=\"https://github.com/mkustermann\">mkustermann</a>, <a href=\"https://github.com/mraleph\">mraleph</a></p><ul><li>Commit <a href=\"https://dart-review.googlesource.com/c/sdk/+/146780\">e29407</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/134282\">fdca1f</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/133586\">7ed169</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/136190\">ca94ad</a></li><li><a href=\"https://dart-review.googlesource.com/c/sdk/+/133586\">35–65% speedup</a> in Calls.IterableManualIterablePolymorphicManyYields across {dart,dart-aot}-{ia32,x64,armv7hf,armv8}</li><li>Fixed “improve performance of sync* code on VM <a href=\"https://github.com/dart-lang/sdk/issues/37753\">#37753</a>”, “Evaluate use of IndirectGoto when generating sync-yield function in VM <a href=\"https://github.com/dart-lang/sdk/issues/37754\">#37754</a>”</li></ul><h4>[speed] Up to 31.82% reduction in time with unboxed parameters and fields</h4><p>contributors: <a href=\"https://github.com/mkustermann\">mkustermann</a>, <a href=\"https://github.com/mkustermann\">mkustermann</a></p><ul><li>Commit <a href=\"https://dart-review.googlesource.com/c/sdk/+/131824\">9eb531</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/135313\">b95149</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/132606\">e076e7</a>, <a href=\"https://dart-review.googlesource.com/c/sdk/+/131824\">9eb531</a></li><li><a href=\"https://dart-review.googlesource.com/c/sdk/+/131824\">Up to 31.82% reduction</a> in matrix_utils_transform_rect_affine iteration time.</li><li>Fixed “Real unboxed fields in the Dart VM <a href=\"https://github.com/dart-lang/sdk/issues/40004\">#40004</a>”</li></ul><h4>[speed] 20–25% speedup on Dart Pointer&lt;Int8,Int64,etc&gt; loads/stores in AOT</h4><p>contributors: <a href=\"https://github.com/dcharkes\">dcharkes</a>, <a href=\"https://github.com/mkustermann\">mkustermann</a></p><ul><li>Commit <a href=\"https://dart-review.googlesource.com/c/sdk/+/137788\">408123</a></li><li>Speeds up Pointer&lt;Int8,Int64,etc&gt; loads/stores by <a href=\"https://dart-review.googlesource.com/c/sdk/+/137788\">20–25%</a> in AOT on x64.</li><li>Helped “stores and loads should support unboxed indices (in AOT) <a href=\"https://github.com/dart-lang/sdk/issues/39432\">#39432</a>”</li></ul><h3>Other improvements</h3><h4>[app size, energy, memory, speed] Add A/B test mode to local devicelab runner</h4><p>contributors: <a href=\"https://github.com/yjbanov\">yjbanov</a>, <a href=\"https://github.com/flar\">flar</a>, <a href=\"https://github.com/ferhatb\">ferhatb</a>, <a href=\"https://github.com/christopherfujino\">christopherfujino</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a></p><ul><li>PR <a href=\"https://github.com/flutter/flutter/pull/54494\">#54494</a>, <a href=\"https://github.com/flutter/flutter/pull/56416\">#56416</a>, <a href=\"https://github.com/flutter/flutter/pull/54676\">#54676</a></li></ul><h4>[app size] Fixed “iOS App Size in FAQ incorrect”</h4><p>contributors: <a href=\"https://github.com/jmagman\">jmagman</a>, <a href=\"https://github.com/xster\">xster</a>, <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/sfshaza2\">sfshaza2</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/38016\">#38016</a>, PR <a href=\"https://github.com/flutter/website/pull/4080\">#4080</a></li></ul><h4>[app size] Enable the usage of — delete-tostring-package-uri in the flutter too</h4><p>contributors: <a href=\"https://github.com/jonahwilliams\">jonahwilliams</a>, <a href=\"https://github.com/dnfield\">dnfield</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/53174\">#53174</a>, PR <a href=\"https://github.com/flutter/flutter/pull/53273\">#53273</a></li></ul><h4>[energy, memory] Timeline summary now includes CPU/GPU/memory for iOS</h4><p>contributors: <a href=\"https://github.com/iskakaushik\">iskakaushik</a>, <a href=\"https://github.com/gaaclarke\">gaaclarke</a>, <a href=\"https://github.com/albertwang0116\">albertwang0116</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a>, <a href=\"https://github.com/chinmaygarde\">chinmaygarde</a>, <a href=\"https://github.com/gw280\">gw280</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/58803\">#58803</a>, PR <a href=\"https://github.com/flutter/engine/pull/18087\">#18087</a>, <a href=\"https://github.com/flutter/engine/pull/18516\">#18516</a>, <a href=\"https://github.com/flutter/engine/pull/18752\">#18752</a></li><li><a href=\"http://flutter.dev/go/engine-cpu-profiling\">http://flutter.dev/go/engine-cpu-profiling</a></li></ul><h4>[memory] ImageCache flushes itself when told about memory pressure</h4><p>contributors: <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/goderbauer\">goderbauer</a>, <a href=\"https://github.com/chunhtai\">chunhtai</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/16375\">#16375</a>, PR <a href=\"https://github.com/flutter/flutter/pull/53959\">#53959</a></li></ul><h4>[memory] Fixed “Skia PathMask cache leaks memory”</h4><p>contributors: <a href=\"https://github.com/bsalomon\">bsalomon</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/50972\">#50972</a>, commit <a href=\"https://skia-review.googlesource.com/c/skia/+/272654/\">4282d2</a></li></ul><h4>[memory] Fixed firebase_ml_vision memory leak on iOS</h4><p>contributors: <a href=\"https://github.com/rishabnayak\">rishabnayak</a>, <a href=\"https://github.com/bparrishmines\">bparrishmines</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/32967\">#32967</a>, <a href=\"https://github.com/flutter/flutter/issues/32652\">#32652</a>, PR <a href=\"https://github.com/flutter/plugins/pull/1615\">#1615</a></li></ul><h4>[memory] Added DevTools based max memory test</h4><p>contributors: <a href=\"https://github.com/liyuqian\">liyuqian</a>, <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/digiter\">digiter</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/44013\">#44013</a>, PR <a href=\"https://github.com/flutter/flutter/pull/55486\">#55486</a></li></ul><h4>[memory] Defer image decoding when scrolling fast</h4><p>contributors: <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/hixie\">hixie</a>, <a href=\"https://github.com/goderbauer\">goderbauer</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/44510\">#44510</a>, <a href=\"https://github.com/flutter/flutter/issues/48775\">#48775</a>, PR <a href=\"https://github.com/flutter/flutter/pull/49389\">#49389</a></li></ul><h4>[memory] If an image is available in the tree currently, it should be resolvable by key without reloading even if it didn’t fit into the image cache</h4><p>contributors: <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/hixie\">hixie</a>, <a href=\"https://github.com/goderbauer\">goderbauer</a>, <a href=\"https://github.com/jonahwilliams\">jonahwilliams</a>, <a href=\"https://github.com/ignatz\">ignatz</a>, <a href=\"https://github.com/gaaclarke\">gaaclarke</a></p><ul><li>Issue #<a href=\"https://github.com/flutter/flutter/issues/48731\">48731</a>, <a href=\"https://github.com/flutter/flutter/issues/49456\">#49456</a>, <a href=\"https://github.com/flutter/flutter/issues/45406\">#45406</a>, PR <a href=\"https://github.com/flutter/flutter/pull/50242\">#50242</a>, <a href=\"https://github.com/flutter/flutter/pull/50297\">#50297</a>, <a href=\"https://github.com/flutter/flutter/pull/50316\">#50316</a>, <a href=\"https://github.com/flutter/flutter/pull/50318\">#50318</a></li><li><a href=\"https://flutter.dev/go/widget-tree-image-cache\">https://flutter.dev/go/widget-tree-image-cache</a></li></ul><h4>[speed] Rewrite DevTools frame chart with parallel UI and raster thread times</h4><p>contributors: <a href=\"https://github.com/kenzieschmoll\">kenzieschmoll</a>, <a href=\"https://github.com/terrylucas\">terrylucas</a></p><ul><li>PR <a href=\"https://github.com/flutter/devtools/pull/1999\">#1999</a></li></ul><h4>[speed] Added new Gallery mobile benchmarks</h4><p>contributors: <a href=\"https://github.com/guidezpl\">guidezpl</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a>, <a href=\"https://github.com/clocksmith\">clocksmith</a>, <a href=\"https://github.com/rami-a\">rami-a</a>, <a href=\"https://github.com/flar\">flar</a></p><ul><li>PR <a href=\"https://github.com/flutter/flutter/pull/55181\">#55181</a>, <a href=\"https://github.com/flutter/gallery/pull/20\">#20</a>, <a href=\"https://github.com/flutter/gallery/pull/100\">#100</a>, <a href=\"https://github.com/flutter/gallery/pull/115\">#115</a></li></ul><h4>[speed] Add new Gallery web benchmarks</h4><p>contributors: <a href=\"https://github.com/pennzht\">pennzht</a>, <a href=\"https://github.com/yjbanov\">yjbanov</a>, <a href=\"https://github.com/guidezpl\">guidezpl</a>, <a href=\"https://github.com/willlarche\">willlarche</a>, <a href=\"https://github.com/clocksmith\">clocksmith</a>, <a href=\"https://github.com/josealba\">josealba</a></p><ul><li>PR <a href=\"https://github.com/flutter/flutter/pull/57576\">#57576</a>, <a href=\"https://github.com/flutter/gallery/pull/163\">#163</a></li></ul><h4>[speed] Community added a new package to unlock 90 fps for some devices</h4><p>contributors: <a href=\"https://github.com/ajinasokan\">ajinasokan</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/35162\">#35162</a></li><li><a href=\"https://github.com/ajinasokan/flutter_displaymode\">https://github.com/ajinasokan/flutter_displaymode</a></li></ul><h4>[speed] Renamed GPU thread to raster thread</h4><p>contributors: <a href=\"https://github.com/filiph\">filiph</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a>, <a href=\"https://github.com/kenzieschmoll\">kenzieschmoll</a>, <a href=\"https://github.com/chinmaygarde\">chinmaygarde</a>, <a href=\"https://github.com/cbracken\">cbracken</a>, <a href=\"https://github.com/goderbauer\">goderbauer</a>, <a href=\"https://github.com/zanderso\">zanderso</a>, <a href=\"https://github.com/devoncarew\">devoncarew</a>, <a href=\"https://github.com/sfshaza2\">sfshaza2</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/29443\">#29443</a>, PR <a href=\"https://github.com/flutter/engine/pull/17148\">#17148</a>, <a href=\"https://github.com/flutter/engine/pull/17329\">#17329</a>, <a href=\"https://github.com/flutter/engine/pull/17408\">#17408</a>, <a href=\"https://github.com/flutter/flutter/pull/53422\">#53422</a>, <a href=\"https://github.com/flutter/devtools/pull/1758\">#1758</a>, <a href=\"https://github.com/flutter/website/pull/3836\">#3836</a></li></ul><h4>[speed] Added benchmark for platform views</h4><p>contributors: <a href=\"https://github.com/blasten\">blasten</a>, <a href=\"https://github.com/cyanglaz\">cyanglaz</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/52684\">52684</a>, PR <a href=\"https://github.com/flutter/flutter/pull/52717\">#52717</a></li></ul><h4>[speed] Avoid unnecessary thread clock clock calls while tracing, resulting in less (kernel) trace buffer space usage, and slightly lower tracing overhead.</h4><p>contributors: <a href=\"https://github.com/nathanrogersgoogle\">nathanrogersgoogle</a>, <a href=\"https://github.com/a-siva\">a-siva</a>, <a href=\"https://github.com/fmeawad\">fmeawad</a>, <a href=\"https://github.com/johngro\">johngro</a></p><ul><li><a href=\"https://dart-review.googlesource.com/c/sdk/+/149395\">https://dart-review.googlesource.com/c/sdk/+/149395</a></li></ul><h4>[speed] Fix RefreshIndicator performance issue</h4><p>contributors: <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/goderbauer\">goderbauer</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/47664\">#47664</a>, PR <a href=\"https://github.com/flutter/flutter/pull/53206\">#53206</a></li></ul><h4>[speed] Enable lazy async stack traces via tool feature</h4><p>contributors: <a href=\"https://github.com/jonahwilliams\">jonahwilliams</a>, <a href=\"https://github.com/zanderso\">zanderso</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/48725\">#48725</a>, PR <a href=\"https://github.com/flutter/flutter/pull/49377\">#49377</a></li></ul><h4>[speed] [flutter_tools] initialize frontend server with build</h4><p>contributors: <a href=\"https://github.com/jonahwilliams\">jonahwilliams</a>, <a href=\"https://github.com/zanderso\">zanderso</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/40388\">#40388</a>, <a href=\"https://github.com/flutter/flutter/issues/49865\">#49865</a>, <a href=\"https://github.com/flutter/flutter/issues/43464\">#43464</a>, PR <a href=\"https://github.com/flutter/flutter/pull/51477\">#51477</a></li></ul><h4>[speed] Colored box and container optimization</h4><p>contributors: <a href=\"https://github.com/dnfield\">dnfield</a>, <a href=\"https://github.com/hansmuller\">hansmuller</a>, <a href=\"https://github.com/piinks\">piinks</a>, <a href=\"https://github.com/redbrogdon\">redbrogdon</a>, <a href=\"https://github.com/goderbauer\">goderbauer</a>, <a href=\"https://github.com/liyuqian\">liyuqian</a></p><ul><li>Issue <a href=\"https://github.com/flutter/flutter/issues/9672\">#9672</a>, PR <a href=\"https://github.com/flutter/flutter/pull/50979\">#50979</a></li></ul><h3>Conclusion</h3><p>Due to the lowered productivity as a result of COVID-19, we expected to have fewer performance improvements. Surprisingly, we found more quantified improvements in Q1-Q2 2020 than Q3-Q4 2019 (25 vs. 20) thanks to our growing community! Overall, we see 49 improvements from 78 contributors in Q1-Q2 2020.</p><p>Despite our best effort, some performance contributions in Q1-Q2 2020 may be missed in this update. Please don’t hesitate to let us know of any missing contributions, and we’ll put them in the next update.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5c597168b6bb\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-performance-updates-in-the-first-half-of-2020-5c597168b6bb\">Flutter Performance Updates in the first half of 2020</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-02-11T00:46:22.000Z":{"title":"Are you happy with Flutter? — Q4 2020 user survey results","link":"https://medium.com/flutter/are-you-happy-with-flutter-q4-2020-user-survey-results-41cdd90aaa48?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/41cdd90aaa48","category":["flutter","surveys"],"dc:creator":"JaYoung Lee","pubDate":"Thu, 11 Feb 2021 00:46:22 GMT","atom:updated":"2021-02-11T00:46:22.423Z","content:encoded":"<h3>Are you happy with Flutter? — Q4 2020 user survey results</h3><p>The Flutter team at Google has been running a quarterly survey program to collect your feedback <a href=\"https://medium.com/flutter/search?q=survey\">since 2018</a>. The survey for the last quarter launched on November 23, 2020 and remained open for 8 days. The team collected 8,285 responses, and we want to share the results with you! Even though this survey was half the length of our usual surveys, we learned a lot from your answers, as always. We truly appreciate those of you who took the time to provide valuable feedback.</p><h3>User satisfaction</h3><p>Overall, 92% of respondents were <em>somewhat satisfied</em> or <em>very satisfied</em> with Flutter. We’re glad that we continue to maintain a high level of satisfaction.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*vY8rm_jNlGOmZ8eJ\" /><figcaption><em>92% of the users were satisfied with Flutter, and 51% were very satisfied.</em></figcaption></figure><p>As you can see from the graph, we learned the following as well:</p><ul><li>91% said that Flutter works well for their projects.</li><li>90% are committed and want to use Flutter for their next project.</li><li>58% said that Flutter is critical to their company’s success.</li></ul><p>These results show that Flutter continues to flourish and is a vital part of the developer toolkit.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hs9oiR_zpBhkzT9u\" /><figcaption><em>90% of users would prefer to use Flutter for their next project.</em></figcaption></figure><p>But, we noticed that the overall satisfaction decreased a bit since last quarter’s survey, from 94% to 92%. To understand why you aren’t completely satisfied with various aspects of Flutter, the team closely reviewed the open-ended comments. Thanks to the feedback, the team is aware of major issues and will invest in high priority items. For instance, we are planning to <a href=\"https://github.com/dart-lang/sdk/projects/24\">improve code completion</a> because we found that it was the most common source of frustration among IDE-related issues.</p><h3>Pain points</h3><p>This time, we took a different approach to understanding Flutter’s pain points. We wanted to learn what blocks you from using Flutter more than you do. When we asked, “if not for the following reasons, I would use Flutter more”, 26% of respondents selected <em>lacking critical libraries</em> as the reason. In response, we’re partnering with <a href=\"https://baseflow.com/\">Baseflow</a>, <a href=\"https://invertase.io/\">Invertase</a>, and <a href=\"https://codemagic.io/\">Codemagic</a> to improve the quality of our first-party packages and plugins. While the team is working hard to improve critical libraries identified from previous research, we are also monitoring specific needs from our issue tracker with the tag <a href=\"https://github.com/flutter/flutter/issues?q=is%3Aopen+label%3A%22would+be+a+good+package%22+sort%3Areactions-%2B1-desc\">would be a good package</a> so that anyone can find what’s missing from the ecosystem and contribute to it.</p><p>As the number of Flutter-compatible packages grows beyond 15,000 and because there’s no way to scale the Flutter team to take on dozens or even hundreds of packages that might be considered critical, we provide a variety of mechanisms for the community to <a href=\"https://pub.dev/help/scoring\">grade packages</a>. We provide these mechanisms so that searches produce high quality results, including likes, static analysis, and the <a href=\"https://flutter.dev/docs/development/packages-and-plugins/favorites\">Flutter Favorite</a> designation, which is awarded by a group of Flutter community volunteers. Doing this not only encourages you to contribute more packages to cover the critical bases, but the quality of the packages will improve over time because package authors are rewarded for their work with better scores and recognition. We will continue to invest in this area so that the ecosystem becomes self-sustaining and continues to naturally increase in quality.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4kA8p14vcnIS5cOG\" /><figcaption><em>26% of users need more libraries. This result excludes 19% of users who said I am using Flutter enough.</em></figcaption></figure><p>To make it easier for those of you working on projects other than Flutter (19%), we will continue to invest in <a href=\"https://flutter.dev/docs/development/add-to-app\">add-to-app</a>, which helps you integrate Flutter modules into existing Android or iOS apps. You can follow the progress of the related features on <a href=\"https://github.com/flutter/flutter/issues/72009\">GitHub issue 72009</a>.</p><p><em>Lacking features in the core framework</em> was selected by 18% of respondents. After we took a closer look at the open-ended comments, the feedback was centered on the boundary between the functionality included in the Flutter framework and the functionality provided by packages. While it’s understandable that some of you want the framework to include more features beyond user-interface APIs, our focus is on what we do best — provide an excellent UI framework. But, we want to provide you with the functionality you need, so we partner with community contributors to supply the domain-specific and platform-specific capabilities through packages and plugins. As previously mentioned, we invested in tools and programs to recognize high quality packages and help you discover them in the ecosystem. We welcome your feedback and ideas to further strengthen our package ecosystem.</p><h3>Online communities</h3><p>In this survey, the team wanted to know where you exchange information or ideas with other Flutter developers. While 21% of respondents said that they aren’t active on any online communities, we found that Stack Overflow was the most popular community for Flutter devs to connect with each other. Stack Overflow was chosen by 38% of respondents as the online community where they are most active.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jjBvOh6G9e9TwLQ1\" /><figcaption><em>Stack Overflow was the main online community for 38% of respondents. This graph omits the 21% who aren’t active on any online communities.</em></figcaption></figure><p>Depending on where the respondent is most active, the rating on the community’s usefulness differed. For example, we asked, “To what degree do you agree or disagree with the following statements about the online community you selected in the previous question?” For the response, <em>I was able to get answers when I asked other Flutter users in the community questions</em>, 75% of respondents who are active on Stack Overflow agreed that they can get answers when they asked questions there. Also, 61% of respondents who are mostly active on instant messaging services said that they also got answers.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8JtwdBejYL_ez5rJ\" /><figcaption><em>Respondents were asked to rate how much they agreed with the statement, “I was able to get answers when I asked …” questions, and the results differed by the community they are active in.</em></figcaption></figure><p>This was our first time assessing user distribution online, and your perception about various online communities. Growing a helpful and thriving community is critical to Flutter’s success. We share the results with you in the hope that both the help givers and the help seekers can better use these online communication channels. The Flutter team will monitor this data to guide our support and educational effort, and make sure that you are able to find help and stay connected.</p><h3>Flutter events</h3><p>Every year, a number of in-person and online events for the Flutter community are organized by local meetup groups and Flutter contributors, and about 90% of respondents who attend learn something new about Flutter and find that information to be helpful. While these events are effective learning opportunities, through our research, we now know that the majority of respondents (61%) weren’t aware of these events in 2020. Even though we didn’t host a large event in 2020 like we did in 2019 with <a href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU0o0wKRJTjyN0pSUA6TI8lg\">Flutter Interact, where we would have publicized these events</a>, this percentage was still higher than what we expected. So, going forward, as we plan our <a href=\"http://events.flutter.dev\">Flutter Engage event</a> on March 3, 2021, we are partnering with regional Google teams to help spread the word. We’re also working closely with local Flutter groups to ensure that our event content reaches a larger percentage of the Flutter community. Everyone is invited to this free online event.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*AkXrQy4YPsBUoYLA\" /><figcaption><em>61% of users who didn’t attend any events in 2020 (both online and offline) were not aware of the events.</em></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Z0mRRjjnEDQWqAsl\" /><figcaption><em>85% or more users learned something new from various Flutter events.</em></figcaption></figure><h3>What’s next?</h3><p>The next survey will be announced around late February on <a href=\"https://flutter.dev/\">flutter.dev</a>, <a href=\"https://twitter.com/FlutterDev\">@FlutteDev</a> (And in the <a href=\"https://flutter.dev/docs/get-started/editor?tab=androidstudio\">Flutter IDE plugins</a>. You can also participate in other research by <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe0i4De809KXVCdljGKrjMj3lxhuzbuFKCtY5PEQPCYtGxFMg/viewform\">signing up</a> for upcoming UX studies.</p><p>Please continue contributing your thoughts as the team seeks answers to important questions.</p><p>Again, thank you to everyone who participated in this survey and provided valuable feedback. We appreciate your time and effort!</p><p>See you at <a href=\"https://events.flutter.dev/\">Flutter Engage</a>!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=41cdd90aaa48\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/are-you-happy-with-flutter-q4-2020-user-survey-results-41cdd90aaa48\">Are you happy with Flutter? — Q4 2020 user survey results</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-01-26T16:14:32.000Z":{"title":"Join us for #30DaysOfFlutter","link":"https://medium.com/flutter/join-us-for-30daysofflutter-9993e3ec847b?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/9993e3ec847b","category":["flutter","mobile-programming","dart","app-development","announcements"],"dc:creator":"Nikita Gandhi","pubDate":"Tue, 26 Jan 2021 16:14:32 GMT","atom:updated":"2021-02-09T13:47:18.319Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v7ytVK_8WbqA7Gc-Uol-wQ.jpeg\" /><figcaption>Banner for 30 Days of Flutter</figcaption></figure><p>Happy New Year folks. It’s the perfect time of year to learn something new! Do you have an app idea you’ve been dreaming of over the holidays? If so, we have just the opportunity for you! Starting February 1st, leading up to our big <a href=\"https://events.flutter.dev/?utm_source=30DaysOfFlutter&amp;utm_medium=email&amp;utm_campaign=30Days_Engage\">event on March 3rd</a>, join us for <strong>#30DaysOfFlutter</strong> to kickstart your learning journey and meet Flutter experts in the community. Whether you are building your first Flutter app or looking to improve your Flutter skills, we have curated content, code labs, and demos!</p><p>Flutter is Google’s open source UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase. It’s one of the fastest growing, most in-demand cross platform frameworks to learn and is used by freelance developers and large organizations around the world. Flutter uses the Dart language, so it will feel natural to many of you familiar with object-oriented languages.</p><h4><strong>Jump in, the water’s fine!</strong></h4><p>Along with the curated content, we will also have four live AskMeAnything sessions (#AMAs), where you can meet members of Google’s Flutter team and community. You can also join us on the <a href=\"https://discord.com/invite/N7Yshp4\">FlutterDev Discord channel</a>, where you can meet the other members of the community, ask and answer questions, and maybe make some new Flutter friends too!</p><p>Does this sound exciting? Visit the <a href=\"http://goo.gle/30daysofflutter\"><strong>30 Days of Flutter website</strong></a> to get more information and to register to join. Last date to register is 31st January 2021, 11:30pm PST.</p><h4><strong>#30DaysOfFlutter Schedule</strong></h4><p>Your learning journey with Flutter for the month will look like this::</p><p><strong>Week 1</strong></p><p>Receive curated content to your inbox. Meet other Flutter Devs on Discord. Attend Kick Off Webinar on February 1st.</p><p><strong>Week 2</strong></p><p>Receive more content. Start building your first Flutter app. Join the webinar and ask your questions.</p><p><strong>Week 3</strong></p><p>Work on your app and attend the 3rd webinar to ask your questions.</p><p><strong>Week 4</strong></p><p>Complete your project and learn how to share it with the Flutter community.</p><p>Are you ready to learn one of the most in demand developer skills in the world?</p><p><a href=\"http://goo.gle/30daysofflutter\"><em>Sign up</em></a> to be a part of the journey and be sure to follow <a href=\"https://twitter.com/FlutterDev\">@FlutterDev</a> on Twitter, to get updates about <strong>#30DaysOfFlutter</strong>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9993e3ec847b\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/join-us-for-30daysofflutter-9993e3ec847b\">Join us for #30DaysOfFlutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-01-14T22:10:58.000Z":{"title":"Providing operating system compatibility on a large scale","link":"https://medium.com/flutter/providing-operating-system-compatibility-on-a-large-scale-374cc2fb0dad?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/374cc2fb0dad","category":["flutter","open-source","software-testing","continuous-integration"],"dc:creator":"Ray Rischpater, KF6GPE","pubDate":"Thu, 14 Jan 2021 22:10:58 GMT","atom:updated":"2021-01-15T19:40:10.678Z","content:encoded":"<p>Applications written using Flutter can run on Android, iOS, the web, and desktop operating systems. Because of our investment in supporting multiple platforms, a Flutter application can run on any device with the OS version (or a later version) that the application was written for without needing changes, which broadens Flutter’s cross-platform appeal.</p><p>In this article, Flutter’s core development team (we) want to share why we invest in supporting multiple platforms, how we can keep supporting multiple platforms, and how we make decisions when it comes time to add support for new platforms or drop support for old platforms.</p><h3>Looking ahead: releases of Android and iOS</h3><p>Flutter is committed to providing full support for the latest features of Android and iOS. We’re always monitoring the regular guidance from Apple and Google regarding changes in their platform APIs, tool use, and licensing terms. Support for new OS releases is part of our regular product planning, and we attempt to align our releases in such a way that stable releases are always compatible with the latest guidance from both Google and Apple.</p><p>Our commitment to you to support multiple platforms and software releases of Android and iOS, such as Android 11 or iOS 14, along with their minor releases. For major revisions to the target platforms, development of necessary features and changes begin as soon as we learn what’s needed. This typically happens in late spring, after Google announces their plans for an upcoming Android release and when Apple makes their latest announcements at their Worldwide Development Conference (WWDC). After the announcements, we assess the necessary changes to the Flutter codebase, like changes to the engine because of potentially deprecated APIs, how tooling changes affect the flutter tool and the developer experience, and changes in the design language for both platforms. We also assess the scope of work with the expectation that both platforms will be available to customers in the early fall.</p><p>We do this work against the beta releases of Android and iOS, and we make these changes available regularly through our master, dev, and beta channels. The master channel releases are continual. We plan for two to three releases of the dev channel per week (a version of the master channel tested against internal Google apps and test suites). The beta channel usually releases the first week of every month. We track our progress using GitHub issues. For a list of issues, you can search by `platform-ios` or `platform-android`.</p><p>Aligning our stable release schedule with iOS is particularly challenging because often there is very little time between a press announcement and when we get guidance about changes to the OS. We mitigate this challenge by planning one of our releases in the fall, and being prepared to hotfix our current stable release with any blocking bugs on iOS or even on Android should they occur. (This happened with Flutter 1.20 and iOS 14, and we released a <a href=\"https://medium.com/flutter/supporting-ios-14-and-xcode-12-with-flutter-15fe0062e98b\">hotfix the same day</a> that iOS 14 shipped.)</p><p>Regardless of the work it takes to support a new platform release, our goal is to support new versions of our target platforms without deprecating old ones.</p><h3>Backward compatibility and Flutter’s value proposition</h3><p>Flutter is Google’s portable UI toolkit for building beautiful, natively-compiled applications for mobile, web, and desktop from a single codebase. To do this, we want to support the broadest collection of devices we can, not just specific types of platforms. We also want to support the broadest number of platform versions.</p><p>Consider Android: By <a href=\"https://gs.statcounter.com/os-version-market-share/android/mobile-tablet/worldwide\">statcounter</a>, as of June 2020, Android versions in the wild consist of the following:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*cn2P4AQs91rSOztB\" /></figure><p>Looking at the numbers, Android KitKat (Android 4.x) has less than a 2% market share. The predominant share of Android devices (54%) are running Android Pie (Android 9.0) or Android 10. Supporting each version of Android requires an investment. Do you know why we invest in a platform, like KitKat, that has a low market share?</p><p>The answer is simple: raw numbers. With over a billion Android devices in use not running Android Pi or later, we want to ensure that Flutter is as broadly available as possible. We also want to support a diverse, global user base. And, because older versions of Android and iOS are often used by people in developing countries, we want to avoid deprecating support for older versions as long as we can.</p><p>Through work in Flutter’s core engine, framework, and plugins, Flutter provides abstractions for the vagaries of both OS platform and OS versions. As an example, a Material application can run on an older version of iOS or Android without being changed. In fact, developers have released commercial Material applications running on hardware that shipped at the same time that the first version of it was made available, something you can’t do on those devices with the widget set that shipped with those devices. A similar story exists for plugins. Plugins abstract away both platform and version differences, leaving you to focus on what’s important: your application.</p><h3>How Flutter supports so many targets</h3><p>Flutter brings two strengths to multiple-target support. First, Flutter relies very little on the underlying OS. Flutter’s engine works directly with the graphics APIs, and plugins provide much of the device-specific implementation for additional features.</p><p>Our continuous integration (CI) system builds Flutter and its tooling for macOS, Linux, and Windows, deploying to a suite of Android and iOS devices (both physical and emulated). Some of this CI is done using a lab run on Google’s premises; other CI tests are run on the <a href=\"https://firebase.google.com/docs/test-lab\">Firebase Test Lab</a>, a cloud-hosted test solution operated by Google for both Google and third-party developers.</p><p>Here’s a picture of one of the racks in our test lab:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*XGMajBOXRRgyu3Pa\" /></figure><p>We run relatively low-end mobile devices in our device lab, because we do our <a href=\"https://flutter-dashboard.appspot.com/benchmarks.html\">performance testing</a> there. When testing, we want performance metrics from devices that are representative of what most users have. Doing this gives us worst-case, real-world performance. This philosophy carries over to the devices that the core engineering team uses. Most of the core engineering team isn’t doing Flutter debugging on the latest Google Pixel or Apple iPhone.</p><p>Because we want to test many types of mobile devices, we keep a device library where members of the core engineering team can check out specific devices for testing and debugging. (With COVID-19, we’re making good use of the US Postal Service!)</p><p>Because the lab can only test a handful of device types and versions, how can we be sure that we’re providing the support we claim? Read on to find out.</p><h3>Making general assertions about platform version support</h3><p>First and foremost, we test on a variety of platforms with each code commit.</p><p>In our lab today, we’re testing on the following Android platforms:</p><ul><li>Android API 24 (Android N)</li><li>Android API 28 (Android P)</li><li>Android API 29 (Android 10)</li></ul><p>This covers 57% of the market of deployed Android versions; more on how we cover the remaining devices through the use of Firebase Test Lab in a moment.</p><p>Our lab also tests iOS on every commit, on devices running:</p><ul><li>iOS 9.3.6</li><li>iOS 12.4</li><li>iOS 12.4.1</li><li>iOS 13.1.3</li><li>iOS 13.2</li></ul><p>Finally, for desktop and web, we test every commit on:</p><ul><li>Chrome 84</li><li>Firefox 72.0</li><li>Safari on Catalina</li><li>Edge 1.2.0.0</li><li>Windows 10</li><li>macOS El Capitan</li><li>Debian 10</li></ul><p>Clearly there’s more testing that needs to happen on the Android front. We rely on <a href=\"https://firebase.google.com/docs/test-lab\">Firebase Test Lab</a> for this, testing the following additional Android and iOS configurations:</p><ul><li>Android API 19 (Android K)</li><li>Android API 21 and 22 (Android L)</li><li>Android API 23 (Android M)</li><li>Android API 26 and 27 (Android O)</li><li>Android API 30 (Android 11)</li><li>iOS 11</li><li>iOS 13.0</li><li>iOS 13.1</li><li>iOS 13.3–13.7</li><li>iOS 14</li></ul><p><strong>Together this brings our testing of Android and iOS platforms to well over 95% of the currently released versions.</strong></p><p>For other operating system versions, we provide backward compatibility with <strong>your</strong> support, the Flutter development community. This is especially true of specific device/operating system combinations. Many of you use devices that we don’t have access to: either because you have an operating system version we don’t have, or because the device isn’t available in the US. In some cases, we can mitigate this. For example, we can flash an older Android build on some Google Pixel hardware, buy an older, refurbished iOS device, or run an Android version in an emulator. In many cases, a report from one of you triggered an investigation of a specific platform issue.</p><p>This is especially true with a number of original equipment manufacturers (OEMs) of Android devices. OEMs frequently customize aspects of Android like keyboard support. In the past, we’ve been able to fix a number of text input issues that only occur in certain markets on certain devices thanks to your help.</p><p>We appreciate your help because we can’t possibly find every issue on our own, but we work hard at reducing the risk of injecting issues. We’re careful when making code changes and pay attention to what’s supported on the earliest version of the operating system. We provide options when we need to support disjointed configurations. That’s why, for example, you can still build iOS applications using either OpenGL or Metal, which Flutter automatically chooses at runtime.</p><p>For these reasons —even though we go to great lengths to support testing on OS versions —some of the devices we support are supported on a “best effort” basis. We try to write code that supports the platforms we claim support for, we rely on our team’s commitment to device diversity in ad hoc use, and then look to the community for feedback on how we’re doing in practice.</p><p>We need your help with testing devices in the best effort category. There are tens of thousands (or more!) of SKUs in this category. We test as many as we can and, at times, we source older devices from auction sites to enable us to test and fix device issues that were reported when there is no other way to duplicate the issue. If you find an issue with a particular device, please file an issue on GitHub.</p><p>Finally, some platforms, such as iOS 7, are deprecated. Perhaps they work, but we do not test on deprecated platforms and make no guarantees. We do, however, consider patches for deprecated platforms on a case-by-case basis if we can support the platforms adequately when testing after the patches land.</p><p>Flutter keeps a <a href=\"https://flutter.dev/docs/development/tools/sdk/release-notes/supported-platforms\">web page</a> of the devices which we test on and those we look to the community for help with.</p><h3>Deciding to deprecate support</h3><p>Although we’re committed to supporting every platform version as long as we can, supporting older platforms (or platform configurations, such as OpenGL on Apple A7) comes with a cost, and follows guidance from our upstream partners, including Skia. Flutter’s core engineering team is relatively small, and we’re continually making trade-offs to ensure that what we do has the most beneficial effect for our users. At some point, the cost in terms of engineering, bandwidth for testing in our CI lab and through ad hoc testing, and technical limitations (such as the deprecation of tooling on the part of an OS vendor) can make it difficult or impossible to continue supporting a target platform.</p><p>Before we decide to deprecate support, some of the questions we consider are:</p><ul><li>How many end users would this eliminate for our developers?</li><li>What effect does this have on Flutter developers? Are there major partners whose business operations would be significantly affected?</li><li>What engineering savings are we likely to gain? For example, does the number of applications built with Flutter grow from supporting multiple OS versions? (This is the case, for example, by supporting both OpenGL and Metal in iOS builds.)</li><li>Does the decision align with our broad adoption and inclusivity goals?</li><li>Is the deprecation prompted by an external cause, such as a platform vendor deprecating support for a platform version in their build tooling? If so, is it possible to mitigate that deprecation?</li></ul><p>When evaluating whether to deprecate support, we first pose the question to you by starting an issue in GitHub and publishing an associated <a href=\"https://flutter.dev/docs/resources/design-docs\">Flutter design document</a> that proposes the deprecation, explaining why we’re considering it, and what mitigations might be available. This is a request for comment (RFC) to our community; the public design document is socialized through both our discussion list (<a href=\"mailto:flutter-dev@googlegroups.com\">flutter-dev@googlegroups.com</a>) and our <a href=\"https://github.com/flutter/flutter/wiki/Chat\">Discord</a>.</p><p>To begin deprecation, we start the RFC process at the delivery of a stable release, as part of the announcement of the stable release. We then leave time for public comments before reducing support for the platform or feature in the subsequent platform release. The RFC is an opportunity for you to provide feedback. Based on the feedback we receive, we will either move forward with the deprecation, or make changes to the proposal, extending the support for a platform version for a longer period. We take feedback about these prospective decisions very seriously, because we recognize that we have a responsibility to you and your product’s users.</p><h3>Request for comment: iOS 8 deprecation</h3><p>We are considering deprecating support for iOS 8. All iOS 8 devices can be upgraded to iOS 9. According to both Google and third-party analytics, the number of devices running iOS 8 is extremely small (some report “0.0%”), and Apple is gradually deprecating support for iOS 8 in their tooling.</p><p>We have published a <a href=\"https://docs.google.com/document/d/1G5L7ux7ofQp3bCSNAt4ovvL5-8PF_rqo2erAVIcHHeg/edit\">request for comment about deprecating iOS 8</a>, and we ask for you to review it and participate in the discussion. Our intention is that Flutter 1.22 (our most recent stable release) will be the last stable release to support iOS 8. The RFC includes both the justification and what to do if you’re affected.</p><h3>Request for comment: Android Jelly Bean deprecation</h3><p>We are considering deprecating support for Android Jelly Bean because we no longer test devices with that version of Android in our lab, and sourcing reliable devices for lab use is increasingly difficult. Devices running Android Jelly Bean comprise some 0.46% of the user base of Android at this point.</p><p>We have published a <a href=\"https://docs.google.com/document/d/1IjlypDrIIGgF2N76P6z8QL2rT5Uuh_rBvqOgDUyhCx8/edit\">request for comment about deprecating Android </a>Jelly Bean, and we ask you to review it and participate in the discussion. Our intention is that Flutter 1.22 (our most recent stable release) will be the last stable release to support Android Jelly Bean. The RFC includes both the justification and what to do if you’re affected.</p><h3>How you can help</h3><p>The easiest way to help is to get involved! We appreciate the issues you file regarding the edge cases on various devices that we haven’t encountered. In many cases, they occurred on hardware that we would never have had, even if we doubled or quadrupled our spending on hardware testing. Reporting these issues with reproducible cases and including details about software versions and hardware models is essential for us to track down the source of a problem.</p><p>In addition, we look to you to be involved with the decision making process when the time comes to reduce support for a specific platform. Your insights are invaluable when we consider Flutter’s future. Please participate in our open RFCs when you see one. You are the expert in your particular market, and are closest to your customers.</p><p>We deeply appreciate the trust you’ve given us with your users, and letting us be part of your product. We remain committed to helping you paint your vision to life on as many screens as possible.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=374cc2fb0dad\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/providing-operating-system-compatibility-on-a-large-scale-374cc2fb0dad\">Providing operating system compatibility on a large scale</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-05-19T18:32:20.000Z":{"title":"What’s new in Flutter 2.2","link":"https://medium.com/flutter/whats-new-in-flutter-2-2-fd00c65e2039?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/fd00c65e2039","category":["flutter-web","announcements","flutter","flutter-desktop"],"dc:creator":"Chris Sells","pubDate":"Wed, 19 May 2021 18:32:20 GMT","atom:updated":"2021-05-19T18:32:18.381Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<p><em>The Flutter 2.2 release focuses on polish and optimization, including iOS performance improvements, Android deferred components, updated service worker for Flutter web and more!</em></p><p>Today is the day we make Flutter 2.2 available. You get to it by switching to the stable channel and upgrading your current Flutter installation, or going to <a href=\"http://flutter.dev/docs/get-started\">flutter.dev/docs/get-started</a> to start a new installation.</p><p>Even though it’s only been a couple of months since the Flutter 2 release, we have a lot of improvements to share in 2.2. This release merges 2,456 PRs and closes 3,105 issues across the framework, engine, and plugins repositories. Special shoutout to the Flutter community at large who provided a significant number of PRs and PR reviews, including <a href=\"https://github.com/Abhishek01039\">Abhishek01039</a> who contributed the most PRs (17) and <a href=\"https://github.com/xu-baolin\">xu-baolin</a>, who reviewed the most PRs (9) towards Flutter 2.2. Thanks to all contributors for your help in bringing Flutter 2.2 to the stable channel. We couldn’t do it without you.</p><p>With each new Flutter release to stable comes a new set of updates, whether those are performance enhancements, new features or bug fixes. In addition, a release includes a number of features that haven’t yet ready for production use but that we want you to be able to verify that they’re working the way you want them to. And finally, each new release comes with a set of associated tooling updates and updates from the larger Flutter community. To be honest, there is so much going on with each new release of Flutter these days that we can’t reasonably capture it all in a single blog post, but we’ll try to hit the highlights.</p><h3>Flutter 2.2 updates in stable</h3><p>This release covers a wide range of improvements on top of Flutter 2, including updates across Android, iOS, and web, new Material icons, updates to text handling, scrollbar behavior, and mouse cursor support for the TextSpan widget and new guidance on how to best support multiple kinds of platforms from a single source code base. All of these features are available in stable now and available for your use in production apps. And all of them are built on a new release of Dart.</p><h4>Dart 2.13</h4><p>Flutter 2.2 comes with the Dart 2.13 release. Among other things, this Dart update contains a new type aliases feature, which enables you to create aliases for types as well as for functions:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0e191a2788d6baa097a5d30aef8ab23e/href\">https://medium.com/media/0e191a2788d6baa097a5d30aef8ab23e/href</a></iframe><p>Type aliases make it possible to give nice short names to long, complicated types, and it also lets you rename your classes in a non-breaking way. There’s more that’s new in Dart 2.13 as well; check out the details in <a href=\"https://medium.com/dartlang/announcing-dart-2-13-c6d547b57067\">the Dart 2.13 release announcement</a>.</p><h4>Flutter web updates</h4><p>Flutter’s newest stable platform, web, has been improved in this release.</p><p>To start, we’ve optimized caching behavior with a new service worker-loading mechanism, and fixed double-downloading of main.dart.js. In previous versions of Flutter web, the service worker downloaded updates to your app in the background while giving your user access to the stale version of your app. Once that update was downloaded, the user wouldn’t see those changes until they refreshed the browser page a couple times. As of Flutter 2.2, when the new service worker detects a change, the user will wait until the updates are downloaded to use the app, but then they’ll see the updates without requiring a second manual refresh of the page.</p><p>Enabling this change requires you to regenerate the index.html of your Flutter app. To do that, save your modifications, delete the index.html file, and then run flutter create . in your project directory to recreate it.</p><p>We also made improvements to both web renderers. For HTML, we added support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings\">font features</a> to enable setting <a href=\"https://api.flutter.dev/flutter/dart-ui/FontFeature-class.html\">FontFeature</a> as well as using canvas APIs to render text so that it appears in the correct place when hovering. For both HTML and CanvasKit, we added support for shader masks and <a href=\"https://api.flutter.dev/flutter/painting/TextPainter/computeLineMetrics.html\">computeLineMetrics</a>, addressing the parity gaps between Flutter web and mobile apps. For example, developers can now use <a href=\"https://api.flutter.dev/flutter/widgets/Opacity-class.html\">opacity masks</a> to perform fade-out transitions with shader masks, and use computeLineMetrics as they would for mobile apps.</p><p>For Flutter web, as well as Flutter in general, accessibility is one of our top priorities. As designed, Flutter implements accessibility by building a SemanticsNode tree. Once a Flutter web app user enables accessibility, the framework generates a DOM tree parallel to the RenderObject DOM tree, and translates the semantic properties to Aira. In this release, we improved semantic node position to close the gap between mobile and desktop web apps when using transforms, which means that the focus box should appear properly over elements when widgets are styled with transforms. To see this in action, check out this video by Victor Tsaran, who leads the Accessibility program for Material Design, using VoiceOver with Flutter Gallery App:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FA6Sx0lBP8PI%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DA6Sx0lBP8PI&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FA6Sx0lBP8PI%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"640\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1da83a64c4b5cf1037aba0503dd22606/href\">https://medium.com/media/1da83a64c4b5cf1037aba0503dd22606/href</a></iframe><p>We also exposed the semantics node debug tree with a command line flag in profile and release modes to help developers debug accessibility by visualizing the semantic nodes created for their web app.</p><p>To enable this for your own Flutter web app, run the following:</p><pre>$ flutter run -d chrome --profile \\<br>  --dart-define=FLUTTER_WEB_DEBUG_SHOW_SEMANTICS=true</pre><p>With that flag activated, you’ll be able to see your semantic nodes on top of the widgets, which allows you to debug and see if semantic elements are placed where they shouldn’t be. If you find examples like that, please don’t hesitate to <a href=\"https://goo.gle/flutter_web_issue\">file a bug report</a>.</p><p>While we’ve made significant progress with support for a set of core accessibility features, we will continue to improve accessibility support. In builds available on the master and dev channels beyond the 2.2 stable release, we’ve added an API to let developers programmatically <a href=\"https://github.com/flutter/engine/pull/25830\">auto-enable accessibility</a> for their apps and are fixing issues with <a href=\"https://github.com/flutter/engine/pull/25797\">using Tab with screen readers</a>.</p><p>And last but certainly not least, the latest version of Flutter DevTools now supports the layout explorer for your Flutter web apps.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*fS4WbRPwmo_FQgDo\" /></figure><p>This update gives you the same layout debugging tool on the web that you’re used to with your mobile and desktop apps.</p><h4>iOS page transitions and incremental installs</h4><p>For iOS, in this release <a href=\"https://github.com/flutter/flutter/pull/75670\">we’ve made the page transition smoother in Cupertino by reducing the time it takes to render the frames of the animation by 75%</a>, and potentially more on low-end phones. We don’t just look for end-user performance improvements; we’re always looking for ways to improve the development performance as well.</p><p>In this release, we’ve <a href=\"https://github.com/flutter/flutter/pull/77756\">implemented incremental iOS installs</a> during the development process. In our benchmarks, we’ve seen a 40% decrease in the amount of time to install an updated version of your iOS app, which decreases your turn-around time when testing app changes.</p><h4>Use Flutter to build platform adaptive apps</h4><p>As Flutter expands to support more platforms in stable, it becomes useful to consider apps that support not just different form factors, such as mobile, tablet, and desktop, but also different input types (touch vs. mouse+keyboard) and platforms with different idioms, such as navigation drawers vs. system menus for navigation. We call apps that can adjust to the details of different target platforms to be “platform adaptive” apps.</p><p>For an introduction to the considerations you’ll want to keep in mind when building platform adaptive apps, we’ll point you at the <a href=\"https://events.google.com/io/session/868dfd56-7f8c-49ee-84ad-ac69a23ba19d?lng=en\">Building platform adaptive apps</a> session from Kevin Moore. For a more detailed look, check out <a href=\"https://flutter.dev/docs/development/ui/layout/building-adaptive-apps\">the platform adaptive apps guidance on flutter.dev</a>.</p><p>And, finally, for sample apps that have been written for multiple platforms according to these principles, we recommend the <a href=\"https://flutter.gskinner.com/flokk\">Flokk</a> and <a href=\"https://flutter.gskinner.com/folio\">Flutter Folio</a> apps from gSkinner. You can download the code for <a href=\"https://github.com/gskinnerTeam/flokk\">Flokk</a> and <a href=\"https://github.com/gskinnerTeam/flutter-folio\">Folio</a> as well as download <a href=\"https://flutter.gskinner.com/flokk/#g-download\">Flokk</a> and <a href=\"https://flutter.gskinner.com/folio/#g-download\">Folio</a> from the various app stores or run them directly from your browser. Another great sample is the app used to create the guidance itself:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F8YUIrIGGc3Y%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D8YUIrIGGc3Y&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F8YUIrIGGc3Y%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/77a372bd95e8a21fd997f4fce6dc2f53/href\">https://medium.com/media/77a372bd95e8a21fd997f4fce6dc2f53/href</a></iframe><p>The UX portions of the Flutter platform adaptive apps guidance is based on the new <a href=\"https://material.io/blog/material-design-for-large-screens\">Material Guidance for Large Screens</a>. This new guidance from the Material team includes reworks of several of the main layout articles as well as updates to several components and an updated Design Kit, all with large screens in mind.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ROXD5MqgkYuZgDZQ\" /></figure><p>Flutter’s goal has always been to enable apps that do more than just run on multiple platforms; we’re not done until your apps run <em>great</em> on all of the platforms you’re targeting. Flutter has the support you need to not only target your app at multiple platforms but also intends to <em>tailor</em> your apps for screen size, input modes, and idioms of each of these platforms.</p><h4>More Material icons</h4><p>And on the subject of Material guidance, in this release we’ve landed not one but <a href=\"https://github.com/flutter/flutter/pull/76607\">two</a> <a href=\"https://github.com/flutter/flutter/pull/78311\">separate</a> PRs adding new Material icons to Flutter, including an icon for Dash herself!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hlsSKR8Uco4AurMH\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K7L6ppH1A1gBmVY-\" /></figure><p>These updates bring the total number of Material icons for your apps up to more than 7,000. If you have trouble finding the icon you’re looking for in that embarrassment of riches (who wouldn’t?) you can search by category and name at <a href=\"http://fonts.google.com/icons\">fonts.google.com/icons</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*NofBGAEBtDHtwclP\" /><figcaption>Searching for Flutter Material icons by name</figcaption></figure><p>Once you find the perfect icon, the new ‘Flutter’ tab shows you how to use it, or you can download just that icon for use as a stand-alone asset in your app. Adding Dash to your Flutter app has never been easier.</p><h4>Improved text handling</h4><p>As we continue to improve Flutter to support the specifics on each platform, we continue to push into new areas that weren’t as important on mobile form-factors as they are on desktop form-factors. One of those areas is text handling. In this release, we’ve started refactoring how we handle text input that enables features like canceling a keystroke as it bubbles through the widget hierarchy, and by introducing the ability to fully customize the keystrokes associated with text actions.</p><p>Being able to cancel a keystroke allows Flutter to implement things like using the spacebar and the arrow keys without triggering scroll events, giving your end users a more intuitive experience. You can use this same capability to handle a keystroke before it gets to the parent widgets in your own apps. Another example, is that in this release you can Tab between the TextField and a button in your Flutter app and it just works:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9fe050af78589eeadd639f27427eb938/href\">https://medium.com/media/9fe050af78589eeadd639f27427eb938/href</a></iframe><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*krVx4ycTN2nTl7wO\" /><figcaption>Flutter 2.2 can cancel a keystroke from bubbling up the widget hierarchy, for example allowing TAB to change focus from a TextField</figcaption></figure><p>Custom text actions allow you to do things like special handling of the Enter key in a TextField; for example, you can trigger sending a message in a chat client while still allowing a newline to be inserted via Ctrl+Enter. These same text actions <a href=\"https://github.com/flutter/flutter/pull/75032\">allow Flutter itself to provide different keystrokes</a> to match the behavior of text editing to the host OS itself, for example, Ctrl+C on Windows and Linux, but Cmd+C on macOS.</p><p>As an example of this, the following sample overrides the default left arrow action and provides a new action for the backspace and delete keys:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/802c94f664ff9b3badd620731d1dc52a/href\">https://medium.com/media/802c94f664ff9b3badd620731d1dc52a/href</a></iframe><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RFbQWBEWCoP4PF1j\" /><figcaption>Unforgiving TextField example where pressing left arrow or ESC clears the text</figcaption></figure><p>We’ve still got more work to do, but we’re working to give you complete text editing actions. Our goal is that, by the time Flutter desktop gets to stable, your users won’t be able to tell the difference between editing text in their Flutter apps vs any other app on the host OS.</p><h4>Automatic scrolling behavior</h4><p>As part of our continuing quest to make Flutter apps behave like the best apps on each platform, we took another look at scrollbars in this release. When it comes to actually showing a scrollbar, both Android and iOS are the same; they don’t show one by default. On the other hand, for a desktop app a scrollbar is usually shown automatically when the content is larger than the container, which requires you to add a Scrollbar parent widget. To get the correct behavior on mobile or desktop, this release automatically adds a Scrollbar when necessary.</p><p>Consider the following Scrollbar-less code:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1c20b4140a1a3eb0a7a14ce91297fcd6/href\">https://medium.com/media/1c20b4140a1a3eb0a7a14ce91297fcd6/href</a></iframe><p>When running it on the desktop, a scrollbar appears:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*ymJePefMMrQBezVi\" /></figure><p>If you don’t like the way the scrollbar looks or that it’s always shown, you can set a <a href=\"https://api.flutter.dev/flutter/material/ThemeData/scrollbarTheme.html\">ScrollBarTheme</a>. If you don’t like this default behavior, you can change it app-wide or on a particular instance by setting a <a href=\"https://api.flutter.dev/flutter/widgets/ScrollBehavior-class.html\">ScrollBehavior</a>. For more details about the new default scrollbar behavior and how to migrate your code to the new set of best practices, check out <a href=\"https://flutter.dev/docs/release/breaking-changes/default-desktop-scrollbars\">the docs on flutter.dev</a>.</p><h4>Mouse cursors over text spans</h4><p>In previous versions of Flutter, you could add a mouse cursor (like a hand indicating something clickable) over any widget. In fact, Flutter itself adds those mouse cursors for you in most cases, like adding a hand mouse cursor over all of the buttons. However, if you wanted a run of rich text with different text spans with their own styles and potentially long enough to wrap, you were out of luck — a TextSpan is not a Widget and therefore could not be used as a visual scope for a mouse cursor… until now! As of this release, when you have a TextSpan with a gesture recognizer, you will automatically get the corresponding mouse cursor:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b07bf452acd3c685e5dbcbb39e6d5a77/href\">https://medium.com/media/b07bf452acd3c685e5dbcbb39e6d5a77/href</a></iframe><p>Now you can have all of the wrapping text spans you want and any of them with recognizers will get the appropriate mouse cursors.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/611/0*u6tJI44Ucu9fDvAb\" /></figure><p>In this release, TextSpan also supports onEnter and onExit along with the mouseCursor. Things like this may seem small but they go a long way towards making a Flutter app feel just like a user expects it to feel.</p><h3>Flutter 2.2 updates in preview</h3><p>In addition to the new features available for production use, Flutter 2.2 comes with a number of features in preview, including iOS shader compiler performance improvements, Android deferred component support, Flutter desktop updates, and ARM64 Linux host support from Sony. Please give these a try and <a href=\"http://github.com/flutter/flutter/issues\">let us know if you have any issues</a>.</p><h4>Preview: iOS shader compilation improvements</h4><p>In graphics rendering terms, a “shader” is a program to be compiled and run on the GPU available on the end-user’s device. Flutter has used shaders in the underlying Skia graphics library since its inception to provide native performance in its own high quality graphics effects with colors, shadows, animation, and so on. Due to the flexibility of Flutter’s APIs, shaders are generated and compiled just-in-time, synchronous with the frame workloads that need them. When the time to compile shaders goes beyond the frame budget, the result is noticeable to users as “jank.”</p><p>To avoid jank, Flutter has provided the ability to cache shaders during a training run, which are then packaged and bundled with an app, and compiled before the first frame while the Flutter Engine is starting up. This means that the precompiled shaders don’t have to be compiled during a frame workload, and won’t cause jank. However, Skia initially only implemented this feature for OpenGL.</p><p>So, when we enabled the Metal backend by default on iOS in response to Apple deprecating OpenGL, there was an increase in worst frame times as measured by our benchmarks, and an increase in user reports of jank. Our own measurements indicated that these reports were often due to increased shader compilation times, an increase in the number of shaders that Skia generated for the Metal backend, and the failure of compiled shaders to be cached across runs such that jank persisted beyond the first run of an app.</p><p>Therefore, until now, the only way to avoid this jank on iOS was to simplify scenes and animations, which was not ideal.</p><p>However, right now on the dev channel is a preview of <a href=\"https://github.com/flutter/flutter/issues/79298\">the new support in Skia for shader warm-up for Metal</a>. Through Skia, Flutter now compiles the bundled shaders before the first frame workload begins.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0_8hDcyhjXasCJX3\" /><figcaption>Traces showing precompilation occuring during application launch</figcaption></figure><p>This solution comes with some caveats, however:</p><ul><li>Skia still generates more shaders for the Metal backend than for the OpenGL backend.</li><li>The final shader compilation to machine code still happens synchronously with the frame workload, but that’s faster than doing the entire shader generation and compilation as part of the frame render time.</li><li>The resulting machine code is cached after the first run of an app until the device is rebooted.</li></ul><p>If you’d like to take advantage of this new support in your apps, you can <a href=\"https://flutter.dev/docs/perf/rendering/shader#how-to-use-sksl-warmup\">follow along with the instructions on flutter.dev</a>.</p><p>We’re not done with this work, however. On both Android and iOS, this implementation has a few drawbacks:</p><ul><li>The size of the deployed app is larger because it contains the bundled shaders.</li><li>App startup latency is longer because the bundled shaders need to be precompiled.</li><li>We aren’t happy with the developer experience that this implementation implies.</li></ul><p>We consider that last issue the most important one to fix. In particular, we view the process of performing training runs, and reasoning about the trade-offs imposed by app size and app startup latency to be too onerous. Therefore, we continue to investigate approaches to eliminate shader compilation jank, and all jank in general, that do not rely on this implementation. In particular, we’re working with the Skia team to reduce the number of shaders it generates in response to Flutter’s requests, as well as investigating how much Flutter might be implemented with a small set of statically defined shaders bundled with the Flutter Engine.</p><p>You can follow along with <a href=\"https://github.com/flutter/flutter/projects/188\">this project in the Flutter repo</a> to see our progress.</p><h4>Android deferred components</h4><p>For Android, this release uses Dart’s split AOT compilation feature to <a href=\"https://github.com/flutter/flutter/pull/76192\">allow Flutter apps to download modules containing ahead-of-time compiled code and assets at runtime</a>. We call each of these installable splits a <em>deferred component</em>. By deferring the download of code and assets to only when needed, initial install size can be significantly reduced. For example, we implemented a version of Flutter Gallery with all studies and demos deferred and saw a 46% decrease in initial install size.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/360/0*uLg1AGohi6Xzud9H\" /><figcaption>Downloading the Crane study in the Flutter Gallery</figcaption></figure><p>When building with deferred components enabled, Dart compiles code imported exclusively with the deferred keyword into separate shared libraries that are packed into deferred components together with assets.</p><p>Deferred components are currently available only on Android, and this feature is offered as an early preview. Learn how to implement deferred components in the new <a href=\"https://flutter.dev/docs/perf/deferred-components\">Deferred components</a> page on flutter.dev. This page also links to a page on the Flutter wiki that contains a deep dive on how this feature works. Please log issues on <a href=\"http://github.com/flutter/flutter/issues\">the Flutter issue tracker</a>.</p><h4>Flutter Windows UWP alpha</h4><p>Another update for Flutter in this release is for desktop lovers; support for Windows UWP has moved to alpha in the dev channel (beyond the stable 2.2 version). UWP allows you to take your Flutter apps to devices where standard Windows apps don’t run, including Xbox. To try it out, you first need to <a href=\"https://flutter.dev/desktop#windows-uwp\">set up the UWP prerequisites</a>. Then, switch to the dev channel and enable UWP support:</p><pre><em>$ flutter channel dev<br>$ flutter upgrade<br>$ flutter config — enable-windows-uwp-desktop</em></pre><p>Once enabled, creating a Flutter app includes a new a winuwp folder, which allows you to build and run your app in a UWP container:</p><pre><em>$ flutter create uwp_fun<br>$ cd uwp_fun<br>$ flutter pub get<br>$ flutter run -d winuwp</em></pre><p>Because you’re building a Windows UWP app, which runs in a sandbox environment on Windows, you’ll need to punch a hole in the app’s firewall on localhost during development to enable things like hot reload and debugger breakpoints. You can do that with a checknetisolation command by following the instructions on <a href=\"http://flutter.dev/desktop/#windows-uwp\">the Flutter desktop docs page</a>. Once you’ve done that, you can see your favorite Flutter app running as a UWP app on Windows.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*d2HU5GSLz88DZ7pv\" /><figcaption>Your favorite Flutter app running in a Windows UWP container</figcaption></figure><p>Of course, you can run much more interesting UWP apps, like these Flutter apps running on an Xbox.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fs_zIzr60vMA%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Ds_zIzr60vMA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fs_zIzr60vMA%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/427be19a49610e492c1e702fcd1f041c/href\">https://medium.com/media/427be19a49610e492c1e702fcd1f041c/href</a></iframe><p>Special shout out to <a href=\"https://github.com/clarkezone\">clarkezone</a> who’s been working on this support for about as long as I’ve been on the Flutter team. For more details about the Windows UWP alpha, check out <a href=\"http://flutter.dev/desktop/#windows-uwp\">flutter.dev/desktop/#windows-uwp</a>.</p><h4>ARM64 Linux host support from Sony</h4><p>Another excellent effort by a Flutter community member-at-large is from <a href=\"https://github.com/HidenoriMatsubayashi\">HidenoriMatsubayashi</a>, a software engineer at Sony, who has contributed <a href=\"https://github.com/flutter/flutter/pull/61221\">support for targeting ARM64 Linux</a>. This PR enables you to build and run Flutter apps on ARM64 Linux machines.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hZswrrQ3ANrj6spe\" /><figcaption>Your favorite Flutter app running on an ARM64 Linux machine</figcaption></figure><p>It’s exciting to see the Flutter community bringing Flutter to places that the team at Google could never have imagined. Keep up the good work, HidenoriMatsubayashi!</p><h3>Flutter ecosystem and tooling updates</h3><p>The Flutter engine and framework are just a part of the overall experience. Updates to the packages ecosystem and tooling are equally important to the Flutter developer experience. And we’ve got some great updates in those areas to share.</p><p>On the ecosystem side, we have a number of new Flutter Favorite packages to announce as well as several updates to FlutterFire, Flutter’s support for Firebase. Even better, FlutterFire has support for the new Firebase App Check preview so Flutter developers can take advantage of it on day one.</p><p>On the tooling side, there are new updates to Flutter DevTools for optimizing your app’s memory footprint and a new tab for the provider package. There are notable updates to the IDE plugins for both VS Code and Android Studio/IntelliJ and, if you’re a content author targeting Flutter, there’s a whole new way to integrate DartPad into your writing.</p><p>Last but not least, there’s a new low-code app design and building tool called FlutterFlow that targets Flutter and runs on the web, since it was itself built with Flutter.</p><h4>Flutter Favorite updates</h4><p>As part of this release, the Flutter Ecosystem Committee has been working hard to certify 24 new Flutter Favorite packages, our largest expansion yet. The newly tagged Flutter Favorites include:</p><ul><li><a href=\"http://firebase.flutter.dev\"><strong>FlutterFire packages</strong></a><strong> in production: </strong>cloud_firestore, cloud_functions, firebase_auth, firebase_core, firebase_crashlytics, firebase_messaging, and firebase_storage</li><li><a href=\"http://plus.fluttercommunity.dev\"><strong>Flutter Community “plus” packages</strong></a><strong>: </strong>android_alarm_manager_plus, android_intent_plus, battery_plus, connectivity_plus, device_info_plus, network_info_plus, package_info_plus, sensors_plus, and share_plus</li><li><a href=\"https://pub.dev/packages/googleapis\"><strong>googleapis</strong></a><strong> package</strong></li><li><a href=\"https://pub.dev/packages/win32\"><strong>win32</strong></a><strong> package</strong></li><li><a href=\"https://pub.dev/packages/intl\"><strong>intl</strong></a><strong> and </strong><a href=\"https://pub.dev/packages/characters\"><strong>characters</strong></a><strong> packages</strong></li><li><a href=\"https://pub.dev/packages/sentry_flutter\"><strong>Sentry</strong></a><strong> packages: </strong>sentry and sentry_flutter</li><li><a href=\"https://pub.dev/packages/infinite_scroll_pagination\"><strong>infinite_scroll_pagination</strong></a><strong> and </strong><a href=\"https://pub.dev/packages/flutter_native_splash\"><strong>flutter_native_splash</strong></a><strong> packages</strong></li></ul><p>All of these packages have been migrated to null safety and support Android, iOS, and web as appropriate. For example, firebase_crashlytics has no underlying SDK on the web, and android_alarm_manager_plus is specifically designed for Android.</p><p>The <a href=\"https://github.com/fluttercommunity\">Flutter Community</a> “plus” packages provide a superset of the corresponding packages from the Flutter team. For example, <a href=\"https://pub.dev/packages/battery\">the battery package</a> has been provided by the Flutter team at Google since before the initial Flutter release and has been migrated to null safety, but is only supported on Android and iOS. The <a href=\"https://pub.dev/packages/battery_plus\">Flutter Community </a><a href=\"https://pub.dev/packages/battery_plus\">battery_plus package</a>, on the other hand, supports all six Flutter platforms, including web, Windows, macOS, and Linux. The award of the Flutter Favorite awards for all 9 of the “plus” packages represents a big step forward in maturity for the Flutter community as a whole. Flutter is much, much larger than just what the team of engineers at Google are doing. You should migrate your code to the “plus” packages soon and, in the coming weeks, the corresponding packages from Google will be updated to recommend that you do so.</p><p>The googleapis plugin provides auto-generated Dart wrappers around 185 Google APIs for use in your client or server-side Dart applications (including your Flutter apps). If you want to learn more about this package, the author has an <a href=\"https://events.google.com/io/session/7f706716-0de0-4a9e-bad3-581afe8ef360\">I/O talk on powering up your Flutter apps using Google APIs</a>.</p><p>The win32 package is a marvel of engineering, wrapping most of the commonly used Win32 API calls using <a href=\"https://dart.dev/guides/libraries/c-interop\">Dart FFI</a> to make them accessible to Dart code without requiring a C compiler or the Windows SDK. As Flutter gains popularity on the Windows platform, the win32 package has become a key dependency for many popular plugins, including <a href=\"https://pub.dev/packages/path_provider\">path_provider</a>, one of the most popular. And as a test of completeness, the author <a href=\"https://github.com/timsneath\">timsneath</a> has done crazy things like implementing <a href=\"https://github.com/timsneath/win32/tree/main/example/notepad\">notepad</a>, <a href=\"https://github.com/timsneath/win32/blob/main/example/snake.dart\">snake</a> and <a href=\"https://github.com/timsneath/win32/tree/main/example/tetris\">tetris</a>, all in raw Win32 using raw Dart.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/301/0*rMkCGirgD14ME-Na\" /><figcaption>Tetris running on Windows built using Dart FFI and Win32 calls only</figcaption></figure><p>The win32 package is definitely worth checking out if you do anything with Dart or Flutter on Windows.</p><h4>FlutterFire updates and Firebase App Check</h4><p>FlutterFire, Flutter’s support for Firebase, is one of the most popular collections of plugins to use with Flutter. Invertase has done a tremendous job getting it to production for the Flutter 2 release and continuing to improve it since then. In fact, since that initial production release of FlutterFire, Invertase has reduced the number of open issues by 79% and reduced the number of outstanding PRs by 88%. Furthermore, not only have they done an excellent job with the production quality plugins, they’ve also migrated the beta quality plugins to null safety and kept them building and running on the same core so that you can mix and match.</p><p>In addition, Invertase continues to add new features to the FlutterFire plugins, including a number of updates to Flutter’s integration with Cloud Firebase with this release of Flutter:</p><ul><li><a href=\"https://firebase.flutter.dev/docs/firestore/usage/#typing-collectionreference-and-documentreference\">Typesafe API</a> for reading and writing data</li><li>Support for the <a href=\"https://firebase.flutter.dev/docs/storage/usage/#emulator-usage\">Firebase Local Emulator Suite</a></li><li>Optimizing your data queries with <a href=\"https://firebase.flutter.dev/docs/firestore/usage#data-bundles\">data bundles</a></li></ul><p>And last, but not least, FlutterFire provides support for the beta release of a new Firebase product: <a href=\"https://firebase.google.com/docs/app-check\">Firebase App Check</a>. Firebase App Check protects your backend resources like Cloud Storage from abuse like billing fraud or phishing. With App Check, devices running your Flutter app use an app identity attestation provider to certify that it is indeed your authentic app, and may also check that it’s running on an authentic, untampered device. This certification is attached to every request your app makes to your Firebase backend resources once you activate App Check. To learn more, see the <a href=\"https://firebase.flutter.dev/docs/app-check/overview\">FlutterFire App Check documentation</a>.</p><h4>Flutter DevTools updates</h4><p>Flutter DevTools comes with a number of notable updates with this release, including two memory tracking improvements and a whole new tab just for the provider plugin.</p><p>The first memory tracking improvement in this release of DevTools provides the ability to track down where an object was allocated. This is handy to find the location in your code of a memory leak.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*mMd1Bs_OZWT7UB0l\" /><figcaption>Flutter DevTools memory tab allocation stack trace</figcaption></figure><p>The second is the ability to inject custom messages into the memory timeline. This allows you to provide markers specific to your app, like before and after you’ve done some memory intensive work so that you can check that you’re cleaning things up properly.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/902/0*FcPA9ntTT4JPVo5U\" /><figcaption>Flutter DevTools timeline tab custom memory events</figcaption></figure><p>As Flutter apps in the wild get larger and larger, we will continue to ensure that Flutter developers have the tools they need to track down and fix memory leaks and runtime issues of all kinds.</p><p>It isn’t just runtime issues in your use of the Flutter framework you want to track down; sometimes you want to track down issues related to packages as well. With over 15,000 Flutter-compatible packages and plugins on pub.dev, this becomes increasingly likely as your apps use more packages over time. So, with that in mind, we’ve been experimenting with adding a new <strong>Provider</strong> tab to Flutter DevTools. In fact, this tab was built by <a href=\"https://github.com/rrousselGit\">Remi Roussel</a>, the author of <a href=\"http://pub.dev/packages/provider\">the </a><a href=\"http://pub.dev/packages/provider\">provider package</a> itself (among many other wonderful things). If you’re running the latest version of Flutter DevTools and you are debugging a Flutter app that uses the provider plugin, you’ll automatically get the new <strong>Provider</strong> tab.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*UgjcNnlHqFgKCH-t\" /><figcaption>Flutter DevTools Provider tab in action</figcaption></figure><p>The Provider tab shows you the data associated with each of your providers, including real-time changes as you run your app. And as if that weren’t amazing enough, it allows you to change the data directly as a way to test the corner cases of your app!</p><p>Working with Remi on this tab has taught us a few things about how to better support other package authors who would like to do the same thing; you can <a href=\"https://invertase.io/blog/how-to-flutter-devtool-plugin\">read about how Remi built the Provider tab</a> and our current thinking about how to enable more tabs in the <a href=\"https://docs.google.com/document/d/1BWX8YQ962Vsx-EUDuDHRG7RX94fJlZSDRu299YRwasE/\">Flutter DevTools Plugins</a> proposal. Please give us your feedback and feel free to reach out to tell us about your plans for a new tab in Flutter DevTools.</p><p>This is only a few of the cool new things in Flutter DevTools in this release. For the complete list, check out the individual announcements here:</p><ul><li><a href=\"https://groups.google.com/g/flutter-announce/c/tCreMfJaJFU/m/38p1BBeiCAAJ\">Flutter DevTools 2.1 Release Notes</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/t8opLnUyiFQ/m/dJth-jKxAAAJ\">Flutter DevTools 2.2.1 Release Notes</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/t8opLnUyiFQ/m/YX5Ds_q0AgAJ\">Flutter DevTools 2.2.3 Release Notes</a></li></ul><h4>IDE plugins updates</h4><p>Both the Visual Studio Code and the IntelliJ/Android Studio IDE extensions for Flutter were updated in this release as well. For example, the Visual Studio Code extension now supports two additional Dart code refactors: Inline Method and Inline Local Variable.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/364/0*C2RP0oCtMM9fvpgp\" /><figcaption>The new Dart refactor Inline Method in action</figcaption></figure><p>In the Android Studio/IntelliJ extension, we’ve added the ability to print all stack traces to the console with an option.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/738/0*0pqAAk_u0mKtRZx9\" /><figcaption>You can now get all of the stack traces and not just the first one</figcaption></figure><p>This is helpful in projects where the root cause might be in a different package, which previously wasn’t being printed. We already have ideas on how to make this less obviously verbose, so look for more changes in the future.</p><p>For the full list of changes to the IDE extensions for this release, check out these announcements:</p><ul><li><a href=\"https://groups.google.com/g/flutter-announce/c/gNtKp9c1glU/m/SZYTuwcQBwAJ\">VS Code extension v3.21</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/1XR7baYZOVI/m/y6MGYrGhAAAJ\">VS Code extension v3.22</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/tYwFDPAtLu0/m/FrsntcNNBwAJ\">Flutter IntelliJ Plugin M55 Release</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/EkgiAO4p3UM/m/P32ZXXKfAAAJ\">Flutter IntelliJ Plugin M56 Release</a></li></ul><h4>DartPad workshops</h4><p>To ensure that we have documentation ready across a rapidly growing Flutter developer community, the Dart and Flutter teams are always looking at ways to improve and expand the ways to create educational content. With this release, we’re adding a new, step-by-step UI for DartPad that devs can use to follow along with instructor-led workshops.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*58dlCP5YlIl5BdvR\" /><figcaption>A DartPad workshop in action</figcaption></figure><p>By adding instructions directly to DartPad, we’re enabling <a href=\"https://events.google.com/io/program/content?4=topic_flutter&amp;5=type_workshop\">a guided workshop experience for I/O</a>. However, we didn’t just build it for our own workshops; if you’d like to use it in your Dart or Flutter workshops, you can do so by following <a href=\"https://github.com/dart-lang/dart-pad/wiki/Workshop-Authoring-Guide\">the DartPad Workshop Authoring Guide</a>. This is in addition to being able to <a href=\"https://github.com/dart-lang/dart-pad/wiki/Sharing-Guide\">share code using DartPad in a Gist</a> and <a href=\"https://github.com/dart-lang/dart-pad/wiki/Embedding-Guide\">embedding DartPad in your own site</a>, which have been available for awhile now.</p><p>We want everyone producing Dart and Flutter content to be able to provide rich, interactive experiences for their users. Please give this new feature a try and <a href=\"https://github.com/dart-lang/dart-pad/issues\">let us know what you think</a>!</p><h4>Community Spotlight: FlutterFlow</h4><p>FlutterFlow is a “low code” app design and development tool for building apps all within your browser. It provides a WYSIWYG environment for laying out your app across multiple pages using real data from Firebase. The goal of a low code tool is to do most of the common things easily, allowing you to write as few lines of custom code as possible. In fact, as a demo, they built an entire multi-page mobile app for browsing the Metropolitan Museum of Art with zero code in less than an hour. You can see the entire process on YouTube.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FTXsjnd_4SBo%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DTXsjnd_4SBo&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FTXsjnd_4SBo%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1a831de3a84ba4649a235bf829f2c5ff/href\">https://medium.com/media/1a831de3a84ba4649a235bf829f2c5ff/href</a></iframe><p>FlutterFlow outputs Flutter code, so if you need to add code to further customize your app, you can. You can read about <a href=\"https://flutterflow.io/blog/launch\">the FlutterFlow product launch on flutterflow.io</a>.</p><h3>Breaking Changes</h3><p>As always, we strive to reduce the number of breaking changes and in this release we’ve been able to limit it to removing these deprecations:</p><ul><li><a href=\"https://github.com/flutter/flutter/pull/73750\">73750</a> Remove deprecated BinaryMessages</li><li><a href=\"https://github.com/flutter/flutter/pull/73751\">73751</a> Remove deprecated TypeMatcher class</li></ul><p>You can <a href=\"https://flutter.dev/docs/release/breaking-changes/1-22-deprecations\">find mitigations for these breaking changes on flutter.dev</a>.</p><h3>Summary</h3><p>As always, from all of us here on the Flutter Team at Google, we want to say — thank you. Thank you for being part of the community that makes all of this possible. With more than one in eight of new apps in the Play Store being built with Flutter and over 200,000 Flutter apps in the Play Store alone, our continued growth is mind blowing. Apps of all sizes around the world are entrusting their UI to Flutter to craft beautiful multi platform experiences to meet users wherever they may be.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rn6BZioI2VeCqSQY\" /></figure><p>Finally, in case you missed it, before you leave I/O this year, don’t forget to check out the <a href=\"https://photobooth.flutter.dev/#/\">I/O Photo Booth</a> web app built in Flutter &amp; Firebase to grab a selfie with Dash. We <a href=\"https://github.com/flutter/photobooth\">open sourced the code</a> so you can dig into best practices for Flutter web, camera plugin web support, and learn how we used cloud functions to generate custom social posts.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fd00c65e2039\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-2-2-fd00c65e2039\">What’s new in Flutter 2.2</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-05-18T20:02:12.000Z":{"title":"Announcing Flutter 2.2 at Google I/O 2021","link":"https://medium.com/flutter/announcing-flutter-2-2-at-google-i-o-2021-92f0fcbd7ef9?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/92f0fcbd7ef9","category":["flutter","google","programming","ui","announcements"],"dc:creator":"Tim Sneath","pubDate":"Tue, 18 May 2021 20:02:12 GMT","atom:updated":"2021-05-19T16:17:36.359Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Growing momentum for the leading UI toolkit for multiplatform development</h4><p>At Google I/O today, we announced <a href=\"https://flutter.dev/docs/whats-new\">Flutter 2.2</a>, our latest release of the open source toolkit for building beautiful apps for any device from a single platform. Flutter 2.2 is the best version of Flutter yet, with updates that make it easier than ever for developers to monetize their apps through in-app purchases, payments and ads; to connect to cloud services and APIs that extend apps to support new capabilities; and with tooling and language features that allow developers to eliminate a whole class of errors, increase app performance and reduce package size.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*NCBwYFewFf602uvF\" /></figure><h3>Building on the foundation of Flutter 2</h3><p>Flutter 2.2 is built on the foundation of Flutter 2, which extended Flutter from its mobile roots to incorporate web, desktop, and embedded usage. It is uniquely designed for a world of ambient computing, where users have a wide variety of different devices and form factors and are looking for consistent experiences that span across their daily lives. With Flutter 2.2, enterprises, startups, and entrepreneurs alike can build high-quality solutions that can reach the full potential of their addressable market, allowing creative inspiration (rather than target platform) to be the only limiting factor.</p><blockquote>Flutter is now the most popular framework for cross-platform development.</blockquote><p>A recent mobile developer study highlights the growth of Flutter. Analyst firm <a href=\"https://www.slashdata.co/\">SlashData</a>’s <a href=\"https://www.slashdata.co/reports/?category=mobile-desktop\">Mobile Developer Population Forecast 2021</a> shows that Flutter is now the most popular framework for cross-platform development, with 45% of developers selecting it, representing 47% growth between Q1 2020 and Q1 2021. Our own data confirms this shift towards Flutter; in the last 30 days, more than one in eight of the new apps in the Play Store are built with Flutter.</p><p>At I/O, we shared that there are now over 200,000 apps in the Play Store alone built using Flutter. These apps come from companies like Tencent, whose <a href=\"https://apps.apple.com/us/app/wechat/id414478124\">WeChat</a> messaging app is used by over 1.2 billion users on iOS and Android; <a href=\"https://www.bytedance.com/en/products/\">ByteDance</a>, originators of TikTok, who have now built 70 distinct apps using Flutter; and other apps from companies including <a href=\"https://www.press.bmwgroup.com/global/article/detail/T0328610EN/the-my-bmw-app:-new-features-and-tech-insights-for-march-2021?language=en\">BMW</a>, <a href=\"https://apps.apple.com/app/id878577184\">SHEIN</a>, <a href=\"https://apps.apple.com/app/id647268330\">Grab</a> and <a href=\"https://play.google.com/store/apps/details?id=com.xiaojukeji.didi.global.customer&amp;hl=None\">DiDi</a>. Of course, Flutter isn’t just used by large corporations. Some of the most innovative apps are coming from names you might not have heard of: for example, <a href=\"https://play.google.com/store/apps/details?id=com.womboai.wombo&amp;hl=None\">Wombo</a>, the viral singing selfie app; <a href=\"https://play.google.com/store/apps/details?id=de.fastic.app&amp;hl=None\">Fastic</a>, the intermittent fasting app, and <a href=\"https://play.google.com/store/apps/details?id=com.zerodha.kite3&amp;hl=None\">Kite</a>, a beautiful investment trading app.</p><h3>Introducing Flutter 2.2</h3><p>The Flutter 2.2 release is focused on improvements to the development experience to help you deliver more reliable, performant apps to your customers.</p><p>Sound null safety is now the default for new projects. Null safety adds protection against null reference exceptions, giving developers the means to express non-nullable types in their code. And since Dart’s implementation is <em>sound</em>, the compiler can eliminate null checks at runtime, providing increased performance for your apps. The ecosystem has responded quickly, with around 5,000 packages already updated to support null safety.</p><p>There are lots of performance improvements in this release also: for web apps, we offer background caching using service workers; for Android apps, Flutter supports deferred components; for iOS, we’ve been working on tooling to precompile shaders to eliminate or reduce first-run jank. We’ve also added a number of new features to the DevTools suite that help you understand how memory is allocated in your apps, as well as support for third-party tools extensions.</p><p>Additionally, we’ve been working on a few important areas of polish, such as improved accessibility for web targets.</p><p>Our work extends beyond the core of Flutter. We’ve also been partnering with other Google teams to help integrate Flutter into our broader developer stack. In particular, we continue to build trusted services that help developers responsibly monetize their apps. Our <a href=\"https://developers.google.com/admob/flutter/quick-start\">new ads SDK</a> is updated in this release with null safety and support for adaptive banner formats. We’re also introducing a<a href=\"http://pub.dev/packages/pay\"> new payment plugin</a>, built in partnership with the Google Pay team, that lets you take payment for physical goods on both iOS and Android. And we have updated our <a href=\"https://pub.dev/packages/in_app_purchase\">in-app purchases plugin</a>, along with a matching <a href=\"https://codelabs.developers.google.com/codelabs/flutter-in-app-purchases\">codelab</a>.</p><p>As the “secret sauce” that powers Flutter, <a href=\"https://dart.dev\">Dart</a> also gets an update in this release. Dart 2.13 expands support for native interoperability, with support for arrays and packed structs in FFI. It also includes support for type aliases, which increase readability and provide a gentle pathway for certain refactoring scenarios. We continue to add integrations for the broader ecosystem, with a Dart <a href=\"https://github.com/marketplace/actions/setup-dart-sdk\">GitHub Action</a> and a curated <a href=\"https://hub.docker.com/_/dart\">Docker Official Image</a> that is optimized for cloud-based deployment of business logic.</p><h3>More than a Google project</h3><p>While Google continues to be the primary contributor to the Flutter project, we’re delighted to see the growth of the broader ecosystem around Flutter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zroRqBB-vjUR_UCvYCKSUg.png\" /></figure><p>One area of particular growth over recent months has been the broadening of Flutter to an ever growing number of platforms and operating systems. At Flutter Engage, we announced that <a href=\"https://medium.com/googleplaydev/seamless-multi-platform-app-development-with-flutter-ea0e8003b0f9#f53d\">Toyota is bringing Flutter to their next generation vehicle infotainment systems</a>. And last month, Canonical shipped their first release of <a href=\"https://ubuntu.com/blog/ubuntu-21-04-is-here\">Ubuntu with integrated support for Flutter</a>, with Snap integration and support for Wayland.</p><p>Two new partners demonstrate this ever-growing ecosystem. <a href=\"https://github.com/flutter-tizen/flutter-tizen\">Samsung is porting Flutter to Tizen</a>, with an open source repository that others can also contribute to. And <a href=\"https://github.com/sony/flutter-embedded-linux\">Sony is leading the effort to deliver a solution for embedded Linux</a>.</p><p>Designers benefit also from the open source nature of this project, with the announcement from <a href=\"https://medium.com/adobetech/announcing-xd-to-flutter-v2-0-82d09f3909a7\">Adobe of its updated XD to Flutter plugin</a>. Adobe XD provides designers a great way to experiment and iterate, and now with enhanced Flutter support, designers and developers can collaborate on the same assets, putting great ideas into production faster than ever.</p><p>Lastly, Microsoft continues to collaborate with us; besides the work the Surface team has been doing to build foldable experiences with Flutter, this week sees the <a href=\"https://flutter.dev/desktop#windows-uwp\">alpha of Flutter support for UWP apps</a> built for Windows 10. We’re excited to see more apps that take advantage of the platform adaptations built into Flutter to provide a great experience across mobile, desktop, web and beyond.</p><h3>Building Great Experiences</h3><p>More than anything, we built Flutter to help developers build great experiences. We are animated by the idea that app development can be better: that we can empower you by removing traditional impediments to reaching your audience.</p><p>We love seeing how you put Flutter to work. One example comes in the form of a project from the US Veterans Administration. The video below shows how their Flutter app is helping them provide rehabilitation for soldiers with post-traumatic stress disorders.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F2S-KkvFuLWs%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D2S-KkvFuLWs&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F2S-KkvFuLWs%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2cebe8af06aff25eb907f5adf248d40e/href\">https://medium.com/media/2cebe8af06aff25eb907f5adf248d40e/href</a></iframe><p>With a <a href=\"https://events.google.com/io/program/content?4=topic_flutter\">wide variety of workshops, presentations and on-demand sessions about Flutter</a> at Google I/O, we’re excited to share our work with all of you. And don’t forget to check out our fun <a href=\"https://photobooth.flutter.dev\">photo booth web app</a>, built with Flutter, which lets you create a selfie with our Dash mascot and her friends!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZdwECz0chT1hOq6Y\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=92f0fcbd7ef9\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-2-2-at-google-i-o-2021-92f0fcbd7ef9\">Announcing Flutter 2.2 at Google I/O 2021</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-05-17T15:07:17.000Z":{"title":"How It’s Made: I/O Photo Booth","link":"https://medium.com/flutter/how-its-made-i-o-photo-booth-3b8355d35883?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/3b8355d35883","category":["firebase-cloud-functions","dart","firebase","flutter-web","flutter"],"dc:creator":"Very Good Ventures Team","pubDate":"Mon, 17 May 2021 15:07:17 GMT","atom:updated":"2021-05-17T15:07:17.244Z","content:encoded":"<h4>A closer look at building a web app with Flutter and Firebase</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*diM5YKjX2b2OgNvD\" /></figure><p>We (the folks at Very Good Ventures) teamed up with Google to bring an interactive experience to this year’s Google I/O: a <a href=\"https://photobooth.flutter.dev/\">photo booth</a>! You can take pictures with well-known Google mascots: <a href=\"https://flutter.dev/dash\">Flutter’s Dash</a>, Android Jetpack, Chrome’s Dino, and Firebase’s Sparky, and decorate photos with stickers, including party hats, pizza, funky glasses, and more. Finally, you can share photos on social media and download them to update your profile picture for the event!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OQnK58irOAv-Pjzq\" /><figcaption>Flutter’s Dash, Firebase’s Sparky, Android Jetpack, and Chrome’s Dino</figcaption></figure><p>We built the I/O Photo Booth using <a href=\"https://flutter.dev/web\">Flutter on the web</a> and <a href=\"https://firebase.google.com/\">Firebase</a>. Because <a href=\"https://medium.com/flutter/whats-new-in-flutter-2-0-fe8e95ecc65\">Flutter now offers support for web apps</a>, we thought it would be a great way to make this app easily accessible to attendees all over the world for this year’s virtual Google I/O. Flutter’s web support eliminates the barrier of having to install an app from an app store and also gives you the flexibility to run it on your device of choice: mobile, desktop, or tablet. That opens up the I/O Photo Booth experience to anyone with access to any browser and device without requiring a download.</p><p>Even though I/O Photo Booth was designed to be a web experience, all of the code is written with a platform-agnostic architecture. When native support for elements like the camera plugin are available for their respective platforms, the same code works across all platforms (desktop, web, and mobile).</p><h3>Making a virtual photo booth with Flutter</h3><h4>Building a Flutter camera plugin for the web</h4><p>The first challenge came with building a camera plugin for Flutter on the web. Initially, we reached out to the team at <a href=\"https://www.baseflow.com/\">Baseflow</a>, because they maintain the existing open source <a href=\"https://github.com/Baseflow/flutter-plugins\">Flutter camera plugin</a>. While Baseflow works on building top-notch camera plugin support for iOS and Android, we were happy to work in parallel on web support for the plugin using the <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#federated-plugins\">federated plugin approach</a>. We stuck as closely as possible to the official plugin interface so that we could merge it back into the official plugin when it was ready.</p><p>We identified two APIs that would be critical for building the I/O Photo Booth camera experience in Flutter.</p><ol><li><strong>Initializing the camera: </strong>The app first needs access to your device camera. On desktop, this is likely the webcam, and on mobile, we chose the front-facing camera. We also provide a desired resolution of 1080p to maximize the camera quality based on your device.</li><li><strong>Taking the photo:</strong> We used the built-in <a href=\"https://api.flutter.dev/flutter/widgets/HtmlElementView-class.html\">HtmlElementView</a> that uses platform views to render native web elements as Flutter widgets. In this project, we render a <a href=\"https://api.flutter.dev/flutter/dart-html/VideoElement-class.html\">VideoElement</a> as a native HTML element, which is what you see on the screen before you take your photo. We use a <a href=\"https://api.flutter.dev/flutter/dart-html/CanvasElement-class.html\">CanvasElement</a> that is rendered as another HTML element. This allows us to capture the image from the media stream when you click the take photo button.</li></ol><pre>Future&lt;CameraImage&gt; takePicture() async {<br> final videoWidth = videoElement.videoWidth;<br> final videoHeight = videoElement.videoHeight;<br> final canvas = html.CanvasElement(<br>   width: videoWidth,<br>   height: videoHeight,<br> );<br> canvas.context2D<br>   ..translate(videoWidth, 0)<br>   ..scale(-1, 1)<br>   ..drawImageScaled(videoElement, 0, 0, videoWidth, videoHeight);<br> final blob = await canvas.toBlob();<br> return CameraImage(<br>   data: html.Url.createObjectUrl(blob),<br>   width: videoWidth,<br>   height: videoHeight,<br> );<br>}</pre><h4>Camera permissions</h4><p>After we got the Flutter Camera plugin working on the web, we created an abstraction to display different UIs depending on the camera permissions. For example, while waiting for you to allow or deny browser camera use, or if there are no available cameras to access, we can display an instructional message.</p><pre>Camera(<br> controller: _controller,<br> placeholder: (_) =&gt; const SizedBox(),<br> preview: (context, preview) =&gt; PhotoboothPreview(<br>   preview: preview,<br>   onSnapPressed: _onSnapPressed,<br> ),<br> error: (context, error) =&gt; PhotoboothError(error: error),<br>)</pre><p>In this abstraction, the placeholder returns the initial UI as the app waits for you to grant permission to the camera. Preview returns the UI after you grant permission and provides the real-time video stream of the camera. The error builder allows us to capture an error if it occurs and renders a corresponding error message.</p><h4>Mirroring the photo</h4><p>Our next challenge was mirroring the photo. If we took the photo using the camera as is, what you’d see isn’t what you’re used to seeing when looking in the mirror. <a href=\"https://9to5mac.com/2020/07/09/iphone-mirror-selfie-photos/\">Some devices have a setting to handle exactly this</a>, so that if you take a photo with the front-facing camera, you’ll see the mirrored version when capturing the photo.</p><p>In our first approach, we tried capturing the default camera view, and then applying a 180-degree transform around the y-axis. This appeared to work, but then we ran into <a href=\"https://github.com/flutter/flutter/issues/79519\">an issue</a> where Flutter would occasionally override the transform, causing the video to revert to the un-mirrored version.</p><p>With the help of the Flutter team, we addressed this issue by wrapping the VideoElement in a <a href=\"https://api.flutter.dev/flutter/dart-html/DivElement-class.html\">DivElement</a> and updating the VideoElement to fill the DivElement’s width and height. This allowed us to apply the mirror to the video element without Flutter overriding the transform effect, because the parent element is a div. This approach gave us the desired mirrored camera view!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Zd9s-7LFN9u17Ouo\" /><figcaption>Un-mirrored view</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kkxXNd0m-t4sjCAo\" /><figcaption>Mirrored view</figcaption></figure><h4>Sticking to a strict aspect ratio</h4><p>Enforcing a strict aspect ratio of 4:3 for large screens and 3:4 for small screens is harder than it seems! It was important to enforce this ratio both to adhere to the overall design for the web app as well as to ensure that the photo looks pixel perfect when you share it on social media. This was a challenging task, because the aspect ratio of the built-in camera on devices varies widely.</p><p>To enforce a strict aspect ratio, the app first requests the maximum resolution possible from the device camera using the JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\">getUserMedia API</a>. We then feed this API into the VideoElement stream, which is what you see in the camera view (mirrored, of course). We also applied an <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\">object-fit</a> CSS property to ensure that the video element covers its parent container. This sets the aspect ratio using the built-in AspectRatio widget from Flutter. As a result, the camera doesn’t make any assumptions about the aspect ratio being displayed; it always returns the maximum resolution supported, and then conforms to the constraints provided by Flutter (in this case 4:3 or 3:4).</p><pre>final orientation = MediaQuery.of(context).orientation;<br>final aspectRatio = orientation == Orientation.portrait<br>   ? PhotoboothAspectRatio.portrait<br>   : PhotoboothAspectRatio.landscape;<br>return Scaffold(<br> body: _PhotoboothBackground(<br>   aspectRatio: aspectRatio,<br>   child: Camera(<br>     controller: _controller,<br>     placeholder: (_) =&gt; const SizedBox(),<br>     preview: (context, preview) =&gt; PhotoboothPreview(<br>       preview: preview,<br>       onSnapPressed: () =&gt; _onSnapPressed(<br>         aspectRatio: aspectRatio,<br>       ),<br>     ),<br>     error: (context, error) =&gt; PhotoboothError(error: error),<br>   ),<br> ),<br>);</pre><h4>Adding friends and stickers with drag and drop</h4><p>A huge part of the I/O Photo Booth experience is taking a photo with your favorite Google friends and adding props. You are able to drag and drop the friends and props within the photo, as well as resize and rotate them until you get an image that you like. You’ll notice that, when adding a friend to the screen, you can drag and resize them. The friends are also animated — sprite sheets to achieve this effect.</p><pre>for (final character in state.characters)<br> DraggableResizable(   <br>   canTransform: character.id == state.selectedAssetId,<br>   onUpdate: (update) {<br>     context.read&lt;PhotoboothBloc&gt;().add(<br>       PhotoCharacterDragged(<br>         character: character, <br>         update: update,<br>       ),<br>     );<br>   },<br>   child: _AnimatedCharacter(name: character.asset.name),<br> ),</pre><p>To resize the objects, we created a draggable, resizable widget that can be wrapped around any Flutter widget, in this case, the friends and props. This widget uses a <a href=\"https://api.flutter.dev/flutter/widgets/LayoutBuilder-class.html\">LayoutBuilder</a> to handle scaling the widgets based on the constraints of the viewport. Internally, we used <a href=\"https://api.flutter.dev/flutter/widgets/GestureDetector-class.html\">GestureDetectors</a> to hook into onScaleStart, onScaleUpdate, and onScaleEnd. These callbacks provide details about the gesture needed to reflect the changes you make to the friends and props.</p><p>The<a href=\"https://api.flutter.dev/flutter/widgets/Transform-class.html\">Transform</a> widget and 4D Matrix transformations handle scaling and rotating the friends and props based on the various gestures that you made, as reported by multiple GestureDetectors.</p><pre>Transform(<br> alignment: Alignment.center,<br> transform: Matrix4.identity()<br>   ..scale(scale)<br>   ..rotateZ(angle),<br> child: _DraggablePoint(...),<br>)</pre><p>Finally, we created a separate package to determine whether your device supports touch input. The draggable, resizable widget adapts, based on touch capabilities. On devices with touch input, resizable anchors and a rotation icon aren’t visible, because you can pinch and pan to manipulate the image directly, whereas on devices without touch input (such as your desktop device), the anchors and rotation icon are added to accommodate clicking and dragging.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*MVI3wAXUfJdGls5X\" /></figure><h3>Prioritizing Flutter on the web</h3><h4>Web-first development with Flutter</h4><p>This was one of the first web-only projects that we’ve built with Flutter, and it has different characteristics to a mobile app.</p><p>We needed to ensure that the app was both <a href=\"https://flutter.dev/docs/development/ui/layout/adaptive-responsive\">responsive and adaptive</a> for any browser on any device. That is, we had to make sure that I/O Photo Booth would scale according to browser size and be able to handle both mobile and web inputs. We did this in a few ways:</p><ul><li><strong>Responsive resize:</strong> You should be able to resize your browser to a desired size, and the UI should respond accordingly. If your browser window is in a portrait orientation, the camera flips from a landscape view with the 4:3 aspect ratio to a portrait view with a 3:4 aspect ratio.</li><li><strong>Responsive design:</strong> The design for desktop browsers displays Dash, the Android Jetpack, Dino, and Sparky on the right, and for mobile, they appear at the top. The desktop design also uses a drawer on the right side of the camera, and mobile uses the BottomSheet class.</li><li><strong>Adaptive input:</strong> If you access the I/O Photo Booth from a desktop, then mouse clicks are considered inputs, and if you are on a tablet or phone, touch input is used. This is especially important when it comes to resizing stickers and placing them within the photo. Mobile devices support pinching and panning, and desktop supports click and drag.</li></ul><h4>Scalable architecture</h4><p>We also used our approach to building scalable mobile apps for this application. We started I/O Photo Booth with a strong foundation, including sound null safety, internationalization, and 100% unit and widget test coverage from the first commit. We used <a href=\"https://pub.dev/packages/flutter_bloc\">flutter_bloc</a> for state management, because it allowed for easily testing business logic and observes all state changes in the app. This is particularly useful for developer logs and traceability, because we could see exactly what changed from state to state and isolate issues more quickly.</p><p>We also implemented a feature-driven monorepo structure. For example, stickers, share, and the live camera preview are implemented in their own folders, where each folder contains its respective UI components and business logic. These integrate with external dependencies, such as the camera plugin, which live within the packages subdirectory. This architecture allowed our team to work on multiple features in parallel without disrupting the work of others, minimized merge conflicts, and enabled us to reuse code effectively. For example, the UI component library is a separate package called <a href=\"https://github.com/flutter/photobooth/tree/main/packages/photobooth_ui\">photobooth_ui</a>, and the camera plugin is separate as well.</p><p>By separating the components into independent packages, we can extract and open source the individual components that aren’t tied to this specific project. Even the UI component library package can be open sourced for the Flutter community, similar to the <a href=\"https://flutter.dev/docs/development/ui/widgets/material\">Material</a> and <a href=\"https://flutter.dev/docs/development/ui/widgets/cupertino\">Cupertino</a> component libraries.</p><h3>Firebase + Flutter = A perfect match</h3><h4>Firebase Auth, storage, hosting, and more</h4><p>Photo Booth leverages the Firebase ecosystem for various backend integrations. The <a href=\"https://pub.dev/packages/firebase_auth\">firebase_auth package</a> supports anonymously signing the user in as soon as the app launches. Each session uses Firebase Auth to create an anonymous user with a unique ID.</p><p>This comes into play when you arrive at the share page. You can either download your photo to save as your profile picture, or you can share directly to social media. If you download the photo, it’s stored locally on your device. If you share the photo, we store the photo in Firebase using the <a href=\"https://pub.dev/packages/firebase_storage\">firebase_storage package</a> so that we can retrieve it later, to populate the social post.</p><p>We defined <a href=\"https://firebase.google.com/docs/rules\">Firebase Security Rules</a> on the Firebase storage bucket to make photos immutable after creation. This prevents other users from modifying or deleting photos in the storage bucket. In addition, we use <a href=\"https://cloud.google.com/storage/docs/lifecycle\">Object Lifecycle Management</a> provided by Google Cloud to define a rule that deletes all objects that are 30 days old, but you can request to have your photos deleted sooner by following the instructions outlined in the app.</p><p>This application also uses <a href=\"https://firebase.google.com/docs/hosting\">Firebase Hosting</a> for fast and secure hosting of the web app. The <a href=\"https://github.com/FirebaseExtended/action-hosting-deploy\">action-hosting-deploy</a> GitHub Action allowed us to automate deployments to Firebase Hosting based on the target branch. When we merge changes into the main branch, the action triggers a workflow that builds and deploys the development flavor of the application to Firebase Hosting. Similarly, when we merge changes into the release branch, the action triggers a production deployment. The combination of the GitHub Action with Firebase Hosting allowed our team to iterate quickly and always have a preview of the latest build.</p><p>Finally, we used <a href=\"https://firebase.google.com/products/performance\">Firebase Performance Monitoring</a> to monitor key web performance metrics.</p><h4>Getting social with Cloud Functions</h4><p>Before generating your social post, we first make sure that the photo looks pixel perfect. The final image includes a nice frame to commemorate the I/O Photo Booth and is cropped to the 4:3 or 3:4 aspect ratio so that it looks great on the social post.</p><p>We use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas\">OffscreenCanvas</a> API or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\">CanvasElement</a> as a polyfill to composite the original photo, along with the layers, that contain your friends and props, and generate a single image that you can download. The <a href=\"https://github.com/flutter/photobooth/tree/main/packages/image_compositor\">image_compositor package</a> handles this processing step.</p><p>We then tap into Firebase’s powerful <a href=\"https://firebase.google.com/docs/functions\">Cloud Functions</a> to assist with sharing the photo to social media. When you click the share button, you are taken to a new tab on the selected platform with a pre-populated post. The post has a URL that redirects to the cloud function that we wrote. When the browser analyzes the URL, it detects the dynamic meta information that the cloud function generated. This information allows the browser to display a nice preview image of your photo in your social post and a link to a share page where your followers can view the photo and navigate back to the I/O Photo Booth app to take their own.</p><pre>function renderSharePage(imageFileName: string, baseUrl: string): string {<br> const context = Object.assign({}, BaseHTMLContext, {<br>   appUrl: baseUrl,<br>   shareUrl: `${baseUrl}/share/${imageFileName}`,<br>   shareImageUrl: bucketPathForFile(`${UPLOAD_PATH}/${imageFileName}`),<br> });<br> return renderTemplate(shareTmpl, context);<br>}</pre><p>The final product looks something like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tXpB_n44hmjGxHXf\" /></figure><p>For more information about how to use Firebase in your Flutter projects, check out this <a href=\"https://firebase.google.com/codelabs/firebase-get-to-know-flutter#0\">codelab</a>.</p><h3>Final product</h3><p>This project was a good example of a web-first approach to building apps. We were pleasantly surprised by how similar our workflow for building this web application was, compared to our experience building mobile applications with Flutter. We had to consider elements like viewport sizes, responsiveness, touch versus mouse input, image load times, browser compatibility, and all the other considerations that come with building for the web. However, we were still writing Flutter code using the same patterns, architecture, and coding standards. We felt at home while building for the web. The tooling and growing ecosystem of Flutter packages, including the Firebase suite of tools, made I/O Photo Booth possible.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*CN8nNM1HaOjg9SfQ\" /><figcaption>Very Good Ventures team who worked on I/O Photo Booth</figcaption></figure><p>We’ve open sourced all the code. Check out the <a href=\"https://github.com/flutter/photobooth\">photo_booth</a> project on GitHub and show us your photos on Facebook and Twitter using #IOPhotoBooth!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3b8355d35883\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-its-made-i-o-photo-booth-3b8355d35883\">How It’s Made: I/O Photo Booth</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-05-13T02:17:12.000Z":{"title":"Which factors affected users’ decisions to adopt Flutter? — Q1 2021 user survey results","link":"https://medium.com/flutter/which-factors-affected-users-decisions-to-adopt-flutter-q1-2021-user-survey-results-563e61fc68c9?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/563e61fc68c9","category":["flutter","mobile-development","developer-experience","surveys"],"dc:creator":"JaYoung Lee","pubDate":"Thu, 13 May 2021 02:17:12 GMT","atom:updated":"2021-05-13T02:17:12.327Z","content:encoded":"<h3>Which factors affected users’ decisions to adopt Flutter? — Q1 2021 user survey results</h3><p>The Flutter team is here to share the results from this quarter’s user survey! This quarter, we collected over 8,000 responses over 7 days, between March 5th and 11th. The goal of this quarterly survey program is to hear from you, in a structured format, so that the Flutter team can focus on things that matter most to our users. Results from the previous surveys are published on <a href=\"https://medium.com/flutter/search?q=survey\">Medium</a> too.</p><h3>User satisfaction</h3><p>In this quarter’s survey, 92% of the 8,652 respondents said that they are positively satisfied with Flutter (55% very satisfied, 37% somewhat satisfied), similar to the last quarter’s results.</p><p>What’s notable this quarter is that 89% of the respondents were also positively satisfied with the Dart language, which is an all-time high score. This was very encouraging news to the team, because the percentage started at 80 in 2019. The Dart team did tremendous work to improve the developers’ experience with the Dart language to achieve this satisfaction rate, including <a href=\"https://dart.dev/null-safety\">sound null safety</a>. We’re very happy to share this survey result, and we thank those who acknowledged the unique strengths of the language.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9CO8AmwyqIudhgK6\" /><figcaption><em>The percentage of users who are positively satisfied with Dart increased 9%, from 80% in Q3 2019 to 89% in Q1 2021.</em></figcaption></figure><h3>Which factors affected users’ decisions to adopt Flutter?</h3><p>The Flutter team wanted to understand how different factors affect users’ decisions to adopt Flutter for their new projects. The goal was to find areas that the team should invest in to alleviate users’ concerns and delight our users. In addition, by sharing the results, we hope that you can also use the information to find ways to contribute to the Flutter community or to advocate for Flutter in your organization or community.</p><p>Because this survey targeted existing Flutter users, we asked about the users’ recent experience with evaluating Flutter for their next new project. We learned that 75% of the respondents evaluated Flutter against other technologies in the last 3 months and that 67% of them were for business reasons, followed by learning (17%) and hobby (14%).</p><p>First, we asked what made users lean toward adopting Flutter. As shown in the following chart, users leaned toward adopting Flutter mainly because Flutter supports the following features, listed by importance:</p><ol><li>A single codebase.</li><li>Ready-made UI widgets.</li><li>Hot reload.</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lmC1UJVINDIXumGt\" /><figcaption><em>Factors that made developers lean toward adopting Flutter for their next project</em></figcaption></figure><p>Next, we asked what made users lean against adopting Flutter. The users were most concerned about the following, listed in order of importance:</p><ol><li>Google’s commitment to Flutter.</li><li>Maturity of Flutter for the scale of the app they’re building.</li><li>Packages and plugins available in Flutter’s ecosystem.</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0d3CyUdb9K75qjt2\" /><figcaption><em>Factors that made developers lean against adopting Flutter for their next project</em></figcaption></figure><p>From these results, the team learned that users fear whether Flutter will be around for the long term. It’s a reasonable concern, because you’re tying your career or apps to our framework. So, we want to mention the scale of internal adoption again. At Flutter Engage, we shared that there are more than 30 teams at Google who are building mission-critical apps with Flutter. These are teams like <a href=\"https://youtu.be/IdrCyS7EF8M?t=67\">Google Pay, Google Ads, Nest Hub, and Stadia</a> who have thousands of developers committed to Flutter development. Flutter will be prominently featured at <a href=\"https://events.google.com/io/\">Google I/O</a> again this year. Stay tuned for our latest announcements, and sign up for the Flutter sessions listed on the<a href=\"https://events.google.com/io/program/content?4=topic_flutter&amp;lng=en\"> I/O website</a>, starting May 5th.</p><p>We also want to point out that Flutter isn’t only growing because of support from Google — there are more contributors outside of Google than inside. A vibrant, open source community of developers around the world is contributing to our shared success! Take a look at the other large and small contributors like <a href=\"https://youtu.be/IdrCyS7EF8M?t=237\">Toyota</a> or Ubuntu.</p><p>The next concern was about the maturity of Flutter, including the ecosystem around it. We’re investing in developing the packages and plugin ecosystem and working on the stability and quality of the core framework. We see the sentiment improving here with the release of Flutter 2 and an ever-growing ecosystem supporting it. Now that the web support is stable and the desktop support is in beta, our main themes in upcoming releases will be around polishing the framework and improving the productivity that you can achieve with Flutter. In the meantime, you can check out the <a href=\"https://flutter.dev/showcase\">showcase section</a> of the Flutter website and see how major brands like BMW, eBay, Nubank, Tencent, Square, and Sonos are building with Flutter.</p><p>We also collected thousands of raw comments about various topics in response to open-ended questions. We had at least three different workshops where engineers in the Flutter subteams gathered to read and digest comments about various topics, including ecosystem, developer tools, and so on. The ideas generated during the workshop will be used as input for the team’s goals for the coming quarters.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_m-0usdhsHPmeZ8U\" /><figcaption><em>Online post-it notes that the Flutter team used to generate and organize ideas about developer tools, based on the comments from the survey</em></figcaption></figure><p>There are things that community contributors can do too. We learned from the user comments that many Flutter developers still want to have higher-quality packages with better maintenance, even though they acknowledge that Flutter’s ecosystem has matured over time. There were a lot of mentions of multimedia packages (like audio and video players) and Bluetooth packages that need better support. We welcome you to contribute to those areas and expand the coverage, by, for example, submitting PRs to existing packages, as the Flutter team strives to provide high-quality, <a href=\"https://pub.dev/publishers/flutter.dev/packages\">first-party packages</a>.</p><h3>Cloud-based services and products</h3><p>The Flutter team knows that there is an interest for cloud services among some Flutter users, but the team didn’t have a good understanding of what types of cloud solutions users are looking for. Thanks to the survey, we learned that 40% of the developers use cloud-based services, and 27% plan to use one for their Flutter projects.</p><p>For those who are already using cloud-based services, the most popular cloud solution was Firebase (82%), followed by Google Cloud Platform (GCP) (34%), and Amazon Web Services (AWS) (25%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VLupMT920gd2acrw\" /></figure><p>Users said that they chose Firebase and GCP, because they were easy to use with Flutter. Many users who chose AWS and Azure said that it was because of existing familiarity.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*d0IHqqnl0KoeLuT8\" /></figure><p>The Flutter team is working closely with Firebase and GCP. We will continue to support <a href=\"https://firebase.flutter.dev/\">FlutterFire plugins</a>, and the team is also working with the GCP team to make it easier to use with Flutter.</p><h3>What’s next?</h3><p>The Flutter UXR team will be running surveys every quarter. You’ll be able to find the announcement on <a href=\"https://flutter.dev/\">flutter.dev</a>, in the Flutter IDE plugin, or on Twitter @FlutterDev. You can also participate in other research by signing up for upcoming UX studies. Please continue contributing your thoughts as the team seeks answers to important questions.</p><p>Again, thank you to everyone who participated in this survey and provided valuable feedback. We read every piece of feedback and take it to heart. Our goal is to build a product that you love, and we appreciate your time and effort helping us!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=563e61fc68c9\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/which-factors-affected-users-decisions-to-adopt-flutter-q1-2021-user-survey-results-563e61fc68c9\">Which factors affected users’ decisions to adopt Flutter? — Q1 2021 user survey results</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-07-28T17:34:30.000Z":{"title":"Adding Flutter to your existing iOS and Android codebases","link":"https://medium.com/flutter/adding-flutter-to-your-existing-ios-and-android-codebases-3e2c5a4797c1?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/3e2c5a4797c1","category":["ios-app-development","android-app-development","flutter-app-development","flutter"],"dc:creator":"Paul Ruiz","pubDate":"Wed, 28 Jul 2021 17:34:30 GMT","atom:updated":"2021-07-28T17:34:29.945Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xYlql5GqpIvedZvkJxGcaA.png\" /></figure><p>Whether you’re working for a small agency that creates mobile apps for an assortment of clients, or you’re developing for a massive corporation with hundreds of internal applications, supporting multiple codebases can be difficult and expensive (if it’s done at all). One scenario we have seen surprisingly often is that some companies have dozens, if not hundreds, of apps written for one major mobile platform, but nothing for the other. This leaves a lot of their users, often employees, unable to do the same tasks as efficiently as others, which can potentially lead to lost value.</p><p>One tool that can help solve these problems is Flutter, a UI framework that can support multiple platforms from a single codebase. While in a perfect world you would be able to create your apps from scratch using Flutter, that plan generally isn’t going to work out when a company has already put time and money into developing an app for one, if not more, platforms.</p><p>In this tutorial, we’re going to take a look at a more pragmatic approach to converting your existing iOS or Android apps to Flutter methodically over time by learning about a feature called <strong><em>add-to-app</em></strong>. While this feature doesn’t immediately provide you with a full-fledged Flutter app, it does allow you to maintain feature parity and stability with your current codebase during the process, rather than requiring a full refactor that could be filled with unexpected issues and ‘gotchas.’</p><p>As we move through this tutorial we start with a simple base-case app, similar to what you’d expect from a “<a href=\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\">Hello World</a>” example, for both iOS and Android rather than adding the complexity of an already existing real-world application. Afterwards we will create the infrastructure necessary to add new views (written in Flutter) for each platform. When implementing add-to-app, the expectation is that you already have some experience with Flutter, but this tutorial attempts to keep things as simple as possible in order to focus on how to add Flutter to a non-Flutter app. In this way, you end up having the necessary vocabulary and know where to look when you are ready to try it yourself.</p><p>With that, let’s get started!</p><h3>Flutter setup</h3><p>If you haven’t already installed the Flutter SDK on your computer, now is a great time to do that. Go ahead and follow <a href=\"https://flutter.dev/docs/get-started/install\">this link to find instructions</a> for setting up your machine. I’ll wait here for you :) If you’d rather read ahead without following along, that’s also perfectly fine.</p><p>…</p><p>All set? Great!</p><p>So the first step in adding Flutter to an existing app is, unsurprisingly, creating a Flutter component to add to the app. From a command line interface, navigate to a directory where you would like to save your Flutter module and run the following command with the Flutter CLI tool:</p><pre>flutter create --template module add_to_app_flutter_module</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*99QwoGv8y0bLsB7rzal4Uw.png\" /></figure><p>This creates and places a base Flutter application in a new directory named add_to_app_flutter_module, though you should feel free to name your module whatever you want — this tutorial assumes that you’re using the add_to_app_flutter_module name.</p><h3>iOS setup</h3><p>Typically, you already have an existing iOS or Android app in place when implementing the add-to-app feature. For this tutorial, you’ll create new apps from scratch in order to focus on the implementation fundamentals. You’ll start by creating a brand new iOS app from Xcode. If you’re not using a Mac computer or developing for iOS, feel free to jump ahead to the Android section or continue reading to learn about this process. I’ll only be a little disappointed that you didn’t read everything. Launch Xcode. When presented with the first options screen, select <strong>App</strong> and click <strong>Next</strong>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*71k72zGf7k8gwQhoapobIQ.png\" /></figure><p>On the next screen, fill in the text fields as appropriate. For this tutorial, use the <strong>Storyboard</strong> interface, <strong>Swift</strong> for the language, and <strong>UIKit App Delegate</strong> for the life cycle.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Q8oBiSt7DNywtG0z0PXm_A.png\" /></figure><p>At this point, you should be prompted to create a new directory somewhere on your computer and able to place your app into it. For this tutorial, save the new iOS project folder within the same parent directory as the Flutter module you created earlier. Once that directory is created, you end up in the Xcode project screen with a folder structure similar to this one:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/508/1*WDZwukEh-RHLPByOtEn6Bg.png\" /></figure><p>Returning to the command line, navigate into the new iOS project directory that you created in the last step and initialize CocoaPods using the following command:</p><pre>pod init</pre><p>After the Podfile is initialized, open it from the CLI and replace its contents with the following (remember to change the target name from <em>Add-to-App</em> to reflect your own app name, and the flutter_application_path to match your Flutter module’s path if you’re using different values):</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5a3461edaa403dc928c4cc82259191f9/href\">https://medium.com/media/5a3461edaa403dc928c4cc82259191f9/href</a></iframe><p>Once the Podfile is updated, save the file and run the following command to link the Flutter module to the new iOS project:</p><pre>pod install</pre><h3>Opening a default Flutter page from an iOS app</h3><p>Now that the Flutter module and iOS project are linked, it’s time to learn how to navigate from an iOS ViewController to a Flutter page within the mobile app. Start by opening up the <strong>AppDelegate.swift</strong> file and setting the class to extend FlutterAppDelegate instead of the default UIAppDelegate. You also want to define a new FlutterEngine object, which is a container for the Flutter environment that is used to bridge the native iOS app and the Flutter class:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/082ee51f20cde17d84bdabc40d484792/href\">https://medium.com/media/082ee51f20cde17d84bdabc40d484792/href</a></iframe><p>To finish the simpleFlutterAppDelegate class, create a new application function that registers the FlutterEngine when launching the iOS app:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/75beb3aab5497d5f35bc23c6284adbbe/href\">https://medium.com/media/75beb3aab5497d5f35bc23c6284adbbe/href</a></iframe><p>That’s all you need to do in the AppDelegate class (for now!). To launch the default Flutter screen, go to the project’s <strong>ViewController.swift</strong> file (though you could use any ViewController in a more fleshed-out app). Add a new function named showFlutter() that retrieves the FlutterEngine and creates a new FlutterViewController object using the default Flutter entry point before displaying it:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/aff84a5ae1f84bdc33e6a88d81122536/href\">https://medium.com/media/aff84a5ae1f84bdc33e6a88d81122536/href</a></iframe><p>Next, you need a way to call that function. For simplicity’s sake, define a button on the screen directly in the Swift code, though you can use any other navigation schema or technique that suits you. For this tutorial, create a new UIButton that’s centered in the middle of the screen, assign the new showFlutter() function to the button’s action, and then attach it to the view, all from the viewDidLoad() lifecycle function:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/35769c462b2a1e0e52ca3c32abf186e7/href\">https://medium.com/media/35769c462b2a1e0e52ca3c32abf186e7/href</a></iframe><p>Try running the app now. If everything turned out as expected (fingers crossed!), then you should be able to launch your iOS app, click on the <em>Show Flutter! </em>button, and watch a new Flutter screen pop up:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/368/1*o4tMnqTbK73cRpJ8m4bhIw.gif\" /></figure><h3>Android setup</h3><p>Now that you have the iOS/Flutter combination working, it’s time to try setting up an Android app. Just like you did with the iOS project, create a new Android project and select the <strong>Basic Activity</strong> template on the first screen.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5lDz6tLm4M0LHZaF8GUYHA.png\" /></figure><p>On the next screen, fill in appropriate information for the name and package name. To keep everything similar to the iOS version of this sample, save your project under the same parent directory as the Flutter module and iOS app. You also want to make sure to set the project’s language to Kotlin for this walkthrough, though the same add-to-app logic holds for Android apps written in Java. When you’re ready, click the blue <strong>Finish</strong> button.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DMCxqTeZpSD5-b1RJY_pig.png\" /></figure><p>Now that you have a base Android project, add the Flutter module that you created earlier. You do this by going to <strong>File -&gt; New -&gt; New Module…</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qZQDQmS47Pqvza3UucvEVA.png\" /></figure><p>From there, go to the <strong>Import Flutter Module</strong> option at the bottom of the new window and add the Flutter module location before clicking on the blue <strong>Finish</strong> button.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XeyFOIlwbKa8cOqlb3j4Cw.png\" /></figure><p>Next, open the <strong>settings.gradle</strong> file and replace its content with the following:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b234a9dd19a3a3a9cfdf73b8a08d3a1a/href\">https://medium.com/media/b234a9dd19a3a3a9cfdf73b8a08d3a1a/href</a></iframe><p>The primary parts that matter here are the binding and adding the <strong>include_flutter.groovy </strong>file to the project. After that’s done, go to the project-level <strong>build.gradle</strong> file (located in the root level directory of your Android project) to add an allprojects block so you can compile the app (this may not be required later, but it’s an issue I ran into with Android Studio Arctic Fox, so I’m writing it here in case it helps someone :))</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5914fe5f6223aad361019c4eeec5ae27/href\">https://medium.com/media/5914fe5f6223aad361019c4eeec5ae27/href</a></iframe><p>Finally, open the <em>app-level</em> <strong>build.gradle</strong> file (located under the <em>/your_project_name/app</em> directory) and add one line to the dependencies node to include the Flutter module as a source in the Android project:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d5ea9e3d6281390e59a2431bb364dcbd/href\">https://medium.com/media/d5ea9e3d6281390e59a2431bb364dcbd/href</a></iframe><p>At this point, the Android app should compile and build, plus you’ll see the Flutter module in the IDE</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*AbRB1VZYePJoXMk0sHN05A.png\" /></figure><h3>Opening a default Flutter page from an Android app</h3><p>Now that the setup process for your Android app is done, you need to prepare to launch the app with the new Flutter component. Luckily, this is relatively easy now that the setup is done. Start by opening the <strong>AndroidManifest.xml</strong> file. Flutter add-to-app uses a custom FlutterActivity to display the Flutter content in Android, so you need to make sure to declareFlutterActivity in the manifest by adding the following block within the application tag:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/864ed107bf4cbdad1166e7d63c3d1f52/href\">https://medium.com/media/864ed107bf4cbdad1166e7d63c3d1f52/href</a></iframe><p>Next, open the <strong>MainActivity.kt</strong> file and replace the Snackbar that gets shown by the app’s FloatingActionButton with the following code to launch the new FlutterActivity.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5a3193658ee9998aab444caf583044c2/href\">https://medium.com/media/5a3193658ee9998aab444caf583044c2/href</a></iframe><p>Now when you click on the FloatingActionButton you should see the Flutter page pop up directly in your app!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/346/1*0F312mW_EgR9554m6gcxWA.gif\" /></figure><p>In addition to being able to launch a full Activity screen, similar to what you’ve already done in iOS, Android has the added benefit of being able to launch Flutter components as a part of a Fragment or a custom View. While those two techniques are out of the scope for this tutorial, you can find out how to use a <a href=\"https://flutter.dev/docs/development/add-to-app/android/add-flutter-fragment\">FlutterFragment</a> and <a href=\"https://flutter.dev/docs/development/add-to-app/android/add-flutter-view\">FlutterView</a> in the official documentation.</p><h3>Opening additional Flutter screens</h3><p>While it’s great that you can open a Flutter screen directly from a native iOS or Android app, it <em>doesn’t really do as much as you may want,</em> considering the whole idea behind using add-to-app was that you could slowly implement a variety of features in Flutter. To pull that off, you most likely need multiple entry points and various Flutter components. Fortunately there is a way to create multiple Flutter instances within a native app, though it’s worth noting that this functionality is <em>experimental</em> at the time of this writing. While there’s a good chance surface level things will stay the same, there’s also a chance that syntax or other details may change later.</p><p>Start by updating the code in the Flutter module to support a second screen by opening <strong>main.dart</strong> from of the <em>flutter module/lib</em> directory. In main.dart, declare your first new entry point by adding the following lines just under the declaration for main(). Note that this code snippet includes an annotation designating this method as a new entry point within your app.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ea233ca8e7a30717c2a1248b04c7cfa6/href\">https://medium.com/media/ea233ca8e7a30717c2a1248b04c7cfa6/href</a></iframe><p>MySecondAppScreen simply returns a new MaterialApp with a green theme and a new title so you can distinguish it from the main() entry point:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7e4a43f565b3dadadce2db9650a468e1/href\">https://medium.com/media/7e4a43f565b3dadadce2db9650a468e1/href</a></iframe><p>Next, you might notice that you need to create another code block for MySecondaryHomePage. This is a new StatefulWidget that contains a State object for the Flutter screen:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e0075e4379e9a1ae2110c4b48a01a8f7/href\">https://medium.com/media/e0075e4379e9a1ae2110c4b48a01a8f7/href</a></iframe><p>Finally, create the new State object. For this example, the widget displays an AppBar and a Text widget:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9df09644bdde328255366934c93b848f/href\">https://medium.com/media/9df09644bdde328255366934c93b848f/href</a></iframe><p>You now have two separate Flutter screens to launch from your native app. Next, you’ll implement the new screen in your existing Android demo app.</p><h3>Multiple Flutter entry points in Android</h3><p>This expanded add-to-app feature works by creating multiple instances of the FlutterEngine class (the same tool used for displaying the single default Flutter screen) and storing them in a FlutterEngineGroup, then calling the appropriate engine when necessary. First, create a new Application class that initializes the FlutterEngineGroup:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1874717ba2d4d487f0c27f54b85f4501/href\">https://medium.com/media/1874717ba2d4d487f0c27f54b85f4501/href</a></iframe><p>Next, create a helper class, in this case named EngineBindings, that takes the entry point’s name and lazily loads it into the FlutterEngineGroup so it can be displayed within your native application. This is loaded lazily because you want to make sure that the application has had a chance to fully load before it starts creating the FlutterEngines, otherwise you can run into an unexpected (and frustrating to debug) race condition.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c66a7cc80c0923aa8795ba0a71e9c840/href\">https://medium.com/media/c66a7cc80c0923aa8795ba0a71e9c840/href</a></iframe><p>The last class you need to add extends theFlutterActivity that you used in the previous Android section. Create a new Kotlin class file named <strong>SingleFlutterActivity.kt</strong> that extends FlutterActivity:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/49cef27d6145fd5c45d09e4c965b9f0c/href\">https://medium.com/media/49cef27d6145fd5c45d09e4c965b9f0c/href</a></iframe><p>In this file, initialize the EngineBindings by passing in the new entry point name (<strong>“<em>secondary”, </em></strong>in this case) to match the name of the entry point you added in the Dart file, and write a helper method for retrieving the appropriate engine:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f3ed277ea9b2a5672d65e32376ef34f0/href\">https://medium.com/media/f3ed277ea9b2a5672d65e32376ef34f0/href</a></iframe><p>To complete theFlutterActivity, use the newly created engine to display the Flutter screen from onCreate().</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f3df93438410f99b3fd8683543a1c5c3/href\">https://medium.com/media/f3df93438410f99b3fd8683543a1c5c3/href</a></iframe><p>Next, you just need to do a few more things to finish this demo application. Returning to MainActivity, go to the FloatingActionButton that was originally used to launch the main Flutter screen, and change the Intent so it launches the new SingleFlutterActivity class.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c3fb86b678c665b5a4a21167a1f286c1/href\">https://medium.com/media/c3fb86b678c665b5a4a21167a1f286c1/href</a></iframe><p>Finally, open <strong>AndroidManifest.xml</strong> and associate the new Application class with the application tag, and add an activity tag for SingleFlutterActivity.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3166253a1f8d7ac490935790f60d64c4/href\">https://medium.com/media/3166253a1f8d7ac490935790f60d64c4/href</a></iframe><p>You should now be able to run the app, click on the FloatingActionButton, and see the new screen rather than the default Flutter widget:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/346/1*jQUUrVeSYGvjM4zgrt-zNg.gif\" /></figure><h3>Multiple Flutter entry points in iOS</h3><p>Are you still with me? Great!</p><p>Next, you’ll add support for multiple entry points in the iOS demo app. Going back into Xcode, open the AppDelegate class and replace all of the code with this simplified version that creates a single FlutterEngineGroup that can be accessed throughout the app:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8271345d88a1e2b9fe910b9e58f914a5/href\">https://medium.com/media/8271345d88a1e2b9fe910b9e58f914a5/href</a></iframe><p>Similar to what you did in the Android app, create a new file named <strong>SingleFlutterViewController.swift</strong> that extends the standard FlutterViewController. This class accepts a String with the name of the entry point you want to use, and then creates and displays a new FlutterEngine:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ddd4e938cb47b74729e137fb47ba32a1/href\">https://medium.com/media/ddd4e938cb47b74729e137fb47ba32a1/href</a></iframe><p>Finally, return to the base ViewController class and update the showFlutter() function so that it brings up the new SingleFlutterViewController class with a specified entry point:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2b3785e8faaeaa2b01befb697584c893/href\">https://medium.com/media/2b3785e8faaeaa2b01befb697584c893/href</a></iframe><p>After you’ve finished updating the code, update the Podfile to use the latest version of the Flutter module since you added the new entry point and screen code to <strong>main.dart</strong>. Once complete, you should be able to build and run your iOS app to see your native code switch to your new Flutter component.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/412/1*scdrE_wYehIvimaJhOUklQ.gif\" /></figure><h3>Summary</h3><p>Hey, you made it! Congratulations!</p><p>In this tutorial, you looked at how you can iteratively add Flutter to your existing Android and iOS apps in order to create a unified and more easily maintained code base. You’ve seen how you can add Flutter from a single entry point on both platforms, as well as how you can create multiple entry points. If you’re interested in learning more, I’ve included a link below to Flutter’s official documentation page that gives you more of the nitty-gritty details around add-to-app, as well as a link discussing <strong><em>Platform Channels</em></strong>, which allow you to communicate back and forth between your Flutter and native level code. Finally, check out the links that discuss plugins and how you can write your own to make developing for multiple platforms with Flutter even easier for you and the developer community.</p><p>We’re looking forward to seeing your cross-platform apps in action!</p><ul><li><a href=\"https://flutter.dev/docs/development/add-to-app\">Add Flutter to existing app</a></li><li><a href=\"https://flutter.dev/docs/development/platform-integration/platform-channels\">Writing custom platform-specific code</a></li><li><a href=\"https://flutter.dev/docs/development/packages-and-plugins/using-packages\">Using packages</a></li><li><a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages\">Developing packages &amp; plugins</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3e2c5a4797c1\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/adding-flutter-to-your-existing-ios-and-android-codebases-3e2c5a4797c1\">Adding Flutter to your existing iOS and Android codebases</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-06-29T08:15:08.000Z":{"title":"Google I/O spotlight: Flutter in action at ByteDance","link":"https://medium.com/flutter/google-i-o-spotlight-flutter-in-action-at-bytedance-c22f4b6dc9ef?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/c22f4b6dc9ef","category":["flutter","flutter-app-development","bytedance"],"dc:creator":"Shams Zakhour","pubDate":"Tue, 29 Jun 2021 08:15:08 GMT","atom:updated":"2021-06-29T08:15:07.954Z","content:encoded":"<p><em>Note: This article, originally written in Chinese by the ByteDance team, has been translated to English.</em></p><p>Flutter, a technology that <a href=\"https://www.bytedance.com/en/\">ByteDance</a> has been using and contributing to for some years now, was recently highlighted on the main stage of Google I/O. Developed and open sourced by Google, the multi-platform framework for front end UI development, has garnered over 120,000 stars on GitHub.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*s0fEzRKPUlPITzxE\" /><figcaption>At Google I/O, Zoey Fan, one of Flutter’s product managers, talked about how the framework was adopted at ByteDance.</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*V8DV37bsn0UNXkvE\" /><figcaption>More than 70 apps by ByteDance use Flutter as their multi-platform solution.</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jfsCt8xhuizJO7uf\" /><figcaption>Flutter has reduced development time by 33%, as compared to developing separate apps for Android and iOS.</figcaption></figure><p>Today, there are more than 500 Flutter developers at ByteDance, and more than 200 of those are actively developing with Flutter. The developers use Flutter not only for mobile apps, but are also experimenting with it on web, desktop, and embedded platforms.</p><p>Beyond this, ByteDance fundamental work across the organization and has made major contributions to the Flutter project by submitting dozens of pull requests (PRs).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/928/0*84RzNeoAVCQu3shZ\" /></figure><h3>What has ByteDance done to make Flutter really work for them?</h3><p>The story of Flutter at ByteDance started 2 years ago.</p><p>At the time, the ByteDance front end engineering team noticed that many teams within the company needed to develop for multiple platforms, but they lacked a tool to achieve high-efficiency, high-performance, multi-platform development.</p><p>When Google open sourced Flutter, the ByteDance team discovered that with Flutter they only needed to develop the app once to support platforms such as Android, iOS, and web. Also, because Flutter has its own rendering engine, they could achieve more consistent performance across platforms.</p><p>With Flutter the Android, iOS, and web versions of an app automatically stay in sync. There is no need to design and program the UI separately for each platform, so a significant portion of redundant work is eliminated.</p><p>To support business development more efficiently, the ByteDance team performed fundamental work on the framework itself, such as optimizing performance, creating app frameworks, containerizing, and supporting add to app. They also improved Flutter performance tools including improvements to the Frames Per Second (FPS) info in the <a href=\"https://flutter.dev/docs/development/tools/devtools/performance#flutter-frames-chart\">Frame chart</a>, and to the <a href=\"https://flutter.dev/docs/development/tools/devtools/performance#timeline-events-chart\">timeline events chart</a>. Both of these charts are part of the <a href=\"https://flutter.dev/docs/development/tools/devtools/performance\">Performance View</a> in <a href=\"https://flutter.dev/docs/development/tools/devtools/overview\">Flutter DevTools</a>.</p><p>When adopting Flutter, the ByteDance team encountered some unique challenges. For example, Flutter must be added to the app installation package increasing the size of the app downloaded by the users. Additionally, Flutter uses the Dart programming language, which is larger in size than native code, further increasing the package size.</p><p>The ByteDance team started a special plan to optimize the package size by compressing the iOS data section, and stripping out the Skia library and other libraries (such as BoringSSL, ICU, text rendering, and libwebp). They analyzed Flutter Dart code against iOS native code and found that, to implement the same business feature, the Dart code generated more machine code instructions. To close the gap, they reduced alignment of instructions, removed debugging trap instructions, dropped redundant initialization of stores with null, removed RawInstruction headers with bare instructions mode, compressed StackMaps , removed CodeSourceMap, and so on.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*SHp5ZrnQvQ_bva8K\" /></figure><p>Individually, each of these optimizations reduced the package size by 0.2 to 4 MB, and significantly reduced the total package size when combined. The ByteDance team shared their experience with Google engineers, and many improvements made their way to the Flutter open source project for the benefit of the larger community.</p><p>However, when ByteDance released their first Flutter app, new issues emerged. Users asked: ‘Why is the UI so janky when I scroll in the app?’</p><p>When the ByteDance team looked into the issue, they saw that when a FlutterView extended a TextureView, the UI was noticeably jankier than when it extended SurfaceView. However, in the official <a href=\"https://flutter.dev/docs/development/tools/devtools/performance#timeline-events-chart\">Timeline</a> tool, the UI thread time and GPU thread time for each rendered frame are about the same, with TextureView pulling a bit ahead occasionally.</p><p>The metrics contradicted the real-world user experience, which puzzled the team.</p><p>At first, the team used the <a href=\"https://flutter.dev/docs/development/tools/devtools/performance#timeline-events-chart\">Timeline</a> tool to troubleshoot the issue, to no avail. After digging into the tool’s source code, they discovered the root cause of the issue.</p><p>SurfaceView had better performance than TextureView. Because SurfaceView had its own surface, and rendering was performed in its own OpenGL context, it could interact with SurfaceFlinger independently, and took full advantage of triple-buffering. On the other hand, TextureView was a regular view that depended on the surface of its host window for rendering. That meant the rendering wasn’t performed immediately after the UI and GPU threads had finished their work, but needed to wait for the native main thread and renderThread before the view could interact with SurfaceFlinger. That was a much longer rendering pipeline than that of SurfaceView.</p><p>These findings not only helped the team eliminate the jank, but resulted in 10 PRs being submitted to the Flutter open source project. With this fundamental work done, Flutter eventually became the go-to framework for multi-platform app development at ByteDance. Soon, the ByteDance team’s work with Flutter will be available to external developers using their mobile development framework, <a href=\"https://www.volcengine.com/product/vemars\">veMARS</a>, benefiting the entire developer community.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/928/0*3xKb80lXnsfJg3pP\" /></figure><h3>From experiment to production, this is how ByteDance put Flutter into use</h3><p>It wasn’t exactly smooth sailing for ByteDance to put Flutter into real-world use.</p><p>At first, the ByteDance team chose a mature product and planned to re-implement the app’s video playback feature with Flutter.</p><p>The feature, originally written in native code for Android and iOS, wasn’t straightforward to rewrite with Flutter. After 6 months, the team came to the conclusion that it would be difficult to make all the live data compatible, and challenging to update the existing business logic.</p><p>The team decided that it wasn’t productive to update the existing features of a mature product with the new framework. Flutter’s strengths would be better used in a brand new app. The team lead said, “In a mature product, everything is already well built with native Android or iOS technology. There isn’t much gain in re-implementing the features with Flutter only to make minor improvements. It also increases the package size since the Flutter engine is included in the package. In new products or new scenarios, however, Flutter can greatly increase our productivity.”</p><p>With this changed mindset, the team turned their focus to new business areas such as education.</p><p>One of their education apps in China helps students learn the order of strokes of Chinese characters; the team wanted to add a stroke tracking feature.</p><p>To implement it, the team took inspiration from some open source projects, and decided to use SVG paths to represent strokes. The paths would then be adjusted and positioned to compose the characters:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*eJK4geRY6r6kvPb-\" /></figure><p>They defined the skeleton of each stroke to guide the movement of the virtual brush pen, so the pen moves just like it would in calligraphy:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*KRHUVfNaxppJLr86\" /></figure><p>Based on the defined order of the skeletons, a circle with a certain radius is drawn along each skeleton, and together these circles form the stroke. After that, the team added key frames to ensure that the frame rate of the animation is high enough to avoid jank.</p><p>That is how they created the smooth tracking effect, as shown in the following GIF:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*WeR31rSBMqkRT6q_\" /></figure><p>The feature, built with Flutter, now supports more than 9,000 Chinese characters, including most of the commonly used characters. Compared to developing with native code, Flutter saved time and resources.</p><p>Today, many apps by ByteDance employ a hybrid approach to development, combining the strengths of Flutter and other technologies, with newer apps leaning toward pure Flutter. For apps such as Xigua Video, TikTok Volcano, and Open Language, Flutter increased the productivity of the teams by about 33%.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/928/0*h1swTfindfOd_uAB\" /></figure><h3>ByteDancers embrace the latest technology</h3><p>Even now, the Flutter team at ByteDance continues to explore the latest technologies. According to the team lead, “We have in our team many tech enthusiasts with global vision, and will continue to explore global technology developments and discuss the implementation of technology. We have close connections and collaborations with many tech companies. We have quarterly sync meetings with Google, for instance, to exchange progress, thoughts, needs, and ideas from both sides.”</p><p>One day, the maintainer of the Dart open source project on GitHub came to the ByteDance team lead with the following remarks, “Someone from your team submitted more than a dozen PRs to Dart and they’re all very good and well thought out.“</p><p>The Dart open source project maintainer was talking about Frank. Frank is a passionate open source contributor, and just got his bachelor’s degree 3 years ago. His journey in the open source world first started during his first year of university in 2015. One of the projects he created and open sourced on GitHub had over 700 stars. “It has had hundreds of downloads per year, and many game developers use it to create demos“, Frank said.</p><p>After graduation, Frank joined the Flutter team at ByteDance and became one of the most active open source contributors on the team, contributing a number of PRs to Dart and Flutter. Frank remembers that when he was working on the package size issues he proactively followed up on a relevant issue on the Dart GitHub project, and he noticed that the Specializer component could use some further tuning. He created a patch with his improvements to the Dart compiler middleware and submitted it to the project. The patch wasn’t accepted initially because of the large number of code blocks affected and a few minor concerns. He modified the patch seven times before it was accepted, and it was merged into the code base a week later.</p><p>There are many other open source enthusiasts like Frank in the Flutter team at ByteDance.</p><p>The ByteDance team summarized this passionate attitude toward innovation with the following words:</p><p>“There are indeed many people in the industry who prefer mature technology, but it takes time for every technology to mature, and there will always be people like us who love to stay on the cutting edge.”</p><p>This is especially true for something as novel as Flutter. There needs to be some daring people who take the first steps. At ByteDance, the Flutter engineering team, as well as the engineering teams that they support, actively try and embrace new technologies. Doing this benefited ByteDance tremendously and greatly increased our productivity.</p><p>ByteDance has always wanted to be part of things that could push the industry forward, and Flutter is likely to be one of those things.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c22f4b6dc9ef\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/google-i-o-spotlight-flutter-in-action-at-bytedance-c22f4b6dc9ef\">Google I/O spotlight: Flutter in action at ByteDance</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-06-14T18:00:28.000Z":{"title":"Improving Platform Channel Performance in Flutter","link":"https://medium.com/flutter/improving-platform-channel-performance-in-flutter-e5b4e5df04af?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/e5b4e5df04af","category":["dart","software-development","flutter-plugin","flutter"],"dc:creator":"Aaron Clarke","pubDate":"Mon, 14 Jun 2021 18:00:28 GMT","atom:updated":"2021-06-14T18:00:28.361Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0lyQIh8t-STSy1o2Yjj1tQ.png\" /></figure><p>Over the past couple of years, I’ve been interested in the problem of “How do we make communication between Flutter and its host platform faster and easier?” This is a question of particular interest to Flutter plugin developers and add-to-app developers.</p><p>Communication between Flutter and the host platform is typically done with <a href=\"https://flutter.dev/docs/development/platform-integration/platform-channels\">platform channels</a>, so my energy has been focused there. In late 2019, to remedy the amount of boilerplate and <a href=\"https://wiki.c2.com/?StringlyTyped\">stringly typed</a> code required to use platform channels, I designed a codegen package, <a href=\"https://pub.dev/packages/pigeon\">Pigeon</a>, that makes platform channels type-safe, and the team continues to improve it. In spring 2020, I performed an <a href=\"https://docs.google.com/document/d/1bD_tiN987fWEPtw7tjXHzqZVg_g9H95IS32Cm609VZ8/edit\">audit of platform channel and foreign function interface (FFI) performance</a>. Now, I’ve set my sights on <a href=\"https://docs.google.com/document/d/1oNLxJr_ZqjENVhF94-PqxsGPx0qGXx-pRJxXL6LSagc/edit?usp=sharing\">improving the performance</a> of platform channels. Because Pigeon is built on top of platform channels, and I plan to build a <a href=\"http://flutter.dev/go/data-sync\">data synchronization solution</a> for multiple Flutter instances on top of Pigeon, this is a good opportunity to help with the many different needs of developers and with my initiatives.</p><p>After some investigation, I was able to identify superfluous copies of the data being sent over platform channels and was able to remove them. Below you’ll find the results of that change and an overview of the work that lead to identifying and removing the copies.</p><h3>Results</h3><p>After removing the superfluous copies when sending 1 MB of binary data from Flutter to the host platform with a 1 MB response, we saw an approximately <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1620764044&amp;end=1621044607&amp;queries=sub_result%3Dplatform_channel_basic_binary_2host_1MB%26test%3Dmac_ios_platform_channels_benchmarks_ios&amp;requestType=0\">42% increase in performance on iOS</a>. On Android, the results were a bit more nuanced. Our automated performance tests <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1621972627&amp;end=1622677144&amp;queries=sub_result%3Dplatform_channel_basic_binary_2host_1MB%26test%3Dlinux_platform_channels_benchmarks&amp;requestType=0\">improved approximately 15%</a> while local testing saw an approximately <a href=\"https://github.com/flutter/engine/pull/26331#issuecomment-854071096\">52% increase</a> when migrating to the new <a href=\"https://github.com/flutter/engine/blob/b3ebb6dd62cefe3c30a7bd15ed73c578030140e2/shell/platform/android/io/flutter/plugin/common/BinaryCodec.java#L27\">BinaryCodec.INSTANCE_DIRECT</a> codec. This discrepancy might be because the automated performance tests are running on an older device, but the discrepancy could be an artifact of how the microbenchmarks, in particular, perform on an older device (for example, hammering the garbage collector). You can find the automated performance test’s source code at <a href=\"https://github.com/flutter/flutter/blob/00bfe9061369bb6fdfe4a74fb27086b77df107bf/dev/benchmarks/platform_channels_benchmarks/lib/main.dart#L165\">platform_channels_benchmarks/lib/main.dart</a>.</p><p>For platform channels that use the StandardMessageCodec, I saw less of a performance gain (approximately <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1620764044&amp;end=1621044607&amp;queries=sub_result%3Dplatform_channel_basic_standard_2host_large%26test%3Dmac_ios_platform_channels_benchmarks_ios&amp;requestType=0\">5% with a 14k payload</a>). I tested it with a large array of supported types to stress test the encoding and decoding. What I found was that the encoding and decoding time of MessageCodecs dwarfed the time spent copying the messages between platforms. Most of this encoding time is because of the cost of recursing through a data structure and using reflection to figure out what its contents are.</p><p>So, your mileage might vary depending on how you use platform channels and your device. If you want the fastest communication with platform channels, then you should use BasicMessageChannels with the <a href=\"https://github.com/flutter/engine/blob/b3ebb6dd62cefe3c30a7bd15ed73c578030140e2/shell/platform/darwin/common/framework/Headers/FlutterCodecs.h#L52\">FlutterBinaryCodec</a> on iOS and <a href=\"https://github.com/flutter/engine/blob/b3ebb6dd62cefe3c30a7bd15ed73c578030140e2/shell/platform/android/io/flutter/plugin/common/BinaryCodec.java#L27\">BinaryCodec.INSTANCE_DIRECT</a> on Android, and develop your own protocol for encoding and decoding messages that doesn’t rely on reflection. (Implementing a new MessageCodec might be cleaner.)</p><p>If you want to play with the new faster platform channels, they’re now available on the <a href=\"https://flutter.dev/docs/development/tools/sdk/upgrading#switching-flutter-channels\"><em>master</em> channel</a>.</p><h3>Copy removal in detail</h3><p>If you aren’t interested in a deep dive of how I achieved these results, and the issues I had to overcome, stop reading now. If you enjoy understanding the details, read on.</p><p>The platform channels API hasn’t changed much since 2017. Because the platform channels are fundamental to engine and plugin operation, they aren’t easy to change. While I had a general idea about how platform channels operate, they are somewhat intricate. So, the first step to improving their performance was to understand exactly what they do.</p><p>The following diagram outlines the original process the framework followed when a platform channel was used to communicate with iOS from Flutter:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1002/0*2fUEEmUdocImYO4x\" /></figure><p>Some takeaways from the diagram:</p><ul><li>The message hops from the UI thread to the platform thread and back to the UI thread. (In Flutter engine parlance, the UI thread is where Dart is executed, and the platform thread is the main thread of the host platform.)</li><li>The message and its response use C++ as the intermediate layer for communicating between Flutter and the host platform’s target language.</li><li>The message’s information was copied 4 times before reaching the Objective-C (Obj-C) handler (steps 3, 5, 7, 8). Steps 3 and 8 perform a translation, while steps 5 and 8 perform a copy, to transfer ownership of the data to a new memory layout. The same process is repeated in reverse for the reply.</li><li>Steps 1, 9, and 16 are code written by developer who use Flutter.</li></ul><p>Sending a message from Flutter to Java/Kotlin is similar, except there is a Java Native Interface (JNI) layer between C++ and the Java Virtual Machine (JVM).</p><p>After having established how platform channels work, it became clear that eliminating the copies made when transferring data between these layers (such as from C++ to Obj-C) is an obvious method to improve performance. To achieve this, the Flutter engine would have to place the data in memory in a way that is directly accessible from Java/Obj-C and has memory management semantics which are compatible with the host platform.</p><p>The platform channel messages are ultimately consumed by the decodeMessage method of the host platform’s MessageCodec. On Android, that means a <a href=\"https://github.com/flutter/engine/blob/58459a5e342f84c755919f2ad5029b22bcddd548/shell/platform/android/io/flutter/plugin/common/MessageCodec.java#L38\">ByteBuffer</a>, and on iOS, that means <a href=\"https://github.com/flutter/engine/blob/58459a5e342f84c755919f2ad5029b22bcddd548/shell/platform/darwin/common/framework/Headers/FlutterCodecs.h#L38\">NSData</a>. The data in C++ needs to conform to those interfaces. When approaching this problem, I discovered that the information of the message resided in C++ memory as a <a href=\"https://github.com/flutter/engine/blob/70ebfc3610c38c463469ffedea85578f35ccc0a0/lib/ui/window/platform_message.h#L39\">std::vector</a> inside a PlatformMessage object that was maintained by a <a href=\"https://en.wikipedia.org/wiki/Smart_pointer\">shared pointer</a>. This means that developers couldn’t safely remove the copy when sending the data from C++ to the host platform because they didn’t have a guarantee that the data wouldn’t be mutated by C++ after it was handed over to the host platform. Furthermore, I had to be careful because the BinaryCodec implementations treated encodeMessage and decodeMessage as a no-op, which could lead to code using BinaryCodec unwittingly receiving a direct ByteBuffer. While it’s unlikely that someone would be surprised by changes to MessageCodec, rarely does anyone implement their own codec. Using BinaryCodecs, on the other hand, is very common.</p><p>After reading through the code, I discovered that, while the PlatformMessage was managed by a shared pointer, it was semantically a unique pointer. The intent was that only one client had access to it at a time (that wasn’t quite the case because momentarily multiple copies existed when passing the PlatformMessage between threads, but that was just for convenience and not actually intended). That meant we could migrate from shared pointers to unique pointers, allowing us to pass the data to the host platform safely.</p><p>After <a href=\"https://github.com/flutter/engine/commit/7424400f07be684bd87633bbe2d263821181345a#diff-d5a1c9b29bed0d80dc68f228550643925a216e65173364e1ae5a03067b60160d\">migrating to unique pointers</a>, I had to find a way to pass ownership of the information from C++ to Obj-C. (I implemented Obj-C first, and I’ll discuss Java in more detail later.) The information was stored in an std::vector which has no way to release ownership of the underlying buffer. Your only options are to copy out the data, provide an adapter that has the std::vector, or eliminate the use of the std::vector.</p><p>My first attempt was to subclass NSData that would std::move the std::vector and read its data from there, thus eliminating the copy. This attempt didn’t work well because it turns out that NSData is a <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html\">class cluster</a> in <a href=\"https://developer.apple.com/documentation/foundation?language=objc\">Foundation</a>. That means you can’t just subclass NSData. After reading through many of Apple’s documents, it appears that their recommendation is to use composition and message forwarding to make an object behave and look like an NSData. That would fool those who use the proxy object, except for those who call -[NSObject isKindOfClass:]. While that is unlikely, I couldn’t rule out the possibility. Although I think there might have been some fiddling with the Obj-C runtime that could have made the object behave the way I wanted, it was getting complicated. I instead opted to move the memory out of std::vector and into <a href=\"https://github.com/flutter/engine/commit/b0bb8eab1d2f7e58230298c28a28ddfeddedeb64#diff-d5a1c9b29bed0d80dc68f228550643925a216e65173364e1ae5a03067b60160d\">our own buffer class</a> that allows releasing ownership of the data. That way, I could use -[NSData dataWithBytesNoCopy:length:] to transfer ownership of the data to Obj-C.</p><p>Duplicating this process on Android proved a bit more difficult. On Android, platform channels conform to ByteBuffer that has the concept of <a href=\"https://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html\">direct </a><a href=\"https://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html\">ByteBuffers</a>, which allow Java code to interface directly with memory that is laid out in C/C++ style. In a short time, I implemented the move to direct ByteBuffers, but I didn’t see the improvement that I expected. I spent a lot of time learning Android profiling tools, and I eventually opted for trace statements when those failed or returned things I couldn’t believe. It turned out that scheduling the reply to the platform channel message on the UI thread from the platform thread was massively slow, and it seemed to be slow in such a way that the slowdown scaled with the payload of the message. Long story short, I was compiling the Dart VM with the incorrect compilation flags, thinking — no-optimization meant no <a href=\"https://en.wikipedia.org/wiki/Interprocedural_optimization\">link-time optimization</a>, but the flag was actually for runtime optimization.</p><p>In my excitement at having found my blunder, I forgot about the ramifications of using a direct ByteBuffer when sending the data into Flutter client code, specifically through custom MessageCodecs or clients of BinaryCodec. Sending a direct ByteBuffer means you have a Java object that is communicating with C/C++ memory, so if you delete the C/C++ memory, then Java interacts with random garbage and will probably crash with an access violation from the operating system.</p><p>Following the example of iOS, I attempted to pass ownership of the C/C++ memory to Java, such that it deletes the C/C++ memory when the Java object is garbage collected. It turns out that doing this isn’t possible when the direct ByteBuffer is created from the JNI through <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#NewDirectByteBuffer\">NewDirectByteBuffer</a>. JNI provides no hook to know when a Java object is deleted. You can’t subclass ByteBuffer so that it calls the JNI when it’s finalized. The only hope would be to allocate the direct ByteBuffer from the Java API at step 5 in the preceding diagram. Direct ByteBuffers that are allocated through Java don’t have this limitation. Introducing a new entry-point into Java however would have been a massive change, and anyone who has worked with JNI knows that it’s perilous.</p><p>Instead, I opted to petition the team to accept direct ByteBuffers in decodeMessage calls. At first, I introduced a new method to MessageCodec<em>,</em> bool wantsDirectByteBufferForDecoding(), to make sure no one got a direct ByteBuffer unless they asked for it and knew the semantics of them (that is, when the underlying C/C++ memory is still valid). That proved to be complicated, and the worry was that developers might still subscribe and not know the semantics of the direct ByteBuffers because they operate contrary to typical ByteBuffers, and might have had their C memory backing deleted underneath them. Storing the encoded buffers was atypical usage on top of unlikely usage, but the team couldn’t rule it out. After many discussions and negotiations, we decided that every MessageCodec gets a direct ByteBuffer that is cleared out after decodeMessage is called. That way, if someone caches encoded messages, then they’ll get a deterministic and apropos error in Java if they try to use the ByteBuffer after the underlying C memory is cleaned up.</p><p>Giving everyone access to the performance gains of direct ByteBuffers worked great, but was a breaking change to BinaryCodec whose encodeMessage and decodeMessage implementations are no-ops, they just forward their input as their return value. To keep the same memory semantics for BinaryCodec, I introduced a <a href=\"https://github.com/flutter/engine/blob/01d1ed459a313f19e2e01cf8d62331d19b907637/shell/platform/android/io/flutter/plugin/common/BinaryCodec.java#L29\">new instance variable</a> that controls whether the decoded message is a direct ByteBuffer (new, faster code) or a standard ByteBuffer (old, slower code). We couldn’t create a way to give the performance speed up to all clients of BinaryCodec.</p><h3>Future work</h3><p>Now that eliminating the copies is done, my next efforts to improve communication between Flutter and the host platform will be:</p><ol><li>Implement a custom MessageCodec for Pigeon that doesn’t rely on reflection for faster encoding and decoding.</li><li>Implement FFI platform channels that allow you to call from Dart to the host platform without hopping between the UI and the platform thread.</li></ol><p>I hope you enjoyed this deep dive into the details of this performance improvement!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e5b4e5df04af\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/improving-platform-channel-performance-in-flutter-e5b4e5df04af\">Improving Platform Channel Performance in Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-10-06T16:02:40.000Z":{"title":"Learn Flutter for free with Flutter Apprentice!","link":"https://medium.com/flutter/learn-flutter-for-free-with-flutter-apprentice-32ced5f97a12?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/32ced5f97a12","category":["announcements","learning-and-development","flutter","learning-to-code","learning"],"dc:creator":"Shams Zakhour","pubDate":"Wed, 06 Oct 2021 16:02:40 GMT","atom:updated":"2021-10-06T16:02:37.991Z","content:encoded":"<h4>A free book for learning Flutter, available for a time-limited period.</h4><figure><img alt=\"Screenshot of Flutter Apprentice cover\" src=\"https://cdn-images-1.medium.com/max/427/1*AvOHYfnMrCR81c4GltakzQ.png\" /></figure><p>We’ve heard from many folk that they want to learn Flutter, but don’t know where to start. So we have some great news for you — we’re giving away a free book for the next three months, along with a book club to help track your progress and answer questions.</p><p><em>Flutter Apprentice</em> is written to build on mobile development fundamentals. It takes you through your first fully-featured Flutter app, including designing a complex UI, as well as more advanced concepts such as persistence, state management, and cloud storage with Firebase. The book even covers publishing on both iOS and Android platforms.</p><p>Flutter Apprentice comes from <a href=\"https://www.raywenderlich.com/\">Razeware</a>, the team behind the raywenderlich.com books, videos and tutorials. The book normally costs $60 to purchase, but you’ll have free access to <em>Flutter Apprentice</em> from today, October 6, 2021 through January 6, 2022.</p><p>Flutter Apprentice is a practical book, with lots of examples to follow and code that you can put to use in your own apps. And it’s based on the very latest Flutter 2.5 release and the latest features in the Dart language. Whether you’re an experienced developer looking to deepen your understanding of Flutter’s more advanced features, or you’re new to app development and interested in adding Flutter to your front-end development toolkit, we think you’ll find plenty of useful content .</p><figure><img alt=\"Image of Professor Dash\" src=\"https://cdn-images-1.medium.com/max/503/1*n9wUoadF-zJLDqvZ09oXvw.png\" /></figure><p><strong>Learn Together</strong></p><p>We’re also excited to host the <a href=\"https://www.youtube.com/playlist?list=PL4dBIh1xps-HAaadBRWQobCO_IJ4gMOG2\"><em>Flutter Apprentice Book Club</em></a>, a weekly opportunity to hear live discussion and have your questions answered by the book’s authors and community experts. We’ll be partnering with Flutteristas and other prominent leaders in the Flutter community to host the book club. Join us each Wednesday at 12pm EST / 9am PST on the <a href=\"https://www.youtube.com/c/FlutterCommunityVideos\">Flutter Community YouTube channel</a> for summaries, and discussions.</p><p><a href=\"https://twitter.com/FlutterDev\">Stay tuned </a>for pop quizzes, chances to win your very own Dash plushie, AMAs with the book’s authors and more.</p><p><strong>Get Access</strong></p><p>To get started, go to <a href=\"https://flutter.dev/apprentice-giveaway\">flutter.dev/apprentice-giveaway</a>, where you’ll find instructions on accessing the book.</p><p>You can also subscribe to <a href=\"https://flutter.dev/subscribe\">updates from the Flutter team</a>. We’re looking forward to joining you on the journey; see you along the way!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=32ced5f97a12\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/learn-flutter-for-free-with-flutter-apprentice-32ced5f97a12\">Learn Flutter for free with Flutter Apprentice!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-10-01T16:01:12.000Z":{"title":"Introducing the Flutter Meetup Network!","link":"https://medium.com/flutter/introducing-the-flutter-meetup-network-f47f7ac728bc?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f47f7ac728bc","category":["flutter","announcements","meetup"],"dc:creator":"Shams Zakhour","pubDate":"Fri, 01 Oct 2021 16:01:12 GMT","atom:updated":"2021-10-01T16:01:10.706Z","content:encoded":"<h4><a href=\"https://medium.com/u/4363d1f1a699\">Sarah Fullmer</a> tells us about support for Flutter meetups.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4eNp-BypLrDgEwkyWbm2zw.png\" /><figcaption>Join forces with other Flutter enthusiasts!</figcaption></figure><p>The Flutter Meetup Network (FMN) is an international network of Meetup groups united by their enthusiasm for Flutter. The FMN program mission is <strong><em>to foster a thriving worldwide community of Flutter developers by empowering community organizers to educate and inspire local communities with engaging events.</em></strong></p><p>Meetups — and similar developer community groups — are a great resource. As Flutter has grown in popularity over the past few years, over 100 Meetup groups have sprung up organically around the world to celebrate and educate their members about Flutter. The volunteers who run these groups have hosted <em>many</em> awesome events and workshops.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v_2ToStDprKx9KEzZgA5Fw.png\" /></figure><p>We in the Flutter team see and appreciate these amazing communities. 💙 The Flutter Meetup Network (FMN) is now being launched to support these groups officially. Network members will have access to various resources (more details available soon!), making it easier to plan and host Flutter-themed events.</p><p>Meetups have many benefits, aside from networking. When stuck on an issue in your current Flutter project, chances are good that you can find a developer in your local Flutter Meetup who has solved a similar problem. Or, maybe they know the perfect package for your needs.</p><p>We are thrilled to support our amazing and passionate organizers and can’t wait to see what the Flutter Meetup Network does moving forward.</p><p><a href=\"https://www.meetup.com/pro/flutter\">Join a Meetup near you!</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f47f7ac728bc\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/introducing-the-flutter-meetup-network-f47f7ac728bc\">Introducing the Flutter Meetup Network!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-09-30T20:38:27.000Z":{"title":"Supernova: a design system platform","link":"https://medium.com/flutter/supernova-a-design-system-platform-ea00a9077c4d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/ea00a9077c4d","category":["figma","web-development","design","design-systems","flutter"],"dc:creator":"Mariam Hasnany","pubDate":"Thu, 30 Sep 2021 20:38:27 GMT","atom:updated":"2021-09-30T20:38:27.161Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4><strong>Experience of an early adopter building a Flutter web app</strong></h4><p>Two years ago, Flutter announced an <a href=\"https://medium.com/flutter/flutter-for-web-early-adopter-program-now-open-9f1fb146e4c4\">early adopter program</a> for companies that were ready to build with Flutter’s web support. Today one of those early adopters, <a href=\"https://www.supernova.io/\">Supernova</a>, is launching their design system platform, which is both built with Flutter and exports code for Flutter.</p><p>We think Supernova is a good example of the kind of experience Flutter enables on the web. I sat down with Supernova’s CEO <a href=\"https://twitter.com/JiriTrecak\">Jiří Třečák</a> and CTO <a href=\"https://twitter.com/ArtemUfimtcev\">Artem Ufimtcev</a> to learn more about what they have built with Flutter’s web support.</p><h4><strong>How would you describe Supernova to someone who has never heard of it?</strong></h4><p>Usually design and developer teams are compartmentalized and never truly work together; this is because tooling is built with only one or the other discipline in mind. So we decided to build a platform where designers and developers can come together and work as a team.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GOSImwOIA3oqItUMRmq5Kw.png\" /></figure><h4><strong>Tell me more about what sparked the idea for Supernova.</strong></h4><p>The idea stemmed from the need for a certain amount of automation in the design process to make the iterative workflow less cumbersome. What we’re launching today is a tool that automates the process of turning the design system built by designers into something developers can directly consume in the form of code.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oqPmxo8kmisR_7oiZn06vQ.png\" /><figcaption>Supernova, a platform that automates the design process</figcaption></figure><h4><strong>Can you go into more detail about the features users can expect in this launch?</strong></h4><p>For this launch you can bring your Figma designs to Supernova, manage style, assets, or other components and then export them into code. We’ve built a documentation editor that lets you create documents based on your design system, and finally, an automation engine that updates your documents and code automatically when design changes are made.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YaZp-vdLHW17_b9ktY_4mQ.png\" /><figcaption>Supernova’s documentation editor</figcaption></figure><p><em>Everything</em> in our platform is built with Flutter and Dart. There is a lot of sophisticated logic, so our application is more Dart-heavy than most, and Flutter is used for the visualization layer. Alongside Flutter’s CanvasKit renderer, we also have our own Skia engine to parse and render the components from a data model in Figma.</p><h4><strong>Why did you choose Flutter and Dart to be an integral part of what you’ve built?</strong></h4><blockquote>Our main consideration for Flutter was that we would be able to bend the platform to our will.</blockquote><p>Originally Supernova was written as a native macOS app, but we saw lots of interest in a web-based solution. Flutter’s promise of deploying to other platforms with one codebase made it an appealing choice. We knew we would eventually want a desktop app as well, as our tool is very compute-heavy and has more demanding performance needs than typical websites.</p><p>Our main consideration for Flutter was that we would be able to bend the platform to our will. We knew we would have a lot of visual operations that are not very common, and instead of building it from scratch using WebGL, Flutter gave us a way to access the lower-layer rendering engine so we can build it in our own way, using a framework that is well tested.</p><p>Despite some early struggles, we feel we made the right decision because of the flexibility that Flutter provided.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0vWG-4VTlJkHX_9z0nGNWg.png\" /><figcaption>Supernova is not only built with Flutter but also exports Flutter code</figcaption></figure><h4><strong>So it wasn’t always smooth sailing. Can you describe some of those struggles and what you learned along the way?</strong></h4><p>One of the very first technical challenges we encountered while working on our Flutter web app was with routing. When the Router API was released, we reworked our routing system to adopt it right away, which proved to be better for web apps. While it offered better integration into browser history, it was far too complicated for nested routing. So instead we made it possible to share state controllers (MobX stores in our case) between pages to simulate nested routing. This approach makes maintenance and implementation much simpler.</p><p>The main thing we learned is the importance of interoperability between Dart and JavaScript specifically for web apps. Using web-specific libraries has limitations if you are also targeting other platforms supported by Flutter, but if your main focus is web apps, it can save a tremendous amount of time. We learned that using JavaScript libraries and embedding HTML can compensate for plugins that lack web support. As an example, we use this approach for a code preview widget, which we embed as HTML and use with a JavaScript library for syntax highlighting. I would say that familiarity with JavaScript helps a great deal when building a Flutter web app, along with understanding the strengths and limitations of Dart/JavaScript interoperability and HTML embedding.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Zo9xfW_VtnLJmaTYq5ZJyg.png\" /><figcaption>Code preview widget built using Dart/JavaScript interoperability</figcaption></figure><p>We also learned that tuning performance for web apps with Flutter is not very different to other platforms supported by Flutter. In most cases issues can be resolved in one of two ways:</p><ol><li>Localizing widget rebuilds to the smallest possible part of the widget tree. Using MobX as our primary state management system means that rebuilds only affect necessary parts of the UI.</li><li>Using lists with on-demand child builders. We try to use ListView builders and slivers whenever possible so that we build only what is currently visible on the screen.</li></ol><h4><strong>Despite the struggles, were there specific technical challenges you experienced that Flutter helped you overcome?</strong></h4><p>Using the CanvasKit renderer through Flutter was a much more pleasant experience than writing shaders from scratch using WebGL. CanvasKit provided us with more higher level tools for rendering, letting us focus on nuances of converting Figma’s non-standard vector models to work with our Skia rendering engine.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*J7beI4HVjgoaD4JHk-JUyw.png\" /></figure><p>Developers often underestimate the challenges of font management. In our case, we have to support any font the designers might be using. Flutter helps a great deal here, thanks to the <a href=\"https://pub.dev/packages/google_fonts\">google_fonts package</a> that automatically downloads fonts directly from Google.</p><p>Lastly, Flutter also allows us to share the codebase that powers both the Supernova platform and a separate plugin we built to run in Figma. While there are completely different front ends, they share the same data model and logic.</p><h4><strong>I’m curious, how did you find using Flutter on the web compared with more traditional frameworks?</strong></h4><p>In general, there are a lot of similarities. Concepts from Flutter, such as its reactive approach to UI, widgets, flexbox layout, and even state management, can be found in many modern web frameworks.</p><p>However, there are a few things that make Flutter different. Unlike other web frameworks, Flutter doesn’t rely on HTML or CSS to write UI components. Instead, you have to learn what widgets exist and how to compose them together to achieve the same UI as what you would’ve otherwise done with CSS. That said, Flutter comes with out-of-box support for Material, so if you’re comfortable with that look and feel, it gets you a long way.</p><blockquote>I find the philosophy behind Dart quite different.</blockquote><p>The other important difference is the language. While at its core, Dart is similar to JavaScript, I find the philosophy behind Dart quite different. After spending some time writing Dart, you can tell that it’s built for safety and predictability. Language features like sound null safety are uncommon in the world of JavaScript and JavaScript–compatible languages, and we found them crucial for making complex apps stable and maintainable. Another pleasant surprise for us was the annotation processing and code generation capabilities of Dart.</p><h4><strong>Since you were early adopters, how do you feel Flutter’s web support has improved?</strong></h4><p>We have been using Flutter on the web ever since the first technical preview. Back then, the web target didn’t have support for navigation with browser history, performance was poor, lots of widgets and plugins were missing, and the tooling and debugger were just not there.</p><p>Now with the stable release, we’ve seen progress in all these areas and feel confident in our decision to use Flutter on the web. If you were to compare the technical preview to the Flutter 2.5 release, there are substantial improvements in performance, especially around rendering sophisticated layouts.</p><p>That said, there are still opportunities to improve! In particular, we’re looking forward to seeing better tooling for inspecting CanvasKit rendered widgets, since today’s browser tooling doesn’t support it.</p><h4><strong>One last question, how can someone get started with Supernova?</strong></h4><p>With today’s launch, Supernova is now available to everyone! To get started, visit <a href=\"https://www.supernova.io/\">supernova.io</a> to register and provide a link to your Figma design file. Then, basically, the entire world is open to you from there. You can immediately start exporting code for Flutter (or any other framework) or get the assets for icons to start writing documentation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mtTv0oMcbsbStL_T9RSsZw.png\" /><figcaption>Supernova’s component manager integrated with Figma</figcaption></figure><p>We’re so happy to see one of Flutter’s early adopters launch on the web. Be sure to check it out for yourself! And if you are building with Flutter on the web, please tell us about it. As ever, you can find us on Twitter as <a href=\"https://twitter.com/FlutterDev\">@flutterdev</a>. We can’t wait to see what you’ve created!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ea00a9077c4d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/supernova-a-design-system-platform-ea00a9077c4d\">Supernova: a design system platform</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-09-14T19:31:45.000Z":{"title":"Flutter: What’s next on the Web?","link":"https://medium.com/flutter/flutter-whats-next-on-the-web-e0454bff964?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/e0454bff964","category":["flutter","web","developer","flutter-web","web-development"],"dc:creator":"Mariam Hasnany","pubDate":"Tue, 14 Sep 2021 19:31:45 GMT","atom:updated":"2021-09-14T19:34:12.148Z","content:encoded":"<h4>Our priorities for upcoming releases, focusing on performance, developer experience and web integration</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7iBUzC4UvwNi8agIsCrZ7w.png\" /></figure><p>Flutter’s web support <a href=\"https://medium.com/flutter/flutter-web-support-hits-the-stable-milestone-d6b84e83b425\">hit the stable milestone</a> in March 2021. So what’s next?</p><p>According to our user research, the web is the target for over 10% of Flutter projects. So our focus is now on improving the quality of the initial stable release and enabling more of you to ship your Flutter web apps to production.</p><p>We established these priorities based on the findings from Flutter’s quarterly surveys and what we heard from you in issues, face-to-face discussions, and on social media. We just received the results for the Q3 survey and are pleased to see that this plan is in line with your feedback.</p><p>This article provides more detail into our roadmap and the work planned for each priority. Some features may span several quarters, and others require investigation (🔍) before we can commit to a solution.</p><h3>WEB LOOK AND FEEL</h3><p>It’s important that Flutter web apps feel natural on the web. This includes features such as scrolling behavior, text functionality, splash screens, hyperlinks, SEO, and other web-specific UI features.</p><h4><strong>RTL text</strong></h4><p>Previously, Flutter offered incomplete web support for right-to-left (RTL) languages such as Arabic and Hebrew. While the framework itself supported RTL text, the web engine produced undefined behavior because it ignored the distinction between LTR and RTL.</p><p>The recent stable release (2.5) added basic support for RTL so that all major use cases for RTL languages are supported and usable on Flutter web apps. Most of the issues related to basic support have been addressed and we plan to fix the remaining issue.</p><ul><li><a href=\"https://github.com/flutter/flutter/issues/32239\">Implement RTL support for text editing</a> (fixed)</li><li><a href=\"https://github.com/flutter/flutter/issues/69396\">RTL text rendering glitch on web</a> (fixed)</li><li><a href=\"https://github.com/flutter/flutter/issues/78550\">TextField with </a><a href=\"https://github.com/flutter/flutter/issues/78550\">TextDirection.rtl has misplaced cursor on web</a> (planned)</li><li><a href=\"https://github.com/flutter/flutter/issues/82136\">InlineSpans in RichText overlaps in RTL application</a> (fixed)</li></ul><h4><strong>Scrolling Behavior</strong></h4><p>While Flutter 2 included <a href=\"https://github.com/flutter/flutter/pulls?q=is%3Apr+is%3Aclosed+is%3Amerged+label%3A%22f%3A+scrolling%22\">several improvements</a> to support scrolling behavior on desktop browsers (such as scroll bar support), scrolling behavior is still an area that at times doesn’t look or feel right on the browser or on the OS that the web app is running on.</p><p>While some of these behaviors depend on the work for Flutter desktop support, there are some issues (listed below) that we plan to address in this roadmap specific to scrolling physics and scrollbars. We also plan to investigate trackpad support.</p><ul><li><a href=\"https://github.com/flutter/flutter/issues/35687\">PageScrollPhysics has weird behavior</a></li><li><a href=\"https://github.com/flutter/flutter/issues/41434\">No scrollbar in (infinite) list widget</a></li><li><a href=\"https://github.com/flutter/flutter/issues/85579\">Mac desktop scroll physics should be range maintaining</a></li><li><a href=\"https://github.com/flutter/flutter/issues/13253\">Let scrollbars avoid obstructing slivers and media query paddings</a></li><li><a href=\"https://github.com/flutter/flutter/issues/87739\">MaterialScrollBehavior.buildScrollbar needs update</a></li></ul><p>🔍 Research for <a href=\"https://github.com/flutter/flutter/issues/23604\">trackpad support</a></p><h4><strong>App loading API</strong></h4><p>Some web apps prefer to show a splash screen, loading indicator, or landing page when an app is loading or to offer a custom experience. Currently, there is no easy way to implement a custom experience or indicate that a Flutter web app is loading; this became more critical when rendering with the CanvasKit’s larger bundle size.</p><p>Our work here focuses on providing you with an explicit API for the application start up cycle that can be used to preload the app, control the app’s loading cycle, and build splash screens or loading indicators.</p><ul><li><a href=\"https://github.com/flutter/flutter/issues/48468\">Add support for splash screen on the web</a></li></ul><h3>ACCESSIBILITY</h3><p>Accessibility is one of our top priorities; we aim to provide you with the tools necessary to build accessible web apps that work well on the most common screen readers.</p><p>Flutter 2.2 made significant improvements to accessibility support. Since then, we’ve heard concerns from end users trying to traverse their web apps with screen readers, such as <a href=\"https://www.freedomscientific.com/products/software/jaws/\">JAWS</a>.</p><p>In this roadmap, we are focusing on the issues with <a href=\"https://flutter.dev/docs/development/accessibility-and-localization/accessibility#screen-readers\">supported screen readers </a>for desktop browsers, such as snackbar announcements. We will also continue to investigate ways to improve our overall accessibility support.</p><ul><li><a href=\"https://github.com/flutter/flutter/issues/83812\">Fail to announce button press when using enter key</a></li><li><a href=\"https://github.com/flutter/flutter/issues/83809\">Arrow and B key do not update the screen reader focus</a></li></ul><h3>PERFORMANCE</h3><p>Performance is an area we will always prioritize to improve the user experience with Flutter web apps. Currently, our main focus will improve scrolling jank, and speed up the initial load of web apps.</p><h4><strong>Scrolling jank</strong></h4><p>Based on our recent quarterly survey, scrolling jank was one of the top performance issues reported. Our goal is to ensure that Flutter web apps scroll smoothly using gestures on mobile and mouse/keyboard on desktop, but that also depends on the type and quantity of content a web app expects a user to scroll through.</p><p>In the coming months we will primarily focus on improving jank due to image decoding, and we will continue investigating scrolling performance issues to find other use cases we can improve.</p><ul><li><a href=\"https://github.com/flutter/flutter/issues/63397\">Move image decoding to web workers</a></li><li><a href=\"https://github.com/flutter/flutter/issues/71884\">Make platform views less expensive in the CanvasKit renderer</a></li></ul><h4><strong>Bundling CanvasKit (offline support)</strong></h4><p>Currently, Flutter web apps rendered in CanvasKit require extra manual steps to work offline as a Progressive Web App (PWA). In order to work fully as a PWA in offline mode out of the box, and ensure that the app meets strict content security policies, we need to bundle CanvasKit and font fallbacks.</p><p>We will start by bundling CanvasKit first, then bundle fonts, and add the tooling necessary to enable offline mode.</p><ul><li><a href=\"https://github.com/flutter/flutter/issues/85793\">CanvasKit backend should not depend on volatile Google Fonts</a></li><li><a href=\"https://github.com/flutter/flutter/issues/70101\">Support bundling CanvasKit instead of CDN</a></li></ul><h4><strong>CanvasKit download size</strong></h4><p>CanvasKit offers better performance than DOM-based approaches, and is therefore our default renderer on desktop browsers. However, the time needed to download an app impacts initial load performance (and the Lighthouse score for Flutter apps running on the web).</p><p>In this roadmap, we will investigate ways to reduce the download size of CanvasKit in an effort to improve initial load performance. We want to ensure that the end user’s devices or browser isn’t dealing with a massive payload.</p><p>🔍 <a href=\"https://github.com/flutter/flutter/issues/89616\">Improve CanvasKit download size</a></p><p>🔍 <a href=\"https://github.com/flutter/flutter/issues/76248\">Find a reasonable sized emoji font fallback</a></p><h3>INTEGRATION WITH HTML CONTENT</h3><p>The ability to integrate with browser code is important for leveraging the strength of the web platform. There are two ways for Flutter web apps to integrate with HTML: 1) using HTML platform views within Flutter web apps, or 2) embedding Flutter as a content island into an existing web app (sort of an add to app for web). While the former exists today and may need improvement, the latter will be a new feature that needs further design and development.</p><h4><strong>Embedding with custom element (Add to app)</strong></h4><p>Today, the only way to embed a Flutter web app into an existing website/web app is through an iframe. While that works for some use cases, it is not always an ideal solution for those slowly migrating their web app to use Flutter.</p><p>In this roadmap, we will investigate and design a custom solution that enables you to embed your Flutter web apps, similar to the add-to-app mobile scenario.</p><p>🔍 <a href=\"https://github.com/flutter/flutter/issues/32329\">Render app inside custom element</a></p><h3>DEVELOPER EXPERIENCE</h3><p>Flutter’s ecosystem includes features that you use for development but currently lack web support, such as plugins, debugging, hot reload, and so on. In order for you to have a great developer experience on the web, we will continue to bridge the parity gap between mobile and web.</p><h4><strong>Camera plugin</strong></h4><p>A camera plugin has been one of the most requested plugins since our initial stable release; many of you find the parity gap to be a blocker when bringing Flutter mobile apps to the web.</p><p>In the Flutter 2.5 stable release, we delivered an early version of a <a href=\"https://pub.dev/packages/camera_web\">plugin</a> that initializes the camera, shows a camera preview, and takes a picture. We will make improvements to this plugin as we receive feedback.</p><ul><li><a href=\"https://github.com/flutter/flutter/issues/45297\">Add camera support for web</a> (fixed with some PRs pending)</li></ul><h3>Thank you!</h3><p>While this is an overview of our current roadmap for the web, our <a href=\"https://github.com/flutter/flutter/issues?q=is%3Aopen+is%3Aissue+label%3Aplatform-web+\">GitHub issue list</a> remains the source of truth for what we’re working on. We may add, prolong, or defer features based on what we learn and what you tell us.</p><p>As always, we greatly value your feedback and appreciate your support!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e0454bff964\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-whats-next-on-the-web-e0454bff964\">Flutter: What’s next on the Web?</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-09-08T16:56:13.000Z":{"title":"What’s new in Flutter 2.5","link":"https://medium.com/flutter/whats-new-in-flutter-2-5-6f080c3f3dc?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6f080c3f3dc","category":["material-you","announcements","flutter-app-development","flutter","devtools"],"dc:creator":"Chris Sells","pubDate":"Wed, 08 Sep 2021 16:56:13 GMT","atom:updated":"2021-09-08T17:49:15.035Z","content:encoded":"<h4>Performance improvements, DevTools updates, new Material You support, a new app template, and more!</h4><p>Hello and welcome to Flutter 2.5! This is a big release, with the 2nd highest stats in the history of Flutter releases: 4600 issues closed and 3932 PRs merged from 252 contributors with 216 reviewers. If we look back over the last year, we see a huge 21,072 PRs created by 1337 contributors, of which 15,172 of them were merged. While the “what’s new in Flutter” blog posts focuses on new features, our #1 job with Flutter is always making sure you have the features you need at the highest possible quality level.</p><p>And in fact, this release continues a number of important performance and tooling improvements to track down performance problems in your own app. At the same time, there are a number of new features, including full screen support for Android, more Material You (also called v3) support, updated text editing to support switchable keyboard shortcuts, a new, more detailed look at your widgets in the Widget Inspector, new support for adding dependencies in your Visual Studio Code projects, new support for getting coverage information from your test runs in IntelliJ/Android Studio and a whole new app template to serve as a better foundation for your real-world Flutter apps. This release is jam-packed with exciting new updates, so let’s get started.</p><h3>Performance: iOS shader warmup, async tasks, GC &amp; message passing</h3><p>This release comes with several performance improvements. First on this list is a PR to wire up Metal shader precompilation from offline training runs (<a href=\"https://github.com/flutter/engine/pull/25644\">#25644</a>), which (as our benchmarks show) cuts worst case frame rasterization times by 2/3s, and the 99th percentile frame by half. We continue to make progress on reducing iOS jank and this is another step along that path. Shader warmup is but one source of jank, however. Previously, processing asynchronous events from the network, filesystem, plugins, or other isolates could interrupt animations, another source of jank. Following improvements to scheduling policies (<a href=\"https://github.com/flutter/engine/pull/25789\">#25789</a>) on the UI isolate’s event loop in this release, frame processing now takes priority over processing other asynchronous events, eliminating jank from this source in our testing.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/925/0*4O_Zg7UAwbnGissJ\" /><figcaption><em>Frame lag due to processing asynchronous event results before and after</em></figcaption></figure><p>Another cause of jank is when the garbage collector (GC)pauses the UI thread to reclaim memory. Previously, memory for some images would only be reclaimed lazily in response to GC performed by the Dart VM. As a workaround in earlier releases, the Flutter Engine would hint to the Dart VM that image memory could be reclaimed by a GC, which in theory could lead to more timely memory reclamation. Unfortunately, in practice this led to too many major GCs, and the memory would still sometimes not be reclaimed quickly enough to avoid low-memory situations on memory constrained devices. In this release, memory for unused images is reclaimed eagerly (<a href=\"https://github.com/flutter/engine/pull/26219\">#26219</a>, <a href=\"https://github.com/flutter/flutter/pull/82883\">#82883</a>, <a href=\"https://github.com/flutter/flutter/pull/84740\">#84740</a>), reducing GCs considerably.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OJrGTdsznMa2N0DI\" /><figcaption><em>GCs before and after adding the fix to eagerly reclaim unused large image memory</em></figcaption></figure><p>For example, in one of our tests, playing a 20 second animated GIF went from needing 400+ GCs to needing just 4. Fewer major GCs means that animations involving images appearing and disappearing will have less jank, and consume less CPU and power.</p><p>Another performance improvement in Flutter 2.5 is the latency when sending messages between Dart and Objective-C/Swift (iOS) or Dart and Java/Kotlin (Android). As part of <a href=\"https://docs.google.com/document/d/1oNLxJr_ZqjENVhF94-PqxsGPx0qGXx-pRJxXL6LSagc/edit#heading=h.9gabvat7tlxf\">tuning-up</a> message channels generally, removing unnecessary copies from messaging codecs reduced latencies by up to 50% depending on message size and device (<a href=\"https://github.com/flutter/engine/pull/25988\">#25988</a>, <a href=\"https://github.com/flutter/engine/pull/26331\">#26331</a>).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*TvARS8SsME4sl-Ib\" /><figcaption><em>iOS message latencies before and after</em></figcaption></figure><p>You can read more about the details of this work in the <a href=\"https://medium.com/flutter/improving-platform-channel-performance-in-flutter-e5b4e5df04af\">Improving Platform Channel Performance in Flutter</a> blog post by Aaron Clarke.</p><p>One final performance update if you’re targeting iOS: In this release, Flutter apps built on on Apple Silicon M1 Macs run natively on ARM iOS simulators (<a href=\"https://github.com/flutter/flutter/pull/85642\">#pull/85642</a>). This means there’s no Rosetta translation between the Intel x86_64 instructions and ARM, which increases performance during your iOS app testing and allows you to avoid some subtle Rosetta issues (<a href=\"https://github.com/flutter/flutter/issues/74970#issuecomment-858170914\">#74970</a>, <a href=\"https://github.com/flutter/flutter/issues/79641\">#79641</a>). This is another step along the path for full support in Flutter for Apple Silicon. Stay tuned for more.</p><h3>Dart 2.14: formatting, language features, pub &amp; linting out-of-the-box</h3><p>Of course, Flutter isn’t Flutter without the Dart language and runtime on which it builds. This release of Flutter comes with Dart 2.14. <a href=\"https://medium.com/@mit.mit/announcing-dart-2-14-b48b9bb2fb67\">The new release of Dart </a>comes with new formatting to make <a href=\"https://dart.dev/guides/language/language-tour#cascade-notation\">cascades</a> more clear, new pub support for ignoring files, and new language features, including the return of the legendary triple shift operator. In addition, and one of the best things about Dart 2.14, is that this release has created a standard set of lints shared between new Dart and Flutter projects that come right out of the box.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*CNbVsc26rivkp2vI\" /><figcaption><em>`flutter create` comes out of the box with an analysis_options.yaml file pre-populated with recommended Flutter lints</em></figcaption></figure><p>Not only do you get these lints when you create a new Dart or Flutter project, but with <a href=\"https://flutter.dev/docs/release/breaking-changes/flutter-lints-package#migration-guide\">just a few steps</a>, you can add this same analysis to your existing apps as well. For the details of these lints, the new language features and more, check out <a href=\"https://medium.com/dartlang/announcing-dart-2-13-c6d547b57067\">the release announcement for Dart 2.14</a>.</p><h3>Framework: Android full screen, Material You &amp; text editing shortcuts</h3><p>The Flutter 2.5 release includes a number of fixes and improvements to the framework. Starting with <a href=\"https://github.com/flutter/flutter/pull/81303\">Android, we’ve fixed a set of related issues around full screen modes</a> with nearly 100 thumbs up between them. The names of the modes themselves makes this one of our favorite new features: <em>lean back, sticky, sticky immersive, and edge to edge</em>. This change also added a way to listen to fullscreen changes in the other modes. For example, if the user engages with the app, when the system UI comes back, developers can now write their code to return to fullscreen or do something else.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*-5pu9nXQw88jixos\" /><figcaption><em>New Android edge-to-edge mode: normal mode (left), Edge to Edge mode (center), Edge to Edge with a custom SystemUIOverlayStyle (right)</em></figcaption></figure><p>In this release, we continue to build support for the new Material You (aka v3) specification, including updates to floating action button sizes and theming (<a href=\"https://github.com/flutter/flutter/pull/86441\">#86441</a>), and a new MaterialState.scrolledUnder state that you can see in action with the sample code in the PR (<a href=\"https://github.com/flutter/flutter/pull/79999\">#79999</a>).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/382/0*7ivd_3xtI3uaZ4nO\" /><figcaption><em>New Material You FAB sizes</em></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*uTH_ZL2MFJSlPvhuZ81o5A.gif\" /><figcaption><em>New MaterialState.scrolledUnder state in action</em></figcaption></figure><p>And while we’re talking about scrolling, another improvement is the addition of scroll metrics notifications (<a href=\"https://github.com/flutter/flutter/pull/85221\">#85221</a>, <a href=\"https://github.com/flutter/flutter/pull/85499\">#85499</a>), which provide notifications of scrollable areas even if the user isn’t scrolling. For example, the following shows the scrollbar appearing or disappearing as appropriate based on the underlying size of the ListView:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/992/0*11VHtSVUTukATeQN\" /><figcaption><em>The new scroll metrics notifications enabling the scrollbar to appear and disappear automatically without scrolling</em></figcaption></figure><p>In this case, you don’t have to write any code but if you want to capture the <a href=\"https://master-api.flutter.dev/flutter/widgets/ScrollMetricsNotification-class.html\">ScrollMetricNotification</a>changes, you can. Special thanks goes out to community contributor <a href=\"https://github.com/xu-baolin\">xu-baolin</a> who worked hard on this and came up with a great solution.</p><p>Another excellent contribution from the community is the addition of Material banner support to the ScaffoldMessenger. You may remember the ScaffoldMessenger from <a href=\"https://medium.com/flutter/whats-new-in-flutter-2-0-fe8e95ecc65\">the Flutter 2.0 release announcement</a> as a more robust way to show SnackBars at the bottom of the screen to provide users with notifications. In Flutter 2.5, you can now add a banner to the top of your scaffold that stays in place until the user dismisses it.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/852/0*WnLtflm5SF1I9GxK\" /></figure><p>Your app can get this behavior by calling the showMaterialBanner method of ScaffoldMessenger:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/56ddfca5460187fd609f019496f1052e/href\">https://medium.com/media/56ddfca5460187fd609f019496f1052e/href</a></iframe><p>The <a href=\"https://material.io/components/banners#usage\">Material guidelines for banners</a> state that your app should show only one at a time, so if your app calls showMaterialBanner more than once, the ScaffoldMessenger will maintain a queue, showing each new banner as the previous one is dismissed. Thanks to <a href=\"https://github.com/Calamity210\">Calamity210</a> for this great addition to the Material support in Flutter!</p><p>Building further on Flutter 2.0 and its new text editing features, like text selection pivot points and being able to stop propagation of a keyboard event once it’s been handled, in this release, we’ve added the ability to make text editing keyboard shortcuts overridable (<a href=\"https://github.com/flutter/flutter/pull/85381\">#85381</a>). If you want <strong>Ctrl-A</strong> to do something custom instead of selecting all text, you can do that. The <a href=\"https://github.com/flutter/flutter/blob/b524270af147847f64fa296cf6eed3633ffe683d/packages/flutter/lib/src/widgets/default_text_editing_shortcuts.dart#L163\">DefaultTextEditingShortcuts</a> class contains a list of every keyboard shortcut supported by Flutter on each platform. If you want to override anything, use Flutter’s existing <a href=\"https://api.flutter.dev/flutter/widgets/Shortcuts-class.html\">Shortcuts</a> widget to remap any shortcut to an existing or custom intent. You can place that widget anywhere in your widget tree where you want the override to apply. Check out some examples in the <a href=\"https://api.flutter.dev/flutter/widgets/DefaultTextEditingShortcuts-class.html\">API reference</a>.</p><h3>Plugins: camera, image picker &amp; plus plugins</h3><p>Another plugin that’s seen a lot of improvements is <a href=\"https://pub.dev/packages/camera\">the camera plugin</a>:</p><ul><li><a href=\"https://github.com/flutter/plugins/pull/3795\">3795</a> [camera] android-rework part 1: Base classes to support Android Camera features</li><li><a href=\"https://github.com/flutter/plugins/pull/3796\">3796</a> [camera] android-rework part 2: Android auto focus feature</li><li><a href=\"https://github.com/flutter/plugins/pull/3797\">3797</a> [camera] android-rework part 3: Android exposure related features</li><li><a href=\"https://github.com/flutter/plugins/pull/3798\">3798</a> [camera] android-rework part 4: Android flash and zoom features</li><li><a href=\"https://github.com/flutter/plugins/pull/3799\">3799</a> [camera] android-rework part 5: Android FPS range, resolution and sensor orientation features</li><li><a href=\"https://github.com/flutter/plugins/pull/4039\">4039</a> [camera] android-rework part 6: Android exposure- and focus point features</li><li><a href=\"https://github.com/flutter/plugins/pull/4052\">4052</a> [camera] android-rework part 7: Android noise reduction feature</li><li><a href=\"https://github.com/flutter/plugins/pull/4054\">4054</a> [camera] android-rework part 8: Supporting modules for final implementation</li><li><a href=\"https://github.com/flutter/plugins/pull/4010\">4010</a> [camera] Do not trigger flat device orientation on iOS</li><li><a href=\"https://github.com/flutter/plugins/pull/4158\">4158</a> [camera] Fix coordinate rotation for setting focus- and exposure points on iOS</li><li><a href=\"https://github.com/flutter/plugins/pull/4197\">4197</a> [camera] Fix camera preview not always rebuilding on orientation change</li><li><a href=\"https://github.com/flutter/plugins/pull/3992\">3992</a> [camera] Prevent crash when setting unsupported FocusMode</li><li><a href=\"https://github.com/flutter/plugins/pull/4151\">4151</a> [camera] Introduce camera_web package</li></ul><p>There’s also been a lot of work on <a href=\"https://pub.dev/packages/image_picker\">the image_picker plugin</a> focusing on the end-to-end camera experience:</p><ul><li><a href=\"https://github.com/flutter/plugins/pull/3898\">3898</a> [image_picker] Image picker fix camera device</li><li><a href=\"https://github.com/flutter/plugins/pull/3956\">3956</a> [image_picker] Change storage location for camera captures to internal cache on Android, to comply with new Google Play storage requirements</li><li><a href=\"https://github.com/flutter/plugins/pull/4001\">4001</a> [image_picker] Removed redundant request for camera permission</li><li><a href=\"https://github.com/flutter/plugins/pull/4019\">4019</a> [image_picker] Fix rotation when camera is a source</li></ul><p>This work improves the functionality and robustness of the camera and image_picker plugins for Android. In addition, you’ll notice an early version of the <a href=\"https://pub.dev/packages/camera_web\">camera plugin</a> is available with web support (<a href=\"https://github.com/flutter/plugins/pull/4151\">#4151</a>). This preview provides basic support for viewing camera preview, taking a picture, using flash and zoom controls, all on the web. It is currently not an <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages#endorsed-federated-plugin\">endorsed plugin</a>, so you will need to <a href=\"https://pub.dev/packages/camera_web/install\">add it explicitly</a> to be used in your web app.</p><p>The initial Android camera rewrite work was contributed by <a href=\"https://github.com/acoutts\">acoutts</a>. The camera and image_picker work was landed by <a href=\"https://www.baseflow.com/open-source/flutter\">Baseflow</a>, a consulting firm specializing in Flutter and well-known for <a href=\"https://pub.dev/publishers/baseflow.com/packages\">their own packages on pub.dev</a>. The camera_web work was largely done by <a href=\"https://verygood.ventures/\">Very Good Ventures</a>, a US-based Flutter consulting firm. Many thanks to all of you for your contributions to the Flutter community!</p><p>Another valuable community contribution is by the Flutter Community organization, known for <a href=\"https://plus.fluttercommunity.dev/\">the “plus” plugins</a>. With this release of Flutter, each of the corresponding plugins from the Flutter team now carry a recommendation just like this one for <a href=\"https://pub.dev/packages/battery\">battery</a>:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rvrCGEZ-vkRxga-n\" /></figure><p>Furthermore, since these plugins are no longer actively maintained, they are no longer marked as Flutter Favorite plugins. If you haven’t already done so, we recommend moving to the plus versions of the following plugins:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YX-xNXUTKnNuZNBAmt7CAQ.png\" /></figure><h3>Flutter DevTools: performance, Widget inspector, &amp; polish</h3><p>This release of Flutter comes with a number of improvements to Flutter DevTools. First and foremost is the added support in DevTools to take advantage of engine updates (<a href=\"https://github.com/flutter/engine/pull/26205\">#26205</a>, <a href=\"https://github.com/flutter/engine/pull/26233\">#26233</a>, <a href=\"https://github.com/flutter/engine/pull/26237\">#26237</a>, <a href=\"https://github.com/flutter/engine/pull/26970\">#26970</a>, <a href=\"https://github.com/flutter/engine/pull/27074\">#27074</a>, <a href=\"https://github.com/flutter/engine/pull/26617\">#26617</a>). One set of these updates enables Flutter to do a better job of associating trace events with specific frames, which helps developers to determine why a frame might be going over budget. You can see this reflected in the DevTools Frames chart that has been rebuilt to be “live”; frames are populated in this chart as they are rendered in your app. Selecting a frame from this chart navigates to the timeline events for that frame:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8evmW5s37nGUIc98\" /></figure><p>The Flutter engine now also identifies shader compilation events in the timeline. Flutter DevTools uses these events to help you diagnose shader compilation jank in your app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*esYsdKzKL64130ln\" /><figcaption>DevTools detecting lost frames due to shader compilation</figcaption></figure><p>With this new feature, DevTools detects when you’ve lost frames to shader compilation so that you can fix the issue. To run your app as if it’s the first time (before your shader cache has been populated as it would be for any user), use flutter runwith the --purge-persistent-cache flag. This clears the cache to ensure you are reproducing the environment that users see for the “first run” or “re-open” (iOS) experience. This feature is still under development, so please <a href=\"https://b.corp.google.com/issues/new?component=775375&amp;template=1369639\">file issues</a> for problems you find, or for any improvements we can make to help debug shader compilation jank.</p><p>In addition, when you’re tracking down CPU performance issues in your app, you may have been swamped in profiling data from Dart and Flutter libraries and/or the native code of the engine. If you’d like to turn any of these off to focus on your own code, you can do that with the new CPU Profiler feature (<a href=\"https://github.com/flutter/devtools/pull/3236\">#3236</a>) that enables you to hide profiler information from any of these sources.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IzjrKssfjooCGzKm\" /></figure><p>For any of the categories you don’t filter out, they’ve now been color-coded (<a href=\"https://github.com/flutter/devtools/pull/3310\">#3310</a>, <a href=\"https://github.com/flutter/devtools/pull/3324\">#3324</a>) so that you can easily see what parts of the CPU Frame Chart come from what parts of the system.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ewigNSGco1ozScc0\" /><figcaption>Colored frame chart to identify app vs. native vs. Dart vs. Flutter code activities in your app</figcaption></figure><p>Performance isn’t the only thing that you’ll want to debug. This release of DevTools comes with an update to the Widget Inspector that allows you to hover over a widget to evaluate the object, view properties, widget state, and so on.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/469/0*cLXjl-F3Vj0bFkKg\" /></figure><p>And, when you select a widget, it automatically populates in the new Widget Inspector Console, where you can explore the widget’s properties.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1022/0*l8XoqqLcz6W0CkRE\" /></figure><p>When paused at a breakpoint, you can also evaluate expressions from the console.</p><p>In addition to the new features, the Widget Inspector has undergone a facelift. To make DevTools a more useful destination for understanding and debugging your Flutter apps, we partnered with <a href=\"https://codemate.com\">Codemate</a>, a creative tech agency in Finland, to make some updates.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*iN9uTsyfsUOt8cTw\" /><figcaption>Flutter DevTools polished UX for greater ease of use</figcaption></figure><p>In this screenshot, you can see the following changes:</p><ul><li><strong>Better communicating what the debug toggle buttons do</strong> — those buttons have new icons, task-oriented labels, as well as rich tooltips that describe what they do and when to use them. Each tooltip further links out to detailed documentation of the feature.</li><li><strong>Easier to scan and locate widgets of interest </strong>— frequently used widgets from the Flutter framework now show icons in the widget tree view on the left hand side of the inspector. They’re further color coded based on their categories. For example, layout widgets are displayed in blue while content widgets are displayed in green. Furthermore, each Text widget now shows a preview of its content.</li><li><strong>Aligning the color scheme of the layout explorer and the widget tree</strong> — it’s now easier to identify the same widget from the layout explorer and the widget tree. For example, the “Column” widget in the screenshot below is on a blue background in the layout explorer, and it has a blue icon in the widget tree view.</li></ul><p>We’d love to <a href=\"https://github.com/flutter/devtools/issues\">hear your thoughts</a> about any issues that stem from these updates or any other improvements we can make to ensure that DevTools works great. And these highlights are just the start. For a full list of what’s new in DevTools with this release of Flutter, check out the release notes:</p><ul><li><a href=\"https://groups.google.com/g/flutter-announce/c/LSNbc2rKIjQ/m/7Y7cWgO2CQAJ\">Flutter DevTools 2.3.2 Release Notes</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/qenYe5LuHb8/m/tkWcBCVaAQAJ\">Flutter DevTools 2.4.0 Release Notes</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/yBEZOWdV9nc/m/KCX3m2BpCAAJ\">Flutter DevTools 2.6.0 Release Notes</a></li></ul><h3>IntelliJ/Android Studio: integration tests, test coverage, and icon previews</h3><p>The IntelliJ/Android Studio plugin for Flutter has also undergone a number of improvements with this release, starting with the ability to run integration tests (<a href=\"https://github.com/flutter/flutter-intellij/pull/5459\">#5459</a>). Integration tests are whole-app tests that run on a device, live in the integration_test directory and use the same testWidgets() functionality from widget unit tests.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kTKO_OcWee8OS0Lo\" /><figcaption>Integration testing your Flutter app in IntelliJ/Android Studio</figcaption></figure><p>To add an integration test to your project, <a href=\"https://flutter.dev/docs/testing/integration-tests\">follow the instructions on flutter.dev</a>. To connect the test with IntelliJ or Android Studio, add a run configuration that launches the integration tests and connect a device for the test to use. Running the configuration allows you to run the test, including setting breakpoints, stepping, etc.</p><p>In addition, the latest IJ/AS plugin for Flutter allows you to see the coverage information for both unit test and integration test runs. You can access this from the toolbar button next to the “Debug” button:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/554/0*vxdeNoUw3boFaeFu\" /></figure><p>Coverage info is displayed using red and green bars in the gutter of the editor. In this example, lines 9–13 were tested, but lines 3 and 4 were not.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/980/0*G5M8qrjxw3gyeT7a\" /></figure><p>The latest release also includes the new ability to preview icons used from packages from pub.dev built around TrueType font files (<a href=\"https://github.com/flutter/flutter-intellij/pull/5504\">#5504</a>, <a href=\"https://github.com/flutter/flutter-intellij/pull/5595\">#5595</a>, <a href=\"https://github.com/flutter/flutter-intellij/pull/5677\">#5677</a>, <a href=\"https://github.com/flutter/flutter-intellij/pull/5704\">#5704</a>), just as the Material and Cupertino icons support previewing.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*TK2px5OYQ_ggn2jx\" /><figcaption>Icon preview in IntelliJ/Android Studio</figcaption></figure><p>To enable icon previews you need to tell the plugin which packages you are using. There is a new text field in the plugin settings/preferences page:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*GTrbuGlv9G-YPvOi\" /></figure><p>Note that this works for icons defined as static constants in a class, as shown in the sample code in the screen shot. It won’t work for expressions, such asLineIcons.addressBook() or LineIcons.values[&#39;code&#39;]. If you are the author of an icon package that does NOT work with this feature, please create an <a href=\"https://github.com/flutter/flutter-intellij/issues\">issue</a>.</p><p>That are lots more updates for the IntelliJ/Android Studio plugin for Flutter that you can read about in the release notes:</p><ul><li><a href=\"https://groups.google.com/g/flutter-announce/c/nZPj0uIW3h4/m/2Xnx8KQtAwAJ\">Flutter IntelliJ Plugin M57 Release</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/WJUH0m6cu-U/m/_n0RltLFAAAJ\">Flutter IntelliJ Plugin M58 Release</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/CNzqxtybpBA/m/nSu7QabMAQAJ\">Flutter IntelliJ Plugin M59 Release</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/qc40yulxvAg/m/B_1HuGmoBQAJ\">Flutter IntelliJ Plugin M60 Release</a></li></ul><h3>Visual Studio Code: dependencies, Fix All, and Test Runner</h3><p>The Visual Studio Code plugin for Flutter has also improved in this release, beginning with two new commands “Dart: Add Dependency” and “Dart: Add Dev Dependency” (<a href=\"https://github.com/Dart-Code/Dart-Code/issues/3306\">#3306</a>, <a href=\"https://github.com/Dart-Code/Dart-Code/issues/3474\">#3474</a>).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/662/0*S8Nl6GbXHBHV64Rr\" /><figcaption>Adding a Dart dependency in Visual Studio Code</figcaption></figure><p>These commands provide functionality like <a href=\"https://marketplace.visualstudio.com/items?itemName=jeroen-meijer.pubspec-assist\">the Pubspec Assist plugin by Jeroen Meijer</a> has been providing for awhile now. These new commands come right out of the box and provide a type-to-filter list of packages periodically fetched from pub.dev.</p><p>You may also be interested in the “Fix All” command (<a href=\"https://github.com/Dart-Code/Dart-Code/issues/3445\">#3445</a>, <a href=\"https://github.com/Dart-Code/Dart-Code/issues/3469\">#3469</a>) that’s available for Dart files and can fix all of the same issues as <a href=\"https://dart.dev/tools/dart-fix\">dart fix</a> for the current open file in one step.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/526/0*dzvJ63ojTXw-Grsu\" /><figcaption>Using Flutter Fix rules to fix all known issues in your code</figcaption></figure><p>This can also be set to run on-save by adding source.fixAll to the editor.codeActionsOnSave VS Code setting.</p><p>Or, if you’d like to give the preview feature a try, you can enable the dart.previewVsCodeTestRunner setting and see Dart and Flutter tests run via the new Visual Studio Code test runner.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*chKF4N2FzPBN3R3G\" /><figcaption>Using the new Visual Studio Code test runner test your Dart and Flutter code</figcaption></figure><p>The Visual Studio Code test runner looks a little different than the current Dart and Flutter test runner and will persist results across sessions. The Visual Studio Code test runner also adds new gutter icons showing the last state of a test that can be clicked to run the test (or right-clicked for a context menu).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*snvlKGuZPa9zHFBc\" /></figure><p>In coming releases, the existing Dart and Flutter test runner will be removed in favor of the new Visual Studio Code test runner.</p><p>And this is just the tip of the iceberg with new Visual Studio Code features and fixes. For all of the details, check out the release notes:</p><ul><li><a href=\"https://dartcode.org/releases/v3-26/\">v3.26</a> VS Code Test Runner integration, Flutter Create Settings, …</li><li><a href=\"https://dartcode.org/releases/v3-25/\">v3.25</a> Additional Dependency Management improvements, Fix All in File / On-Save, …</li><li><a href=\"https://dartcode.org/releases/v3-24/\">v3.24</a> Dependencies tree improvements, Easier launch configurations, Editor improvements</li><li><a href=\"https://dartcode.org/releases/v3-23/\">v3.23</a> Profile Mode improvements, Improved dependencies tree, LSP improvements</li></ul><h3>Tools: exceptions, new app template &amp; Pigeon 1.0</h3><p>In previous versions of Flutter, you may have been frustrated by exceptions that you expected to be unhandled so that you could trigger the debugger and figure out where they originated only to find that the Flutter framework did not let the exception through to trigger the “unhandled expectation” handler in your debugger. In this release, debuggers now break correctly on unhandled exceptions that previously were just caught by the framework (<a href=\"https://github.com/flutter/flutter/issues/17007\">#17007</a>). This improves the debugging experience as your debugger can now point you directly to the throwing line in their code instead of pointing to a random line deep in the framework. A related new feature enables you to decide if a FutureBuilder should rethrow or swallow errors (#<a href=\"https://github.com/flutter/flutter/pull/84308\">84308</a>). This should give you a large number of additional exceptions to help track down the issues in your Flutter apps.</p><p>Since the dawn of Flutter, there has been the Counter app template, which has many good qualities: it shows off many features of the Dart language, demonstrates several key Flutter concepts and it’s small enough to fit into a single file, even with a lot of explanatory comments. However, what it doesn’t do is provide a particularly good jumping off point for a real-world Flutter app. In this release, there’s a new template (<a href=\"https://github.com/flutter/flutter/pull/83530\">#83530</a>) available via the following command:</p><p>$ flutter create -t skeleton my_app</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/964/0*3utkTiVxsZOcvcKl\" /><figcaption><em>The new Flutter skeleton template in action</em></figcaption></figure><p>The skeleton template generates a two-page List View Flutter app (with Detail View) that follows community best practices. It was developed with a great deal of internal and external review to provide a better base on which to build a production quality app and supports the following features:</p><ul><li>Uses ChangeNotifier to coordinate multiple widgets</li><li>Generates localizations by default using arb files</li><li>Includes an example image and establishes 1x, 2x, and 3x folders for image assets</li><li>Uses a “feature-first” folder organization</li><li>Supports shared preferences</li><li>Supports light and dark theming</li><li>Supports navigation between multiple pages</li></ul><p>Over time, as Flutter best practices evolve, expect this new template to evolve with them.</p><p>If, on the other end of the spectrum, you’re developing a plugin and not an app, you may be interested in the 1.0 release of Pigeon. Pigeon is a codegen tool for generating typesafe interop code between Flutter and its host platform. It allows you to define a description of your plugin’s API and generate skeleton code for Dart, Java, and Objective-C (which are accessible to Kotlin and Swift, respectively).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/927/0*CfaqXymLvWZc6Cqo\" /><figcaption>Sample generated Pigeon code</figcaption></figure><p>Pigeon is already used in some of the plugins from the Flutter team. With this release, which provides more helpful error messages, added support for generics, primitive data types as arguments and return types, and multiple arguments, expect it to be used more heavily in the future. If you’d like to take advantage of Pigeon in your own plugin or add-to-app projects, you can find out more information at <a href=\"https://pub.dev/packages/pigeon\">the pigeon plugin page</a>.</p><h3>Breaking changes &amp; deprecations</h3><p>The following are the breaking changes in the Flutter 2.5 release:</p><ul><li><a href=\"https://flutter.dev/docs/release/breaking-changes/default-scroll-behavior-drag\">Default drag scrolling devices</a></li><li><a href=\"https://flutter.dev/docs/release/breaking-changes/2-2-deprecations\">Deprecated API removed after v2.2</a></li><li><a href=\"https://flutter.dev/docs/release/breaking-changes/flutter-lints-package\">Introducing package:flutter_lints</a></li><li><a href=\"https://flutter.dev/docs/release/breaking-changes/theme-data-accent-properties\">ThemeData’s accent properties have been deprecated</a></li><li><a href=\"https://flutter.dev/docs/release/breaking-changes/gesture-recognizer-add-allowed-pointer\">GestureRecognizer Cleanup</a></li><li><a href=\"https://flutter.dev/docs/release/breaking-changes/animation-sheet-builder-display\">Replace AnimationSheetBuilder.display with collate</a></li><li><a href=\"https://flutter.dev/docs/release/breaking-changes/platform-views-using-html-slots-web\">Using HTML slots to render platform views in the web</a></li><li><a href=\"https://github.com/flutter/flutter/pull/80756\">Migrate LogicalKeySet to SingleActivator</a></li></ul><p>For the full list of breaking changes since the 1.17 release, <a href=\"https://flutter.dev/docs/release/breaking-changes\">see flutter.dev</a>.</p><p>As we continue to update Flutter Fix (available in your IDE and via the dart fix command), we have a grand total of 157 rules to automatically migrate your code affected by these or past breaking changes, as well as any deprecations. As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a>, they help us identify these breaking changes. To learn more, check out <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">our breaking change policy</a>.</p><p>Also, with the Flutter 2.5 release, we are deprecating support for iOS 8 <a href=\"http://flutter.dev/go/rfc-ios8-deprecation\">as announced in Sept, 2020</a>. Dropping support for iOS 8, which has less than 1% market share, allows the Flutter team to focus on new platforms in wider usage. Deprecation means that these platforms may work but that we will not test new versions of Flutter or the plugins on these platforms. You can see the list of <a href=\"https://flutter.dev/docs/development/tools/sdk/release-notes/supported-platforms\">currently supported Flutter platforms on flutter.dev</a>.</p><h3>Summary</h3><p>In closing, thank you as always to the Flutter community around the world that makes all of this possible. To the hundreds of developers who have contributed and reviewed the 1000s of PRs in this update, here’s to the fruits of each of your efforts. Together, we’re working to transform the app development process for developers around the world so you can ship more, faster, deploying to the platforms you care about from a single codebase.</p><p>Stay tuned for more updates from all of us on the Flutter team at Google. The year is not over yet!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6f080c3f3dc\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-2-5-6f080c3f3dc\">What’s new in Flutter 2.5</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-09-01T00:29:04.000Z":{"title":"Raster thread performance optimization tips","link":"https://medium.com/flutter/raster-thread-performance-optimization-tips-e949b9dbcf06?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/e949b9dbcf06","category":["flutter","performance"],"dc:creator":"Filip Hracek","pubDate":"Wed, 01 Sep 2021 00:29:04 GMT","atom:updated":"2021-09-01T00:29:04.565Z","cc:license":"https://creativecommons.org/licenses/by-nc/4.0/","content:encoded":"<p>Recently, I sat down to tweak the performance of FlutterFolio, an app that was built as a design showcase for Flutter Engage. With a single change, I made FlutterFolio significantly faster.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*16rv_KQNNU3IsAHCfI3G6A.png\" /></figure><p>But, first, I had to search for what to change. This article is about that search.</p><p>FlutterFolio is a fully functional app that was created in 6 weeks (!) from design to implementation, for mobile, desktop, and the web. The development team clearly had to cut some corners — no judgement there. The scope of the project and the very short timeline forced them to do that.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fx4xZkdlADWo%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dx4xZkdlADWo&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fx4xZkdlADWo%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7c22b91a90a681b78e65ebfbd4728965/href\">https://medium.com/media/7c22b91a90a681b78e65ebfbd4728965/href</a></iframe><p>In fact, this presents a great opportunity, because the app is more “real life” than all the sample apps I can think of.</p><p>And, performance optimization is better explained on real life apps than on synthetic problems.</p><h3>Step 1: Performance profiling</h3><p>What’s the first step of any optimization? Measurement. Knowing that an app seems slow doesn’t cut it. You need to be a bit more precise. Two reasons:</p><ol><li>The measurement can point us in the direction of the worst offenders. Every part of every app can be made faster and more efficient. But, you have to start somewhere. Performance profiling lets us see which parts are doing OK and which parts are doing poorly. We can then focus on the parts that are doing poorly, and make more progress in our limited time.</li><li>We can compare the before and the after. Sometimes, a code change seems like a good idea, but in reality, it doesn’t make a significant difference. Having a baseline (the before) means that we can quantify the effect of our changes. We can compare the before with the after.</li></ol><p>Performance profiling of apps is hard. I wrote <a href=\"https://medium.com/flutter/performance-testing-of-flutter-apps-df7669bb7df7\">a long article</a> about it in 2019. So, let’s start simple. We run the app in profile mode, turn on the performance overlay, and use the app, while watching the performance overlay graph.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*H6YKXQ1-ToTZ50v2\" /></figure><p>Immediately, we see that the Raster thread is struggling.</p><p>This happens especially when scrolling through the home page of the app. You should always prioritize the parts of the app where the user spends most of their time or where performance problems are especially noticeable to the user. In other words, if you have two performance problems, and one of them happens on the start screen, and the other one is buried in the settings page, fix the start screen first.</p><p>Let’s look at what the Raster thread is doing.</p><h3>Aside: UI thread versus Raster thread</h3><p>Actually, let’s first clarify what the Raster thread does.</p><p>All Flutter apps run on at least two parallel threads: the UI thread and the Raster thread. The UI thread is where you build widgets and where your app logic runs. (You can create isolates, which means that you can run your logic on other threads, but, for simplicity, we’ll ignore that.) The Raster thread is what Flutter uses to _rasterize_ your app. It takes instructions from the UI thread and translates them into something that can be sent to the graphics card.</p><p>To be more concrete, let’s have a look at a build function:</p><pre>Widget build(BuildContext context) {<br>  return Image.asset(&#39;dash.png&#39;);<br>}</pre><p>The above code runs on the UI thread. The Flutter framework figures out where to place the widget, what size to give it, and so on — still on the UI thread.</p><p>Then, after Flutter knows everything about the frame, it’s over to the Raster thread. The Raster thread takes the bytes in `dash.png`, resizes the image (if needed), and then applies opacity, blend modes, blur, and so on, until it has the final pixels. The Raster thread then sends the resulting information to the graphics card, and, therefore, to the screen.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/497/0*zJIzYT-PwDfPDcj3\" /></figure><h3>Step 2: Digging into the timeline</h3><p>OK, back to FlutterFolio. Opening Flutter DevTools lets us look more closely at the timeline.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ypQsScjnj0Mw5Ijg\" /></figure><p>On the <strong>Performance</strong> tab, you can see that the UI thread (the pale blue bars) is doing quite well, while the Raster thread (the dark blue and red bars) is taking a surprising amount of time for each frame, especially when scrolling down the home page. Therefore, the problem isn’t inefficient build methods or business logic. The problem is asking the Raster thread to do too much.</p><p>The fact that <em>every frame </em>spends a long time on the Raster thread tells us something. It says that we’re asking the Raster thread to do some work <em>over and over</em> — it’s not something being done once in a while.</p><p>Let’s pick a frame and look at the <strong>Timeline Events</strong> panel..</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*W7OF2hEK--gS5XwF\" /></figure><p>The top part of the timeline, with the light gray background, is the UI thread. Once again, you can see that the UI thread is not the problem.</p><p>Below the UI thread, you see the events on the Raster thread, starting with GPURasterizer:Draw. Unfortunately, this is where things get a little hazy. There are a lot of calls to exotic-sounding methods such as TransformLayer::Preroll, OpacityLayer::Preroll, PhysicalShapeLayer::Paint and so on. There are no details about what’s going on in these methods, and these are not names most Flutter developers recognize.</p><p>They are C++ methods from the Flutter Engine. If you feel like it, you can <a href=\"https://www.google.com/search?q=PhysicalShapeLayer%3A%3APaint\">do a search</a> for these method names, and read the code and the comments to see what’s going on under the hood. Sometimes, this can give you a bit more intuition about what the Raster thread is doing. But, this type of research is not strictly required to find performance problems. (I didn’t do this until relatively recently, and, yet, I was able to optimize the performance of quite a few apps.)</p><p>Then, there’s the long event labeled SkCanvas::Flush. It takes 18 milliseconds, which is way above reasonable. Unfortunately, that event also lacks any detailed information, so we’ll need to play detective a bit.</p><p>The Sk in SkCanvas stands for <a href=\"https://skia.org/\">Skia</a>, the graphics engine that Flutter uses for rendering at the very bottom of its stack. <a href=\"https://api.skia.org/classSkCanvas.html\">SkCanvas</a> is a low-level C++ class, similar to Flutter’s own <a href=\"https://api.flutter.dev/flutter/dart-ui/Canvas-class.html\">Canvas</a> (which you might be familiar with if you work with <a href=\"https://api.flutter.dev/flutter/widgets/CustomPaint-class.html\">CustomPaint</a>). All of your app’s pixels, lines, gradients — all of the UI — goes through SkCanvas. And, SkCanvas::Flush is where this class does most of its work after it gathers all the information it needs. The documentation <a href=\"https://api.skia.org/classSkCanvas.html#a3f8ea661c6021dc4dde325aab87870bf\">says</a> that the Flush method “resolves all pending GPU operations.”</p><p>Let’s review what we learned from the performance timeline:</p><ul><li>The Raster thread is the major problem. The UI thread is doing relatively fine.</li><li>While scrolling, the Raster thread takes a long time for _every frame_. Some expensive rasterization work is being done all the time.</li><li>`SkCanvas::Flush` takes a long time, which means that Skia is doing a lot of homework.</li></ul><p>We do <em>not</em> know what that homework is. Let’s review the code.</p><h3>Step 3: Read the code</h3><p>Armed with knowledge, let’s look at the source code. If the code is unfamiliar (as it was for me in the case of FlutterFolio), it pays to switch from profile mode to debug mode, and use the <a href=\"https://flutter.dev/docs/development/tools/devtools/inspector\">Flutter Inspector</a> to jump to the source code of the relevant widgets.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*OvXs3e-CZJzW49hA\" /></figure><p>FlutterFolio’s home page, at least on mobile devices, seems to be, basically, a <a href=\"https://github.com/gskinnerTeam/flutter-folio/blob/2bb2101c14ee3f30e11f966e9ce6c50dee600c0b/lib/views/home_page/covers_flow_list_mobile.dart#L36-L40\">vertical PageView populated with BookCoverWidgets</a>. Looking at BookCoverWidget, you can see that it’s essentially <a href=\"https://github.com/gskinnerTeam/flutter-folio/blob/2bb2101c14ee3f30e11f966e9ce6c50dee600c0b/lib/views/home_page/book_cover/book_cover.dart#L77-L122\">a Stack of various widgets</a>, starting with a large image at the bottom, continuing with some animated overlays, the main text content, and ending with a mouse-over overlay at the top.</p><pre>child: Stack(fit: StackFit.expand, children: [<br>  /// /////////////////////////////<br>  /// Background Image<br>  // Animated scale for when we mouse-over<br>  AnimatedScale(<br>    duration: Times.slow,<br>    begin: 1,<br>    end: isClickable ? 1.1 : 1,<br>    child: BookCoverImage(widget.data),<br>  ),</pre><pre>  /// Black overlay, fades out on mouseOver<br>  AnimatedContainer(duration: Times.slow, <br>     color: Colors.black.withOpacity(overlayOpacity)),</pre><pre>  /// When in large mode, show some gradients, <br>  /// should sit under the Text elements<br>  if (widget.largeMode) ...[<br>    FadeInLeft(<br>      duration: Times.slower,<br>      child: _SideGradient(Colors.black),<br>    ),<br>    FadeInUp(child: _BottomGradientLg(Colors.black))<br>  ] else ...[<br>    FadeInUp(child: _BottomGradientSm(Colors.black)),<br>  ],</pre><pre>  /// Sit under the text content, and unfocus when tapped.<br>  GestureDetector(behavior: HitTestBehavior.translucent, <br>      onTap: InputUtils.unFocus),</pre><pre>  /// BookContent, shows either the Large cover or Small<br>  Align(<br>    alignment: widget.topTitle ? Alignment.topLeft : Alignment.bottomLeft,<br>    // Tween the padding depending on which mode we&#39;re in<br>    child: AnimatedContainer(<br>      duration: Times.slow,<br>      padding: EdgeInsets.all(widget.largeMode ? Insets.offset : Insets.sm),<br>      child: (widget.largeMode)<br>          ? LargeBookCover(widget.data)<br>          : SmallBookCover(widget.data, topTitle: widget.topTitle),<br>    ),<br>  ),</pre><pre>/// Mouse-over effect<br>  if (isClickable) ...[<br>    Positioned.fill(child: FadeIn(child: RoundedBorder(color: theme.accent1, ignorePointer: false))),<br>  ],<br>]),</pre><p>Now, remember: you’re looking for something that happens in every frame (that is, it’s always present), and that is potentially expensive for the Skia renderer to draw (images, blurs, blends, and so on).</p><h3>Step 4: Drill down</h3><p>Now, you need to drill down to find widgets that might be problematic. One way to do this is to temporarily remove various widgets from the app and see what kind of effect this has on the performance.</p><p>Remember, the first child of the Stack is the background, and every subsequent child is a layer on top of the previous widgets. So, the first child is the background image, represented by BookCoverImage. You could remove it, but the homepage would look like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*gC4MeiTr5qVd1fW7\" /></figure><p>That defeats the purpose of the whole page. Looking closer at BookCoverImage, you can see that it’s just a simple wrapper around Image. With one notable exception (mentioned later in this article), there isn’t much that could be improved here.</p><p>Moving on, there’s this code:</p><pre>/// Black overlay, fades out on mouseOver<br>AnimatedContainer(duration: Times.slow, <br>  color: Colors.black.withOpacity(overlayOpacity)),</pre><p>This is a widget that covers the whole image with a layer of transparent black. overlayOpacity is 0 by default (and most of the time), so this layer is fully transparent. Hmm. Let’s remove it, and run the app in profile mode again.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*NiyiyjMKhKn7LJFk\" /></figure><p>Interesting! The Raster thread still takes quite a lot of load, but there is a major performance improvement.</p><p>I decided to implement a more robust performance profiling tool for FlutterFolio, so that I can prove that the improvement is real and not just a fluke. This change gives me an impressive 20% less CPU time spent rasterizing overall and 50% less potential jank.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oE665wZJZhFsz-7s\" /></figure><p>All in all, this is a massive change for removing a single widget that does nothing most of the time.</p><p>The <a href=\"https://github.com/gskinnerTeam/flutter-folio/pull/62\">fix</a> is simple:</p><pre>/// Black overlay, fades out on mouseOver<br>if (overlayOpacity &gt; 0)<br>  AnimatedContainer(duration: Times.slow,<br>      color: Colors.black.withOpacity(overlayOpacity)),</pre><p>Now, you only add the transparent overlay when it has non-zero opacity (that is, it’s at least partially visible). You avoid the (very common!) scenario in which a completely transparent layer is created and rasterized, but doesn’t have any effect.</p><p>And, just like that, the app is both smoother and more battery efficient.</p><p><strong>Note: </strong>Why do you need to do this? Shouldn’t Flutter be smart enough to make this optimization for us? Read the issue <a href=\"https://github.com/flutter/flutter/pull/72526#issuecomment-749185938\">here</a> to learn why it can’t. And why is the transparent opacity slow in the first place? That is out of scope of this article but it has to do with a BackdropFilter widget further up the Stack that interacts with every widget below it.</p><p>The main point of this article isn’t to teach you about this particular performance pitfall. You might never see it again. My goal is to teach you how to optimize Raster thread performance in general.</p><h3>Step 5: Generalize</h3><p>Before moving on to a completely different issue, it’s often a good idea to look elsewhere in the project for similar problems. Are there other places in our app with large-area overlays? Can you avoid them?</p><p>In this case, the next few lines create large gradients that fade in as you scroll:</p><pre>/// When in large mode, show some gradients, <br>/// should sit under the Text elements<br>if (widget.largeMode) ...[<br>  FadeInLeft(<br>    duration: Times.slower,<br>    child: _SideGradient(Colors.black),<br>  ),<br>  FadeInUp(child: _BottomGradientLg(Colors.black))<br>] else ...[<br>  FadeInUp(child: _BottomGradientSm(Colors.black)),<br>],</pre><p>And, sure enough, removing these animated, almost-full-screen gradients significantly improves the scrolling performance. Unfortunately, in this case, the solution isn’t as simple as with the previous example. These gradients aren’t invisible. They start fading in as soon as the user reaches that cover. Removing them <em>does</em> make a visual difference.</p><p>One idea is to delay the fade in for a bit, so that the animation only starts when the user lands on a specific BookCover. That way, you can lighten the Raster thread’s load while the user is scrolling, and hopefully avoid some of the potential jank.</p><p>But, that’s a change to the app’s motion design, and so it needs to be discussed with the larger team. Many performance optimizations will fall into this category. Performance optimization is often an exercise in compromise.</p><h3>Repeat Steps 2–5 until happy</h3><p>We’ve only looked at one type of problem so far. There are always more.</p><p>Here is one idea about what to do next: are the app’s image assets too large? Remember, the Raster thread is in charge of taking image bytes, decoding them, resizing, applying filters and so on. If it’s loading and resizing a 20 MB high-definition image into a tiny avatar image on a screen, then you’re wasting resources.</p><p>When your app is running in debug mode, you can use Flutter Inspector to <a href=\"https://api.flutter.dev/flutter/painting/debugInvertOversizedImages.html\">invert oversized images</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VBQwkJIdQBuQl6G9Xy0glg.png\" /></figure><p>This will color invert and flip all images in your app that are too large for their actual use. You can then peruse the app and watch for unnatural changes.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*n7AfpJ2tNR4CLB0V\" /></figure><p>The debug mode also reports an error every time it encounters such an image, for example:</p><blockquote>[ERROR] Image assets/images/empty-background.png has a display size of 411×706 but a decode size of 2560×1600, which uses an additional 19818KB.</blockquote><p>The fix here isn’t straightforward, though. On mobile, you don’t need a 2560×1600 image, but on desktop, you might. And, remember, FlutterFolio is an app that runs on all of Flutter’s targets, including desktop. If in doubt, <a href=\"https://api.flutter.dev/flutter/painting/debugInvertOversizedImages.html\">read the API docs</a>.</p><h3>Conclusion</h3><p>As you can see, optimizing performance is an art and a science. Robust benchmarking helps and so does an intimate understanding of the framework and its built-in widgets.</p><p>Ultimately, practice makes perfect. Optimize enough apps, and you get better.</p><p>Happy hunting.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e949b9dbcf06\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/raster-thread-performance-optimization-tips-e949b9dbcf06\">Raster thread performance optimization tips</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-08-23T21:37:55.000Z":{"title":"Writing a good code sample","link":"https://medium.com/flutter/writing-a-good-code-sample-323358edd9f3?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/323358edd9f3","category":["code-samples","testing","flutter","flutter-development","flutter-app-development"],"dc:creator":"Brett Morgan","pubDate":"Mon, 23 Aug 2021 21:37:55 GMT","atom:updated":"2021-08-23T21:37:55.610Z","content:encoded":"<p>Authoring a good code sample is hard. Let me clarify that, putting together a sample that demonstrates the usage of an API, or shows off a UI idiom, can be quick and easy. The difficulty comes from the additional pieces you need to add to your repository to keep the code sample fresh and appealing to your developers.</p><p>The first thing to add to your code is a good README that starts with a summary of why a developer should invest the time and effort to investigate and understand the sample. Following that with usage instructions, and links to an issue tracker where developers can raise bugs and ask for clarification if something is confusing is a great next step.</p><p>Next up, the code itself. Does the code follow conventions for layout and usage? This may be as simple as where does the code go, or as intricate as appropriate settings for linters and the like. I like programming community languages that have adopted a strong standard as to code formatting, layout, and linting rule sets. These standards bring conformity to the look and feel of the code which make it easier to navigate. To enforce code formatting for Dart and Flutter you can add the following command to your CI pipeline to fail the build if it isn’t correctly formatted:</p><pre>$ dart format --output none --set-exit-if-changed .</pre><p>After code formatting, the next step is enforcing a good set of lints. For Dart, I strongly recommend investigating the <a href=\"https://pub.dev/packages/lints\">lints</a> package, and for Flutter I likewise recommend the <a href=\"https://pub.dev/packages/flutter_lints\">flutter_lints</a> package. To make sure the lints pass in the CI pipeline, add the following command:</p><pre>$ dart analyze</pre><p>Tests. Oh so many tests. Unit tests, integration tests, and for Flutter we also have Widget tests. Tests are great for samples, as the tests communicate intent of how a piece of code is intended to be used. The tests also keep a codebase evergreen, when used in combination with the aforementioned CI pipeline. A good place to learn more about Flutter’s testing capability is the <a href=\"https://codelabs.developers.google.com/codelabs/flutter-app-testing\">How to test a Flutter app codelab</a>. The CI commands for Dart and Flutter respectively:</p><pre>$ flutter test   # for Flutter projects<br>$ dart test      # for pure Dart projects</pre><p>If your code repository is hosted on GitHub, then I suggest you use the <a href=\"https://github.com/marketplace/actions/setup-dart-sdk\">Dart Setup</a> action if you have a Dart project, and the <a href=\"https://github.com/marketplace/actions/flutter-action\">Flutter Action</a> if you have a Flutter project. For additional points, consider adding the <a href=\"https://github.com/marketplace/actions/very-good-coverage\">Very Good Coverage</a> action to keep test coverage high. Given you’ve gone this far, you probably should advertise your CI status with a <a href=\"https://docs.github.com/en/actions/managing-workflow-runs/adding-a-workflow-status-badge\">workflow status badge</a>.</p><p>Hopefully the above list of additions guides you through making your code sample much more valuable to your target audience.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=323358edd9f3\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/writing-a-good-code-sample-323358edd9f3\">Writing a good code sample</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-08-22T14:50:58.000Z":{"title":"GSoC ’21: Creating a desktop sample for Flutter","link":"https://medium.com/flutter/gsoc-21-creating-a-desktop-sample-for-flutter-7d77e74812d6?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/7d77e74812d6","category":["flutter-desktop","linting","gsoc","flutter"],"dc:creator":"Abdullah Deshmukh","pubDate":"Sun, 22 Aug 2021 14:50:58 GMT","atom:updated":"2021-08-25T14:43:12.807Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/923/1*aRiqWvnUYD-cSbGhxTnUsw.jpeg\" /></figure><p><a href=\"https://summerofcode.withgoogle.com/\">Google Summer of Code</a> (GSoC) is an open source, summer program sponsored by Google. During this program, students work on a project under the guidance of an open source organization.</p><p>This was the second time that the Dart team participated as a mentoring organization in GSoC. Unfortunately, due to the unavailability of mentors, there weren’t any Flutter projects on the <a href=\"https://docs.google.com/document/d/1KfaTPPt6rqvgPD4kkZcsaehXC9FijcJ20V4J3FDLsRk/edit#\">ideas list</a> this year. Because it was my second time participating in GSoC, I contacted my mentor from last year, Brett, to see if working on a project would be possible. After a discussion with him and the org admin, I found a project to work on.</p><p>This blog shows the work I did for my project. <a href=\"https://summerofcode.withgoogle.com/organizations/4658845562961920/#projects\">Check out all the projects under Dart this year</a>. All of the resulting source code is in GitHub repositories, and you can see how the work progressed by looking at individual pull requests (PRs).</p><h3>Project details: Flutter desktop tool</h3><p>This year, at Flutter Engage, a beta snapshot of Flutter’s desktop support was included in the stable channel. This caused a need for a desktop sample for the <a href=\"https://github.com/flutter/samples\">samples</a> repo that could, later on, be released on the desktop app stores like the <a href=\"https://developer.apple.com/macos/distribution/\">macOS App Store</a>, the <a href=\"https://docs.microsoft.com/en-us/windows/uwp/publish/\">Microsoft Store</a>, and the <a href=\"https://snapcraft.io/docs/snapcraft-overview\">Linux Snap Store</a>. After a discussion with Brett and the team, we decided to build a desktop sample that would also be a tool to help developers manage lint rules for their projects. Check out the <a href=\"https://github.com/flutter/samples/tree/master/experimental/linting_tool\">linting_tool on GitHub</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Lh2I-A4Aak5UZXze\" /><figcaption>A screenshot of the app</figcaption></figure><p>The app uses the lint rules that are hosted by the Dart team from the <a href=\"https://github.com/dart-lang/linter\">dart-lang/linter</a> repo, and the app can do the following:</p><p><strong>Show a list of available lint rules for Dart.</strong></p><p>You can fetch a list of lint rules from an API. The app uses the <a href=\"https://pub.dev/packages/flutter_markdown\">flutter_markdown</a> package to format the details and the code snippets.</p><p>Related PR: <a href=\"https://github.com/flutter/samples/pull/856\">#856</a></p><p><strong>Save the rules to different profiles.</strong></p><p>You can create different rule profiles for different types of projects. The app uses the <a href=\"https://pub.dev/packages/hive\">hive</a> database to maintain persistent storage.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FwXcFHhXjCuOEaFw\" /><figcaption>A list of saved profiles</figcaption></figure><p>Related PR: <a href=\"https://github.com/flutter/samples/pull/860\">#860</a></p><p><strong>Modify and export profiles.</strong></p><p>The profiles can be modified to your liking and then exported to Flutter projects as analysis_options.yaml files. The packages <a href=\"https://pub.dev/packages/yaml\">yaml</a>, <a href=\"https://pub.dev/packages/json2yaml\">json2yaml</a>, and <a href=\"https://pub.dev/packages/file_selector\">file_selector</a> are used to accomplish this.</p><p>Related PRs: <a href=\"https://github.com/flutter/samples/pull/874\">#874</a>, <a href=\"https://github.com/flutter/samples/pull/869\">#869</a></p><p><strong>Show default profiles.</strong></p><p>You can view a list of default profiles that <a href=\"https://pub.dev/packages/effective_dart\">effective_dart</a>, <a href=\"https://pub.dev/packages/pedantic\">pedantic</a>, <a href=\"https://pub.dev/packages/lints\">lints</a>, and <a href=\"https://pub.dev/packages/flutter_lints\">flutter_lints</a> use.</p><p>Related PR:<strong> </strong><a href=\"https://github.com/flutter/samples/pull/871\">#871</a></p><p>To see how the project progressed during the GSoC period, see <a href=\"https://github.com/flutter/samples/pulls?q=author%3Aabd99+created%3A2021-06-07..2021-08-31+\">this set of PRs</a>.</p><p>There are a few more things that I’d like to add to the project. The two main things are the ability to load profiles from existing analysis_options.yaml files and the ability to search for a specific rule in the rules list. I also have a new video series that I’m working on that will cover how to deploy Flutter desktop apps. I’ll update this blog when it’s out and will also share it on my <a href=\"https://twitter.com/abdullahzakir99\">Twitter account</a>.</p><h3>Experience</h3><p>My experience with Google Summer of Code (GSoC) this time was even better than last year. (Check out <a href=\"https://medium.com/flutter/learn-testing-with-the-new-flutter-sample-gsoc20-work-product-e872c7f6492a\">Learn testing with the new Flutter sample</a> to read more about the project I worked on last year.) I think this year was better because the project was more technical, covered more concepts, and was related to something that I never worked on before. I also knew a lot more people on the team this time. I think GSoC will be a part of my life that I won’t ever forget.</p><h4>Mentorship</h4><p><a href=\"https://github.com/domesticmouse\">Brett</a> was always there to help me with all my questions and blockers. He was very understanding when I had to give more time to my other commitments like school, other gigs, and family-related things. I think the best thing was that he gave me complete freedom to explore things and tweak the project’s scope if I thought that something would be a valuable addition to the project. One cool thing I did this time was I asked him general software engineering-related questions that were not directly related to the project at the end of every weekly meeting, questions like “How does Google handle estimates?” and “What do you think about remote work?”. This helped me learn things about the software industry that aren’t related to programming. I highly recommend that you try this during your internships or GSoC-like projects. And, yes, he’s still the coolest person I have ever worked with.</p><h4>Learning</h4><p>Learning is the best part about open source software. A lot of things that I did this time couldn’t be Googled. I read a lot of code, finding how different packages do the same things and the general patterns in which they differ. I also learned how to find a great package for a project from a huge list of available ones. Because this category was new to me, this experience helped me learn a lot in a short amount of time.</p><h4>Challenges</h4><p>There were a few challenges that I got to learn from this time. The first one was related to the timeline. This year, the timeline of GSoC was reduced in half which made us reprioritize and skip a lot of features that might have been valuable additions to the project. The other challenges were working on a completely new category and finding good resources on how to do things in a category that isn’t too popular.</p><h3>Final thoughts</h3><p>I had an amazing experience over the past year working with Flutter and the samples repo. And, I would like to thank Brett, the Flutter team, and the GSoC team for that.</p><p><em>About the author: Abdullah is a fresh computer engineering graduate based in Pune, India. He has been building mobile apps over the past 4 years and enjoys working with things built around it. You can connect with him on </em><a href=\"https://twitter.com/abdullahzakir99\"><em>Twitter</em></a><em>, </em><a href=\"https://www.linkedin.com/in/abdullahzakir99/\"><em>LinkedIn</em></a><em>, and </em><a href=\"https://github.com/abd99\"><em>GitHub</em></a><em>.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7d77e74812d6\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/gsoc-21-creating-a-desktop-sample-for-flutter-7d77e74812d6\">GSoC ’21: Creating a desktop sample for Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-08-19T18:00:00.000Z":{"title":"Flutter Hot Reload","link":"https://medium.com/flutter/flutter-hot-reload-f3c5994e2cee?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f3c5994e2cee","category":["flutter","dart","hot-reload"],"dc:creator":"Jens Johansen","pubDate":"Thu, 19 Aug 2021 18:00:00 GMT","atom:updated":"2021-08-19T18:00:00.563Z","content:encoded":"<h4>What happens during a hot reload, and how we made it faster for Flutter 2.2.</h4><p>Hot reload was fast in Flutter 2.0, but it’s faster in Flutter 2.2. Read on for details on hot reload in general, and how we made it faster for Flutter 2.2.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*iaLz5LEBdsZJRR_W8UCQcQ.png\" /></figure><h3>Introduction</h3><p>One of Flutter’s great features is <em>hot reload</em>. You press r on your keyboard, and moments later the impact of your changes can be seen on the device. In your terminal (or maybe at the bottom of your IDE) you can read something like Reloaded 1 of 553 libraries in 297ms. But what actually goes on under the hood when you initiate a hot reload, and how did the Dart and Flutter teams make it even faster?</p><h3>Overview of a hot reload</h3><p>A hot reload in Flutter roughly consists of the following five steps:</p><ol><li>flutter_tools scans the needed files for changes. It looks at every needed file and checks if its last changed timestamp is newer than the previous compile timestamp.</li><li>flutter_tools instructs a running Dart compiler to recompile the application and tells it which files have changed. The Dart compiler recompiles.</li><li>flutter_tools sends the updated files to the device. This includes any changed assets and the newly compiled <em>delta kernel file</em> (the output of the compilation, a file that the Dart VM can understand).</li><li>flutter_tools asks all isolates in the Dart VM on the device to reload their sources (to read the changed delta kernel file and perform its magic).</li><li>flutter_tools instructs the application on the device to reassemble — to rebuild all widgets on screen, reload assets, redo layout, repaint, etc.</li></ol><p>On my developer machine, with the target device being Linux (that is, a desktop application running locally), performing the first hot reload on a freshly created flutter create application after only updating the timestamp on the lib/main.dart file I get timings like these (extracted from flutter run -v):</p><ol><li>Scanning files takes ~13 ms.</li><li>Recompiling takes ~67 ms.</li><li>Sending files to the device takes ~2 ms.</li><li>The Dart VM reloads the sources in ~96 ms.</li><li>Reassembling takes ~114 ms.</li></ol><p>If I instead have a bigger application (and change some other file) I might instead get times like these:</p><ol><li>Scanning files takes ~12 ms.</li><li>Recompiling takes ~386 ms.</li><li>Sending files to the device takes ~2 ms.</li><li>The Dart VM reloads the sources in ~171 ms.</li><li>Reassembling takes ~229 ms.</li></ol><p>In both cases the following steps take the most time:</p><ul><li>Recompiling</li><li>Reloading</li><li>Reassembling</li></ul><p>To make hot reload faster we have to make one or more of those three steps faster.</p><p>Here I’ll focus on the first part: recompiling the changed source files into something that the Dart VM can use.</p><h3>Recompiling</h3><p>Logically if I as a user change a file — say, foo.dart — I might expect a recompilation to look like this:</p><ol><li>The compiler has the old state in memory.</li><li>The compiler is told that foo.dart has changed.</li><li>The compiler throws away its internal state for foo.dart.</li><li>The compiler recompiles foo.dart.</li><li>Done.</li></ol><p>This would be great. That would mean that whichever file I change I’d only recompile that file and — presumably — the recompilation would be fast.</p><p>Unfortunately recompilation doesn’t generally work like that. Here are two examples of why recompilation might not be so simple:</p><ul><li>foo.dart used to contain class Foo, which is used all over the place. The changed file doesn’t contain this class (maybe it was manually renamed), and every file using the class should get a compile error.</li><li>foo.dart used to have a field defined as var z = 42. Another file uses this field: var z2 = z * 2. Dart type inference figured out that z was an integer and that z2 was an integer because z was one. Now the field changed to say var z = 42.2. This time Dart type inference will figure out that the field is a double, but without recompiling the other library as well z2 will still (incorrectly) be marked as an integer.</li></ul><p>For this reason, a recompilation in Dart has long looked like this:</p><ol><li>The compiler has the old state in memory.</li><li>The compiler is told that foo.dart has changed.</li><li>The compiler throws away its internal state for foo.dart.</li><li>The compiler checks which files import or export foo.dart and throws those away too.</li><li>The compiler checks which files import or export the files in step 4 and throws those away too.</li><li>On and on: throw away all transitive importers and exporters.</li><li>The compiler recompiles all (now) “missing” libraries.</li><li>Done.</li></ol><p>This might sound bad, but in many cases it isn’t. Although changing your own custom widget set might result in recompiling all the code <em>you</em> wrote, it doesn’t result in recompiling the Flutter framework itself, for example, because the Flutter framework doesn’t import or export your libraries. On the other hand, if you change a file that’s central to the Flutter framework, you’ll end up recompiling (almost) everything.</p><p>Looking back at the (incomplete) list of reasons why just recompiling the single changed file doesn’t work, though, we might see a pattern: It doesn’t work because you made <em>global</em> changes — changes that influence other libraries. But what if you only changed a comment? Or added another debug-print to your build method? Or fixed an off-by-one bug in your utility method? Those changes aren’t global, and we should be able to do better!</p><h3>Doing better</h3><p>For non-global changes — changes that can’t influence the compilation of other libraries — we could in fact recompile only the changed library and still preserve semantics. The main problem is figuring out when a change is global and when it isn’t (and doing so fast). Luckily this can be done in incremental steps: we don’t have to make it perfect right away (or at all).</p><p>A first step might be to compare the file as it was with the file as it is now while ignoring comments in both versions of the file. If, when comparing this way, both versions of the file are equal, we conclude that there were no global changes and we proceed to recompile the single changed file instead of the transitive import-export graph. This technique isn’t perfect. For example, it would still trigger the recompilation of all transitive importers and exporters when fixing that off-by-one bug in your utility method. But it would allow you to fix that spelling mistake in your comments while recompiling only that one file.</p><p>A quick side note here: Why do we have to recompile at all if we’re only changing comments? It’s mostly because of stack traces. Internally some nodes (representing your code) contain <em>offsets</em> — information about their placement in the file. If this information becomes out of date, your stack trace contains invalid information. For example, it might claim that something happened at line 42 when really it didn’t.</p><p>To get to a place where you can in fact fix that off-by-one bug in your utility method while still only recompiling that file, we have to ignore one more thing when checking for global changes: function bodies. Again we’ll compare the before and after version of the changed file, this time ignoring both comments and function bodies. If they’re the same we’ll recompile only that file.</p><p>Now we’re actually in a position where you can make a number of useful changes without recompiling more than the file you’ve changed. You can add, remove, and otherwise change comments. You can add (and remove) debug-prints to your build methods. You can even fix bugs in your utility methods.</p><h3>Good news!</h3><p>As it turns out these improvements to recompilation have actually been made. If you’re using Flutter 2.2 you might even have noticed it already. If not, maybe you will now. Truth be told, for small applications you likely won’t notice much of a speedup, but for larger applications you should.</p><p>I’ve made a few examples of non-global changes to gauge the effect.</p><p>For the <a href=\"https://github.com/flutter/samples/tree/master/veggieseasons\">Veggie Seasons</a> sample application (a relatively small application):</p><ul><li>Changing lib/main.dart offers no improvement. It compiled one file before and one file now.</li><li>Changing lib/data/veggie.dart gives improvements in the 30% range. Actual compilation time on my computer goes from 100+ ms to &lt;20 ms (it used to compile 18 files, now only compiles 1 file). This naturally is much more than 30%, but because recompilation was only one out of three timesinks (the other two being reloading and reassembly) the overall change comes out at around 30%.</li></ul><p>For <a href=\"https://github.com/flutter/gallery\">Flutter Gallery</a> (a relatively large application):</p><ul><li>Changing lib/main.dart yields very minor improvements (it compiles 1 file instead of 2).</li><li>Changing lib/layout/adaptive.dart results in almost halving the reload time. Recompilation time alone goes from almost 400 ms to 40 ms (recompiling 1 file instead of 47 files).</li></ul><p>You should expect real world hot reloads to, on average, be in the order of 30% faster in Flutter 2.2 than they were in Flutter 2.0. To put this in perspective, this change saves Flutter developers, collectively, more than a year of waiting for hot reload every 5 days.</p><h3>Caveats</h3><p>Our changes to hot reload don’t always mean that the compiler does less work. For example, if you add or remove a method, the compiler won’t do less work. If you change the initializer of a field, the compiler won’t do less work. If you change the class hierarchy, the compiler won’t do less work. If you change the body of a function — a case where the compiler generally <em>should</em> do less work — because of technicalities around mixins and FFI, the compiler might <em>still</em> need to do as much work.</p><p>Also, we skipped a couple of technical details when we talked about comparing files. First, we can’t ignore <em>every</em> comment: we need to keep the <a href=\"https://dart.dev/guides/language/evolution#per-library-language-version-selection\">@dart version marker</a> because it has semantic meaning. Second, we can’t ignore every function body because of implementation-specific challenges around mixins and FFI.</p><h3>Conclusion</h3><p>Hot reload was fast in Flutter 2.0, but it’s faster in Flutter 2.2. On average, hot reload is around 30% faster in Flutter 2.2 than in Flutter 2.0, saving Flutter developers, collectively, more than a year of waiting for hot reload every 5 days.</p><p>If you haven’t updated yet (or haven’t even tried Flutter yet), now might be a good time to visit <a href=\"http://flutter.dev\">flutter.dev</a> and give it a try.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f3c5994e2cee\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-hot-reload-f3c5994e2cee\">Flutter Hot Reload</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-08-13T21:04:20.000Z":{"title":"What can we do better to improve Flutter? — Q2 2021 user survey results","link":"https://medium.com/flutter/what-can-we-do-better-to-improve-flutter-q2-2021-user-survey-results-1037fb8f057b?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/1037fb8f057b","category":["user-experience","flutter","user-research","developer-experience","surveys"],"dc:creator":"JaYoung Lee","pubDate":"Fri, 13 Aug 2021 21:04:20 GMT","atom:updated":"2021-08-13T21:04:20.609Z","content:encoded":"<h3>What can we do better to improve Flutter? — Q2 2021 user survey results</h3><p>Written by <a href=\"https://medium.com/@jayoung.lee\">JaYoung</a> &amp; <a href=\"https://medium.com/@mariam.hasnany\">Mariam</a></p><p>The Flutter team runs a user survey every quarter to hear from Flutter users and to make plans for the future. The most recent survey in May was our 13th user survey, which collected over 7,000 responses. We asked Flutter developers to rate their satisfaction with various parts of Flutter, and for those who were not fully satisfied, to comment as to why. The team not only summarized multiple choice survey responses, but also read open-ended comments that were left in the survey. There were 3,403 comments. And we’re back to share what we learned from you.</p><h3>Satisfaction</h3><p>Overall, 92% of respondents said that they are positively satisfied with Flutter (39% somewhat satisfied and 53% very satisfied). Subsystems of Flutter scored different levels of satisfaction, ranging from 72% to 93%, as shown in the following graph. While we’re happy to share that we’re maintaining a high level of satisfaction, we’re also paying attention to specific areas where we can improve.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*m2ihVMc99emY4hQY\" /></figure><h3>Open-ended questions</h3><p>The survey had two open-ended questions:</p><p><em>“Why are you dissatisfied with Flutter? Please share your reasons:”</em></p><p><em>“Is there anything else you’d like to tell the Flutter team?”</em></p><p>We collected 847 comments from the first question and 2,556 comments from the second question. The comments were first divided into various topics (such as documentation, ecosystem, web support, and so on) using a machine learning algorithm. Then, each topic was assigned to the teams working in each area for their analysis.</p><p>Obviously, the teams cannot take on everything and solve all the issues at once. However, each team tried to extract insights from the comments and prioritize the ideas, carefully assessing the effect and effort needed. In the next sections, we’ll share some examples of our takeaways.</p><h4>Example 1: About the general developer experience</h4><p>At a high level, reading through the written feedback was useful in three ways:</p><ol><li>Confirm existing issues</li><li>Find new areas of concern and ideas</li><li>Notice a need for additional information and evidence</li></ol><p>First, we confirmed that there are pain points frequently observed in many other sources, such as the GitHub Issues tab, Reddit, and Stack Overflow. The examples include, but aren’t limited to memory consumption and examples for skill-up. We’re well aware of these challenges and set priorities for them within each subteam. In the meantime, we’d like to re-promote existing resources like <a href=\"https://flutter.dev/docs/development/tools/devtools/memory\">Using the Memory View</a> or the <a href=\"https://events.flutter.dev/engage/learn/beginner\">Learning Center</a>.</p><p>Second, some topics were surprising for us to discover. For example, there were several comments that expressed concern about expanding to desktop and web. These comments asked us to concentrate on making iOS and Android better and to not stretch our focus. We understand the concern and will pay attention. We will also better communicate how we strive to be a strong technology for mobile as well as extend our support for additional platforms over time.</p><p>Last, we wanted to have more information about some of the issues reported in the survey, especially those related to performance and documentation. If you want to have conversations with Flutter contributors and add more details to your issues, then consider posting them on the GitHub Issues tab. This tab is regularly triaged by the team. When you post, follow the rules in <a href=\"https://github.com/flutter/flutter/wiki/Issue-hygiene#file-bugs-for-everything\">File bugs for everything</a>. (Of course, “how to” questions will be answered better in a support forum like Stack Overflow or Discord! See the <a href=\"https://flutter.dev/community\">Community</a> page for more info.)</p><h4>Example 2: About Flutter’s web support</h4><p>The team found that the dissatisfaction feedback that was centered around lack of a stable version for web support was alleviated after the <a href=\"https://medium.com/flutter/flutter-web-support-hits-the-stable-milestone-d6b84e83b425\">stable release of web support </a>with Flutter 2.0 in March. Many of the features that we added for the stable release of the web support for Flutter were based on last year’s <a href=\"https://medium.com/flutter/flutter-on-the-web-slivers-and-platform-specific-issues-user-survey-results-from-q3-2020-f8034236b2a8\">survey</a>, where we asked about the features that you might need for your web apps.</p><p>The web-specific questions in the <a href=\"https://medium.com/flutter/flutter-on-the-web-slivers-and-platform-specific-issues-user-survey-results-from-q3-2020-f8034236b2a8\">Q3 2020 survey</a> were based on the open-ended feedback we received in our Q2 survey from last year. Your comments helped us determine which areas we should prioritize for the initial stable release for Flutter’s web support.</p><p>In 2020, 15% of the comments were about performance and jank, so we prioritized improving our HTML renderer’s performance as well as stabilizing the CanvasKit renderer. Another 15% of the comments were about our plugin gaps and requests for GoogleMaps, Firestore, and so on, so we ensured that the majority of the Google-owned plugins, including GoogleMaps, Firebase_analytics, cloud_firestore and more, were supported in the web stable release. There were several comments regarding scrolling and text rendering. While there is still more work for us to do in these areas, we were able to build a solid foundation for supporting <a href=\"https://github.com/flutter/flutter/issues/70866\">scrolling on desktop form factors </a>as well as supporting <a href=\"https://github.com/flutter/flutter/issues/33523\">rich text functionality</a>, such as multiline text selection in a text field.</p><p>This quarter, we hear that users believe Flutter’s web support still needs improvement. The “look and feel” of web apps is the most commonly mentioned reason for dissatisfaction with Flutter’s web support. We were also asked to provide more web-specific widgets, intuitive responsive widgets, and so on. Asks for search engine optimization (SEO) were also noted. Other reasons for dissatisfaction were right-to-left (RTL) text support, code size, routing, and debugging.</p><p>We’re planning to ask about some of these areas in the next user survey, as we plan our next release. For others, we are already making progress, such as adding <a href=\"https://github.com/flutter/flutter/projects/159\">RTL text support</a>, understanding issues with routing through our current <a href=\"https://github.com/flutter/uxr/tree/master/nav2-usability\">UXR study</a>, and investigating ways to decrease our code size.</p><h3>What’s next?</h3><p>The quarterly survey program is a structured way for us to better understand your needs, but it isn’t the only channel to use for us to hear from Flutter developers. If you have urgent issues that need follow-up, please file them on <a href=\"https://github.com/flutter/flutter/issues\">GitHub</a>.</p><p>The Flutter UXR team will continue to run surveys every quarter through an announcement on flutter.dev, in the Flutter IDE plugin, or on Twitter @FlutterDev. Please continue contributing your thoughts as the team seeks answers to important questions. You can also participate in other research by <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe0i4De809KXVCdljGKrjMj3lxhuzbuFKCtY5PEQPCYtGxFMg/viewform\">signing up for upcoming UX studies</a>.</p><p>Again, thank you to everyone who participated in this survey and provided valuable feedback. Our goal is to build a product that you love, and we appreciate your time and effort helping us.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1037fb8f057b\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/what-can-we-do-better-to-improve-flutter-q2-2021-user-survey-results-1037fb8f057b\">What can we do better to improve Flutter? — Q2 2021 user survey results</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-12-09T01:00:33.000Z":{"title":"What’s New in Flutter 2.8","link":"https://medium.com/flutter/whats-new-in-flutter-2-8-d085b763d181?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/d085b763d181","category":["mobile","firebase","app-development","flutter","flutter-app-development"],"dc:creator":"Chris Sells","pubDate":"Thu, 09 Dec 2021 01:00:33 GMT","atom:updated":"2021-12-09T19:26:28.294Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Performance improvements, new Firebase features, desktop status, tooling updates and more!</h4><p>It’s that time of year in the northern hemisphere: the leaves are turning, the temperature is cooling and the final stable release of the year is here. Hello and welcome to Flutter 2.8! This release represents the hard work of 207 contributors and 178 reviewers, producing 2,424 PRs merged and 2976 issues closed. Special thanks to the top community contributor of this release, Bartosz Selwesiuk, a Flutter Engineer at Very Good Ventures, who provided 23 PRs, most of which were primarily “focused” (sic) around the camera plugin for web.</p><p>All of this collective work produced significant performance improvements in both the engine and in Flutter DevTools, a stable release of the Google Mobile Ads SDK for Flutter, a slew of new Firebase features and improvements, WebView 3.0, a new batch of Flutter Favorite packages, a raft of updates to desktop on our way to a stable release, and a new version of DartPad with support for more packages, including Firebase itself. This might be the last release of the year but it’s by no means the least. Let’s get to it!</p><h3>Performance</h3><p>As always, job #1 with Flutter is quality. We spend much of our time ensuring that Flutter runs as smoothly and as robustly as it can across the range of supported devices.</p><h3>Startup</h3><p>This release includes improvements to application startup latency. Testing these improvements against Google Pay, a large, popular app with more than 1 million lines of code to ensure that these changes result in perceivable impact in the real-world. All together these improvements have resulted in reduction in startup latency for Google Pay of 50% when running on a low-end Android device, and a 10% improvement on high-end devices.</p><p>Improvements to the way that Flutter influences Dart VM garbage collection policy now helps avoid ill-timed GC cycles during the application startup sequence. For example, before the first frame is rendered on Android, Flutter now <a href=\"https://github.com/flutter/flutter/issues/90551\">only notifies the Dart VM of memory pressure for </a><a href=\"https://github.com/flutter/flutter/issues/90551\">TRIM_LEVEL_RUNNING_CRITICAL and above</a> signals. In local testing, this change reduced the time to first frame by up to 300ms on a low-end device.</p><p>Due to an <a href=\"https://github.com/flutter/engine/pull/29145#pullrequestreview-778935616\">abundance of caution</a>, in previous releases, Flutter blocked the platform thread while creating platform views. <a href=\"https://github.com/flutter/flutter/issues/91711\">Careful reasoning and testing</a> determined that some of the serialization could be removed, which removed &gt;100ms of blockage during startup of Google Pay on a low-end device.</p><p>Previously, setting up the default font manager introduced an artificial delay when setting up the first Dart isolate. <a href=\"https://github.com/flutter/engine/pull/29291\">Delaying the default font manager setup</a> to run concurrently with Dart Isolate setup both improved startup latency, and made the effects of the above optimizations much more visible, as this was the primary bottleneck.</p><h3>Memory</h3><p>Flutter developers targeting memory constrained devices <a href=\"https://github.com/flutter/flutter/issues/91382\">were having problems</a> taking performance traces due to Flutter eagerly loading the Dart VM’s “service isolate”, whose AOT code was bundled with the app such that Flutter was reading both into memory simultaneously. For Android in the 2.8 release, the Dart VM’s service isolate <a href=\"https://github.com/flutter/engine/pull/29245\">was split into its own bundle</a> that can be loaded separately, which results in a memory savings of up to 40 MB until the service isolate is needed. The memory footprint has been further reduced by up to 10% by the <a href=\"https://github.com/flutter/flutter/issues/92120\">Dart VM informing the OS</a> that the pages in memory used by the AOT program are backed by a file that likely won’t need to be read again. Therefore, the pages that had been holding a copy of the file-backed data can then be reclaimed and put to other uses.</p><h3>Profiling</h3><p>Sometimes developers want to view performance trace data from Flutter alongside Android native tracing events. Furthermore, they’d often like to see trace events even in release mode builds to get a better understanding of performance issues in their deployed applications. To that end, <a href=\"https://github.com/flutter/engine/pull/28903\">the 2.8 stable release</a> now sends tracing events to the Android systrace recorder if it is enabled at application startup, and these events are sent even when the Flutter application is built in release mode.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eAFKwrcfLHlqKk6ng677pw.png\" /><figcaption>Flutter tracing events are now shown (bottom) in the Android systrace recording tooling</figcaption></figure><p>Additionally, to help create animations with less jank, some of you wanted <a href=\"https://github.com/flutter/flutter/issues/92286\">more information</a> in performance traces about the behavior of the raster cache, which allows Flutter to blit expensive, reused pictures instead of re-drawing them on each frame. <a href=\"https://github.com/flutter/flutter/issues/92286\">New flow events</a> in performance traces now allow you to track the lifetimes of raster cached pictures.</p><h3>Flutter DevTools</h3><p>For debugging performance issues, this release of DevTools adds a <a href=\"https://github.com/flutter/devtools/pull/3451\">new “Enhance Tracing” feature</a> to help you diagnose UI jank stemming from expensive build, layout, and paint operations.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/629/0*QXiOV7Bm7wlP9gI-\" /></figure><p>When any of these tracing features are enabled, the Timeline includes new events for widgets built, render objects laid out, and render objects painted, as appropriate.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ltUPM1ji3asrgDOw\" /></figure><p>In addition, this release of DevTools adds new <a href=\"https://github.com/flutter/devtools/pull/3357\">support for profiling the performance of your app’s startup</a>. This profile contains CPU samples from the initialization of the Dart VM up until the first Flutter frame has been rendered. After you press the “Profile app start up” button and the app startup profile has been loaded, you will see that the “AppStartUp” user tag is selected for the profile. You can also load the app startup profile by selecting this user tag filter, when present, in the list of available user tags. Selecting this tag shows your profile data for your app’s startup.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xpb0al6JT1AdKUjO\" /></figure><h3>Web platform views</h3><p>Android and iOS aren’t the only platforms getting performance improvements. This release also improves the performance of platform views for Flutter web. If you’re unfamiliar with platform views, they’re the way that Flutter allows you to host native UI components from the underlying platform in your app. Flutter web implements this with the <a href=\"https://api.flutter.dev/flutter/widgets/HtmlElementView-class.html\">HtmlElementView</a> widget, which allows you to host HTML elements inside your Flutter web app. If you’re using the web versions of the google_maps_flutter plugin or the video_player plugin, or you’re following the Flutter team’s advice about how to optimize the <a href=\"https://docs.flutter.dev/development/platform-integration/web-images#use-img-in-a-platform-view\">display images on the web</a>, then you’re using platform views.</p><p>In previous versions of Flutter, embedding a platform view immediately created a new canvas and each extra platform view added another canvas. The extra canvases are expensive to create, as each is the size of the entire window. This release <a href=\"https://github.com/flutter/engine/pull/28087\">reuses canvases created for earlier platform views</a> so, rather than incurring the cost 60x per second, you incur the cost once in the entire lifetime of the app. This means that you can have multiple HtmlElementView instances in your web apps without degrading performance, while also reducing scrolling jank when platform views are used.</p><h3>Ecosystem</h3><p>Flutter isn’t just the framework, the engine, and the tools — there are more than 20,000 Flutter-compatible packages and plugins on pub.dev with more added every day. A significant amount of what Flutter developers interact with day-to-day is part of the larger ecosystem, so let’s take a look at what’s been going on in the Flutter ecosystem since the previous release.</p><h3>GA of Flutter Ads</h3><p>First and foremost is the <a href=\"https://medium.com/flutter/announcing-general-availability-for-the-google-mobile-ads-sdk-for-flutter-574e51ea6783\">release of the Google Mobile SDK for Flutter into general availability</a> in November.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hRLh9gi5n3E82lXG\" /></figure><p>This release supports 5 ad formats, integrates both AdMob and Ad Manager support and includes a beta of a new mediation feature to help you optimize ad performance. For more information about integrating Google Ads into your Flutter app as well as other monetization options, <a href=\"https://flutter.dev/monetization\">check out the new monetization page on flutter.dev</a>.</p><h3>WebView 3.0</h3><p>Another new release that comes with Flutter this time around is the 3.0 release of <a href=\"https://pub.dev/packages/webview_flutter\">the webview_flutter plugin</a>. We’ve bumped the version number because of the number of new features but also because of a potentially breaking change in the way web views work on Android. In previous versions of webview_flutter, the hybrid composition mode has been available but not the default. Hybrid composition fixes a number of issues that the previous default virtual displays mode has. Based on user feedback and issue tracking, we think it’s time for hybrid composition to become the default. In addition, webview_flutter also adds a number of highly requested features:</p><ul><li>Support for POST as well as GET for populating content (<a href=\"https://github.com/flutter/plugins/pull/4450\">4450</a>, <a href=\"https://github.com/flutter/plugins/pull/4479\">4479</a>, <a href=\"https://github.com/flutter/plugins/pull/4480\">4480</a>, <a href=\"https://github.com/flutter/plugins/pull/4573\">4573</a>)</li><li>Loading HTML from files and strings (<a href=\"https://github.com/flutter/plugins/pull/4446\">4446</a>, <a href=\"https://github.com/flutter/plugins/pull/4486\">4486</a>, <a href=\"https://github.com/flutter/plugins/pull/4544\">4544</a>, <a href=\"https://github.com/flutter/plugins/pull/4558\">4558</a>)</li><li>Transparent background support (<a href=\"https://github.com/flutter/plugins/pull/3431\">3431</a>, <a href=\"https://github.com/flutter/plugins/pull/4569\">4569</a>, <a href=\"https://github.com/flutter/plugins/pull/4570\">4570</a>)</li><li>Writing cookies prior to loading content (<a href=\"https://github.com/flutter/plugins/pull/4555\">4555</a>, <a href=\"https://github.com/flutter/plugins/pull/4556\">4556</a>, <a href=\"https://github.com/flutter/plugins/pull/4557\">4557</a>)</li></ul><p>Furthermore, in the 3.0 release, webview_flutter provides preliminary support for a new platform: the web. We’ve had many of you ask for the ability to host a webview in a Flutter web app, which allows you to build an app for mobile <em>or</em> web from a single code base. What does hosting a webview look like in a Flutter web app? Well, from a coding perspective, it looks just the same:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/032e4e78697ff2f08bafd1b01be0931a/href\">https://medium.com/media/032e4e78697ff2f08bafd1b01be0931a/href</a></iframe><p>When running on the web, it works as you’d expect:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/0*4T03yBAog-6unwc8\" /></figure><p>Note that the current implementation of webview_flutter for web has a number of limitations based around the fact that it’s built using an iframe, which only supports simple URL loading and has no ability to control or interact with the loaded content (for more info, check out <a href=\"https://pub.dev/packages/webview_flutter_web\">the webview_flutter_web README</a>). However, we’re making webview_flutter_web available due to popular demand as <a href=\"https://docs.flutter.dev/development/packages-and-plugins/developing-packages#endorsed-federated-plugin\">an unendorsed plugin</a>. If you want to give it a try, add the following line to your pubspec.yaml:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/6e2ab63403aefc4835f711191e24e886/href\">https://medium.com/media/6e2ab63403aefc4835f711191e24e886/href</a></iframe><p>If you have feedback on webview_flutter v3.0, either on the web or off, please <a href=\"https://github.com/flutter/flutter/issues\">log them on the Flutter repo as a webview issue</a>. Also, if you haven’t used webview before or you’d like a refresher, check out <a href=\"https://codelabs.developers.google.com/codelabs/flutter-webview\">the new webview codelab</a>, which takes you step-by-step through the process of hosting web content in your Flutter app.</p><h3>Flutter Favorites</h3><p>The <a href=\"https://docs.flutter.dev/development/packages-and-plugins/favorites#flutter-ecosystem--committee\">Flutter Ecosystem Committee</a> has met again to designate the following as Flutter Favorite packages:</p><ul><li>Three custom router packages for the new Router API: <a href=\"https://pub.dev/packages/beamer\">beamer</a>, <a href=\"https://pub.dev/packages/routemaster\">routemaster</a>, and <a href=\"https://pub.dev/packages/go_router\">go_router</a></li><li><a href=\"https://pub.dev/packages/drift\">drift</a>, a rename of an already capable and popular reactive persistence library for Flutter and Dart, built on top of <a href=\"https://pub.dev/packages/sqlite3\">sqlite</a></li><li><a href=\"https://pub.dev/packages/freezed\">freezed</a>, a Dart “language patch” to provide a simple syntax for defining models, cloning objects, pattern matching, and more</li><li><a href=\"https://pub.dev/packages/dart_code_metrics\">dart_code_metrics</a></li><li>And several great looking GUI packages: <a href=\"https://pub.dev/packages/flex_color_scheme\">flex_color_scheme</a>, <a href=\"https://pub.dev/packages/flutter_svg\">flutter_svg</a>, <a href=\"https://pub.dev/packages/feedback\">feedback</a>, <a href=\"https://pub.dev/packages/toggle_switch\">toggle_switch</a>, and <a href=\"https://pub.dev/packages/auto_size_text\">auto_size_text</a></li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*raIVwhHpVh0ON5ha\" /><figcaption>The Flexfold app is built with flex_color_scheme</figcaption></figure><p>Congratulations to those package authors and thank you for supporting the Flutter community with your hard work. If you’re interested in nominating your favorite Flutter package for a Flutter Favorite award, follow the guidelines and instructions on <a href=\"https://docs.flutter.dev/development/packages-and-plugins/favorites\">the Flutter Favorite program page</a>.</p><h3>Platform-specific Packages</h3><p>If you are a package author, one decision you must make is which platforms you’re going to support. If you’re building a plugin with platform-specific native code, you can do that <a href=\"https://docs.flutter.dev/development/packages-and-plugins/developing-packages#plugin-platforms\">using the </a><a href=\"https://docs.flutter.dev/development/packages-and-plugins/developing-packages#plugin-platforms\">pluginClass property in your project’s </a><a href=\"https://docs.flutter.dev/development/packages-and-plugins/developing-packages#plugin-platforms\">pubspec.yaml</a>, which indicates the native class that’s providing the functionality:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5155d142980a0e7b40eef107f5e802d5/href\">https://medium.com/media/5155d142980a0e7b40eef107f5e802d5/href</a></iframe><p>However, as <a href=\"https://dart.dev/guides/libraries/c-interop\">Dart FFI</a> becomes more mature, it’s possible to implement platform-specific functionality in 100% Dart, like the <a href=\"https://pub.dev/packages/path_provider_windows\">path_provider_windows package</a> does. When you don’t have any native class to use but you still want to designate your package as supporting only certain platforms, use the dartPluginClass property instead:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ee970a6541a54bac4d023d803fdded38/href\">https://medium.com/media/ee970a6541a54bac4d023d803fdded38/href</a></iframe><p>This setting in place, you have designates your package as only supporting certain platforms even if you don’t have any native code. You also must provide the Dart plugin class; learn more in <a href=\"https://docs.flutter.dev/development/packages-and-plugins/developing-packages#dart-only-platform-implementations\">the Dart-only platform implementations docs on flutter.dev</a>.</p><h3>Firebase</h3><p>Another big part of the Flutter ecosystem is FlutterFire, which is used by two-thirds of Flutter apps. This release adds a set of new features that make it easier to build applications using Flutter and Firebase:</p><ul><li>All FlutterFire plugins are graduating from beta to stable</li><li>New support in DartPad for several Firebase services</li><li>New libraries to more easily build UI for authentication and live Firestore queries</li><li>New Firestore Object/Document Mapping for Flutter, available in Alpha</li></ul><h3>Production Quality</h3><p><a href=\"http://firebase.flutter.dev\">The FlutterFire plugins</a> have (almost) all moved from beta to stable quality.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/984/0*0BHU6qlHwKUxPrXb\" /></figure><p>Plugins moving to stable for Android, iOS, and web include <a href=\"https://firebase.flutter.dev/docs/analytics/overview\">Analytics</a>, <a href=\"https://firebase.flutter.dev/docs/dynamic-links/overview\">Dynamic Links</a>, <a href=\"https://firebase.flutter.dev/docs/in-app-messaging/overview/\">In-App Messaging</a>, <a href=\"https://firebase.flutter.dev/docs/performance/overview\">Performance Monitoring</a>, <a href=\"https://firebase.flutter.dev/docs/database/overview\">Realtime Database</a>, <a href=\"https://firebase.flutter.dev/docs/remote-config/overview\">Remote Config</a> and, the new kid on the block, <a href=\"https://firebase.flutter.dev/docs/installations/overview\">Installations</a>. The App Check plugin and macOS platform support are still in beta because of the phase of the Firebase libraries themselves, which are also in beta. If you’ve worried about whether to choose Realtime Database, Analytics, or Remote Config because the FlutterFire libraries weren’t ready for prime-time, worry no more. These are now fully supported plugins ready for production use.</p><h3>Dart-only Firebase Initialization</h3><p>As packages have moved to production quality, we’ve added the ability to <a href=\"https://github.com/FirebaseExtended/flutterfire/pull/6549\">initialize Firebase on any supported platform from Dart</a>:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/23b53b28bc75a8440665446978c2a7ea/href\">https://medium.com/media/23b53b28bc75a8440665446978c2a7ea/href</a></iframe><p>This code initializes a Firebase app using the options appropriate for each supported platform as defined in the firebase_options.dart file, which contains per-platform data structures that look like this:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f8b48d6f8a8a81f7e150e39e17228bbf/href\">https://medium.com/media/f8b48d6f8a8a81f7e150e39e17228bbf/href</a></iframe><p>To gather the data for each platform’s initialization option data structure, check out <a href=\"https://pub.dev/packages/flutterfire_cli\">the new </a><a href=\"https://pub.dev/packages/flutterfire_cli\">flutterfire CLI tool</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*69rsgRC_hcraKOAK\" /></figure><p>This tool digs into the data in your platform-specific sub-folders to find the unique bundle ID and then uses that to look up the Firebase-project specific details for your matching platform-specific apps, even creating a new Firebase project and/or new platform-specific apps if there aren’t any. What this means for you is no more downloading and adding a json file to your Android project, downloading and adding a plist file to your iOS and macOS projects, or <a href=\"https://github.com/FirebaseExtended/flutterfire/pull/7359\">pasting code into your web project’s index.html</a> — no matter which supported Firebase platform you’re targeting, this single snippet of Dart code initializes Firebase for your app. Note that this may not be the only initialization you have to do to get your FlutterFire app working; for example, you might want to integrate the creation of your Crashlytics symbols into your <a href=\"https://firebase.google.com/docs/crashlytics/get-started?platform=android#add-plugin\">Android build</a> or your <a href=\"https://firebase.google.com/docs/crashlytics/get-started?platform=ios#set-up-dsym-uploading\">iOS build</a>, but it should get it up and running in minutes with any new Firebase project.</p><h3>Use Firebase with DartPad</h3><p>With this Dart-only initialization of FlutterFire, you can now use Firebase from within DartPad.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*y2N78Oatw9te8kPh\" /></figure><p>T<a href=\"https://dartpad.dev/?id=d57c6c898dabb8c6fb41018588b8cf73\">his example</a> demonstrates <a href=\"https://twitter.com/puf/status/1458516522133909506\">a little chat app</a> using Flutter, Firebase, and DartPad, all of which you can use right now with no installation. Today DartPad’s Firebase support already includes the core APIs, Authentication, and Firestore. Expect more Firebase services to appear in DartPad over time.</p><p>The other thing that FlutterFire support in DartPad enables is the ability to use <a href=\"https://firebase.flutter.dev/docs/firestore/example/\">an embedded instance of DartPad right in the docs</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_l1bJAoLwWB5DBdq\" /></figure><p>In this example, you’re seeing the docs for Cloud Firestore with the code for the <a href=\"https://github.com/FirebaseExtended/flutterfire/tree/master/packages/cloud_firestore/cloud_firestore/example\">example application</a> that you can run and edit directly in your browser without having to install a thing, create a test project, or even copy/paste the code. It’s all right there for your immediate use.</p><h3>Firebase UI</h3><p>When integrating Firebase into an app, most apps have some kind of authentication flow. This includes allowing users to log in with email and password, or with a social auth provider like the one that Google provides. Firebase Authentication also allows for creating new accounts on the fly, validating email addresses, resetting passwords, and might even involve 2-step verification with SMS, logging in with a phone number, or even merging multiple user accounts into a single account. Firebase Authentication supports all of this functionality, but as a Flutter developer, you’re responsible for implementing the UI for all of it. Until today.</p><p>Today, we’re pleased to announce that the <a href=\"https://pub.dev/packages/flutterfire_ui\">flutterfire_ui</a> package can create a basic authentication experience with a small amount of code. As an example, assume that you’ve got Email and Google authentication setup in your Firebase project:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9zL2daapFy48CypY\" /></figure><p>With this configuration, you can trigger an authentication experience as follows:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/dd5c4d5193cdf9fba8f27fa3f8f894f6/href\">https://medium.com/media/dd5c4d5193cdf9fba8f27fa3f8f894f6/href</a></iframe><p>This initializes Firebase and, noticing that the user is not already logged in, shows the sign-in screen. The SigninScreen widget is configured with the Email and Google authentication providers. The code also listen to the user’s authentication state using the firebase_auth package, so once the user signs in you can display the rest of the application. With this code, you get a working login for all of the Firebase-supported platforms: Android, iOS, web, and macOS.</p><p>With a little more configuration, you can easily add an image and some custom text (details are available in <a href=\"https://firebase.flutter.dev/docs/ui/overview\">the docs</a>), which gives you a full-featured login experience:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/758/0*u_epPOxdzkf_z2W1\" /></figure><p>This screenshot shows the mobile version, but because the flutterfire_ui screens are responsive, here’s what you get on a desktop device:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0frogkEKgpNOgCVF\" /></figure><p>If the user has an email/password already, they can log in and be done. If they use Google auth, they’ll be shown the normal Google auth flow, whether they’re on mobile, web, or desktop. If they don’t have an account already, they can press the button on the login screen and get to the registration screen. Once they’ve logged in or registered, there are flows for validating their email address, resetting their password, logging out, and linking social authentication accounts. Logging in by email works on all platforms along with social auth support for Google, Facebook, and Twitter, with partial support for Apple (it doesn’t work on Android). Authentication support in flutterfire_ui supports a number of scenarios and navigation schemes, along with customization and localization options. C<a href=\"https://firebase.flutter.dev/docs/ui/overview\">heck out the detailed docs and samples in the firebase.flutter.dev docs</a>.</p><p>Furthermore, authentication is not the only Firebase UI-related feature that flutterfire_ui supports. For showing users a live, infinite scroll list of data from a Firebase query, this release includes the FirestoreListView, which you can drop into your app with a live query as follows:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/38fd5c35dcb0f461063a08c5bafe9e58/href\">https://medium.com/media/38fd5c35dcb0f461063a08c5bafe9e58/href</a></iframe><p>And this is what it looks like in action:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*jpo2j3C5Yo7HwuKW\" /></figure><p>Or, if you’d like to provide your users with the ability to create, read, update, and delete entries in a table, you’ve got the beginnings of that in FirestoreDataTable:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e41e66378594623419d1f758303df009/href\">https://medium.com/media/e41e66378594623419d1f758303df009/href</a></iframe><p>Which works like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*5K_qZZ3Sb4n8tXiW\" /></figure><p>For details about authentication, list views, and data tables, <a href=\"https://firebase.flutter.dev/docs/ui/overview/\">check out the </a><a href=\"https://firebase.flutter.dev/docs/ui/overview/\">flutterfire_ui docs</a>. As this is a preview release, additional features are planned. If you have a question or a feature request, please <a href=\"https://github.com/FirebaseExtended/flutterfire/discussions/6978\">head over to the repo on GitHub to log issues or ask questions in the discussion section</a>.</p><h3>Firestore Object/Document Mapping</h3><p>And last but not least, one new feature to the integration between Firebase and Flutter that you should be aware of: the alpha release of <a href=\"https://firebase.flutter.dev/docs/firestore-odm/overview/\">the Firestore Object/Document Mapper</a>. The Firestore ODM is aimed at helping Flutter developers be more productive by simplifying use of Firestore through familiar type-safe, structured objects and methods. Using code generation, the Firestore ODM improves the syntax for interacting with documents and collections by allowing you to model your data in a type-safe way:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/6148e4b72c6a7ba7dfada002c7e433a6/href\">https://medium.com/media/6148e4b72c6a7ba7dfada002c7e433a6/href</a></iframe><p>With these types in place, you can now execute type-safe queries:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/fb3ab03194808fea50becfefaae2090b/href\">https://medium.com/media/fb3ab03194808fea50becfefaae2090b/href</a></iframe><p>The ODM also supports defining strongly typed sub-collections and provides built-in options for optimizing widget rebuilds with its select feature. You can read about all of this and more in <a href=\"https://firebase.flutter.dev/docs/firestore-odm/overview/\">the Firestore ODM docs</a>. Since this is an alpha release, please provide feedback. To give feedback and ask questions, <a href=\"https://github.com/FirebaseExtended/flutterfire/discussions/7475\">join the Firestore ODM thread</a> of the FlutterFire discussion.</p><h3>Desktop</h3><p>The Flutter 2.8 release includes another big step along the road to the stable release of Windows, macOS, and Linux. The quality bar is high, including internationalization and localization support like the recently landed <a href=\"https://github.com/flutter/engine/pull/29620\">Chinese IME support</a>, <a href=\"https://github.com/flutter/engine/pull/24713\">Korean IME support</a>, and <a href=\"https://github.com/flutter/engine/pull/29761\">Kanji IME support</a>. Or, like the tight integration being built into <a href=\"https://github.com/flutter/flutter/issues/77838\">Windows accessibility support</a>. It’s not enough for Flutter to run on desktop on the stable channel (which it already does <a href=\"https://docs.flutter.dev/desktop#beta-snapshot-in-stable-channel\">in beta behind a flag</a>), it has to run well for languages and cultures around the world and for people of varying kinds of abilities. It’s not quite where we want to be yet, but it’s getting there!</p><p>One example of the ongoing work to prepare desktop for a stable release is <a href=\"http://flutter.dev/go/handling-synchronous-keyboard-events\">the complete re-architecture of how Flutter handles keyboard events to allow for synchronous response</a>. This enables a widget to handle a keystroke and cancel its propagation through the rest of the tree. <a href=\"https://github.com/flutter/flutter/issues/33521\">The initial work landed</a> in Flutter 2.5 and Flutter 2.8 adds fixes for issues and regressions as it approaches stable quality. This is in addition to the ongoing work to re-engineer <a href=\"https://github.com/flutter/flutter/issues/44918\">how we handle device-specific keyboard input</a> and <a href=\"https://github.com/flutter/flutter/pull/86736\">a refactor of the way that Flutter handles text editing</a>, all of which are necessary for keyboard input-intensive desktop apps.</p><p>In addition, <a href=\"https://github.com/flutter/flutter/pull/89353\">we continue to expand Flutter’s support for visual density</a> and <a href=\"https://github.com/flutter/flutter/pull/88984\">expose alignment for dialogs</a>, both to enable more desktop-friendly UI.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*SBoQZBrfuLVhEkdW\" /></figure><p>And finally, the Flutter team is not the only one working on Flutter desktop. As just one example, the desktop team at Canonical is working with Invertase on a Linux and Windows implementation of the most popular Firebase plugins for Flutter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xt35ZmY8r4BlFvfx\" /></figure><p>You can <a href=\"https://invertase.io/blog/announcing-flutterfire-desktop\">read more about the preview release on the Invertase blog</a>.</p><h3>DartPad</h3><p>A Flutter release is not complete without a look at the tooling improvements. This post focuses on the improvements in DartPad, the biggest of which is the support for a larger number of packages. In fact, 23 packages are available for import. In addition to several Firebase services, the list includes such popular packages as bloc, characters, collection, google_fonts, and flutter_riverpod. The DartPad team continues to add new packages, so if you’d like to see which packages are currently supported, click on the information icon in the lower right hand corner.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gE84QAGGECM-tFAH\" /></figure><p>To learn the plan for adding new packages to DartPad over time, check out <a href=\"https://github.com/dart-lang/dart-pad/wiki/Adding-support-for-a-new-package\">this article on the Dart wiki</a>.</p><p>There’s another new DartPad feature that’s pretty handy, too. Previously, DartPad always ran the latest stable version. With this release, you can select the latest beta channel releases as well as the previous stable release (called the “old channel”), by using the new <strong>Channel</strong> menu in the status bar.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ax1aVB0JnPAllO4a\" /></figure><p>This can be very useful if, for example, you’re writing a blog post where the latest stable isn’t quite new enough…</p><h3>Removing the dev channel</h3><p>A Flutter “channel” governs how quickly the underlying Flutter framework and engine changes on your development machine, with stable representing the least churn and master representing the most. Due to resource constraints, we recently stopped updating the dev channel. While we did get some questions about this, we found that fewer than 3% of Flutter developers use the dev channel. We have therefore decided to start the process to formally decommission the dev channel. While few developers use the dev channel, it takes Flutter engineers considerable time and effort to maintain it. If you spend all of your time on the stable channel (as more than 90% of Flutter developers do), you won’t miss it. By dropping it, you have one fewer decision to make, and the Flutter team can spend its time and energy on other things.</p><p>You can decide which channel you’d like using the flutter channel command. Here’s how the Flutter team thinks about each channel:</p><ul><li>The stable channel represents the highest-quality builds we have. They’re released quarterly (roughly), and are hotfixed for critical issues in between. This is the “slow” channel: safe, mature, long-term servicing.</li><li>The beta channel provides a fast-moving alternative to stable for those who are comfortable with a faster cadence. Currently released monthly, stabilized prior to release. This is the “fast” channel. If we find that the dev channel was serving needs that the beta channel cannot currently serve, we may change how we think of the beta channel to address those needs as well (for example, accelerating the release cadence for beta or reducing the level of testing and hot fixing that we perform on beta).</li><li>The master channel is our active development channel. We provide no support on this channel, but we run a comprehensive suite of unit tests against it. This is the right channel for contributors or advanced users who are comfortable with unstable builds. On this channel, we run fast and break things (and then fix them pretty fast, too).</li></ul><p>As we decommission the dev channel in the coming months, consider the beta or master channels, depending on your tolerance for churn and your need for the latest and greatest.</p><h3>Breaking Changes</h3><p>As always, we strive to reduce the number of breaking changes in each release. In this release, Flutter 2.8 is free of breaking changes aside from deprecated APIs that have expired and been removed according to <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">our breaking change policy</a>.</p><ul><li><a href=\"https://github.com/flutter/flutter/pull/90292\">90292</a> Remove autovalidate deprecations</li><li><a href=\"https://github.com/flutter/flutter/pull/90293\">90293</a> Remove FloatingHeaderSnapConfiguration.vsync deprecation</li><li><a href=\"https://github.com/flutter/flutter/pull/90294\">90294</a> Remove <a href=\"http://androidviewcontroller.id/\">AndroidViewController.id</a> deprecation</li><li><a href=\"https://github.com/flutter/flutter/pull/90295\">90295</a> Remove BottomNavigationBarItem.title deprecation</li><li><a href=\"https://github.com/flutter/flutter/pull/90296\">90296</a> Remove deprecated text input formatting classes</li></ul><p>If you’re still using these APIs and would like details on how to update your code, you can <a href=\"https://docs.flutter.dev/release/breaking-changes/2-5-deprecations\">read the migration guidance on flutter.dev</a>. As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a> that help us identify these breaking changes.</p><h3>Summary</h3><p>As we close out 2021 and look forward to 2022, the Flutter team would like to express our gratitude for the work and support of the entire Flutter community. While it’s true that we’re building Flutter for the growing number of developers in the world, it’s also literally true that we couldn’t build it without you. The Flutter community is like no other and we’re grateful for all that you do. Have a happy holiday season and we’ll see you in the new year!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d085b763d181\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-2-8-d085b763d181\">What’s New in Flutter 2.8</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-12-08T18:00:26.000Z":{"title":"Announcing Flutter 2.8","link":"https://medium.com/flutter/announcing-flutter-2-8-31d2cb7e19f5?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/31d2cb7e19f5","category":["flutter","announcements","android-app-development","mobile-app-development","ios-app-development"],"dc:creator":"Tim Sneath","pubDate":"Wed, 08 Dec 2021 18:00:26 GMT","atom:updated":"2021-12-09T01:05:37.407Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>A new release of Flutter: and a look back on a year of growth</h4><p>Just in time for the holidays, today we’re announcing a big update to Flutter, with a number of new features and improvements that refine the experience for mobile and web developers and bring us closer to stable support for desktop.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_hVZ_qoWPxzQK3ws\" /></figure><p>Flutter aims to change how apps are built. It unites mobile, web, desktop, and embedded development into a single toolkit: letting developers focus first on what they want to build, rather than which platforms they want to target; offering a high-performance, high-productivity framework that shortens the inner loop for developers; and enabling one codebase to target multiple platforms and form factors.</p><h3>New features and improvements: faster and more productive</h3><p>One of the major areas of focus for this release is <strong>mobile performance</strong>. Ideally great performance would come for free, but in practice any complex app needs optimization to make sure it uses the underlying hardware and libraries well. That includes startup performance, which can be constrained by network bandwidth or other initialization costs; memory usage, particularly on memory-constrained devices; and graphics rendering. We’ve been using some of our experiences with large Google apps like <a href=\"https://flutter.dev/showcase/google-pay\">Google Pay</a> to invest both in making Flutter itself more performant, and in giving you better tooling to guide profiling and optimization of your own app. Your apps should start faster and use less memory just by upgrading to Flutter 2.8.</p><p>The latest update makes it easier than ever to <strong>connect apps to back-end services</strong>, such as Firebase and Google Cloud. It adds <a href=\"https://flutter.dev/monetization\">production-quality support for Google Ads</a> and major upgrades to the camera and embedded web plugins. The release also includes <a href=\"https://medium.com/dartlang/dart-2-15-7e7a598e508a\">Dart 2.15</a>, which adds major improvements to concurrency, new language features like constructor tearoffs and enhanced enumerations, and optimizations that deliver a 10% reduction in memory utilization.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/897/1*YeJGwc8CcHF7v2rg1-inMA.png\" /><figcaption>With the new developer productivity enhancements to Flutter, an app can support sign-in to multiple authentication services with just a single drop-in widget.</figcaption></figure><p>Another big theme of investment in this release that you’ll see us carry forward into future releases is further <strong>improving developer productivity</strong>. With features like stateful hot reload, we’ve always focused on creating a tight inner loop for developers. We’re now starting to explore some higher-level abstractions that make it easier for developers to get running faster. For example, in this release we’re adding a sign-in widget that uses Firebase to handle authentication. With this widget, you don’t have to worry about all the edge cases of sign-in, such as two-factor authentication or reset password user flows, nor about the complexities of supporting Google, Apple, Twitter, or Facebook as an auth provider. Features like this, building on the core foundations of Flutter, have the potential to transform how developers build apps, combining the development speed of low-code solutions with the flexibility and power of a full UI framework.</p><p>Both Flutter 2.8 and Dart 2.15 are available now, and should be an easy upgrade for existing apps running the previous version. For greater detail, we have a technical blog post covering the enhancements in each of <a href=\"https://medium.com/dartlang/dart-2-15-7e7a598e508a\">Dart</a> and <a href=\"https://medium.com/flutter/whats-new-in-flutter-2-8-d085b763d181\">Flutter</a>.</p><h3>Casual game development with Flame</h3><p>For most developers, Flutter is an app framework. But there’s also a growing ecosystem around casual game development, taking advantage of the hardware-accelerated graphics support provided by Flutter.</p><p>Today, we are thrilled to celebrate the <a href=\"https://flame-engine.org/\">1.0 release of Flame</a>, a modular 2D game engine built on top of Flutter. Flame provides what you need to build games quickly: as well as a game loop, it also includes core primitives such as a component system, animated sprites and images, collision detection, a world camera, an effects system, and gesture and input support.</p><p>Flame is modular and can also be extended with packages that offer integrations to other libraries, for instance Rive (for animations), audioplayers (for music and sound effects), Forge2D (a Box2D-style physics engine), Tiled (tile maps editor), Fire Atlas (a sprite sheet and animation editor). Together, Flame and the broader ecosystem offer a strong set of services for a casual or 2D game developer.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/349/1*cHEQ6vW829J09wMaOTCiNA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*I_1j9GuOmp3HY8ODOkXdbQ.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/469/1*h25t5nbufPWhips6raHknQ.png\" /><figcaption><a href=\"https://play.google.com/store/apps/details?id=com.crescentmoongames.tombtoad\"><em>Tomb Toad</em></a><em>, </em><a href=\"https://play.google.com/store/apps/details?id=xyz.fireslime.gravitational_waves\"><em>Gravity Runner</em></a><em> and </em><a href=\"https://bonfire-engine.github.io/examples/bonfire/#/\"><em>Bonfire</em></a><em>: three examples of games built with Flame.</em></figcaption></figure><p>Flame is created by <a href=\"https://dev.to/blue-fire/fireslime-is-now-blue-fire-405g\">Blue Fire</a>, a group of contributors focusing on creating open source packages and plugins for Flutter and Dart. We’re delighted to partner with them and encourage you to check out Flame if you’re interested in game development.</p><h3>Flutter’s continued momentum</h3><p>We’re amazed to see how fast Flutter continues to grow, with a flourishing ecosystem of apps and tools that build on top of the core framework. At this year’s Google I/O event, <a href=\"https://medium.com/flutter/announcing-flutter-2-2-at-google-i-o-2021-92f0fcbd7ef9\">we noted</a> that there were already over 200,000 apps built with Flutter in the Play Store. In just over six months since that event, <strong>the number of Flutter apps has nearly doubled</strong>, <strong>with more than 375,000 Flutter apps now in the Play Store</strong>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U69So9lK-pKoIngVnhbAaw.png\" /><figcaption>Flutter supports Android, iOS, iPadOS, web, Windows, macOS and Linux: so you don’t have to rewrite your app just to target a different device or form factor.</figcaption></figure><p>Flutter isn’t just used on Android, of course. According to independent mobile analyst firm <a href=\"https://www.appannie.com/en/\">AppAnnie</a>, apps using Flutter on iOS include top brands and apps including <a href=\"https://itunes.apple.com/app/id1519457734\">BMW</a>, <a href=\"https://itunes.apple.com/app/id1456156090\">eBay</a>, <a href=\"https://apps.apple.com/us/app/wechat/id414478124\">WeChat</a>, <a href=\"https://apps.apple.com/us/app/shein-online-fashion/id878577184\">SHEIN</a>, <a href=\"https://apps.apple.com/app/id1055281310\">Philips Hue</a>, <a href=\"https://apps.apple.com/app/id1278474169\">Norton</a>, <a href=\"https://apps.apple.com/app/id681752345\">trip.com</a> and <a href=\"https://apps.apple.com/gb/app/greggs/id1098233626\">Greggs</a>. On the web, Flutter is finding a home for app experiences, benefitting design tools like <a href=\"https://flutterflow.io/\">FlutterFlow</a> and <a href=\"https://rive.app/\">Rive</a>. On desktop, the Ubuntu engineering team continues to build a variety of <a href=\"https://github.com/canonical?q=&amp;type=&amp;language=dart&amp;sort=\">new experiences with Flutter</a>, including a new installer and firmware updater. Even games like <a href=\"https://apps.apple.com/us/app/pubg-mobile-arcane/id1330123889\">PUBG</a> are finding that Flutter is a great fit for UI screens.</p><p>Ecosystems take a long time to build, but Flutter is now the most popular multi-platform toolkit, as measured independently by <a href=\"https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/\">Statista</a>, <a href=\"https://www.jetbrains.com/lp/devecosystem-2021/miscellaneous/#Technology_which-cross-platform-mobile-frameworks-do-you-use-two-years\">JetBrains</a>, <a href=\"https://www.slashdata.co/reports/?category=mobile-desktop\">SlashData</a>, and <a href=\"https://insights.stackoverflow.com/trends?tags=flutter%2Creact-native%2Ccordova%2Cxamarin\">Stack Overflow</a>. We don’t take that for granted, but the growth of Flutter’s popularity leads to an ever broader ecosystem of <a href=\"https://pub.dev\">packages</a> and tools that support it.</p><h3>Looking back at 2021, looking forward to 2022</h3><p>Over the course of this difficult last year, our own engineering teams have been busy. As well as the features in Flutter 2.8, we’ve rewritten our developer tools, shipped null-safety and web support, completed FFI for native code integration, added initial <a href=\"https://material.io/blog/announcing-material-you\">Material You support</a>, and worked hard to improve performance and quality. We’ve closed out almost 20,000 issues in total. We’ve created <a href=\"https://flutter.dev\">a smart new website</a> to better showcase Flutter. And we’ve spent a considerable amount of effort over the last few months overhauling our engineering infrastructure to increase engineer productivity and expand testing.</p><p>As we look ahead to 2022, we hope to be able to get out and see some of you in person. We’re expecting to invest more in the core developer experience, including language enhancements, documentation updates, and higher-level abstractions that make it easier to build sophisticated apps with Flutter. We’re going to complete our stable desktop support and further expand our work on the web. And we’re planning to expand interoperability with other platforms and portability to new targets. We’re still only getting started!</p><h3>A few closing thoughts and a dedication</h3><p>We want to dedicate this Flutter 2.8 release to Kevin Gray, <a href=\"https://verygood.ventures/blog/remembering-our-friend-and-teammate-kevin-gray\">a developer at Very Good Ventures who sadly passed away just a week ago.</a> Kevin has been a key contributor to the success of Flutter since the earliest days; he was the developer behind many of the early Flutter demos, including one of our first high-profile customer wins, the first ever demo of Flutter on desktop, and the first Flutter demo featured at a Google I/O keynote. He was a talented, caring, funny, and kind man and those who knew him will readily agree that he leaves a gaping hole. As we grieve, we also celebrate his life, and we remember him publicly so that his impact may be known by all. Flutter wouldn’t be what it is without him.</p><p>Kevin, we miss you already. Thank you for all you did for Flutter, and for your friendship. To his family and friends, we send you our love.</p><p>To our broader community of Flutter developers and supporters, we’re grateful for you. We hope that Flutter 2.8 gives you plenty to explore. And if you haven’t yet learned Flutter, join the nearly 40,000 developers who are currently working their way through the <a href=\"https://store.raywenderlich.com/products/flutter-apprentice-google\">Flutter Apprentice book</a>, which is available for free to everyone until early January. We wish you a happy and safe holiday season.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=31d2cb7e19f5\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-2-8-31d2cb7e19f5\">Announcing Flutter 2.8</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-11-16T17:09:41.000Z":{"title":"Announcing General Availability for the Google Mobile Ads SDK for Flutter","link":"https://medium.com/flutter/announcing-general-availability-for-the-google-mobile-ads-sdk-for-flutter-574e51ea6783?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/574e51ea6783","category":["ads","google-ads","flutter","payments"],"dc:creator":"Zoey Fan","pubDate":"Tue, 16 Nov 2021 17:09:41 GMT","atom:updated":"2021-11-16T17:23:41.651Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*zOegrJCYTuapgWgf\" /></figure><p>There are many ways for apps to make money: accepting payments as a storefront for a physical business; offering subscriptions or in-app purchases; or including ads directly in your application. Today, we are excited to announce the <a href=\"https://pub.dev/packages/google_mobile_ads\">Google Mobile Ads SDK for Flutter</a> is now generally available, after a six-month beta period. Great news for Flutter apps that require the presence of in-app ads!</p><h3>Supported Ads Formats</h3><p>The Google Mobile Ads (GMA) SDK for Flutter works on both iOS and Android, and supports loading and displaying all Google <a href=\"https://developers.google.com/admob/flutter/quick-start\">mobile ads formats</a>, including:</p><p><strong>Banner Ads: </strong>A rectangular ad that occupies a spot within an app’s layout. These ads stay on screen while users interact with the app, either anchored at the top or bottom of the screen, or inline with content as the user scrolls. In addition to the standard fixed-sized banner ads, we also support adaptive banner ads, which shows the most optimal banner size based on the device’s width and height.</p><p><strong>Interstitial Ads:</strong> A full-screen ad that covers the whole screen of your app. These ads work best when placed at natural breaks or transitions in your app.</p><p><strong>Rewarded Video Ads: </strong>A rewarded ad unit that allows you to reward users with in-app items for interacting with video ads, playable ads, and surveys. This is one of the most popular ad formats among game developers.</p><p><strong>Native Ads: </strong>A highly customizable format that allows you to design ads to match the look and the feel of your app content.</p><p><strong>App Open Ads:</strong> An ad format that monetizes your mobile app loading experience. App open ads are served when a user opens or switches back to your app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RZUZCrtJ7df_hnjI\" /></figure><h3>Google AdMob and Ad Manager</h3><p>We partnered with the Google Ads team to build this plugin as the official ads solution for Flutter developers. The GMA SDK for Flutter unifies support for both <strong>Google AdMob and Google Ad Manager </strong>into a single plugin.</p><p>If you are not familiar with Google’s ads services, you might not know that <a href=\"https://admob.google.com/home/\">AdMob</a> and <a href=\"http://admanager.google.com/home\">Ad Manager</a> are two different products with different monetization capabilities. The AdMob platform is designed for mobile developers who want to earn money from ads and gain actionable insights to grow the app business. The Ad Manager platform is designed for publishers who have significant direct sales or multiple inventory types.</p><p>T<a href=\"https://pub.dev/packages/google_mobile_ads\">he GMA SDK for Flutter</a> unifies these products to help meet your monetization needs by sharing code across iOS and Android and not having to rewrite your code as your needs grow.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_i1bA47tKTTOaFAU\" /></figure><h3>Mediation and Bidding</h3><p>This release also includes a preview of a new mediation feature to help you optimize ad performance. <a href=\"https://developers.google.com/admob/flutter/mediation/get-started\"><strong>Mediation</strong></a> helps you manage multiple ad sources used to serve ads to your apps in one place. In addition to Google demand, this lets you also serve ads from non-Google ad networks. Using mediation, you can send incoming ad requests to multiple ad sources and find the best available sources to fill the requests. In addition to traditional mediation, it also supports bidding, which enables ad sources to compete in a real-time auction to fill your ad requests. This helps ensure that you’re getting the highest revenue for your impressions.</p><p>The GMA SDK for Flutter offers the same ads features that are available for both iOS and Android apps. You can use the same tooling to manage your campaigns, track your ads performance, and so on.</p><h3>Early Adopters</h3><p>We’ve been working with a few early adopters who were eager to get started with ads support using Flutter ahead of our production release. One of these developers is Lotum, who recently rewrote their very successful word game “<a href=\"https://play.google.com/store/apps/details?id=de.lotum.whatsinthefoto.us&amp;hl=en_US&amp;gl=US\">4 Pics 1 Word</a>”, a top-grossing app in 50 countries, with over 50 million installs of the Android version alone. They chose Flutter for the rewrite and used the GMA SDK for Flutter to display interstitials and rewarded videos.</p><p>In the words of Petra Langenbacher, the app’s Flutter developer:</p><p><em>“We’ve been fine-tuning and optimizing our app for years, and we wondered whether a big rewrite might impact our revenue or user base. But we’ve been pleasantly surprised to see that wasn’t the case at all: we’ve been able to make these changes without any negative impact!”</em></p><p>Thank you to Lotum and all the other early adopters who provided us with valuable feedback. We appreciate your help with this initial release.</p><h3>Other Monetization Features</h3><p>Besides ads, Flutter offers other ways to monetize apps. For example, the I<a href=\"https://pub.dev/packages/in_app_purchase\">n-App Purchase</a> plugin allows you to offer additional content in your app like premium services, digital goods, and subscriptions. Flutter’s <a href=\"https://pub.dev/packages/pay\">Pay </a>plugin lets your app integrate with Google Pay on Android devices and Apple Pay on iOS. This makes it quick and easy to support both platforms with a seamless experience for your users to pay for things like groceries, retail merchandise, and food delivery.</p><p>For more about our Ads or other monetization offerings, <a href=\"https://flutter.dev/monetization\">please check out our newly refreshed website</a>, where you can find samples, codelabs, and documentation!</p><p>Building a Flutter app is just the start. With our suite of monetization features, we hope to help you launch a successful business with Flutter!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=574e51ea6783\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-general-availability-for-the-google-mobile-ads-sdk-for-flutter-574e51ea6783\">Announcing General Availability for the Google Mobile Ads SDK for Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2021-11-11T22:35:22.000Z":{"title":"About web, community, and code samples — Q3 2021 survey results","link":"https://medium.com/flutter/about-web-community-and-code-samples-q3-2021-survey-results-b67f5b997dca?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/b67f5b997dca","category":["user-experience","surveys","developer-experience","flutter"],"dc:creator":"JaYoung Lee","pubDate":"Thu, 11 Nov 2021 22:35:22 GMT","atom:updated":"2021-11-11T22:35:22.112Z","content:encoded":"<h3><strong>About web, community, and code samples — Q3 2021 survey results</strong></h3><p>The Flutter UX team’s quarterly survey report is back! This was our 14th quarterly survey, and it ran for a week in August, announcing it through various channels like IDE pop-ups, Twitter announcements, and on flutter.dev. We received responses from over 8,000 of you, learning a lot about your needs, as always.</p><p>If you want to know how the team analyzes the data, check out this video.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FC7m_7NERL1g%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DC7m_7NERL1g&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FC7m_7NERL1g%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8e7223f30db8acd482f44a72706875b5/href\">https://medium.com/media/8e7223f30db8acd482f44a72706875b5/href</a></iframe><p>This quarter, we found that 92% of respondents are positively satisfied with Flutter (39% somewhat satisfied + 53% very satisfied). This value has been consistent over the last 4 quarters, while the number of Flutter developers continues to grow. We still want to hear your thoughts on various parts of Flutter, so we asked about the following three themes in this quarter’s survey:</p><ul><li>Developer community</li><li>Web support</li><li>Code samples in the source code files.</li></ul><p>Read on to know more about what we learned from the survey and what we’re planning to do.</p><h3>Developer Community</h3><p>Flutter is proud to be an open source project. The Flutter team at Google heavily invests in community programs to create a welcoming and inclusive developer community and to make Flutter developers successful. Because it’s important to understand where we need to invest more and do better, we asked respondents how much they agree with various statements regarding Flutter’s developer community. By “developer community” we are including social network groups, Q&amp;A forums, chatrooms, meetups, and so on.</p><p>Forty-nine percent of all developers said they participate in some form of online or offline community. We found that most developers feel welcome in the community (86%) and feel safe asking questions (86%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ioUQckZD-UQCeG4q\" /><figcaption>Most developers feel welcome in the community (86%) and feel safe asking questions (86%).</figcaption></figure><p>We are thankful to you, our developer community, for creating a safe and supportive space. Flutter is meant to be <em>fun</em>, and having the psychological safety to try new things, make mistakes, and surprise yourself with what you can build is a big part of having fun. We identified some areas where the Flutter team can work to have an impact, such as getting more questions answered, and providing better exposure for leaders in the community. We will work closely with the community to improve both.</p><h3>Web support</h3><p>The Flutter team announced that <a href=\"https://medium.com/flutter/flutter-web-support-hits-the-stable-milestone-d6b84e83b425#:~:text=Today%2C%20as%20part%20of%20Flutter,apps%20to%20mobile%20app%20stores.&amp;text=Expanding%20existing%20Flutter%20mobile%20apps,shared%20code%20for%20both%20experiences.\">web support is stable</a> earlier this year. Now, after 6 months, about 13% of all flutter run commands and 11% of all flutter build commands target the web. So, we wanted to understand how your perception around web support changed after the stable release. Similar survey questions were asked in Q3 2020, so we were able to compare some of the data points.</p><p>First, we found that 38% of developers worked on a Flutter web app in the month prior to the survey. Additionally, 52% of total developers have worked on a Flutter web app within the last 6 months (since the release of the stable version). The questions in this section were asked to the developers in this group only.</p><p>A total of 63% of the developers were positively satisfied with Flutter’s ability to develop production-quality web apps (23% very satisfied). When we specifically asked about the performance of Flutter apps on the web, 67% of the developers were positively satisfied (23% very satisfied). While this is lower than the overall satisfaction, we were pleased to see that the satisfaction with web performance increased from 59% in Q3 2020.</p><p>To understand where our opportunities are, we asked which performance issues developers have run into. Unsurprisingly, initial page load speed was the most commonly experienced performance issue (48%), followed by scrolling (32%). For page load, we are looking into decreasing Canvas Kit download size and providing an API for splash screens. For scrolling, we are working on numerous behavior issues as well as jank due to image decoding. You can find more details in the <a href=\"https://medium.com/flutter/flutter-whats-next-on-the-web-e0454bff964\">public roadmap</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9OQy-UFObeo26z9B\" /><figcaption>Initial page load speed was the most commonly experienced performance issue (48%), followed by scrolling (32%).</figcaption></figure><p>We also asked about the features that need improvement. SEO was selected by the most number of developers (36%), followed by download (bundle) size (27%). While we understand the importance of indexability on the web, our initial release of web support focused on the niche of web apps that put more emphasis on content creation and thus don’t require indexability. A good example of this use case is what Rive did with <a href=\"http://rive.app\">rive.app.</a> They have a landing page written in HTML that is SEO friendly, and when a user launches the main app written in Flutter web, SEO is no longer necessary. Our current plan is to improve the quality of Flutter on the web first, so that it excels in web apps before tackling other use cases like apps or pages that put more emphasis on content consumption.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3ZMVvMr2Rj-JL7xf\" /><figcaption>SEO was selected as the feature that needs improvement by the most number of developers (36%), followed by download (bundle) size (27%).</figcaption></figure><h3>Code samples in source code files</h3><p>Because Flutter is an open source project, you can jump to the definition of an API in your IDE and read its sample code, which is embedded in the source code. However, the framework team is considering moving the sample code from the source code into separate files to enable syntax highlighting and converting symbols to clickable links. (For more information, check out the design docs for <a href=\"https://docs.google.com/document/d/1-jjYru2ljRSRSY4hn4qwLj9oQj8UiqrDOgY10-FE2tY/edit\">Medium-Sized Sample Code</a> and <a href=\"https://docs.google.com/document/d/11JXF-9d0u1jGJ9-gdpMGAZr5YudAiyHhXI_pT2vTpnw/edit#heading=h.pub7jnop54q0\">Testing Code Samples</a>.) As this might interfere with how you consume the documentation, a section was added to this survey to learn how many of you might be impacted by the proposed design.</p><p>To our surprise, many of you frequently use the source code files. In fact, 70% of developers read the source code files on a weekly basis, if not daily.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Eflox0XKIUa22C9F\" /><figcaption>Seventy-percent of developers read the source code files on a weekly basis, if not daily.</figcaption></figure><p>We wanted to know how many of you actually read and consume the sample code in the /// comments. It turned out that 50% of respondents read the sample code, and about 21% copy the sample code, even if that is not very easy currently.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Bnqx85j9EgebkAc1\" /><figcaption>Fifty-percent of respondents read the sample code, and about 21% copy the sample code.</figcaption></figure><p>Then we asked about issues with interacting with sample code within the /// comments. We found that the biggest issue was the lack of syntax highlighting (27%). Also, long blocks of sample code made it difficult to read the rest of the documentation (25%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-CHYYzh1FiTmp4qO\" /><figcaption>The biggest issue was the lack of syntax highlighting (27%).</figcaption></figure><p>This result supports the benefit of hosting the sample code separately, which would shorten the length of the actual API documentation, and enabling support for syntax highlighting and converting symbols to clickable links. However, since many of you read and copy sample code within the documentation today, we might consider displaying the code inline with syntax highlighting; therefore visually separating the sample code from the rest of the documentation.</p><p>If you’re interested in following this topic, follow these issues related to the navigation support: <a href=\"https://github.com/dart-lang/sdk/issues/47548\">Dart</a>, <a href=\"https://github.com/dart-lang/sdk/issues/47549\">IntelliJ plugin</a>, <a href=\"https://github.com/Dart-Code/Dart-Code/issues/3629\">VSCode plugin</a>.</p><h3>See you in the next survey!</h3><p>We are seeing an increasing number of developers adopting Flutter as a part of their main job. This is encouraging news to us, and we strive to provide the best possible multi platform technology for you, based on your feedback.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_GNHkk5TLOI7wQYc\" /><figcaption>An increasing number of developers adopting Flutter as a part of their main job.</figcaption></figure><p>Please keep sending your feedback our way. But the quarterly survey isn’t the only channel you can use. If you have urgent issues that need follow-up, please file them on <a href=\"https://github.com/flutter/flutter/issues\">GitHub</a>.</p><p>The Flutter UXR team will continue to run surveys every quarter. We announce the survey on flutter.dev, in the Flutter IDE plugin, and on Twitter @FlutterDev. Please continue contributing your thoughts as the team seeks answers to important questions. You can also participate in other research by <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe0i4De809KXVCdljGKrjMj3lxhuzbuFKCtY5PEQPCYtGxFMg/viewform\">signing up for upcoming UX studies</a>.</p><p>Again, thank you to everyone who participated in this survey and provided valuable feedback. Our goal is to build a product that you love, and we appreciate your time and effort in helping us.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b67f5b997dca\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/about-web-community-and-code-samples-q3-2021-survey-results-b67f5b997dca\">About web, community, and code samples — Q3 2021 survey results</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-02-03T21:02:43.000Z":{"title":"What’s New in Flutter 2.10","link":"https://medium.com/flutter/whats-new-in-flutter-2-10-5aafb0314b12?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/5aafb0314b12","category":["flutter","windows","announcements"],"dc:creator":"Chris Sells","pubDate":"Thu, 03 Feb 2022 21:02:43 GMT","atom:updated":"2022-02-14T21:09:29.713Z","content:encoded":"<h4>Windows stable, performance improvements, Material 3 updates and more!</h4><p>I can’t believe it’s time again for a Flutter stable release! Hello and welcome to Flutter 2.10. It has been less than two months since our last release, but even in that short time we’ve had 1,843 issues closed and 1,525 PRs merged from 155 contributors worldwide. Thanks everyone for the great work, especially during the 2021 holiday season.</p><p>We have several exciting things to announce as part of this release, including a big update on Flutter’s support for Windows, several significant performance improvements, new support for icons and colors in the framework, and some tooling improvements. In addition, we’ve got some updates on the removal of the dev channel, reduction in support for older versions of iOS, and a short list of breaking changes. Let’s get to it!</p><h3>Ready for production apps on Windows</h3><p>First and foremost, the Flutter 2.10 release brings with it the stable release of Windows support. You no longer need to flip a flag to get the functionality that produces Windows apps on the stable channel of Flutter — now it’s available by default!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*278rYAB5Pac8_7SD\" /></figure><p>Of course, we did a lot more than just flip a flag. This release includes extensive improvements for text handling, keyboard handling, and keyboard shortcuts, as well as new integrations directly into Windows, with support for command-line arguments, globalized text entry, and accessibility.</p><p>For much more on the Windows stable launch, see <a href=\"https://timsneath.medium.com/6979d0d01fed\">the Announcing Flutter for Windows blog post</a>, which describes the architecture of Flutter on Windows that allows for deep integration and gives you a sense of just how many Flutter packages and plugins already support Windows. You can also see some examples of what our tooling and app partners are doing with Flutter on Windows!</p><h3>Performance improvements</h3><p>This release of Flutter includes initial support for <strong>dirty region management</strong> provided by Flutter community member <a href=\"https://github.com/knopp\">knopp</a>. He’s enabled <a href=\"https://github.com/flutter/engine/pull/28801\">partial repaints for a single dirty region on iOS/Metal</a>. This change reduced 90th and 99th percentile rasterization times on a few benchmarks by an order of magnitude, and reduced GPU utilization on these benchmarks from more than 90% to less than 10%.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*mWerp_uZBj64dBeC\" /></figure><p>We expect to bring the benefits of partial repaints to <a href=\"https://github.com/flutter/engine/pull/29591\">other platforms</a> in future releases.</p><p>In the Flutter 2.8 release, we <a href=\"https://github.com/flutter/flutter/issues/53501\">landed our own internal picture recording format</a>. Now in Flutter 2.10, we’ve started building optimizations with it. As an example, one common case of <strong>opacity layers is now </strong><a href=\"https://github.com/flutter/engine/pull/29775\"><strong>implemented much more efficiently</strong></a>. Even in the worst case, frame raster times in our benchmarks fell to under a third of their previous value.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*sJIYBXONsWsYa5l4\" /></figure><p>We expect this optimization to expand to cover more cases as we continue developing the picture recording format.</p><p>In profile and release modes, Dart code is compiled ahead of time to native machine code. The key to the efficiency and small size of this code is a whole program type flow analysis that unlocks many compiler optimizations and aggressive tree-shaking. However, as the type flow analysis must cover the whole program, it can be somewhat expensive. This release includes <a href=\"https://dart.googlesource.com/sdk.git/+/e698500693603374ecc409e158f36c25bff45b12\"><strong>a faster implementation of type flow analysis</strong></a>. Overall build time for the Flutter app in our benchmarks fell by ~10%.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/850/0*3bjgNV_6OjBYDj24\" /></figure><p>As always, performance enhancements, reduced memory usage, and reduced latency are a priority for the Flutter team. Look forward to further improvements in future releases.</p><h3>iOS updates</h3><p>In addition to performance improvements, we’ve also added some platform-specific features and enhancements. One new enhancement is <a href=\"https://github.com/flutter/engine/pull/29281\">smoother keyboard animations in iOS</a> from <a href=\"https://github.com/luckysmg\">luckysmg</a>, which is provided automatically to your app without you having to do a thing.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/740/0*qMbaTcooLzyIxwgp\" /></figure><p>We’ve also improved the stability of the camera plugin for iOS by fixing a few <a href=\"https://github.com/flutter/plugins/pull/4608\">edge</a> <a href=\"https://github.com/flutter/plugins/pull/4661\">case</a> <a href=\"https://github.com/flutter/plugins/pull/4619\">crashes</a>.</p><p>Finally, <strong>64-bit iOS architectures get a new feature to reduce memory usage: </strong><a href=\"https://github.com/flutter/engine/pull/30077\"><strong>compressed</strong></a><strong> </strong><a href=\"https://github.com/flutter/engine/pull/30333\"><strong>pointers</strong></a>.</p><p>A 64-bit architecture represents pointers as a 8-byte data structure. When you have a lot of objects, the space taken up by the pointers themselves adds to the overall memory usage of your app, especially if you have larger, more complicated apps that have more GC churn. However, your iOS app is very unlikely to have enough objects to require a significant portion of even the 32-bit address space (2 billion objects), let alone the enormity of the 64-bit address space (9 million billion objects).</p><p>Compressed pointers were provided in Dart 2.15 and in this release of Flutter, we use them to reduce the memory usage for 64-bit iOS apps. You can <a href=\"https://medium.com/dartlang/dart-2-15-7e7a598e508a\">check out the Dart 2.15 blog post for details</a>.</p><p>And while you’re reading Dart blog posts, don’t forget to <a href=\"https://medium.com/dartlang/dd87abd6bad1\">check out the Dart 2.16 announcement</a> for updates on supporting Flutter for Windows with package platform tagging and a new search experience on pub.dev.</p><h3>Android updates</h3><p>This release contains a number of improvements for Android as well. By default, when you create a new app, <strong>Flutter defaults to support the latest version of Android</strong>, version 12 (API level 31). Also, in this release, <strong>we’ve enabled </strong><a href=\"https://developer.android.com/studio/build/multidex\"><strong>multidex</strong></a><strong> support automatically</strong>. If your app supports Android SDK versions below 21, and it exceeds the 64K method limit, simply pass the --multidex flag to flutter build appbundle or flutter build apk and your app will support multidex.</p><p>And last but not least, we listened to your feedback that Gradle error messages can be intimidating. For this reason, <strong>the Flutter tool now suggests resolution steps to common issues</strong>. For example, if you add a plugin to your app that requires you to increase the minimum supported Android SDK version, you now see a “Flutter Fix” suggestion in the logs.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*1U5AWT3j69NL5jWn\" /></figure><p>We continue to add more suggestions to common error messages, and would love to get your feedback on other error messages where this treatment would be useful.</p><h3>Web updates</h3><p>This release contains some improvements on the web as well. For example, in previous releases, when scrolling to the edge of a multiline TextField on the web, it wouldn’t scroll properly. This release introduces <a href=\"https://github.com/flutter/flutter/pull/93170\"><strong>edge scrolling for text selection</strong></a><strong>: </strong>when the selection moves outside of the text field, the field scrolls to view the scroll extent. This new behavior is available for both web and desktop apps.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/320/1*VpOHaGxbrVr262jc6bMUmg.gif\" /></figure><p>In addition, this release of Flutter includes another notable improvement in the web. We’re always looking to reduce the overhead of our mapping of Flutter to the web. In previous versions, every time we wanted to bring a native HTML widget into your Flutter app, we needed an overlay as part of our platform view support for the web. Each one of these overlays enables custom painting but represents a certain amount of overhead. If you have a large number of native HTML widgets in your app, such as links, that adds up to a lot of overhead. With this release, <strong>we’ve created a new “non-painting platform view” for the web that essentially removes that overhead</strong>. And we’ve <a href=\"https://github.com/flutter/plugins/pull/4578\">taken advantage of this optimization</a> in <a href=\"https://pub.dev/documentation/url_launcher/latest/link/Link-class.html\">the </a><a href=\"https://pub.dev/documentation/url_launcher/latest/link/Link-class.html\">Link widget</a>, which means if you have many links in your Flutter web app, they no longer represent any significant overhead at all. We’ll be applying this optimization to other widgets over time.</p><h3>Material 3</h3><p>This release is the beginning of the transition to Material 3, which includes the ability to <a href=\"https://github.com/flutter/flutter/pull/93463\"><strong>generate an entire color scheme from a single seed color</strong></a>.</p><p>With any color, you can construct an instance of the new ColorScheme type:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3c75c1f424e7ff8465e288054bfc7541/href\">https://medium.com/media/3c75c1f424e7ff8465e288054bfc7541/href</a></iframe><p>There’s also a new colorSchemeSeed parameter to the ThemeData factory constructor that allows you to generate the theme’s color scheme:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7d94d4b72cdc72dd733758484973886e/href\">https://medium.com/media/7d94d4b72cdc72dd733758484973886e/href</a></iframe><p>In addition, this release includes <strong>the </strong><strong>ThemeData.useMaterial3 flag, which switches components to the new Material 3 look</strong>.</p><p>Last but not least, <strong>we’ve added </strong><a href=\"https://github.com/flutter/flutter/pull/95007\"><strong>1,028 new Material icons</strong></a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-XysmyfnVC_Rt_rj\" /><figcaption><em>A tiny sample of the 1,028 new Material icons</em></figcaption></figure><p>Updates can be found in <a href=\"https://github.com/flutter/flutter/issues/91605\">the issue tracking our Material 3 work</a>; feel free to leave your feedback.</p><h3>Integration testing improvements</h3><p>In December of 2020, we announced a new way to <a href=\"https://medium.com/flutter/updates-on-flutter-testing-f54aa9f74c7e\">do end-to-end testing using the integration_test package</a>. This new package replaced the flutter_driver package as the recommended way to do integration testing, providing new features, like Firebase Test Lab support as well as support for web and desktop.</p><p>Since that time, we’ve made further improvements in the integration testing story, including <strong>bundling the integration_test package into the Flutter SDK itself</strong>, making it easier to integrate with your app. There’s also <strong>a new </strong><a href=\"https://docs.flutter.dev/testing/integration-tests/migration\"><strong>migration guide if you’re moving your existing flutter_driver tests to integration_test</strong></a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*04e4XmQgP9CAyJ6x\" /><figcaption><em>An example from the new flutter_driver to integration_test migration guide</em></figcaption></figure><p>Several of the <a href=\"https://docs.flutter.dev/testing/integration-tests\">existing</a> <a href=\"https://docs.flutter.dev/cookbook/testing/integration/profiling\">docs</a>, <a href=\"https://github.com/flutter/samples/tree/master/testing_app\">samples</a> and <a href=\"https://codelabs.developers.google.com/codelabs/flutter-app-testing\">codelabs</a> have also been updated for integration_test. To get started, point your browser to the <a href=\"https://docs.flutter.dev/testing\">Testing Flutter apps</a> page on flutter.dev. If you aren’t already using integration_test on your Flutter apps, now’s the time to start!</p><h3>Flutter DevTools</h3><p>We’ve done some work on Flutter DevTools in this release as well, including one ease-of-use feature if you use DevTools from the command line. Instead of using pub global activate to download and execute the latest version, you can now <strong>simply use </strong><strong>dart devtools</strong> and get the version that is up-to-date with the version of Flutter that you’re using.</p><p>We’ve also made a number <a href=\"https://github.com/flutter/devtools/pull/3526\">of</a> <a href=\"https://github.com/flutter/devtools/pull/3493\">usability</a> <a href=\"https://github.com/flutter/devtools/pull/3480\">updates</a>, including <a href=\"https://github.com/flutter/devtools/pull/3497\"><strong>improved support for inspecting large lists and maps in the Debugger variables pane</strong></a> (thanks to <a href=\"https://github.com/elliette\">elliette</a>).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/386/0*Tau4a2z5GHZzuJky\" /></figure><p>And finally, we’re about to release our <strong>annual DevTools survey</strong>! Please provide your feedback and help us improve your development experience.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/762/0*bc2CaiWCLCpaYWMV\" /></figure><p>This survey prompt will show up directly in DevTools sometime in mid-February. Thanks!</p><h3>VSCode improvements</h3><p>The Visual Studio Code extension for Flutter has also gotten a number of enhancements, including <strong>color previews in more places in your code</strong> and <a href=\"https://github.com/Dart-Code/Dart-Code/issues/3240\"><strong>a color picker that updates your code for you</strong></a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/770/0*eA2UN8_kzzJreUQf\" /></figure><p>In addition, if you’d like to be a tester on prerelease versions of the Dart and Flutter extensions for VSCode, you can <a href=\"https://github.com/Dart-Code/Dart-Code/issues/3729\">switch to prerelease versions in your extension settings</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8k22xPfwMobXvYJB\" /></figure><p>You can read about the details of this update and more in <a href=\"https://groups.google.com/g/flutter-announce/c/lR-yn1s9HKk\">this post</a> on <a href=\"https://groups.google.com/g/flutter-announce\">the flutter-announce mailing list</a>.</p><ul><li><a href=\"https://groups.google.com/g/flutter-announce/c/lR-yn1s9HKk\">VS Code extensions v3.32</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/lDSpaiWvUdI\">VS Code extensions v3.34</a></li></ul><h3>Removing the dev channel</h3><p>In <a href=\"https://medium.com/flutter/whats-new-in-flutter-2-8-d085b763d181\">the Flutter 2.8 release</a>, we announced that we were doing the work to <strong>remove the dev channel</strong>, simplifying your choices, and removing engineering overhead. In this release, <a href=\"https://github.com/flutter/flutter/issues/94962\">we’ve completed that work</a>, including:</p><ul><li>Updated Flutter tool to help migrate developers off the dev channel</li><li>Updated wiki to reflect updated customer promises</li><li>Updated deprecation policy</li><li>Removed dev channel support from DartPad, pre-submit tests, and the website</li></ul><p>The dev channel has now been scrubbed away. If we missed a spot, please <a href=\"http://github.com/flutter/flutter/issues\">let us know</a>.</p><h3>Sunsetting Support for iOS 9.3.6</h3><p>Due to decreased usage and increased difficulty in maintaining the target devices in our lab, we are <a href=\"http://flutter.dev/go/rfc-32-bit-ios-support\"><strong>moving support</strong></a><strong> for iOS 9.3.6 </strong><a href=\"https://docs.flutter.dev/development/tools/sdk/release-notes/supported-platforms\"><strong>from the “Supported” tier to the “Best Effort” tier</strong></a>. This means that support for iOS 9.3.6 and support for 32-bit iOS devices will be maintained only through coding practices, and ad-hoc and community testing.</p><p>In the Q3, 2022 stable release, we expect to drop support for 32-bit iOS devices and iOS versions 9 and 10 from Flutter stable releases. This means that apps built against stable Flutter SDKs after that point will no longer work on 32-bit iOS devices, and the minimum iOS version supported by Flutter will increase to iOS 11.</p><h3>Breaking Changes</h3><p>We also work to have <strong>a small number of breaking changes</strong> in each release and with this release, although we’re not quite at zero yet — but we’ll keep trying!</p><ul><li><a href=\"https://docs.flutter.dev/release/breaking-changes/kotlin-version\">Required Kotlin version</a></li><li><a href=\"https://docs.flutter.dev/release/breaking-changes/2-5-deprecations\">Deprecated API removed after v2.5</a></li><li><a href=\"https://docs.flutter.dev/release/breaking-changes/raw-images-on-web-uses-correct-origin-and-colors\">Raw images on Web uses correct origin and colors</a></li><li><a href=\"https://docs.flutter.dev/release/breaking-changes/scribble-text-input-client\">Scribble Text Input Client</a></li></ul><p>If you’re still using these APIs, you can <a href=\"https://docs.flutter.dev/release/breaking-changes\">read the migration guidance on flutter.dev</a>. As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a> that help us identify these breaking changes.</p><h3>Summary</h3><p>From all of us here on the Flutter Team at Google, we want to say — thank you. Thank you for being part of the community that has helped Flutter become the most popular cross-platform UI toolkit, as measured by analysts like Statista and SlashData. Stable support for Windows is just the beginning of a packed year, and we can’t wait for everything we’ll build together!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5aafb0314b12\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-2-10-5aafb0314b12\">What’s New in Flutter 2.10</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-02-03T18:18:00.000Z":{"title":"Announcing Flutter for Windows","link":"https://medium.com/flutter/announcing-flutter-for-windows-6979d0d01fed?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6979d0d01fed","category":["windows-development","desktop","flutter","announcements"],"dc:creator":"Tim Sneath","pubDate":"Thu, 03 Feb 2022 18:18:00 GMT","atom:updated":"2022-02-04T23:22:40.139Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Build high-quality Windows apps that also run on mobile and web</h4><p>Since we launched Flutter, we’ve focused on delivering a cross-platform solution for beautiful, tailored apps that are compiled to machine code and take full advantage of the underlying graphics hardware of your device. Today marks a significant expansion of this vision with the first production release of support for Windows as an app target, enabling Windows developers to benefit from the same productivity and power that mobile developers have been enjoying.</p><figure><img alt=\"An image of a laptop with two light blue birds, representing Dash, the mascot of Flutter and Dart, hovering over the keyboard. The text in the image says, “Flutter + Windows”.\" src=\"https://cdn-images-1.medium.com/max/1024/0*LtCDFBQudFeDS_f6\" /></figure><p>Our goal with Flutter is to give you the tools you need to build a great experience, regardless of which operating system you’re building for. And so we want to bring the same core framework and tools to every place you might want to paint pixels. Flutter allows you to handcraft <strong>beautiful</strong> experiences where your brand and design come to the forefront. Flutter is <strong>fast</strong>, compiling directly to machine code; with support for stateful hot reload, you get the <strong>productivity</strong> of an interactive environment that allows you to make changes while your app is running and see the results immediately. And Flutter is <strong>open</strong>, with thousands of contributors adding to the core framework and extending it with an ecosystem of packages.</p><blockquote>Nearly half a million apps use Flutter…</blockquote><p>So far, we’ve seen momentum that has exceeded our expectations, with nearly half a million apps now released that use Flutter, including big apps from companies like <a href=\"https://verygood.ventures/success-stories/betterment\">Betterment</a>, BMW, and ByteDance, and apps from thirty teams at Google. In 2021, Flutter became the most popular cross-platform UI toolkit, as measured by analysts like <a href=\"https://www.statista.com/\">Statista</a> and <a href=\"https://www.slashdata.co/\">SlashData</a>:</p><figure><img alt=\"Extracts from studies by Statista (“Flutter is the most popular cross-platform mobile framework used by global developers… 42% of software developers used Flutter”), SlashData (“The most popular cross-platform frameworks for development include Google’s Flutter (44%)”), JetBrains (“The popularity of Flutter continues to grow. This year it has surpassed React Native to become the most popular…”) and StackOverflow (“Flutter is the #2 loved framework”).\" src=\"https://cdn-images-1.medium.com/max/1024/0*w2gBpEJcFceqjIRv\" /></figure><p>Our own data backs this up, with a consistent <a href=\"https://medium.com/flutter/about-web-community-and-code-samples-q3-2021-survey-results-b67f5b997dca\">92% of Flutter developers expressing positive satisfaction</a> with our tools in all four quarterly surveys in 2021. (And to the other 8% of you, we’re listening to your feedback and want you to be happy as well!)</p><p>One common request has been for Windows support.</p><blockquote>Today, we’re thrilled to announce the full availability of support for Windows apps for Flutter in stable builds.</blockquote><h3>Windows and Flutter</h3><p>A couple of years ago, we laid out an ambitious vision for Flutter to expand from mobile apps on iOS and Android to other platforms including web and the <em>desktop</em>.</p><p>The core of Flutter carries across platforms: from the portable, hardware-accelerated Skia graphics engine, to the Flutter rendering system; core primitives like animation, theming, text input, and internationalization; and the hundreds of widgets that Flutter offers.</p><p>But desktop apps aren’t just mobile apps running on a bigger screen. They’re designed for different input devices, such as a keyboard and mouse. They have resizable windows that often run on a widescreen monitor. There are different conventions for critical things like accessibility, input method editors, and visual styling. And they integrate with different APIs in the underlying operating system: desktop apps support everything from file system pickers to device hardware to data stores like the Windows registry.</p><p>So while we’ve brought Flutter <em>to</em> Windows, we’ve also tailored it <em>for</em> Windows.</p><p>Just as with our support for Android and iOS, the Windows implementation of Flutter combines a Dart framework and C++ engine. Windows and Flutter communicate through an embedding layer that hosts the Flutter engine and is responsible for translating and dispatching Windows messages. Flutter coordinates with Windows to paint your UI to the screen, handles events like window resizing and DPI changes, and works with existing Windows modalities for internationalization, such as input method editors.</p><figure><img alt=\"An architectural diagram showing the Flutter architecture: at the top is the Flutter framework, built in Dart, which comprises building blocks like Material, the widgets system, rendering objects, animation, gestures, and painting primitives. Below that is the Flutter engine, written in C++, as well as the Skia and text rendering libraries; lastly, the Windows embedder which interoperates with the underlying operating system and passes Win32 messages to the engine.\" src=\"https://cdn-images-1.medium.com/max/1024/0*nmWy9ouW6nL5vrlB\" /><figcaption>On Windows, Flutter uses exactly the same Dart code, but takes advantage of native Windows APIs.</figcaption></figure><p>Your app can use every part of the Flutter framework, and on Windows, it can also talk to the Win32, COM, and Windows Runtime APIs either directly through Dart’s C interop layer, or using a platform plugin written in C++. We’ve also adapted a number of common plugins to include Windows support, including camera, file_picker, and shared_preferences. More importantly, the community has already added Windows support for a broad array of other packages, covering everything from Windows taskbar integration to serial port access.</p><figure><img alt=\"A list of some Windows packages, including USB support, maps, web, serial port, file selection, window management, TensorFlow, credential management, battery, WMI, printer, screen capture and network connectivity.\" src=\"https://cdn-images-1.medium.com/max/1024/0*EgO7uhhHTZ5M5RWX\" /><figcaption>There are already hundreds of packages that have been adapted to support Flutter apps built for Windows.</figcaption></figure><p>For a fully tailored Windows UI, you can also use packages like <a href=\"https://pub.dev/packages/fluent_ui\">fluent_ui</a> and <a href=\"https://pub.dev/packages/flutter_acrylic\">flutter_acrylic</a> to create an app that expresses the Microsoft Fluent design system beautifully. And using the <a href=\"https://pub.dev/packages/msix\">msix</a> tool you can wrap your app in an installer that can be uploaded to the Microsoft Store on Windows.</p><p>Together, this fosters creation of apps that look great on Windows, run fast on Windows, and still transfer to other desktop or mobile devices, as well as the web. Here are a few early examples that we’ve seen so far:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UuEJrQgjNUXhxgDJgjhQLg.jpeg\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*CV_R70NqCzCoGxuI\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EokU2CUDhjr6nDpW\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2FlTNeXvMtnATYfw\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*QZlDI5SemNqlOuX1\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EqTtZLTkDhGrNAZj\" /><figcaption>Some early community examples of Windows apps built with Flutter, including <a href=\"https://github.com/harmonoid/harmonoid\">Harmonoid</a> and <a href=\"https://rows.com/\">Rows</a>.</figcaption></figure><h3>Microsoft and Flutter</h3><p>We asked the Windows team if they’d be willing to share a few words about Flutter’s support. Here’s what Kevin Gallo, Corporate Vice President for Windows Developer Platform at Microsoft, has to say:</p><blockquote>“We’re delighted to see Flutter adding support for creating Windows apps. Windows is an open platform, and we welcome all developers. We’re excited to see Flutter developers bring their experiences to Windows and also publish to the Microsoft Store. Flutter support for Windows is a big step for the community, and we can’t wait to see what you’ll bring to Windows!”</blockquote><p>Indeed, several teams from Microsoft have contributed to today’s announcement. In particular, we’d like to express our gratitude to the Fluent design team for their contribution of iconography for Flutter apps on Windows. Their <a href=\"https://pub.dev/packages/fluentui_system_icons\">fluentui_system_icons</a> package has been awarded Flutter Favorite status to signify its quality.</p><p>We’ve also been impressed with the investments Microsoft has made around accessibility for Windows, and we’re grateful for that team’s assistance to ensure Flutter has support for screen readers from day one. It’s a mistake to dismiss accessibility as a niche requirement. As this diagram from the <a href=\"https://www.microsoft.com/design/inclusive/\">Microsoft inclusive design toolkit</a> illustrates, we all have reason to care about delivering experiences that adapt for different permanent, temporary, or situational needs.</p><figure><img alt=\"A diagram showing how accessibility aids can be of use to a wide audience, in three categories: permanent impairments such as blindness or deafness; temporary conditions such as an arm injury or cataract; or situational needs such as a new parent who is holding a baby with one arm, or a driver who is unable to look at a screen.\" src=\"https://cdn-images-1.medium.com/max/1024/1*kZRGSKMDQQhbINmZRw6z4w.png\" /></figure><p>The video below demonstrates how Flutter integrates with Windows Narrator. For the purposes of this video, we’ve deliberately blurred the screen to give you a sense of how valuable this feature is to users who need it.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FYVSlpqSXV0c%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYVSlpqSXV0c&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FYVSlpqSXV0c%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/12c2c21500f098f57adbb0bcfb30ab94/href\">https://medium.com/media/12c2c21500f098f57adbb0bcfb30ab94/href</a></iframe><h3>An ecosystem of tools for Windows development</h3><p>Our tooling partners are also adding support for Windows. To highlight a few:</p><ul><li><a href=\"https://flutterflow.io/\">FlutterFlow</a>, the low-code Flutter app design tool, is <a href=\"https://www.youtube.com/watch?v=6jnXHgSQ-Q0\">announcing support today for Windows</a>, along with features to help Flutter developers build apps tailored for desktop usage.</li><li><a href=\"https://docs.mongodb.com/realm/sdk/flutter/\">Realm</a> is a super-fast local data store. <a href=\"https://www.mongodb.com/developer/article/introducing-realm-flutter-sdk/\">The latest version, shipping today</a>, now supports building Windows apps with Flutter, with fast access to the underlying database using <a href=\"https://dart.dev/guides/libraries/c-interop\">Dart FFI</a>, adding to their existing support for mobile platforms like iOS and Android.</li><li>Nevercode has updated their <a href=\"https://flutterci.com/\">Codemagic CI/CD tool</a> to support Windows, enabling you to test and build your Windows apps in the cloud and automate deployment of your app to the Microsoft Store.</li><li><a href=\"https://www.syncfusion.com/flutter-widgets\">Syncfusion</a> have updated their suite of widgets to take full advantage of Windows. If you subscribe to their toolkit, you’ll find data visualization components like treemaps and charting, a rich data grid widget, calendars and even support for PDF creation and Excel spreadsheets.</li><li>Lastly, <a href=\"https://rive.app/\">Rive</a> announced today an upcoming Windows version of their popular graphics tooling suite, allowing designers and developers to create interactive vector animations that can respond to code in real time using a state machine. The upcoming Windows edition of their app offers screaming fast performance and a lower memory footprint, and will be available soon in the Microsoft Store for download.</li></ul><figure><img alt=\"A screenshot of Rive, a motion design tool that is written in Flutter and produces output that can be embedded into any Flutter app.\" src=\"https://cdn-images-1.medium.com/max/1024/1*IDu8nsxUNLecfET3nuSdDg.png\" /><figcaption><a href=\"https://rive.app\">Rive</a>, coming soon to the Microsoft Store on Windows.</figcaption></figure><p>It’s very exciting for us to see a mature ecosystem built around Flutter, and we’d encourage you to check out each of these partners as you start building Windows apps with Flutter.</p><h3>Windows support arrives in Flutter 2.10</h3><p>Stable, production-quality support for building Windows apps is available as part of <a href=\"https://docs.flutter.dev/get-started/install\">Flutter 2.10, which releases today</a>. Flutter 2.10 also includes many other features, performance improvements and bug fixes, which are covered in more detail <a href=\"https://medium.com/flutter/whats-new-in-flutter-2-10-5aafb0314b12\">in a separate blog post</a>.</p><p>In the coming months, you’ll hear more from us on completing stable support for macOS and Linux, making the full set of desktop, web, and mobile platforms available for your production Flutter apps.</p><p>In the meantime, thank you for your support of Flutter. We’re excited to see what you build for Windows!</p><figure><img alt=\"An image of the Dart mascot, Dash. She is sitting behind a laptop computer with a Flutter logo. We can’t see it, but she’s looking at a Windows app built in Flutter!\" src=\"https://cdn-images-1.medium.com/max/1024/0*vowtRZE_wvyVA7CB\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6979d0d01fed\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-for-windows-6979d0d01fed\">Announcing Flutter for Windows</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-01-20T03:06:37.000Z":{"title":"How to build your own Flutter slide puzzle","link":"https://medium.com/flutter/how-to-build-your-own-flutter-slide-puzzle-93721ac5fad2?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/93721ac5fad2","category":["web","dart","desktop","flutter","mobile-app-development"],"dc:creator":"Very Good Ventures Team","pubDate":"Thu, 20 Jan 2022 03:06:37 GMT","atom:updated":"2022-01-20T22:41:05.559Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*r5DaUW3Cdoad6GQBwWIh3Q.png\" /></figure><p>By now you’ve probably read through the <a href=\"https://flutterhack.devpost.com/\">Flutter Puzzle Hack</a> challenge and are already thinking of how to push your creativity to new limits. We’re here to give you some more info about how the sample codebase is structured and give you some ideas for creating your contest submission.</p><h3>Slide puzzle architecture</h3><p>The provided source code implements a layered architecture with flutter_bloc<strong> </strong>to manage the state. Blocs handle everything from the game logic to theming. All state is managed in a consistent way; for any updates to the logic of the puzzle, you’ll only need to find the corresponding bloc and update it. The reset and shuffle game buttons, timer, and countdown are all separate blocs, so these might be other places where you consider implementing something creative: maybe an hourglass for a timer? Or a snazzy shuffle sequence?</p><p>Note that all of the game logic is contained within a single bloc called PuzzleBloc. This will update with events such as tapping a tile to move the puzzle tile with TileTapped event or resetting the puzzle board completely with PuzzleReset. Each time a puzzle is updated, a new puzzle state is emitted.</p><pre>class PuzzleBloc extends Bloc&lt;PuzzleEvent, PuzzleState&gt; {<br>  PuzzleBloc(this._size, {this.random}) : super(const PuzzleState() {<br>    on&lt;PuzzleInitialized&gt;(_onPuzzleInitialized);<br>    on&lt;TileTapped&gt;(_onTileTapped);<br>    on&lt;PuzzleReset&gt;(_onPuzzleReset);<br>  }</pre><pre>  void _onPuzzleInitialized(<br>    PuzzleInitialized event,<br>    Emitter&lt;PuzzleState&gt; emit,<br>  ) {...}<br>  void _onTileTapped(<br>    TileTapped event,<br>    Emitter&lt;PuzzleState&gt; emit,<br>  ) {...}<br>  void _onPuzzleReset(<br>    PuzzleReset event,<br>    Emitter&lt;PuzzleState&gt; emit,<br>  ) {...}<br>}</pre><h3>Customizing the theme</h3><p>The sample puzzle code contains both a Simple and Dashatar theme. These can be used as a jumping off point for your own customizations — borrow as much as you need, or start from scratch. How you implement your puzzle is up to you! One place you may consider getting creative is the puzzle theming.</p><figure><img alt=\"Flutter slide puzzle with Dash in the lower right corner\" src=\"https://cdn-images-1.medium.com/max/1024/0*BHUg3jHaaIRFW_5O\" /></figure><p>All of the theming in the demo happens at the top of the PuzzlePage. It is abstracted, so you’ll only need to update the theme elements in one place and have the changes reflected everywhere. Both the Simple and Dashatar themes define a range of options such as screen background, menu, logo, buttons, text colors, whether the theme displays a timer (present in the Dashatar theme, but not in the Simple theme), and more. You can find these in the “dashatar” and “simple” directories at the root of the repository.</p><pre>/// {@template simple_theme}<br>/// The simple puzzle theme.<br>/// {@endtemplate}<br>class SimpleTheme extends PuzzleTheme {<br>  /// {@macro simple_theme}<br>  const SimpleTheme() : super();</pre><pre>  @override<br>  Color get backgroundColor =&gt; PuzzleColors.white;</pre><pre>  @override<br>  Color get buttonColor =&gt; PuzzleColors.primary6;</pre><pre>  @override<br>  Color get hoverColor =&gt; PuzzleColors.primary3;</pre><pre>  @override<br>  Color get pressedColor =&gt; PuzzleColors.primary7;</pre><pre>  ...<br>}</pre><p>Each puzzle theme has a LayoutDelegate that computes the layout of this theme. You can create new themes by reusing the same layout objects and only adjusting some theme options. For more advanced designs, the whole theme LayoutDelegate can be customized. For example, you can override the backgroundBuilder to make a custom background, displayed only on a large screen.</p><pre>@override<br>Widget backgroundBuilder(PuzzleState state) {<br>  return Positioned(<br>    bottom: 74,<br>    right: 50,<br>    child: ResponsiveLayoutBuilder(<br>      small: (_, child) =&gt; const SizedBox(),<br>      medium: (_, child) =&gt; const SizedBox(),<br>      large: (_, child) =&gt; const DashatarThemePicker(),<br>    ),<br>  );<br>}</pre><h3>Implementing animations</h3><p>Animations are a great element to explore in your slide puzzle. While the Simple theme does not contain any animations, the Dashatar code implements a few animations, some of which are <a href=\"https://docs.flutter.dev/development/ui/animations/staggered-animations\">staggered</a>. These animations are driven by a single animation controller adjusted with <a href=\"https://api.flutter.dev/flutter/animation/Interval-class.html\">Interval</a> to delay the animation and <a href=\"https://api.flutter.dev/flutter/animation/Tween-class.html\">Tween</a> to define the range of values of the animation. This can be seen in the success state of the Dashatar puzzle where multiple widgets appear sequentially by animating their offset and opacity. Similarly, each tick of the countdown timer slowly grows in and then fades out just as the next tick is about to appear using the same technique.</p><figure><img alt=\"Dashatar slide puzzle mid-shuffle with a puzzle timer above\" src=\"https://cdn-images-1.medium.com/max/1024/0*YPUf0ml0ggq7RJIL\" /></figure><p>Most of the animations in the Dashatar theme are implicit. This means that there is no need to write the whole animation yourself, as widgets animate changes to properties on their own. As an example, take a look at the DashatarPuzzleTile widget for how to animate the movement of tiles when the user taps a tile. Whenever a tile is tapped, its current position is updated and transitioned over the given movementDuration thanks to implicitly animated AnimatedAlign.</p><pre>class DashatarPuzzleTile extends StatelessWidget {<br>  ... <br>  <br>  final Tile tile;<br>  <br>  @override<br>  Widget build(BuildContext context) {<br>    return AnimatedAlign(<br>      alignment: FractionalOffset(<br>        (tile.currentPosition.x - 1) / (size - 1),<br>        (tile.currentPosition.y - 1) / (size - 1),<br>      ),<br>      duration: movementDuration,<br>      curve: Curves.easeInOut,<br>      child: ResponsiveLayoutBuilder(...),<br>    );<br>  }<br>}</pre><h3>Designing for the web</h3><p>The sample puzzle was built for the web. It implements responsive design for three screen sizes: small, medium, and large. In addition, there is a ResponsiveLayoutBuilder that uses a wrapper around the Flutter LayoutBuilder widget, which allows you to specify different widgets based on the different breakpoints.</p><p>Since we targeted the web, there are some additional considerations to keep in mind. The app pre-caches images and some audio to help optimize performance during the game. When a user arrives at the default Simple puzzle game, the assets for the Dashatar version load in the background (we took a similar approach with loading all of the props for <a href=\"https://github.com/flutter/photobooth\">I/O Photo Booth</a>). This will make sure that once the user navigates to the Dashatar theme, most assets will already be loaded, ensuring a smooth user experience.</p><p>While the app is at home on the web, you could challenge yourself to explore creative ways to make the puzzle extend to multiple platforms. What might your puzzle look like on mobile and desktop? How can you adapt your ideas for multiple platforms?</p><h3>Accessibility</h3><p>The slide puzzle was built with accessibility in mind. Users are able to use a keyboard to interact with the puzzle. This is done with RawKeyboardListener, a widget that calls a callback whenever the user presses or releases a key on a keyboard. Users can also interact with the app using screen readers. This is done with <a href=\"https://api.flutter.dev/flutter/widgets/Semantics-class.html\">semantic labels</a>. There are also tooltips that appear for some actions using the Tooltip widget. If you’re building your slide puzzle submission from scratch, we highly recommend making your puzzle accessible to all users by using similar strategies above.</p><h3>Additional ideas</h3><p>Feel free to use the demo codebase as a foundation for your submission. Or, you can implement a new idea from scratch. The important thing is that your submission is a working slide puzzle — but how you get there is up to you!</p><p>The Simple and Dashatar examples should give you some ideas of where you can customize, or cool things you can create on your own. One interesting idea we explored was projecting the <a href=\"https://flutterplasma.dev/\">Flutter Plasma created by Felix Blaschke</a> onto the puzzle tiles. The plasma effect can be achieved using the CustomPaint widget wrapped with a Transform widget and animated with an AnimationController. You can find an <a href=\"https://github.com/felixblaschke/sa3_liquid/blob/main/lib/liquid/plasma/plasma.dart\">example of the plasma renderer used in the demos here</a>.</p><figure><img alt=\"Slide puzzle with plasma gradient effect displayed on the tiles and rockstar Dash in the lower right corner\" src=\"https://cdn-images-1.medium.com/max/1024/0*4sa1RI3GzrlpRcQ4\" /></figure><p>Another idea would be to fetch images or other data from an API. For example, you could use the <a href=\"https://developers.google.com/photos\">Google Photos API</a> to make a slide puzzle using photos from one of your favorite Google Photos albums. The sky is the limit with this challenge!</p><p>View the sample puzzle code <a href=\"https://github.com/VGVentures/slide_puzzle\">here</a>. Share your creations with us on Twitter with the #FlutterPuzzleHack. We can’t wait to see what you create!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=93721ac5fad2\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-to-build-your-own-flutter-slide-puzzle-93721ac5fad2\">How to build your own Flutter slide puzzle</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-01-06T20:17:06.000Z":{"title":"Announcing the Flutter Puzzle Hack!","link":"https://medium.com/flutter/announcing-the-flutter-puzzle-hack-ffc74fda6d44?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/ffc74fda6d44","category":["announcements","android-app-development","flutter-on-the-web","ios-app-development","flutter"],"dc:creator":"Kelvin Boateng","pubDate":"Thu, 06 Jan 2022 20:17:06 GMT","atom:updated":"2022-01-06T20:17:05.735Z","content:encoded":"<p>Push your creativity to its limits by reimagining this classic puzzle</p><figure><img alt=\"The Flutter Puzzle Hack logo\" src=\"https://cdn-images-1.medium.com/max/1024/1*RpaR1pTpRa0PUdNdfv4njA.png\" /><figcaption>Flutter Puzzle Hack logo</figcaption></figure><p>Ready to brush off the holiday cobwebs and try your hand at a fun coding project that will test your knowledge of Flutter? We’re excited to announce the Flutter Puzzle Hack, our latest challenge to see what <em>you</em> can do with Flutter and a chance to win one of over $50,000 worth of prizes. We’re asking you to develop the most creative yet solvable slide puzzle you can imagine, targeting Flutter on the web. Whether you create a new design, rebuild the puzzle from scratch, or integrate packages in new, interesting ways, we want to see just how far you can push your imagination.</p><p>To get you started, we’ve written sample code that handles all of the puzzle logic. We’ve also curated loads of other documentation and resources to help you build a compelling submission, so whether you’re an experienced Flutter developer or you’re just joining the Flutter community after reading Flutter Apprentice, there’s something here for you!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fzoYmZlFqBLxkXuCDM6IEw.png\" /></figure><p>Be sure to share your solutions on Twitter and tag them using the hashtag #flutterpuzzlehack for a chance to be featured on our Twitter account!</p><h3><strong>Details</strong></h3><p><strong>Date</strong>: <em>All projects must be submitted by February 28, 2022, 1:59pm PT (GMT -7). Winners will be announced on March 23, 2022.</em></p><p><strong>How to Submit</strong>: <em>Registration and entry submission instructions can be found at </em><a href=\"https://flutterhack.devpost.com/\"><em>DevPost</em></a><em>.</em></p><p><strong>Categories: </strong><em>Winners will be chosen in the following categories:</em></p><ul><li><em>Overall execution</em></li><li><em>Best use of animation &amp; design</em></li><li><em>Originality</em></li><li><em>Best multi-platform solution</em></li><li><em>Community Choice</em></li></ul><p><em>We’ll also award prizes for submissions that feature content that’s helpful to the Flutter community and submissions that include high-quality feedback for the Flutter team.</em></p><p><strong>Prizes</strong><em> include a fully loaded Macbook Pro, cash, Flutter swag, and the opportunity to be featured on Flutter’s promotional channels.</em></p><h3><strong>Product Info Sessions</strong></h3><p>On top of all of those resources, we’re partnering with the Flutter Community YouTube channel to host teams like Google Chrome, Firebase, and Rive to talk about everything from best practices for building on the web to effective use of integrations to take your project to the next level. Check out the <a href=\"https://flutterhack.devpost.com/\">contest page</a> for a detailed schedule.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fue2qa2L5CF4%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Due2qa2L5CF4&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fue2qa2L5CF4%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/6e2f470328c32ae25644d8b82750ccce/href\">https://medium.com/media/6e2f470328c32ae25644d8b82750ccce/href</a></iframe><h3><strong>Stay Connected</strong></h3><p>We’re working with our friends at DevPost for this challenge, which means that you’ll be able to vote for your favorite submissions, connect with other participants and find all relevant contest updates on the DevPost platform.</p><p>Head to <a href=\"https://flutterhack.devpost.com/\">flutterhack.devpost.com </a>to get started. Good luck, and have fun!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ffc74fda6d44\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-the-flutter-puzzle-hack-ffc74fda6d44\">Announcing the Flutter Puzzle Hack!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-02-09T18:43:26.000Z":{"title":"Flutter in 2022: strategy and roadmap","link":"https://medium.com/flutter/flutter-in-2022-strategy-and-roadmap-8c5eaf7c4275?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/8c5eaf7c4275","category":["flutter","strategy","announcements","developer","app-development"],"dc:creator":"Tim Sneath","pubDate":"Wed, 09 Feb 2022 18:43:26 GMT","atom:updated":"2022-02-09T18:43:26.081Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<figure><img alt=\"Illustration of the Flutter and Dart mascot, Dash, looking across a cityscape, representing the future for our products.\" src=\"https://cdn-images-1.medium.com/max/1024/1*_CcfyhAWUIV8pWwuvdoSPA.png\" /></figure><h4>Areas of focus for Flutter as we build growth and momentum</h4><p>Each year we, like other large teams at Google, go through a planning process to set our goals and areas of focus for the upcoming year. Normally, product teams closely guard these documents, since they may contain commercially-sensitive information or relate to areas of competitive advantage. However, as an open source project, we believe that transparency is a virtue: it allows greater trust in our future and direction, and allows others to make plans with better clarity as to how their investments may connect to ours.</p><p>As such, today we’re sharing our <a href=\"https://docs.google.com/document/d/e/2PACX-1vTI9X2XHN_IY8wDO4epQSD1CkRT8WDxf2CEExp5Ef4Id206UOMopkYqU73FvAnnYG6NAecNSDo9TaEO/pub\">annual strategy doc</a> with the community at large for the first time. In this document, we express our mission, share some guiding principles, and describe the major investments that we plan to undertake in the coming year. By necessity, there are some minor redactions (such as commercially-sensitive data or references to unannounced products), but we believe this provides a good overview of our plans. This strategy document should be read alongside the <a href=\"https://github.com/flutter/flutter/wiki/Roadmap\">engineering roadmap</a> on our wiki, which adds further specifics around features that we’re working on.</p><p>An important note on the use of the word ‘we’ in the above sentences, which may be read as “those who Google pay to work on Flutter”. Flutter is the work of many contributors inside and outside Google. While Google is the largest sponsor as measured by number of paid contributors, it is not the only contributor. In the last year, thousands of individuals have contributed their intellectual property and labor to the project, ranging from individuals to large corporations such as Canonical, Microsoft, ByteDance, and Alibaba.</p><p>Therefore, while the strategy document describes the investments that Google is making and shares the rationale behind those decisions, it isn’t intended to put boundaries on how others contribute to Flutter. We hope our work is well-aligned with the needs of the community at large, but we anticipate one benefit of sharing this document is that others will see opportunities for their own investments, either by building on work that Google plans to contribute, or by filling areas that we are not prioritizing.</p><p>Some examples of this include the work that Sony is doing on <a href=\"https://github.com/sony/flutter-embedded-linux\">embedded Linux</a>; the investments that Toyota and other automotive companies are making on using Flutter in <a href=\"https://www.youtube.com/watch?v=IUVnmdYBDxk\">Automotive Grade Linux</a>, and work from Samsung and others to port <a href=\"https://github.com/flutter-tizen/flutter-tizen\">Flutter to Tizen</a>. While none of this work is listed in our strategy document, it is part of the Flutter project, just like any code that Google contributes. And of course, there are tens of thousands of packages that build on the framework, the vast majority of which come from developers outside of Google.</p><p>One final disclaimer: our strategy will likely evolve over time as we continue to engage with the community, and as business priorities and strategies change. As a result, nothing here should be seen as representing a binding commitment, even though we plan to follow this as our guide.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8c5eaf7c4275\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-in-2022-strategy-and-roadmap-8c5eaf7c4275\">Flutter in 2022: strategy and roadmap</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-03-09T17:03:32.000Z":{"title":"Only a few days left to submit for the Flutter Puzzle Hack + announcing the judges","link":"https://medium.com/flutter/only-a-few-days-left-to-submit-for-the-flutter-puzzle-hack-announcing-the-judges-3b9f4817ae55?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/3b9f4817ae55","category":["games","web-development","announcements"],"dc:creator":"Kelvin Boateng","pubDate":"Wed, 09 Mar 2022 17:03:32 GMT","atom:updated":"2022-03-10T19:04:09.477Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Get your project in before the submission deadline!</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/0*LgF82TK9xt1aI14Y\" /></figure><p>There are only a few days left to submit to the <a href=\"https://flutterhack.devpost.com/\">Flutter Puzzle Hack</a>. We’re excited by the puzzles we’ve seen so far, and can’t wait to see even more! Don’t forget that prizes include 4 fully loaded MacBooks, tons of Flutter swag, and cash to over 40 winners, so be sure to get your submission in for a chance at some of these awesome prizes.</p><h3><strong>Welcome to the Flutter community</strong></h3><p>With the final submission date approaching so quickly, we wanted to take a moment to welcome many new developers to the Flutter <a href=\"https://flutter.dev/community\">community</a>. We can’t wait to see what you build, starting, of course, with your Flutter Puzzle Hack submission!</p><h3><strong>Announcing our judges</strong></h3><p>In honor of the final week of the Flutter Puzzle Hack, we’re excited to announce our judges, including many Flutter veterans who helped to build the framework since its inception. A puzzle hack submission is an amazing opportunity to have your work reviewed by some of the world’s foremost Flutter experts.</p><ul><li>Justin McCandless, Software Engineer, Flutter Framework</li><li>Casey Hillers, Software Engineer, Flutter Engineering</li><li>Christian Padilla, Software Engineer, Flutter Plugins</li><li>Devon Carew, Software Engineer, Flutter</li><li>Greg Spencer, Software Engineer, Flutter Framework / Desktop</li><li>Michael Goderbauer, Lead Software Engineer, Flutter Framework</li><li>Craig Labenz, Developer Relations Engineer, Flutter</li><li>Yusuf Mohsinally, Software Engineer, Flutter Engineering</li><li>Laura Willis , Product Marketing Lead, Flutter &amp; Firebase</li><li>Jay Chang, Product Marketing Manager, Flutter</li><li>Kelvin Boateng, Product Marketing Manager, Flutter</li><li>Huan Lin, Software Engineer, Flutter on iOS</li><li>Eric Windmill, Developer Relations Engineer, Firebase and Flutter</li></ul><h3><strong>Tell us when you submit</strong></h3><p>Whether you’re still working out your idea, or you’ve already submitted your app, tag us on Twitter with the hashtag <a href=\"https://twitter.com/hashtag/flutterpuzzlehack\">#FlutterPuzzleHack</a> where we’ll be sure to share your work with the Flutter community.</p><p>Check out what Twitter user <a href=\"https://twitter.com/roaakdm/status/1493614287515967492\">Roaa</a> is working on, for <a href=\"https://twitter.com/timsneath/status/1493626374610845696?s=20&amp;t=q7LNbDwEVprqvF9MdRozKg\">example</a>:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*A_NEHVtXjdO7Cu0T\" /></figure><h3><strong>There’s still time!</strong></h3><p>If you’re still thinking about starting a submission, it’s not too late. Check out the starter <a href=\"https://flutter.github.io/samples/slide_puzzle.html\">sample app</a>, the <a href=\"https://medium.com/flutter/how-to-build-your-own-flutter-slide-puzzle-93721ac5fad2\">blog post</a> explaining how the app works, and then head over to <a href=\"https://flutterhack.devpost.com/\">flutterhack.devpost.com</a> to check out the rules for the challenge.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3b9f4817ae55\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/only-a-few-days-left-to-submit-for-the-flutter-puzzle-hack-announcing-the-judges-3b9f4817ae55\">Only a few days left to submit for the Flutter Puzzle Hack + announcing the judges</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-02-22T21:40:08.000Z":{"title":"Q4 2021 user survey results: about null safety, ecosystem, text editing, and mobile development","link":"https://medium.com/flutter/q4-2021-user-survey-results-about-null-safety-ecosystem-text-editing-and-mobile-development-5d33341954e9?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/5d33341954e9","category":["developer-experience","flutter","surveys"],"dc:creator":"JaYoung Lee","pubDate":"Tue, 22 Feb 2022 21:40:08 GMT","atom:updated":"2022-03-01T15:54:52.156Z","content:encoded":"<p>Last November, the Flutter UX team ran the 15th quarterly user survey. The survey was announced via Flutter’s IDE plugins, YouTube, Twitter, and the website. Over 2 weeks, we were able to collect 10,105 responses, an all-time high, and we learned that Flutter developers continue to be satisfied with Flutter. The proportion of people positively satisfied with Flutter was 92%, which is stable since Q4 2019.</p><p>Through the survey, the Flutter team also learns what’s going well and what’s not going well with Flutter in more detail, and then sets priorities for future tasks. In this survey, we asked about the four following topics to get an in-depth understanding of these areas.</p><ul><li>Null safety</li><li>Ecosystem</li><li>Text editing</li><li>Mobile development</li></ul><p>To keep the survey short, we asked different questions to different cohorts, so you might not have seen all four topics. Regardless, we received meaningful, statistically significant feedback around these topics from everyone who participated. As an open source project, we try to be as transparent as possible about what data we collect, and so we’re here to share the results and our learnings.</p><h3>Dart null safety</h3><p>The stable version of Dart null safety was <a href=\"https://medium.com/dartlang/announcing-dart-2-12-499a6e689c87\">released</a> in March 2021. It was one of the largest additions to the language, and we provided a migration tool and a <a href=\"https://dart.dev/null-safety/migration-guide\">guide</a> to help developers migrate existing code to null safety. We wanted to know how the migration experience has been for you, so that we can do better if we attempt to make similar language changes in the future.</p><p>Overall, 89.5% of those who have used Dart null safety in the past 6 months were satisfied with the feature. Those who had previous experience with null safety (such as Kotlin) were more likely to be satisfied with the feature (+3 percentage points). The biggest benefit of Dart null safety was “reduced bugs in code” (79.4%), followed by “easier-to-understand code” (49.7%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rgxmarvcoWZXajfo\" /><figcaption><em>79% of the users had experience with Dart null safety, and 90% were satisfied with it</em></figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*onZxbszDrpFkZpHa\" /><figcaption><em>Most users (79%) said that Dart null safety reduced bugs in their code</em></figcaption></figure><p>Interestingly, 39.9% said that all their code has used null safety from the start. Given that the survey was fielded only after 8 months since the introduction of stable null safety, the survey showed how quickly Flutter and Dart has grown, welcoming new developers. This result also showed that 59% of those who migrated their code used the migration tool in one way or another (22.0% out of 22.0%+19.6%+6.7%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rnrluPpgWlvPFw84\" /><figcaption><em>40% of the users used null safety from the start, and 59% migrated their code to null safety</em></figcaption></figure><p>Overall, the survey results supported continuing to evolve the Dart language to make it better. We will continue to make improvements and take your experience into consideration along the way. Please keep the feedback coming!</p><h3>Ecosystem</h3><p>As Flutter continues to mature, its package and plugin ecosystem has improved. This improvement includes contributions from the community, as well as programs and promotions like <a href=\"https://docs.flutter.dev/development/packages-and-plugins/favorites\">Flutter Favorites</a>, <a href=\"https://plus.fluttercommunity.dev/\">Plus plugins</a>, and <a href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU1quF6ny8oFHJ2gBdrYN_AK\">Package of the Week</a>. As shown below, satisfaction with the ecosystem improved by 7 percentage points over the last 2 years.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9wOwZ1d4K6Yr3evt\" /><figcaption><em>Satisfaction with Flutter’s package and plugin ecosystem has increased by 7.5 percent point over the last 2 years</em></figcaption></figure><p>Nevertheless, we continue to hear from you that there still are many packages and plugins that need improvement. To better understand your needs, we asked “Did any Flutter or Dart package decrease your app development productivity in the last 3 months?” When 28.7% of 3,698 answered “Yes” to this question, we presented 42 different packages types, and asked which of the packages decreased productivity. The top 15 packages are below.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tySCnxRM1tJCRUFQ\" /><figcaption><em>While various packages contributed to decreased productivity of developers. The top choice “Firebase” got votes from 22%.</em></figcaption></figure><p>Firebase is widely used by Flutter users, which contributed to the relatively large number (22.1%). We’re continuing to invest into Firebase plugins (“<a href=\"https://firebase.flutter.dev/\">FlutterFire</a>” plugins). For example, last December, we <a href=\"https://medium.com/flutter/whats-new-in-flutter-2-8-d085b763d181\">released stable versions of the FlutterFire plugins</a> and standardized them. It means that all the FlutterFire plugins now use the same underlying version of the SDKs, and developers won’t run into version incompatibility issues when they mix and match the plugins. We plan to monitor this and we’re hoping to see Firebase become a more productive service for developers when we next field this question.</p><p>What’s also notable in the graph above was that 42 common items could not cover all the needs, and 19.2% chose to specify “Other” types of packages and plugins that decrease their productivity. It highlights that there are so many diverse needs that we can only solve as a community.</p><p>For these packages, the biggest challenge was with feature completeness — 23.1% said that packages have incomplete features, so they have to use multiple packages for similar functions or cannot fulfill their needs.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OlvN2DIgkndtxdUc\" /><figcaption><em>Feature completeness of packages was the biggest contributor to the developers’ decreased productivity</em></figcaption></figure><p>The Flutter team has been working to improve the development process for our first-party plugins to make them easier to maintain and improve. For example, webview_flutter 3.0 was released recently to address many top feature requests, and we are continuing to invest in addressing the top-voted issues in that and other plugins.</p><p>Even as we ourselves continue to invest in <a href=\"https://pub.dev/publishers/labs.dart.dev/packages\">the</a> <a href=\"https://pub.dev/publishers/flutter.dev/packages\">hundreds</a> <a href=\"https://pub.dev/publishers/dart.dev/packages\">of</a> <a href=\"https://pub.dev/publishers/tools.dart.dev/packages\">packages</a> that the Flutter and Dart teams own, this is an area where the Flutter community can also play a key role. We all benefit when we all invest in package development!</p><h3>Text editing</h3><p>Flutter provides built-in widgets like TextField, TextFormField (and their Cupertino counterparts), and various packages to allow you to add text editing functionality to your apps. This can become complicated quickly, when features like live filtering and formatting (such as number-only phone number or price input fields), or rich text editors (such as code or math equation editors) are required.</p><p>From this survey, we learned that about 86.7% of developers with intermediate or more experience tried adding text editing to their apps, and the satisfaction with the text editing functionality drop from 82.3% (single-line) and 82.2% (live filtering and formatting) to 69.6% (multi-line) and 66.6% (rich text editor).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*J9YkkSqIT3dP1CzI\" /><figcaption><em>Experts tended to have more experience adding text editing functionality to their apps</em></figcaption></figure><p>Based on this feedback, the core framework team is planning to build solid basic rich text editing features and APIs to support packages. Also, the team is planning to better advertise existing features and build more examples. In the meantime, you can explore the <a href=\"https://docs.google.com/document/d/1PXNd_LwJudiUTnCM2AXRxbd98_p4BlFf6qFhEhv3wvs/edit\">design doc</a> on text editing deltas to find useful documentation, as well as <a href=\"https://github.com/flutter/flutter/issues/87972\">this Github issue</a>, to stay up to date on progress. This effort is already well underway with a few low-level APIs now in the master channel.</p><p>We’ve also heard about challenges related to supporting different languages. For example, we heard loud and clear that RTL and bi-di text, such as Arabic, does not work acceptably well. Although there’s no written roadmap, we’re planning to make a big push to better support RTL and bi-di text editing soon.</p><h3>Mobile development</h3><p>Because mobile platforms (iOS and Android) were the first ones to be officially supported by Flutter, the majority had experience working on iOS or Android apps in the last 6 months. The team wanted to better understand platform-specific issues, such as challenges related to debugging and releasing, so that the team can better prioritize their engineering effort.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/812/0*TERDonM4zc_kafRm\" /><figcaption><em>In the last 6 months, 72% and 91% had developed for iOS and Android, respectively</em></figcaption></figure><p>When it comes to debugging, in both platforms, users had to deal with platform specific issues while adding or upgrading packages or plugins most often. While debugging Android issues was less common in many situations, it was notable that debugging to optimize the performance was more common on Android than iOS.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*AiW2zfqRgJcWNqKn\" /><figcaption><em>Debugging platform issues happened more often while adding or upgrading packages or plugins</em></figcaption></figure><p>We also learned that dealing with Xcode (iOS) and Gradle (Android) was the most common issue while releasing an app, which matched our hunch. We already made the Flutter CLI show user-friendly error messages for common Gradle errors, which was released in the latest update, <a href=\"https://medium.com/flutter/whats-new-in-flutter-2-10-5aafb0314b12\">Flutter 2.10</a>.</p><p>We will continue to improve the way these build system errors are presented, so that it’s easier to understand and more actionable. For iOS, we will add features to flutter build ipa in an upcoming release (<a href=\"https://github.com/flutter/flutter/issues/97179\">related issue here</a>) that makes release easier. More Xcode settings will be automatically populated in new projects as well (<a href=\"https://github.com/flutter/flutter/issues/90020\">issue</a>). For Android, we are working on an auto-migration tool, which will be handy to find small discrepancies in Gradle config files.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3MXILeNbFbIFagLu\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*qtLcSyZO68tuY6Gk\" /><figcaption><em>Over 36% of developers dealt with Xcode (iOS) and Gradle (Android) issues while releasing their apps</em></figcaption></figure><h3>What’s next?</h3><p>Developers are increasingly using Flutter as part of their main job. The Flutter team will continue to listen and shape our technology using your feedback. If you have any urgent issues, please file an issue on <a href=\"https://github.com/flutter/flutter/issues\">GitHub</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Zw_zyVq5CfP7Y09o\" /><figcaption><em>The proportion of devs using Flutter for main job has been increasing</em></figcaption></figure><p>The Flutter quarterly user survey will continue seeking answers to important questions. You can also post your research ideas on <a href=\"https://github.com/flutter/uxr/discussions/categories/research-ideas\">GitHub</a>. Please keep an eye out for the next survey. Also, consider participating in other research by <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe0i4De809KXVCdljGKrjMj3lxhuzbuFKCtY5PEQPCYtGxFMg/viewform\">signing up for upcoming UX studies</a>.</p><p>Thanks again to everyone who provided feedback!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5d33341954e9\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/q4-2021-user-survey-results-about-null-safety-ecosystem-text-editing-and-mobile-development-5d33341954e9\">Q4 2021 user survey results: about null safety, ecosystem, text editing, and mobile development</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-05-11T19:49:05.000Z":{"title":"Introducing Flutter 3","link":"https://medium.com/flutter/introducing-flutter-3-5eb69151622f?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/5eb69151622f","category":["flutter","linux","programming","announcements","apple"],"dc:creator":"Tim Sneath","pubDate":"Wed, 11 May 2022 19:49:05 GMT","atom:updated":"2022-05-11T20:13:15.605Z","content:encoded":"<h4>The culmination of our journey to multiplatform UI development on phone, desktop, and web</h4><p><em>We’re delighted to announce the launch of Flutter 3 as part of the Google I/O keynote. Flutter 3 completes our roadmap from a mobile-centric to a multiplatform framework, with the availability of macOS and Linux desktop app support, along with improvements to Firebase integration, new productivity and performance features, and support for Apple Silicon.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZQ9Xa7CINFVMA95w\" /></figure><h3>The journey to Flutter 3</h3><p>We started Flutter as an attempt to revolutionize app development: combining the iterative development model of the web with hardware-accelerated graphics rendering and pixel-level control that were previously the preserve of games. Over the last four years since Flutter 1.0 beta, we’ve gradually built on these foundations, adding new framework capabilities and new widgets, deeper integration with the underlying platforms, a rich library of packages and many performance and tooling improvements.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*pL2z2iYzWPrMu5hw\" /></figure><p>As the product has matured, more of you have started to build apps with it. Today there are over 500,000 apps built with Flutter. Analytics from research firms like <a href=\"https://www.data.ai/en/\">data.ai</a>, along with public testimonials, show Flutter is used by a <a href=\"https://flutter.dev/showcase\">broad list of customers</a> in many segments: from social apps like <a href=\"https://play.google.com/store/apps/details?id=com.tencent.mm&amp;hl=en_US&amp;gl=US\">WeChat</a> to finance and banking apps like <a href=\"https://apps.apple.com/us/app/betterment-investing-saving/id393156562\">Betterment</a> and <a href=\"https://play.google.com/store/apps/details?id=com.nu.production&amp;hl=en_US&amp;gl=US\">Nubank</a>; from commerce apps like <a href=\"https://play.google.com/store/apps/details?id=com.zzkko&amp;hl=en_US&amp;gl=US\">SHEIN</a> and <a href=\"https://apps.apple.com/us/app/trip-com-hotels-flights-trains/id681752345\">trip.com</a> to lifestyle apps like <a href=\"https://fastic.com/\">Fastic</a> and <a href=\"https://auspreneur.com.au/tabcorp-adopts-googles-flutter-platform/\">Tabcorp</a>; from companion apps like <a href=\"https://www.press.bmwgroup.com/global/article/detail/T0328610EN/the-my-bmw-app:-new-features-and-tech-insights-for-march-2021?language=en\">My BMW</a> to public institutions such as the <a href=\"https://apps.apple.com/app/id1506827551\">Brazil government</a>.</p><blockquote>Today there are over 500,000 apps built with Flutter.</blockquote><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F8RmsstcNE1Y%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D8RmsstcNE1Y&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F8RmsstcNE1Y%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2abf9b2ad16ba8d94fa7f54c5768ebdc/href\">https://medium.com/media/2abf9b2ad16ba8d94fa7f54c5768ebdc/href</a></iframe><p>Developers tell us that Flutter helps build beautiful apps more quickly for more platforms. In our most recent user study:</p><ul><li>91% of developers agreed that Flutter reduced the time it took to build and publish an app.</li><li>85% of developers agreed that Flutter made their app more beautiful than before.</li><li>85% agreed that it enabled them to publish their app for more platforms than before.</li></ul><p>In a <a href=\"https://tech-blog.sonos.com/posts/renovating-setup-with-flutter/\">recent blog post by Sonos</a> discussing their revamped setup experience, they emphasized the second of these:</p><blockquote>“It is not an exaggeration to say that [Flutter] has unlocked a degree of “<em>premium</em>” unlike anything our team had delivered before. Most important to our designers, the ease with which new UIs can be built means that our team spends less time saying “no” to specs and more time iterating on them. If this sounds worth it, we’d recommend giving Flutter a try — we’re glad we did.”</blockquote><h3>Introducing Flutter 3</h3><p>Today, we’re introducing Flutter 3<strong>,</strong> which is the culmination of our journey to fill out the platforms supported by Flutter. With Flutter 3, you can build beautiful experiences for six platforms from a single codebase, giving developers unparalleled productivity and enabling startups to bring new ideas to the full addressable market from day one.</p><p>In previous releases, we supplemented iOS and Android with <a href=\"https://medium.com/flutter/flutter-web-support-hits-the-stable-milestone-d6b84e83b425\">web</a> and <a href=\"https://medium.com/flutter/announcing-flutter-for-windows-6979d0d01fed\">Windows support</a>, and now <strong>Flutter 3 adds stable support for macOS and Linux apps</strong>. Adding platform support requires more than rendering pixels: it includes new input and interaction models, compilation and build support, accessibility and internationalization, and platform-specific integration. Our goal is to give you the flexibility to take full advantage of the underlying operating system while sharing as much UI and logic as you choose.</p><p>On macOS, we’ve invested in supporting both Intel and Apple Silicon, with <a href=\"https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary\">Universal Binary</a> support that allows apps to package executables that run natively on both architectures. On Linux, Canonical and Google have collaborated to offer a highly-integrated, best-of-breed option for development.</p><p>A great example of how Flutter enables beautiful desktop experiences is <a href=\"https://superlist.com/\">Superlist</a>, which launches in beta today. Superlist provides supercharged collaboration, through a new app that combines lists, tasks, and freeform content into a fresh take on to-do lists and personal planning. The Superlist team selected Flutter for its ability to deliver a fast, highly-branded desktop experience, and we think their progress to date demonstrates why it has proven to be a great choice.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FYRuQj7mlH2I%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYRuQj7mlH2I&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FYRuQj7mlH2I%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e55485a40119915c1ee67f6e9bd45938/href\">https://medium.com/media/e55485a40119915c1ee67f6e9bd45938/href</a></iframe><p>Flutter 3 also improves on many of the fundamentals, with improved performance, Material You support, and productivity updates.</p><p>In addition to the work mentioned above, with this version, Flutter is fully native on <a href=\"https://support.apple.com/en-us/HT211814\">Apple silicon</a> for <em>development</em>. While Flutter has been compatible with M1-powered Apple devices since their release, Flutter now takes full advantage of <a href=\"https://medium.com/dartlang/announcing-dart-2-14-b48b9bb2fb67\">Dart’s support for Apple silicon</a>, enabling much faster compilation on M1-powered devices and support for <a href=\"https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary\">universal binaries</a><strong> </strong>for macOS apps.</p><p>Our work for <a href=\"https://m3.material.io/\">Material Design 3</a> is largely complete in this release, allowing developers to take advantage of an adaptable, cross-platform design system that offers dynamic color schemes and updated visual components:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LM_w2DE9aM-_9J0Z\" /></figure><p>Our detailed technical blog post expands on these and the many other new features in Flutter 3.</p><p>Flutter is powered by Dart, a high-productivity, portable language for multiplatform development. Our work on Dart in this cycle includes new language features that reduce boilerplate and aid readability, experimental RISC-V support, an upgraded linter, and new documentation. For further details on all the new improvements in Dart 2.17, check out the <a href=\"https://medium.com/dartlang\">dedicated blog</a>.</p><h3>Firebase and Flutter</h3><p>Of course, there’s more to building an app than a UI framework. App publishers need a comprehensive suite of tools to help you build, release, and operate your apps, including services like authentication, data storage, cloud functions, and device testing. There are a variety of services that support Flutter, including <a href=\"https://docs.sentry.io/platforms/flutter/\">Sentry</a>, <a href=\"https://appwrite.io/docs/getting-started-for-flutter\">AppWrite</a>, and <a href=\"https://docs.amplify.aws/start/q/integration/flutter/\">AWS Amplify</a>.</p><p>Google’s offering for app services is Firebase, and <a href=\"https://www.slashdata.co/developer-program-benchmarking/?\">developer benchmarking studies by SlashData</a> show that 62% of Flutter developers use Firebase in their apps. So over the last few releases, we’ve been working with Firebase to expand and better integrate Flutter as a first-class integration. That has included bringing the Firebase plugins for Flutter to 1.0, adding better documentation and tooling, and new widgets like <a href=\"https://pub.dev/packages/flutterfire_ui\">FlutterFire UI</a> that provide developers with reusable UI for auth and profile screens.</p><p>Today we’re announcing the graduation of Flutter/Firebase integration to a fully-supported core part of the Firebase offering. We’re moving the source code and documentation into the main Firebase repo and site, and you can count on us evolving Firebase support for Flutter in lockstep with Android and iOS.</p><p>In addition, we’ve made major improvements to support Flutter apps using Crashlytics, Firebase’s popular real-time crash reporting service. With the updates to the <a href=\"https://firebase.google.com/docs/crashlytics\">Flutter Crashlytics plugin</a>, you can track fatal errors in real time, giving you the same set of features that are available to other iOS and Android developers. This includes important alerting and metrics like “crash-free users” that help you stay on top of your app’s stability. The Crashlytics analysis pipeline has been upgraded to improve clustering of Flutter crashes, making it faster to triage, prioritize, and fix issues. And lastly, we streamlined the plugin setup process so that it only requires a couple of steps to get up and running with Crashlytics, right from your Dart code.</p><h3>Flutter Casual Games Toolkit</h3><p>For most developers, Flutter is an app framework. But there’s also a growing community around casual game development, taking advantage of the hardware-accelerated graphics support provided by Flutter along with open source game engines like <a href=\"https://flame-engine.org/\">Flame</a>. We want to make it easier for casual game developers to get started, so at I/O today we’re announcing the <a href=\"https://flutter.dev/games\">Casual Games Toolkit</a>, which provides a starter kit of templates and best practices along with credits for ads and cloud services.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wK4YI3N-Hh2vtDQ2\" /></figure><p>Although Flutter isn’t designed for high-intensity 3D action gaming, even some of those games have turned to Flutter for non-game UI, including popular games like <a href=\"https://play.google.com/store/apps/details?id=com.tencent.ig\">PUBG Mobile</a> that have hundreds of millions of users. And for I/O we thought we’d see how far we could push our technology, so we’ve created a fun pinball game that is powered by Firebase and Flutter’s web support. I/O Pinball provides a custom table designed around four of Google’s favorite mascots: Flutter’s Dash, Firebase’s Sparky, the Android robot, and the Chrome dinosaur, and lets you compete with others for the high score. We think it’s a fun way to showcase Flutter’s versatility.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*87xQ1AYdEF2YrmQ1\" /></figure><h3>Sponsored by Google, powered by community</h3><p>One thing we love about Flutter is that it’s not just a Google product — it’s an “everybody” product. Open source means that we can all participate and have a stake in its success, whether by contributing new code or documentation, creating packages that give the core framework new superpowers, writing books and training courses that teach others, or helping organize events and user groups.</p><p>To showcase the community at its best, we recently sponsored a Puzzle Hack challenge in collaboration with DevPost, offering developers the chance to showcase their skills by reimagining the classic sliding puzzle with Flutter. This proved a fantastic demonstration of how web, desktop, and mobile come together: now we can all play the games online or via the stores.</p><p>We put together this video to showcase some of our favorite submissions and prize winners; we think you’ll enjoy it:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fl6hw4o6_Wcs%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dl6hw4o6_Wcs&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fl6hw4o6_Wcs%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/14a9a66c075fa562dfcae0239f446826/href\">https://medium.com/media/14a9a66c075fa562dfcae0239f446826/href</a></iframe><p>Thank you for your support of Flutter, and welcome to Flutter 3!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mt5JTb-02GrFFtCnW20Tqg.png\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5eb69151622f\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/introducing-flutter-3-5eb69151622f\">Introducing Flutter 3</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-05-11T19:48:56.000Z":{"title":"What’s new in Flutter 3","link":"https://medium.com/flutter/whats-new-in-flutter-3-8c74a5bc32d0?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/8c74a5bc32d0","category":["announcements","linux","flutter","programming","apple"],"dc:creator":"Kevin Jamaul Chisholm","pubDate":"Wed, 11 May 2022 19:48:56 GMT","atom:updated":"2022-05-12T14:48:13.003Z","content:encoded":"<h4>Deep dive into our latest release, including macOS and Linux stable, performance improvements, and more!</h4><p>It’s time again for a Flutter stable release — and we are incredibly proud to announce<strong> Flutter 3</strong>! Only three months ago, we announced Flutter support for Windows. Today, we are excited to announce that Flutter is now stable for macOS and Linux, in addition to Windows!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*K1Ru7PVkH74N56hgjBTjjQ.png\" /></figure><p>Thanks to the hard work of our Flutter contributors, we’ve merged 5248 pull requests!</p><p>We have several exciting things to announce as part of this release, including the update on Flutter’s support for macOS and Linux, significant performance improvements, mobile and web updates — and much more! In addition, we have news about reduction in support for older versions of Windows, and a short list of breaking changes. So, let’s get down to business!</p><h3>Ready for production on all desktop platforms</h3><p>Linux and macOS have reached stable and include the following features:</p><h4>Cascading menus and support for the macOS system menu bar</h4><p>You can now create platform-rendered menu bars on macOS using the PlatformMenuBar widget, which supports insertion of platform-only menus, and control over what appears in the macOS application menus.</p><figure><img alt=\"A user clicks a menu which shows submenus on Mac\" src=\"https://cdn-images-1.medium.com/max/1024/1*kS32jfapJAvSyspT3aOH5A.gif\" /><figcaption>Cascading menus demo</figcaption></figure><h4>Full support for international text input on all desktop platforms</h4><p>International text input, including for languages that make use of text <a href=\"https://en.wikipedia.org/wiki/Input_method\">input method editors</a> (IMEs) such as Chinese, Japanese, and Korean is fully-supported on all three desktop platforms, including third-party input methods such as Sogou and Google Japanese Input.</p><h4>Accessibility on all desktop platforms</h4><p>Flutter for Windows, macOS, and Linux support accessibility services such as screen-readers, accessible navigation, and inverted colors.</p><h4>Universal binaries by default on macOS</h4><p>As of Flutter 3, Flutter macOS desktop apps are built as universal binaries, with native support for both existing Intel-based Macs and Apple’s latest Apple Silicon devices.</p><h4>Deprecating Windows 7/8 for development</h4><p>With this release, we’re raising the recommended Windows version for development to Windows 10. While we aren’t blocking development on older versions (Windows 7, Windows 8, Windows 8.1), these versions are <a href=\"https://docs.microsoft.com/en-us/lifecycle/faq/windows\">no longer supported by Microsoft</a> and we provide limited testing on these releases. While we will continue to offer ‘best effort’ support for older versions, we encourage you to upgrade.</p><blockquote><strong>Note</strong>: We continue to offer support for Flutter apps <em>running </em>on Windows 7 and Windows 8; this change only affects the recommended development environment.</blockquote><h3>Mobile updates</h3><p>Our updates to mobile platforms includes the following:</p><h4>Foldable phone support</h4><p>The Flutter 3 release supports foldable mobile devices. In a collaboration spearheaded by Microsoft, new features and widgets allow you to create dynamic and delightful experiences on foldable devices.</p><p>As part of this work, <a href=\"https://master-api.flutter.dev/flutter/widgets/MediaQuery-class.html\">MediaQuery</a> now contains a list of <a href=\"https://master-api.flutter.dev/flutter/dart-ui/DisplayFeature-class.html\">DisplayFeatures</a>, describing the bounds and states of device elements like hinges, folds, and cutouts. Additionally, the <a href=\"https://master-api.flutter.dev/flutter/widgets/DisplayFeatureSubScreen-class.html\">DisplayFeatureSubScreen</a> widget now positions its child widget without overlapping the bounds of DisplayFeatures, and has already been integrated with the framework’s default dialogs and pop-ups, making Flutter aware and responsive to these elements <strong>out of the box</strong>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*z8pzEtJOPFv-xzw2\" /></figure><p>Many thanks goes to the Microsoft team, and especially to <a href=\"https://github.com/andreidiaconu\">@andreidiaconu</a>, for their contributions!</p><p>Try <a href=\"https://docs.microsoft.com/en-us/dual-screen/flutter/samples\">the Surface Duo emulator samples</a>, including one with a special fork of the Flutter Gallery, to see Flutter’s dual displays in action.</p><h4>iOS variable refresh rate support</h4><p>Flutter now supports variable refresh rate on iOS devices with ProMotion displays, including iPhone 13 Pro and iPad Pro. On these devices, Flutter apps can render at refresh rates reaching 120 hz, which were previously limited to 60 hz. This results in a smoother experience during fast animations such as scrolling. See <a href=\"http://flutter.dev/go/variable-refresh-rate\">flutter.dev/go/variable-refresh-rate</a> for more details.</p><h4>Simplified iOS releases</h4><p>We’ve added <a href=\"https://github.com/flutter/flutter/pull/97672\">new options to the flutter build ipa command</a> to simplify releasing your iOS app. When you’re ready to distribute to TestFlight or the App Store, run flutter build ipa to build an Xcode archive (.xcarchive file) and an app bundle (.ipa file). You can optionally add —-export-method ad-hoc, —-export-method development, or —-export-method enterprise. Once the app bundle is built, upload it to Apple through the <a href=\"https://apps.apple.com/us/app/transporter/id1450874784\">Apple Transport macOS app</a> or on the command line using xcrun altool (run man altool for App Store Connect API key authentication instructions). After uploading, your app is available for release to <a href=\"https://docs.flutter.dev/deployment/ios#release-your-app-to-the-app-store\">TestFlight or the App Store</a>. After setting up your initial <a href=\"https://docs.flutter.dev/deployment/ios#review-xcode-project-settings\">Xcode project settings</a>, such as display name and app icon, you no longer need to open Xcode to release your app.</p><h4>Gradle version update</h4><p>If you create a new project with the Flutter tool, you might notice that the generated files now use the latest versions of the Gradle and Android Gradle plugins. For existing projects, you need to manually bump the versions to 7.4 for Gradle, and 7.1.2 for the Android Gradle plugin.</p><h4>Sunsetting 32-bit iOS/iOS 9/iOS 10</h4><p>As we announced in Feb 2022 with the 2.10 stable release, Flutter’s support for 32-bit iOS devices and iOS versions 9 and 10 is coming to an end. This change affects the iPhone 4S, iPhone 5, iPhone 5C, and the 2nd, 3d, and 4th gen iPad devices. Flutter 3 is the last stable release that supports these iOS versions and devices.</p><p>To learn more about this change, take a look at <a href=\"http://flutter.dev/go/rfc-32-bit-ios-unsupported\">RFC: End of support for 32-bit iOS devices</a>.</p><h3>Web updates</h3><p>Our updates for web apps include the following:</p><h4>Image decoding</h4><p>Flutter web now automatically detects and uses the ImageDecoder API in browsers that support it. As of today, most Chromium-based browsers (Chrome, Edge, Opera, Samsung Browser, and more) have added this API.</p><p>The new API decodes images asynchronously off the main thread using the browser’s built-in image codecs. This speeds up image decoding by 2x, and it never blocks the main thread, removing all jank that was previously caused by images.</p><h4>Web app lifecycles</h4><p>The new lifecycle API for Flutter web apps gives you the flexibility to control the bootstrap process of your Flutter app from the hosting HTML page, and helps Lighthouse analyze the performance of your app. This applies to many use-cases, including the following frequently requested scenarios:</p><ul><li>A splash screen.</li><li>A loading indicator.</li><li>A plain HTML interactive landing page displayed before the Flutter app.</li></ul><p>For more information, check out <a href=\"https://docs.flutter.dev/development/platform-integration/web/initialization\">Customizing web app initialization</a> on docs.flutter.dev.</p><h3>Tooling updates</h3><p>Our updates to Flutter and Dart tooling include:</p><h4>Updated lint package</h4><p>Version 2.0 of the lint packages have been released:</p><ul><li>Flutter: <a href=\"https://pub.dev/packages/flutter_lints/versions/2.0.0\">https://pub.dev/packages/flutter_lints/versions/2.0.0</a></li><li>Dart: <a href=\"https://pub.dev/packages/lints/versions/2.0.0\">https://pub.dev/packages/lints/versions/2.0.0</a></li></ul><p>Apps generated in Flutter 3 with flutter create automatically enable the v2.0 sets of lints. Existing apps, packages, and plugins are encouraged to migrate to v2.0 to follow the latest and greatest best practices in the Flutter world, by running flutter pub upgrade --major-versions flutter_lints.</p><p>Most of the newly added lint warnings in v2 come with automated fixes. So, after upgrading to the latest package version in your app’s pubspec.yaml file, you can run dart fix —-apply over your code base to fix most lint warnings automatically (some warnings still require some manual work). Apps, packages, or plugins that aren’t using package:flutter_lints yet can migrate by following the <a href=\"https://docs.flutter.dev/release/breaking-changes/flutter-lints-package#migration-guide\">migration guide</a>.</p><h4>Performance improvements</h4><p>Thanks to open source contributor <a href=\"https://github.com/knopp\">knopp</a>, partial repaint has been <a href=\"https://github.com/flutter/engine/pull/29591\">enabled on Android</a> devices that support it. In our local testing this change cut average, 90th percentile, and 99th percentile frame rasterization times on the backdrop_filter_perf benchmark on a Pixel 4 XL device by 5x. Partial repaint when there is a single rectangular dirty region is now enabled on both iOS and newer Android devices.</p><p>We have <a href=\"https://github.com/flutter/engine/pull/30957\">further improved</a> the performance of opacity animations in simple cases. In particular, when an Opacity widget contains only a single rendering primitive, the saveLayer method that is usually invoked by Opacity is omitted. In a benchmark constructed to measure the benefits of this optimization, rasterization time for this case improved by <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1643063115&amp;end=1644004520&amp;keys=X32827d8819e8271e025f50e77bf2bec0&amp;requestType=0&amp;xbaroffset=27447\">an order of magnitude</a>. In future releases we plan to apply this optimization to even more scenarios.</p><p>Thanks to work by open source contributor <a href=\"https://github.com/JsouLiang\">JsouLiang</a>, the Engine’s raster and UI threads now run at higher priority on Android and iOS than other threads; for example, Dart VM background garbage collection threads. In our benchmarks, this resulted in <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1644581114&amp;end=1644647407&amp;keys=X3999dc0a0c89054eaa9f66bcff27d882&amp;num_commits=50&amp;request_type=1&amp;xbaroffset=27549\">~20% faster</a> average frame build times.</p><p>Prior to the 3 release, the admission policy for the raster cache only looked at the number of draw operations in a picture, assuming that any with more than a few operations would be good candidates for caching. Unfortunately, this resulted in the Engine spending memory to cache pictures that were actually very fast to render. This release <a href=\"https://github.com/flutter/engine/pull/31417\">introduces a mechanism</a> that estimates the rendering complexity of pictures based on the cost of draw operations that it contains. Using this as the raster cache admissions policy <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1644790212&amp;end=1646044276&amp;keys=X4c7dd4e4903a38523816c00b31d4d787&amp;requestType=0&amp;xbaroffset=27636\">reduced memory usage</a> without regressing performance in our benchmarks.</p><p>Thanks to open source contributor <a href=\"https://github.com/ColdPaleLight\">ColdPaleLight</a> who <a href=\"https://github.com/flutter/engine/pull/31513\">fixed a bug in frame scheduling</a> that caused a small number of animation frames to be dropped on iOS. Thanks to everyone who reported this issue and provided reproductions and videos of the dropped frames.</p><h4>Impeller</h4><p>The team has been hard at work on a solution to address early-onset jank on iOS and other platforms. In the Flutter 3 release, you can preview an experimental rendering backend called <a href=\"https://github.com/flutter/engine/tree/main/impeller\">Impeller</a> on iOS. Impeller precompiles <a href=\"https://github.com/flutter/flutter/issues/77412\">a smaller, simpler set of shaders</a> at engine build time so that they won’t compile while an app is running; this has been a major source of jank in Flutter. Impeller is not production ready and is far from finished. Not all Flutter features are implemented yet, but we’re pleased enough with its fidelity and performance in the <a href=\"https://github.com/flutter/gallery\">flutter/gallery</a> app that we are sharing our progress. In particular, the worst frame in the transition animation of the Gallery app is around <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1650297849&amp;end=1651261748&amp;queries=sub_result%3Dworst_frame_rasterizer_time_millis%26test%3Dnew_gallery_impeller_ios__transition_perf%26test%3Dnew_gallery_ios__transition_perf&amp;requestType=0\">20x faster</a>.</p><p>Impeller is available under a flag on iOS. You can pass —-enable-impeller to flutter run, or set the FLTEnableImpeller flag in your Info.plist file to true, to give Impeller a try. Development of Impeller continues on Flutter’s master channel, and we hope to provide further updates in future releases.</p><h4>Inline ads on android</h4><p>When you use the <a href=\"https://pub.dev/packages/google_mobile_ads\">google_mobile</a>_ads package, you should see better performance in user critical interactions such as scrolling and transitions between pages. This is particularly noticeable on devices popular in emerging markets. The best part is that no code changes are required!</p><p>Under the hood, Flutter now composes Android views, commonly referred to as <a href=\"https://docs.flutter.dev/development/platform-integration/platform-views\">platform views</a>, asynchronously. This means that the Flutter raster thread doesn’t need to wait for the Android view to render. Instead, the Flutter engine places the view on screen using an OpenGL texture that it manages.</p><h3>More exciting updates</h3><p>Other updates to the Flutter ecosystem include the following:</p><h4>Material 3</h4><p>Flutter 3 supports <a href=\"https://m3.material.io/\">Material Design 3</a>, the next generation of Material Design. Flutter 3 provides opt-in support for Material 3; this includes Material You features like dynamic color, an updated color system and typography, updates to many components, and new visual effects introduced in Android 12 like a new touch ripple design and a stretch overscroll effect. Try the Material 3 features in the <em>new</em> <a href=\"https://codelabs.developers.google.com/codelabs/flutter-boring-to-beautiful\">Take your Flutter app from Boring to Beautiful</a> codelab. See the <a href=\"https://api.flutter.dev/flutter/material/ThemeData/useMaterial3.html\">API docs</a> for details on how to opt-in to these new features and what components have support for Material 3. Follow ongoing work with the <a href=\"https://github.com/flutter/flutter/issues/91605\">Material 3 Umbrella issue</a>.</p><h4>Theme extensions</h4><p>Flutter now enables adding <em>anything</em> to the material library’s ThemeData, with a concept called <em>Theme extensions</em>. Rather than extending (in the Dart sense) ThemeData and re-implementing its copyWith, lerp, and other methods, you can specify ThemeData.extensions. Also, as a package developer, you can provide ThemeExtension. See <a href=\"https://flutter.dev/go/custom-colors-m3\">flutter.dev/go/theme-extensions</a> for more details and check out <a href=\"https://github.com/guidezpl/flutter/blob/master/examples/api/lib/material/theme/theme_extension.1.dart\">this example on GitHub</a>.</p><h4>Ads</h4><p>We know it is important for publishers to request consent for personalized ads and to handle Apple’s App Tracking Transparency (ATT) requirements.</p><p>To support these requirements, Google offers the User Messaging Platform (UMP) SDK, which replaces the previous open source <a href=\"https://github.com/googleads/googleads-consent-sdk-ios\">Consent SDK</a>. In the upcoming release of GMA SDK for Flutter, we are adding support for the UMP SDK to allow publishers to obtain user consent. For more details, check out the <a href=\"https://pub.dev/packages/google_mobile_ads\">google_mobile_ads</a> page on pub.dev.</p><h3>Breaking changes</h3><p>As we continue to grow and improve Flutter, we aim to keep the number of breaking changes to a minimum. With the release of Flutter 3, we have the following breaking changes:</p><ul><li><a href=\"https://docs.flutter.dev/release/breaking-changes/2-10-deprecations\">Deprecated API removed after v2.10</a></li><li><a href=\"https://docs.flutter.dev/release/breaking-changes/page-transition-replaced-by-ZoomPageTransitionBuilder\">Page transitions replaced by ZoomPageTransitionsBuilder</a></li><li><a href=\"https://docs.flutter.dev/release/breaking-changes/chip-usedeletebuttontooltip-migration\">Migrate useDeleteButtonTooltip to deleteButtonTooltipMessage of Chips</a></li></ul><p>If you are using any of these apis please refer to the <a href=\"https://docs.flutter.dev/release/breaking-changes\">migration guide on Flutter.dev</a>.</p><h3>Summary</h3><p>From the Flutter Team at Google, we say thank you for the awesome work the community has done to help Flutter maintain its status as the most popular cross-platform UI toolkit, as measured by analysts like Statista and SlashData. We look forward to working together as a community to continue to provide a community driven tool that helps create a delightful experience for the developers and users alike!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8c74a5bc32d0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-8c74a5bc32d0\">What’s new in Flutter 3</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-05-10T17:03:02.000Z":{"title":"I/O Pinball Powered by Flutter and Firebase","link":"https://medium.com/flutter/i-o-pinball-powered-by-flutter-and-firebase-d22423f3f5d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/d22423f3f5d","category":["flutter","firebase","dart","app-development","game-development"],"dc:creator":"Very Good Ventures Team","pubDate":"Tue, 10 May 2022 17:03:02 GMT","atom:updated":"2022-05-10T17:03:00.485Z","content:encoded":"<h4>Take Flutter game development to the next level</h4><figure><img alt=\"Flutter’s Dash, Android Jetpack, Chrome Dino, and Firebase’s Sparky gathering around a pinball machine.\" src=\"https://cdn-images-1.medium.com/max/1024/1*yuiVVfFOuPnrsHcUx7xf_Q.png\" /></figure><p>For Google I/O, we teamed up with the Flutter team to reimagine a classic pinball game built using Flutter and Firebase. Here’s how we brought <a href=\"https://pinball.flutter.dev/\">I/O Pinball</a> to life on the web with the help of the Flame game engine.</p><h3>Game development essentials</h3><p>The Flutter framework is a great choice for building games driven by user interaction, such as puzzles and word games. When it comes to games that use a game loop, <a href=\"https://docs.flame-engine.org/\">Flame</a>, a 2D game engine built on top of Flutter, can be a helpful tool. I/O Pinball uses Flame’s out-of-the-box features, such as animations, physics, collision detection, and more, while also leveraging the infrastructure of the Flutter framework. If you can build an app with Flutter, you already have the foundation you need to build games with Flame.</p><figure><img alt=\"Flame engine logo\" src=\"https://cdn-images-1.medium.com/max/1024/1*Qyyvx52AjpBRuI8MeZ7cAg.png\" /></figure><h3>Game loop</h3><p>In conventional apps, screens are usually visually static until there is an event or interaction from the user. With games, the inverse is true — the UI is rendered continuously and the state of the game constantly changes. Flame provides a game widget, which internally manages the game loop so that the UI is constantly rendering in a performant way. The Game class contains the implementation of the game components and logic, which is passed to the GameWidget in the widget tree. In I/O Pinball, the game loop reacts to the position and state of the ball on the playfield and applies the necessary effects if the ball collides with an object or falls out of play.</p><pre>@override<br>void update(double dt) {<br>  super.update(dt);</pre><pre>  final direction = -parent.body.linearVelocity.normalized();<br>  angle = math.atan2(direction.x, -direction.y);<br>  size = (_textureSize / 45) * <br>    parent.body.fixtures.first.shape.radius;<br>}</pre><h3>Rendering a 3D space with 2D components</h3><p>One of the challenges of building I/O Pinball was figuring out how to create a 3D effect using only 2D elements. Components are ordered to determine how they render on the screen. For example, as the ball is launched up the ramp, the ball’s order increases, so that it appears to be on top of the ramp.</p><figure><img alt=\"I/O Pinball playfield featuring Flutter’s Dash, Android Jetpack, Chrome’s Dino, and Firebase’s Sparky, and other Google-themed elements. Toward the bottom of the board there are two flippers with two bumpers above and to the bottom right is the ball ready to be launched.\" src=\"https://cdn-images-1.medium.com/max/828/1*03SErV-PT46HyU9nmuwd7g.png\" /></figure><p>The ball, plunger, both flippers, and the Chrome Dino are elements with a dynamic body, which are affected by the world’s physics. The ball also changes size depending on its position on the board. As the ball moves to the top of the board, it shrinks in size to appear farther away from the user’s perspective. In addition, the gravity on the ball is adjusted to take into account the angle of the pinball machine, so that the ball falls faster on an incline.</p><pre>/// Scales the ball&#39;s body and sprite according to its position on the board.<br>class BallScalingBehavior extends Component with ParentIsA&lt;Ball&gt; {<br>  @override<br>  void update(double dt) {<br>    super.update(dt);<br>    final boardHeight = BoardDimensions.bounds.height;<br>    const maxShrinkValue = BoardDimensions.perspectiveShrinkFactor;</pre><pre>    final standardizedYPosition = parent.body.position.y +   (boardHeight / 2);<br>    final scaleFactor = maxShrinkValue +<br>        ((standardizedYPosition / boardHeight) * (1 - maxShrinkValue));</pre><pre>parent.body.fixtures.first.shape.radius = (Ball.size.x / 2) * scaleFactor;</pre><pre>final ballSprite = parent.descendants().whereType&lt;SpriteComponent&gt;();<br>    if (ballSprite.isNotEmpty) {<br>      ballSprite.single.scale.setValues(<br>        scaleFactor,<br>        scaleFactor,<br>      );<br>    }<br>  }<br>}</pre><h3>Physics with Forge 2D</h3><p>I/O Pinball heavily relies upon the <a href=\"https://pub.dev/packages/forge2d\">forge2d</a> package maintained by the Flame team. This package ports the open source <a href=\"https://box2d.org/\">Box2D physics engine</a> into Dart so that it can be easily integrated with Flutter. We used forge2d to power the physics of the game, for example collision detection between objects (Fixtures) on the playfield.</p><p>forge2D allows us to listen to when collisions between Fixtures occur. We then add ContactCallbacks to Fixtures to be notified when contact happens between two elements. For example, when the ball (which has a Fixture with a CircleShape) comes in contact with a bumper (which has a Fixture with an EllipseShape), the score increases. On these callbacks we can set exactly where contact begins and ends, so that when two elements come in contact with another, a collision occurs.</p><pre>@override<br>Body createBody() {<br>  final shape = CircleShape()..radius = size.x / 2;<br>  final bodyDef = BodyDef(<br>    position: initialPosition,<br>    type: BodyType.dynamic,<br>    userData: this,<br>  );</pre><pre>  return world.createBody(bodyDef)<br>    ..createFixtureFromShape(shape, 1);<br>}</pre><h3>Sprite sheet animations</h3><p>There are a few elements on the pinball playfield, such as Android, Dash, Sparky, and Chrome Dino, which are animated. For these, we used sprite sheets, which are included in the Flame engine with the SpriteAnimationComponent. For each element, we had a file with the image in various orientations, the number of frames in the file, and the time between frames. Using this data, the SpriteAnimationComponent in Flame compiles all of the images together on a loop so that the element appears animated.</p><figure><img alt=\"Sprite sheet showing the Android in various orientations so that if played on a loop, it will appear to be spinning in a circle.\" src=\"https://cdn-images-1.medium.com/max/1024/1*l1WjOu97J6hfDTO0KgzKlA.png\" /><figcaption>Sprite sheet example</figcaption></figure><pre>final spriteSheet = gameRef.images.fromCache(<br>  Assets.images.android.spaceship.animatronic.keyName,<br>);</pre><pre>const amountPerRow = 18;<br>const amountPerColumn = 4;<br>final textureSize = Vector2(<br>  spriteSheet.width / amountPerRow,<br>  spriteSheet.height / amountPerColumn,<br>);<br>size = textureSize / 10;</pre><pre>animation = SpriteAnimation.fromFrameData(<br>  spriteSheet,<br>  SpriteAnimationData.sequenced(<br>    amount: amountPerRow * amountPerColumn,<br>    amountPerRow: amountPerRow,<br>    stepTime: 1 / 24,<br>    textureSize: textureSize,<br>  ),<br>);</pre><h3>A closer look at the I/O Pinball Codebase</h3><h3>Leaderboard with live results from Firebase</h3><p>The I/O Pinball leaderboard displays the top scores of players around the world in real time. Users can also share their scores to Twitter and Facebook. We use Firebase <a href=\"https://firebase.google.com/docs/firestore\">Cloud Firestore</a> to track the top ten scores and fetch them to display on the leaderboard. When a new score is written to the leaderboard, a <a href=\"https://firebase.google.com/docs/functions\">Cloud Function</a> resorts the scores in descending order and removes any scores not currently in the top ten.</p><figure><img alt=\"Leaderboard for I/O pinball with 10 top scores displayed.\" src=\"https://cdn-images-1.medium.com/max/468/1*vD6H6j8WKFxS5RJf8Z0EDA.png\" /></figure><pre>/// Acquires top 10 [LeaderboardEntryData]s.<br>Future&lt;List&lt;LeaderboardEntryData&gt;&gt; fetchTop10Leaderboard() async {<br>  try {<br>    final querySnapshot = await _firebaseFirestore<br>      .collection(_leaderboardCollectionName)<br>      .orderBy(_scoreFieldName, descending: true)<br>      .limit(_leaderboardLimit)<br>      .get();<br>    final documents = querySnapshot.docs;<br>    return documents.toLeaderboard();<br>  } on LeaderboardDeserializationException {<br>    rethrow;<br>  } on Exception catch (error, stackTrace) {<br>    throw FetchTop10LeaderboardException(error, stackTrace);<br>  }<br>}</pre><h3>Building for the web</h3><p>It can be easier to build a responsive game compared to a conventional app. The pinball playfield simply needs to scale to the size of the device. For I/O Pinball, we zoom based on the size of your device on a fixed ratio. This ensures that the coordinate system is always the same, no matter the display size, which is important to ensure that components appear and interact consistently across devices.</p><p>I/O Pinball also adapts to a mobile or desktop browser. On a mobile browser, users can tap the launch button to begin play, as well as tap the left and right sides of the screen to control the corresponding flippers. On a desktop browser, users can use the keyboard to launch the ball and control the flippers.</p><h3>Codebase architecture</h3><p>The pinball codebase follows a layered architecture, with each feature in its own folder. The game logic is also separated from the visual components in this project. This ensures that we could easily update visual elements independently of the game logic and vice versa.</p><p>The theme of pinball varies depending on which character a user selects before beginning the game. Theming is controlled with the CharacterThemeCubit class. Depending on the character selection, the ball color, background, and other elements are updated.</p><figure><img alt=\"Displays the different I/O Pinball themes. The top left shows Sparky, carpet with prominent flame decorations and neon orange lighting. The top right shows Dash, a carpet with prominent egg decorations and neon blue lighting. The bottom left shows Android, carpet with prominent Android Jetpack decorations and neon green lighting. The bottom right shows Chrome Dino, carpet with prominent cactus decorations, and neon white lighting.\" src=\"https://cdn-images-1.medium.com/max/1024/1*I0xzMeuSQHI_vB0x28IucQ.png\" /></figure><pre>/// {@template character_theme}<br>/// Base class for creating character themes.<br>///<br>/// Character specific game components should have a getter specified here to<br>/// load their corresponding assets for the game.<br>/// {@endtemplate}<br>abstract class CharacterTheme extends Equatable {<br>  /// {@macro character_theme}<br>  const CharacterTheme();</pre><pre>/// Name of character.<br>  String get name;</pre><pre>/// Asset for the ball.<br>  AssetGenImage get ball;</pre><pre>/// Asset for the background.<br>  AssetGenImage get background;</pre><pre>/// Icon asset.<br>  AssetGenImage get icon;</pre><pre>/// Icon asset for the leaderboard.<br>  AssetGenImage get leaderboardIcon;</pre><pre>/// Asset for the the idle character animation.<br>  AssetGenImage get animation;</pre><pre>@override<br>  List&lt;Object&gt; get props =&gt; [<br>        name,<br>        ball,<br>        background,<br>        icon,<br>        leaderboardIcon,<br>        animation,<br>      ];<br>}</pre><p>I/O Pinball game state is handled with <a href=\"https://pub.dev/packages/flame_bloc\">flame_bloc</a>, a package that bridges blocs with Flame components. For example, we use flame_bloc to keep track of the number of rounds left to play, any bonuses achieved through the game, as well as the current game score. In addition, there is a widget at the top of the widget tree that contains logic for the loading page, including instructions for how to play the game. We also follow the <a href=\"https://en.wikipedia.org/wiki/Behavioral_pattern\">behavior pattern</a> to encapsulate and isolate certain elements of a game feature based on its components. For example, the bumpers play a sound when hit by the ball, so we implemented the BumperNoiseBehavior class to handle this.</p><pre>class BumperNoiseBehavior extends ContactBehavior {<br>  @override<br>  void beginContact(Object other, Contact contact) {<br>    super.beginContact(other, contact);<br>    readProvider&lt;PinballPlayer&gt;().play(PinballAudio.bumper);<br>  }<br>}</pre><p>The codebase also contains comprehensive unit, widget, and golden tests. At times, testing the game posed a few challenges due to the fact that single components could have multiple responsibilities, which made them hard to test in isolation. As a result, we ended up defining patterns to better isolate and test components. We also incorporated improvements into the <a href=\"https://pub.dev/packages/flame_test\">flame_test</a> package.</p><h3>Component sandbox</h3><p>This project relies heavily on Flame components to bring the pinball experience to life. The codebase comes with a component sandbox, which is similar to a <a href=\"https://gallery.flutter.dev/#/\">UI component gallery</a>. This is a helpful tool when developing games because it allows you to develop the game components in isolation and ensure that they look and behave as expected before integrating them into the game.</p><figure><img alt=\"Chrome Dino is animated, moving left to right and opening its mouth to shoot out the pinball ball.\" src=\"https://cdn-images-1.medium.com/max/358/1*zAjKICKgCTiEiiMTou9MJQ.gif\" /></figure><h3>What’s next</h3><p>See if you can get a high score in <a href=\"https://pinball.flutter.dev/\">I/O Pinball</a>! The code is open source in <a href=\"https://github.com/flutter/pinball\">this GitHub repo</a>. Keep an eye on the leaderboard and be sure to share your score on social media!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d22423f3f5d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/i-o-pinball-powered-by-flutter-and-firebase-d22423f3f5d\">I/O Pinball Powered by Flutter and Firebase</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-05-05T19:53:01.000Z":{"title":"Does Flutter boost developer productivity?","link":"https://medium.com/flutter/does-flutter-boost-developer-productivity-475f713724b3?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/475f713724b3","category":["flutter","surveys","dart"],"dc:creator":"JaYoung Lee","pubDate":"Thu, 05 May 2022 19:53:01 GMT","atom:updated":"2022-05-05T19:53:01.560Z","content:encoded":"<p>The Flutter team continues to run a quarterly user survey to hear from you, our Flutter developers. The first survey in 2022 ran between February 22nd and March 3rd, and was accessed through Flutter IDE plugins, the docs.flutter.dev website, and Twitter — and over eight thousand of you responded.</p><p>Flutter continues to be loved by most developers (93% positively satisfied), and even scored the highest percentage of “very satisfied” (60%) in its history! This is noteworthy because the number of Flutter developers grew by over 10% since the last quarterly survey (from November 2021 to February 2022). We’re happy to see that Flutter is maintaining a high level of satisfaction even as the community grows.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hjsh42RwSy9QAK1S\" /><figcaption>Satisfaction with Flutter over time</figcaption></figure><p>We focused on the following four topics in this survey:</p><ul><li><strong>IDE plugin:</strong> What can we do to improve Flutter’s IDE plugin support?</li><li><strong>Dart scalability:</strong> Do Dart tools grow slow or unresponsive as a Flutter project grows larger?</li><li><strong>Game development:</strong> Are you interested in game development? <em>— (More about this in an upcoming blog post.)</em></li><li><strong>Flutter’s value to developers:</strong> Is Flutter delivering the values promised to developers?</li></ul><p>We don’t take your support for granted and we’re keeping an eye out for signals that show where we can further improve. We recognize that there is always room for improvement, and in this article we’ll tell you more about what we’ve learned and how that info drives our roadmap.</p><h3>IDE plugins</h3><p>According to this survey, 63.5% of all developers were “very” satisfied with Flutter’s IDE plugins. What about the rest of the population? Why are they not fully satisfied?</p><p>As shown in the following figure, there was no one item that stood out from others as the reason for not being fully satisfied with the IDE plugins. Missing features (35%) was the biggest reason for both Android Studio/IntelliJ and VS Code users, but slow plugin (29%), memory consumption (28%), buggy plugin (26%), all received a fair number of votes, too. (The IDE type is logged when a respondent clicks on the survey link within their IDE.)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EMCuq3u9Ou_ALwgz\" /><figcaption>Reasons for not being fully satisfied with Flutter’s IDE plugins</figcaption></figure><p>“IntelliJ” label includes Android Studio users as well.</p><p>When we asked what features are missing or inadequately supported, refactoring and quick fixes were chosen as the top two that need better support. This was somewhat surprising, because we didn’t expect that refactoring would be the highest ranked. Also, we were surprised to learn that Android Studio/IntelliJ users are very concerned about navigation, though we do understand that Android Studio/IntelliJ users care more about Android integration than VS Code users. There’s also great interest from developers for a UI builder.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*JMOa0ZRVpHAy7prt\" /><figcaption>Missing or inadequately supported features in the IDE</figcaption></figure><p>In summary, we now feel better aligned with Flutter developers. Still, we will continue to learn more about what’s needed to improve areas of concern through various studies.</p><h3>Dart tools</h3><p>Dart tools, such as Dart analyzer, compiler, DevTools, and IDE plugins, make it easy to use the language. We heard from a few developers that Dart tools can become slow or even unresponsive when the Flutter project is large. We want to assess how widespread and severe this problem is in our next survey.</p><p>From this survey we found that about a quarter of the developers have experienced this symptom (24.5%), and almost a half of them said that it has had an extremely negative (16.7%) or moderately negative (29.6%) impact on development.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Jv2irMQ8bSqUxGTW\" /><figcaption>Developers encountered a Dart tool growing slow or unresponsive as their Flutter project grew larger</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EHUt9u95L4cLrRBk\" /><figcaption>Impact of a slow or unresponsive Dart tool on productivity</figcaption></figure><p>We expected these numbers to be lower and we’re eager to improve in this area, so we’re planning to reach out to some developers who expressed interest in a follow-up conversation to reproduce the problem and eventually improve the performance of the tools.</p><h3>Flutter’s value to developers</h3><p>Flutter promises to provide a framework for building beautiful, fast, multi-platform applications from a single codebase. In this survey, we explored whether Flutter developers feel that we’ve met these values.</p><p>We asked different questions to those who have converted existing apps to Flutter and to those who created a new Flutter app from scratch. With multiple answers allowed, 59.2% have created a new app from scratch, and 26.5% either converted an existing app or added Flutter components to an existing app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*CmgeijL3JkkAQA1_\" /><figcaption>Developers’ experience developing and publishing Flutter apps</figcaption></figure><p>To those who created a new app with Flutter, we asked to what extent they agree with three statements about integration with other Google services, development productivity, and target platforms. We found that over 90% of them agreed to “Flutter reduced time to build and publish new apps, compared to other technologies that I have used” (92.1%) and to “Flutter enabled my app to target more platforms”. (92.2%)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*F-sHYKccRgOOQ85L\" /><figcaption>The impact of creating a new app with Flutter</figcaption></figure><p>Similar questions were asked of those who adopted Flutter for existing apps. 90.7% agreed that “Flutter enabled my app to be developed more quickly than before” and 85.3% agreed that “Flutter enabled my app to be available on more platforms than before”. We also found that 84.8% of the developers agreed that “Flutter made my app look more beautiful than before”.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*PihM7mrr3InFiCOZ\" /><figcaption>The impact of adopting Flutter for an existing app</figcaption></figure><p>Of course we heard what Flutter can do better, such as providing more plugins for all supported platforms, adding more documentation, improving perceived performance, integrating better with other tools, and so on. Some comments also mentioned that certain problem areas haven’t changed after years of surveys. While we strive to address the issues and improve the product, we appreciate your patience! Nevertheless, we are pleased to learn and report that our developers are targeting more platforms in a more productive way.</p><h3>Wrapping up</h3><p>Special thanks go to everyone who participated in our survey! The Flutter team members dedicate time every quarter to analyze and digest the feedback and make decisions for the next quarter and beyond. We’ll continue to reach out to hear what we can do to make your experience with Flutter more enjoyable and more productive.</p><p>Flutter’s UX research team is also running a variety of user experience studies. If you are interested in participating, please <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe0i4De809KXVCdljGKrjMj3lxhuzbuFKCtY5PEQPCYtGxFMg/viewform\">sign up</a> to be considered for a future study.</p><p>And please continue to participate and share your thoughts. See you in the next survey!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=475f713724b3\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/does-flutter-boost-developer-productivity-475f713724b3\">Does Flutter boost developer productivity?</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-04-21T17:56:05.000Z":{"title":"Announcing the Flutter Puzzle Hack winners!","link":"https://medium.com/flutter/announcing-the-flutter-puzzle-hack-winners-ae55f45c6363?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/ae55f45c6363","category":["flutter","web-development","contests","casual-games","announcements"],"dc:creator":"Kelvin Boateng","pubDate":"Thu, 21 Apr 2022 17:56:05 GMT","atom:updated":"2022-04-21T18:41:08.628Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Drumroll please…!!!</h4><figure><img alt=\"The Flutter puzzle hack logo\" src=\"https://cdn-images-1.medium.com/max/1024/1*RpaR1pTpRa0PUdNdfv4njA.png\" /></figure><p>The <a href=\"https://flutter.dev/events/puzzle-hack\">Flutter Puzzle Hack</a> asked participants to push their creativity to its limits by reimagining a classic slide puzzle. It’s safe to say the submissions blew the judges away!</p><p>Over 5,500 developers representing 120+ countries, and a range of experience levels participated in the Flutter Puzzle Hack. Before sharing the category winners, we want to celebrate everyone who participated in the challenge. Yet again the Flutter community came together to build something special. We gathered for talks covering <a href=\"https://www.youtube.com/watch?v=9F6dxDDh9yk\">animations</a>, <a href=\"https://www.youtube.com/watch?v=kWjJ0aUq5L0\">Firebase hosting</a>, and <a href=\"https://www.youtube.com/watch?v=2jZn7ccre9g\">slide puzzle basics</a>. And then it was great to see Flutter developers building an incredible array of slide puzzles, <a href=\"https://twitter.com/roaakdm/status/1493614287515967492\">sharing highlights along the way</a>, and <a href=\"https://flutterhack.devpost.com/project-gallery\">voting for your favorites</a>. Thank you all!</p><p>It’s amazing to be part of such a passionate and creative community. Who knew there were so many different ways to build a simple slide puzzle game?? 🤷‍♂️</p><p><strong>Without further ado… it’s time for the winners!</strong></p><h3><strong>Category Winners</strong></h3><h4><strong>Best Execution</strong></h4><p><a href=\"https://fph-planets.web.app/#/\"><strong>Planets</strong></a> by Jyotirmoy Paul</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*NBpZfqcmNXabcfXw\" /><figcaption>A Flutter Puzzle Hack Winner</figcaption></figure><p>This project impressed the judges on many levels with its excellent use of animation, code quality, and pure creativity. On top of the code itself, Jyotirmoy shared some great learning moments along the way — <a href=\"https://flutterhack.devpost.com/review/submissions/NG5qSUlZT0wrOTREM3ExNVZ4ZUx4ZmJacnVrRTVxU1pRKzdYOGFsVjlsME9Ia0FoLzNweHRkVmt5aldVNE1HZFkzY3dUdjN3ZHBna1h5cFBxTENYYVRGeEFOanptV1FodFN4Vm9BVWpMaVU9LS0wMkRkTzhNeTRxM2pPSEw5dlFkbFdnPT0=--f9621a4ed75f9e521ff0c61d2459f3c3f371d6f1\">check it out</a> if you’re interested.</p><h4><strong>Most Creative</strong></h4><p><a href=\"https://puzzle.wolfiz.com/\"><strong>The Werewolves Escape</strong></a><strong> </strong>by Ahmad Ayaz Noor and team</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*El3UlTpr8NMOn23v\" /><figcaption>A Flutter Puzzle Hack Winner</figcaption></figure><p>This feature-rich project combined the best of Flutter across web, mobile, and desktop. The storyline took the slide puzzle game to a completely new level of fun. Check out their <a href=\"https://devpost.com/software/the-werewolves-escape\">submission page</a> for more information on what this team learned as they built this project.</p><h4><strong>Best Animation / Design</strong></h4><p><a href=\"https://ashishbeck.github.io/slide_puzzle/\"><strong>Retro Slide Puzzle</strong></a><strong> </strong>by Ashish Beck</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*-G6C7XhJ0Dt1YP_W\" /><figcaption>A Flutter Puzzle Hack Winner</figcaption></figure><p>This puzzle’s extra-polished visuals caught the judges’ attention right away. The project incorporates smooth <a href=\"https://rive.app/\">Rive</a> animations, sound plug-ins, auto-complete, and other features that make it incredibly satisfying to play.</p><h4><strong>Best Multiplatform</strong></h4><p><a href=\"https://slideparty.vercel.app/#/\"><strong>Slide Party</strong></a><strong> </strong>by Duong Bui Dai</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*Cv4DedVkWjqpQI6k\" /><figcaption>A Flutter Puzzle Hack Winner</figcaption></figure><p>Ever wanted to compete with your friends to see who can solve a slide puzzle the fastest? This puzzle lets you do just that! Not only that, but the players don’t even need to be on the same device or operating system, thanks to the flexibility of Flutter.</p><h3><strong>Over 40 Winners!</strong></h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/434/0*f_uqnrRyCc2QtHwm\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/387/0*qBSPIHNDApk5U0UE\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/0*dsLnVO7wz1Y3aF6i\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/0*-_mzr5eRCScnnW6P\" /></figure><p>While these were the category winners, it was almost impossible to select from so many creative ideas. There were more than thirty other named winners of the Flutter Puzzle Hack, and many other great entries besides. Head to <a href=\"https://flutter.dev/events/puzzle-hack\">flutter.dev/events/puzzle-hack</a> to see the winners and try their puzzles yourself!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ae55f45c6363\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-the-flutter-puzzle-hack-winners-ae55f45c6363\">Announcing the Flutter Puzzle Hack winners!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-05-12T17:02:47.000Z":{"title":"Announcing the Flutter Casual Games Toolkit","link":"https://medium.com/flutter/announcing-the-flutter-casual-games-toolkit-c22e401d8fee?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/c22e401d8fee","category":["games","flutter","google"],"dc:creator":"Zoey Fan","pubDate":"Thu, 12 May 2022 17:02:47 GMT","atom:updated":"2022-05-12T17:02:46.900Z","content:encoded":"<p>A starter kit of resources to help you get from concept to launch</p><p>For most developers, Flutter is an app framework. But there’s also a growing community around casual game development, taking advantage of the hardware-accelerated graphics support provided by Flutter.</p><p>Over the past year, thousands of Flutter games have been published. For example, Lotum, the game company behind the all-time popular word puzzle game <a href=\"https://flutter.dev/showcase/lotum\">4 Pics 1 Word</a>, rewrote the entire game in Flutter. <a href=\"https://flame-engine.org/\">Flame</a>, a community-driven open-source game engine built on top of Flutter, has been steadily growing both its contributors and users.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rIXhQTkBae35i5YkSN8soQ.png\" /><figcaption>Mobile games developed in Flutter</figcaption></figure><p>To understand how we might provide better support, we <a href=\"https://medium.com/flutter/perspectives-from-early-adopters-of-flutter-as-a-game-development-tool-f95fb3406d51\">interviewed several developers</a> who have successfully built and released Flutter mobile games. We asked what they love about creating games using Flutter, and their answers revealed several themes:</p><ul><li>Flutter is simple to learn and easy to use for building UIs and casual games</li><li>Flutter allows them to look into the framework source code (no “black boxes”) and have full control of the canvas</li><li>Flutter has an open ecosystem where you can find (and leverage) many useful packages, plugins, and libraries</li><li>Flutter is portable — you write your code once and the game compiles to be multiplatform by default</li></ul><p>Meanwhile, study participants mentioned that the biggest challenge in creating a Flutter game is finding resources and learning materials to get started and integrate with platform gaming services. To address these needs, we’re releasing a new starter toolkit to accelerate your game development.</p><p>The <a href=\"http://flutter.dev/games\">Flutter Casual Games Toolkit</a> offers a specialized template (developed by <a href=\"https://github.com/filiph\">Filip Hracek</a>) that you can use to build your own game. This starter project provides pre-built “bells &amp; whistles” such as a main menu, a settings page, sound support, and so on, but leaves the fun part to you: building the game!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*NwJbJ1BD7MvehPAA\" /><figcaption>Tic-Tac-Toe game running on a mobile device</figcaption></figure><h4>Video Tutorial</h4><p>To get started, check out the <a href=\"https://youtu.be/zGgeBNiRy-8\">video tutorial</a> on how to use the game template. It gives you a step-by-step guide on building a <a href=\"https://github.com/filiph/tictactoe\">Tic-Tac-Toe game</a> (also available for download from the <a href=\"https://apps.apple.com/us/app/tic-tac-toe-puzzle-game/id1611729977\">iOS</a>/<a href=\"https://play.google.com/store/apps/details?id=dev.flutter.tictactoe\">Android</a> stores). To see all the nitty-gritty details that Filip experienced as he developed the game, check out his <a href=\"https://docs.google.com/document/d/e/2PACX-1vRM-pZYVNOcJhCh5-ZHt8jGwWpNvx4KtpJZECHmaUPn9PIOgdTThK5OBRblCM6PQC4skqDRdW0lJnyM/pub\">raw dev log</a>.</p><h4>Pre-integrated services</h4><p>In addition to the common UI and functional elements you might need for a game, you get pre-integrated modules and sample code for critical services required for game development. For example, the game template integrates the Apple Game Center and Google Play Games Services so you can easily display features like leaderboards and achievements.</p><p>If you plan to monetize your game, the template uses the <a href=\"https://pub.dev/packages/google_mobile_ads\">Google Mobile Ads SDK</a>, and shows you how to implement sample Ads. The template also uses the <a href=\"https://pub.dev/packages/in_app_purchase\">In-App purchase</a> package allowing you to offer players additional content in your game like premium experiences, digital goods, and subscriptions.</p><p>Lastly, the game template includes <a href=\"https://pub.dev/packages/firebase_crashlytics\">Firebase Crashlytics</a>, so you can gain more insights into any crashes or errors that might occur in your game. All the source code for the game template can be found in this <a href=\"https://github.com/flutter/samples/tree/master/game_template#readme\">Flutter samples repository</a> on GitHub.</p><h4>Flutter Game Discord Channel</h4><p>One of the strengths of Flutter is its helpful and welcoming community. To chat with other Flutter game developers, ask questions, and share best practices, consider joining the <a href=\"https://discord.gg/WY5NwwjBQz\">dedicated game channel</a> on r/FlutterDev’s Discord server! Big thanks to Flutter community member @Miyoyo for helping create this community space to support Flutter game developers! (By the way, if you are already a member of the r/FlutterDev community, here is a <a href=\"https://discord.com/channels/420324994703163402/964110538986651658\">direct link</a>.)</p><h4>Google Ads and Cloud Credits</h4><p>If your game needs Cloud or Firebase services, or you want to promote your game to more users with Ads, you can get up to $900 in credits offered by the <a href=\"https://ads.google.com/intl/en_us/home/flutter/#!/\">Google Ads</a> and <a href=\"https://cloud.google.com/free?utm_source=flutter&amp;utm_medium=display&amp;utm_campaign=FY22-Q2-flutter-games_get-started&amp;utm_content=-&amp;utm_term=-\">Cloud</a> teams (terms and limits apply)!</p><h4>Start with mobile, but go beyond</h4><p>We’ve learned from past research that the majority of Flutter games today are casual mobile games, so we prioritized mobile scenarios when designing the Flutter Casual Games Toolkit.</p><p>This doesn’t mean that your creativity should be limited to mobile platforms. In fact, the sample <a href=\"https://github.com/filiph/tictactoe\">Tic-Tac-Toe game</a> can run on the <a href=\"https://filiph.github.io/tictactoe/\">web</a> and desktop as well!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sTD5PMhST3_73n4vnVcWBQ.png\" /><figcaption>Tic-Tac-Toe game running on the web and desktop</figcaption></figure><p>Meanwhile, we recently added support for the community-driven game engine Flame on DartPad, so you can explore<a href=\"https://dartpad.dev/?id=3e52ca7b51ba15f989ad880b8b3314a2\"> building games with Flame</a> on DartPad without downloading the SDK. What’s more, the web-based <a href=\"https://pinball.flutter.dev/\">pinball game,</a> written by Very Good Ventures (VGV) and launched at Google I/O, was built in Flutter using the Flame engine! To learn how the pinball game was created, check out <a href=\"https://medium.com/flutter/i-o-pinball-powered-by-flutter-and-firebase-d22423f3f5d\">the Pinball article</a> from the VGV team or <a href=\"https://github.com/flutter/pinball\">view the code</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*zJekiBgTaE-VTXfa\" /><figcaption>Web-based pinball game</figcaption></figure><p>Game development is a new but exciting scenario for Flutter! Going forward, we hope to add more codelabs and other resources to help you develop your games. This is our first attempt at making it easier for you, and we are fully aware that there may be many areas for improvement. We’ve recently started collaborating with community member <a href=\"https://github.com/wolfenrain\">@wolfenrain</a> to triage game-related issues. Please file an issue (or vote on an existing issue) on GitHub if you need product features that you hope the Flutter SDK can better support.</p><h4>flutter.dev/games</h4><p>Please check out the dedicated <a href=\"http://flutter.dev/games\">game development</a> page, where you can learn more about the above-mentioned resources, and also find links to <a href=\"http://docs.flutter.dev/resources/games-toolkit\">documentation</a>, and references to libraries, packages, and tools recommended by game development experts in the Flutter community.</p><p>Since the launch of Flutter 1.0, you have continued to amaze us with great apps, and now we can’t wait to see what exciting games you will launch with Flutter!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c22e401d8fee\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-the-flutter-casual-games-toolkit-c22e401d8fee\">Announcing the Flutter Casual Games Toolkit</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-05-12T16:02:39.000Z":{"title":"Perspectives from early adopters of Flutter as a game development tool","link":"https://medium.com/flutter/perspectives-from-early-adopters-of-flutter-as-a-game-development-tool-f95fb3406d51?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f95fb3406d51","category":["ux-research","google","flutter","game-development"],"dc:creator":"Tao Dong","pubDate":"Thu, 12 May 2022 16:02:39 GMT","atom:updated":"2022-05-12T16:02:37.457Z","content:encoded":"<h3>Introduction</h3><p>During this week’s Google I/O, we unveiled the <a href=\"http://flutter.dev/games\">Flutter Casual Game Toolkit</a>, a set of resources to support game builders in the Flutter community. Up until that point, Flutter hadn’t focused on game development as an officially supported use case, though we had been impressed by success stories such as the popular word puzzle game <a href=\"https://apps.apple.com/app/4-pics-1-word/id595558452\">4 Pics 1 Word</a> and community efforts such as the <a href=\"https://flame-engine.org/\">Flame</a> engine. <em>So why did we decide it’s time to officially get behind game development, and how did we determine what the initial release of the Toolkit should include?</em> In this post, we share a couple user studies we conducted with the early adopters of Flutter as a game development tool, and explain how their perspectives shaped our strategy and the design of the Toolkit.</p><p>We started our investigation with an interview study, where we met individually with 6 developers (referred to as P01 to P06) who had successfully built and released Flutter games. We had two objectives for this study. The first was to understand which types of resources can be most helpful for getting started on Flutter game development. The second was to better understand Flutter developers’ motivations, needs, and pain points in game development and leverage that understanding to strategically plan our long-term investment in this area. To complement the qualitative research findings from the interviews, we also ran a survey on the topic in the broad Flutter user community.</p><p>In the rest of the article, we first summarize the main findings from both the interview and survey studies, and then we share recommendations on market positioning, documentation and learning resources, and potential long-term investments to support Flutter game developers.</p><h3>Findings from developer interviews</h3><h4>Background of Flutter game developers</h4><p>In general, we found two archetypes of Flutter game developers that exist today:</p><ul><li><strong>App-game hybrid developers</strong>: They’re Flutter app developers, but they’re also leveraging Flutter to build relatively simple games without using another tool. (P02, P04, and P05)</li><li><strong>Computational artists and graphics enthusiasts</strong>: They’re primarily attracted by the high degree of control over graphics offered by Flutter, but they might not be using Flutter for app development. (P01 and P03)</li></ul><p>The following table provides more detail about the background of the developers we interviewed in this study. Several were referred to us by the Flame team.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/454630070af4bb296b7d344fad767d01/href\">https://medium.com/media/454630070af4bb296b7d344fad767d01/href</a></iframe><h4>Perceived benefits of using Flutter to develop games</h4><p>Participants named multiple benefits of using Flutter to develop games. We list those mentioned by multiple participants below:</p><ul><li><strong>Simplicity</strong>: Participants believed Flutter was easier to get started with and less overwhelming than larger game engines, such as Unity and Unreal, for building 2D casual games. (P03, P04)</li><li><strong>Control</strong>: Participants appreciated the ability to see Flutter’s source code from within the IDE, and have full and direct control of the canvas. (P01, P02, P04)</li><li><strong>Ecosystem</strong>: Developers can leverage packages in the Flutter ecosystem such as data persistence and audio playback. (P01, P02, P03, P04) Specifically, P01 considered Flutter’s audio capabilities superior to other cross-platform UI toolkits.</li><li><strong>Cross-platform: </strong>Participants appreciated the ease of deploying to iOS and Android and thought it delivered “a true single codebase.” (P01) This was, however, not mentioned frequently, since game engines are often cross-platform.</li><li><strong>Ease of building UI:</strong> A Flutter game can easily leverage any Flutter widget in its UI. (P04, P05) This is especially useful for games that are more app-like and don’t require using a game engine (for example, a word puzzle game that P05 and P06 built).</li><li><strong>Learning opportunities</strong>: Flutter and Flame’s open source nature provides an opportunity to develop a good understanding of game engines and the graphics pipeline through building games. (P03)</li><li><strong>The Flame game engine: </strong>Participants who use Flame generally speak positively about the project in both its capabilities and the support that Flame provides. P04 specifically built a game on Flutter because he discovered Flame.</li></ul><h4>Perceived challenges of using Flutter to develop games</h4><p>As an emerging use case, developing games on Flutter is not without challenges. Participants highlighted the following issues they experienced in their respective projects:</p><ul><li>Integration and ecosystem:<br>– Difficulty integrating with Play game services. (P01, P03)<br>– Missing good options for offline-first databases with conflict management. (P05)<br>– Guidance is needed to select the best audio plugin that can play audio in foreground and background simultaneously. (P05)<br>Assets: finding and creating high-quality game assets are time consuming. (P02, P03, P04)</li></ul><blockquote><em>It’s probably the most time-consuming process. If I don’t find the assets that go along with each other, the game doesn’t look exactly how I wanted. And since I’m not that good at making art, finding the right assets is the most challenging task for me. (P03)</em></blockquote><ul><li>Flame-specific challenges:<br>– Participants noted that<strong> </strong>Flame’s documentation is not beginner friendly. In particular, <a href=\"https://github.com/flame-engine/forge2d\">Forge2D</a> (part of Flame) could use better documentation. (P03, P04)<br>– Participants noted that collision detection in Flame is too basic. It doesn’t handle physics after two objects have collided, unless you use Forge2D. (P03)</li><li>Missing features in Flutter’s SDK and tooling:<br>– Lacking 3D support. (P02, P03) However, this doesn’t seem critical to these participants.<br>– No direct shader access for filters, effects, layers, or compositing. (P01, P02) This is somewhat important to participants who’re into computer graphics.<br>– Lacks user-space APIs to control refresh rate, such as 120hz. (P01, P02)<br>– Not sure if Flutter has GPU debugging tools that provide visibility into the frame buffer. Xcode has great OpenGL debugging tools. (P01)</li><li>Performance and bundle size:<br>– DevTools isn’t always helpful in diagnosing performance issues on a game with a game loop. (P02)<br>– Animation janks are present on low-end iOS devices. The shader warm-up workaround is useful but labor-intensive. (P05) There’s also no video tutorial on how to do this. (P03)<br>– Lack of support on adapting app rendering qualities to the performance characteristics of the device. (P05)<br>– Web bundle size is too large for web gaming platforms, such as Facebook Instant Game. (P05)</li></ul><h4>Comparing Flutter with alternative game development tools</h4><p>All participants had limited experiences with other game engines due to the selection criteria of this study. However, they offered their impressions regarding onboarding, sense of control, and package ecosystems.</p><p>First, participants had the impression that Flutter/Flame was easier to get started with and understand than bigger game engines such as Unity and Unreal. (P01, P02, P03, P04) Participants found that many features in Unity or Unreal weren’t related to the kinds of games they were building.</p><p>Second, since our participants were experienced coders, they found it difficult to gain the control they needed from the low-code development environment in Unity or Unreal.</p><blockquote><em>I really like getting in and having full nitty-gritty control of things. So, with Flutter, the Flame engine’s pretty wide open. I feel like I have real full control, whereas in Unity, everything’s buried. They try to automate things for casual users. (P01)</em></blockquote><p>Last but not least, Flutter’s ecosystem was considered an advantage over other lightweight game engines such as <a href=\"https://godotengine.org/\">Godot</a> (P02, P03). For example, P03 said with `package:hive`, data persistence on the native platform was easy. He suspected that native coding would probably be necessary with Godot.</p><h3>Useful resource for first-time Flutter game developers</h3><p>All participants mentioned needing better documentation and learning resources when starting developing games in Flutter. To prioritize, we asked participants to assess the importance of different kinds of resources for game development by categorizing them into three buckets: <em>Must-Have</em>, <em>Should-Have</em>, and <em>Could Have</em>. The following lists show the resulting buckets:</p><p>The “Must-Have” resources include:</p><ul><li><strong>A sample game</strong> with common game-specific techniques (such as audio support) and platform gaming services (such as Google Play services) pre-integrated.</li><li><strong>A dedicated website</strong> that includes all game-development resources and recommendations on third-party services (such as packages, asset marketplaces).</li><li><strong>How-to video(s)</strong> that covers basic game development concepts (such as the game loop), integration with backend, game support, and monetization services. P03 was also interested in long-form videos such as <a href=\"https://www.youtube.com/playlist?list=PLjxrf2q8roU3ahJVrSgAnPjzkpGmL9Czl\">the boring show</a> to go through the whole process of game development including troubleshooting:</li></ul><blockquote><em>I feel that two different kinds of [video] content will be better. One would be something very short, similar to Widget of the Week, and then something similar to the Boring Flutter Show where you kind of go into the whole process and go through all the steps of creating that game. (P03)</em></blockquote><p>The “Should-Have” resources include:</p><ul><li>A dedicated Flutter for Games discord channel that is more general than the Flame team’s Discord.</li></ul><p>The “Could-Have” resources include:</p><ul><li>Codelabs</li><li>Instructor-led workshops</li><li>Credits for Google services (such as GCP, Ads, Firebase)</li><li>Direct access to dedicated support</li></ul><p>Based on the valuable input from participants, we prioritized the “Must-Have” resources in the initial release of the Casual Game Toolkit.</p><h3>Findings from the survey</h3><p>As mentioned, we conducted a complementary survey to get a broader view on game development in the Flutter community. The following figure shows the high-level results:</p><h4>Flutter users are interested in using Flutter for game development</h4><p>It’s unsurprising that many Flutter users (62.4%) didn’t know that they could use Flutter to write games. However, 39.2% were interested in learning more.</p><figure><img alt=\"Results for the survey question “Did you know that you can use Flutter to build games?” 39.3% — “No, and I’m interested in learning more.” 37.6% — “Yes.” 23.2% — “No, I’m not interested in the topic.”\" src=\"https://cdn-images-1.medium.com/max/1024/0*n0cpV0PkueLSiSYx\" /></figure><p>The wide interest in building games with Flutter is also reflected in the fact that many Flutter users are no strangers to game development in general. Out of 936 respondents, 500+ had experience with Unity, 130+ with Unreal, 120+ with <a href=\"https://docs.flame-engine.org/1.0.0/#\">Flame</a>, and 80+ with Godot. It’s encouraging to see that many developers are already equipped with game development skills.</p><h4>Many Flutter game developers are just getting started</h4><p>We then asked those who were either aware of or interested in Flutter’s ability to build games to tell us where they’re at in their game development process. Within this group, 43.2% hadn’t started a concrete game project yet, suggesting the need for getting-started support.</p><figure><img alt=\"Summarized responses to the question: “which of the following statements best describe your experience using Flutter to build games?”\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZrpkIfhAQ0MW1RYp\" /></figure><h4>There are more Flutter games out there than we thought</h4><p>We asked respondents to point us to any games they have built with Flutter. To our pleasant surprise, we received 148 responses. Many of those games were 2D puzzles or <a href=\"https://www.google.com/search?q=platformers+definition&amp;oq=platform&amp;aqs=chrome.0.69i59j46i67i433j69i64l3j69i65j69i60j69i61.2458j0j7&amp;sourceid=chrome&amp;ie=UTF-8\">platform games</a>, while a handful of them had attempted pseudo-3D effects using Flutter.</p><p>It seems to be entirely possible to build highly successful mobile games with Flutter. For example, <a href=\"https://play.google.com/store/apps/details?id=com.he2apps.kelimelik&amp;hl=en_US&amp;gl=US\">Kelimelik</a>, a Flutter game we learned about through this survey, had 4.5 stars on Google Play with more than 356,000 reviews and 5,000,000 installs at the time of writing!</p><figure><img alt=\"The kelimelik game’s listing on the Google Play store.\" src=\"https://cdn-images-1.medium.com/max/1024/1*gq-r9Mn1BzgKL8XYLnFsEQ.png\" /></figure><h4>Flutter users want more documentation for game development</h4><p>When we asked respondents what had blocked them from making progress in their game projects, we received 31 responses. Many of them are related to lack of documentation:</p><ul><li>“not enough tutorial and I didn’t understand it enough”</li><li>“not enough resources/tutorials/documentation (flutter flame)”</li><li>“The documentation is not very friendly to beginner game devs. There is still much that can be done to create a very clean introduction to Flame components with common scenarios in tutorials or and case study walk-throughs to get the started.”</li></ul><p>This feedback echoes what we learned from the interview study. Survey respondents also mentioned issues such as lacking 3D support, difficulty working with shaders, and performance problems with specific hardware, and visual effects (such as shadows).</p><h3>Recommendations</h3><p>Our research results have shown the potential of developing 2D casual games on Flutter. Some Flutter users have tried and succeeded in shipping top-rated games, and many more are interested in getting started in the coming months.</p><p>To set up those new game developers for success, it’s crucial that we position Flutter appropriately in relation to other game development tools on the market, and leverage the open and participatory nature of Flutter to mature its support for game development.</p><p>With that, we’d like to make a few recommendations directed not only to the Flutter team at Google, but also to package authors, tool builders, and content creators from Flutter’s community at large.</p><h3>Market positioning</h3><p>The research results suggest three dimensions we need to consider when we position Flutter in the market of game development tools:</p><p><strong>Types of games</strong>:</p><ul><li>Targeting 2D casual games is a good starting point.</li><li>Puzzles and platform games are successful sub-genres of games that have been developed in Flutter.</li></ul><p><strong>Types of developers</strong>:</p><ul><li>Flutter app developers who want to leverage the casual game development capabilities of Flutter (such as P02, P04, and P05).</li><li>Computational artists and graphics enthusiasts (such as P01 and P03), who are attracted by the high degree of control and openness offered by Flutter.</li></ul><p><strong>Types of game development teams</strong>:</p><ul><li>We can focus on indie game developers and hybrid game/app agencies that have fewer specialized roles and can benefit more from Flutter’s cross-platform capabilities.</li></ul><h4>Documentation and learning resources</h4><p>Based on the user input from the interview study, we believe the creators and educators in the Flutter community can make the most impact by focusing on creating open-source sample games, how-to videos, and curated resource lists for game development. The Flutter Casual Game Toolkit we released at I/O is our first attempt at organizing resources along these lines and raising their visibility among Flutter users.</p><h4>Potential investment in Flutter APIs and capabilities</h4><p>During the study, participants pointed out several major product features that they hope the Flutter SDK can better support in the future:</p><ul><li>Usability and support for shaders (<a href=\"https://github.com/flutter/flutter/issues/93800\">GitHub issue</a>). Alternatively, it might be enough if library maintainers (for example, Flame) directly use the shader APIs (for example, P03 wants a higher level abstraction in a game engine).</li><li>Web app bundle size. One participant called out problems with expanding the game to web-based gaming platforms (such as Facebook Instant Game). Because web bundle size is too large, they eventually chose the HTML rendering backend over the faster but larger Canvas Kit backend. (P05)</li><li>Windows / Steam support. Multiple participants expressed strong interest in trying out the new Windows support for their game. One mentioned that Windows is the most important platform to support, especially if you plan on releasing your game on Steam. (P03) However, this scenario remains ambiguous given that no participants nor our team members have tested game development on Windows or integration with Steam.</li></ul><p>In addition to these three areas of improvements, we’ve recently started collaborating with community members to triage game-related issues and label them as <a href=\"https://github.com/flutter/flutter/labels/a%3A%20gamedev\">a: gamedev</a>.</p><h3>Conclusions</h3><p>What we learned from this pair of studies, including Flutter users’ wide interest in game development and Flutter’s simplicity and high degree of control appreciated by existing Flutter game developers, gave the team confidence in pursuing game development as a viable use case. The Casual Game Toolkit is our first investment in this space, and we look forward to hearing how our community members take advantage of it in our follow-up research.</p><h3>Acknowledgement</h3><p><a href=\"https://medium.com/@zoeyfan_43394\">Zoey Fan</a>, <a href=\"https://twitter.com/chrisfujino\">Christopher Fujino</a>, and <a href=\"https://medium.com/@jayoung.lee\">JaYoung Lee</a> contributed to this research, and <a href=\"https://medium.com/@shaza\">Shams Zakhour</a> edited this article. We’d like to thank our users who participated in this research and the Flame team for their support in participant recruiting.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f95fb3406d51\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/perspectives-from-early-adopters-of-flutter-as-a-game-development-tool-f95fb3406d51\">Perspectives from early adopters of Flutter as a game development tool</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-05-26T16:52:35.000Z":{"title":"Put Flutter to Work","link":"https://medium.com/flutter/put-flutter-to-work-95f5fdcc592e?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/95f5fdcc592e","category":["android-app-development","dart","ios-app-development","web-development","flutter"],"dc:creator":"Very Good Ventures Team","pubDate":"Thu, 26 May 2022 16:52:35 GMT","atom:updated":"2022-05-26T16:52:35.812Z","content:encoded":"<h4>Connect a Flutter feature to a native app and get up and running in just a few lines of code</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7pcNynupdvylRqlRdi6rPQ.png\" /></figure><p>If you’ve ever wanted to try using Flutter, but don’t want to build something from scratch, Flutter’s <a href=\"https://docs.flutter.dev/development/add-to-app\">add-to-app functionality</a> is a great place to start. To make it even easier to put Flutter to work for you, we teamed up with the Flutter team to create a sample add-to-app prototype to showcase how Flutter can be integrated into a native codebase with minimal effort. Whether you want to take Flutter for a trial run or show your team how Flutter works in a tangible way, this article is for you!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/339/1*gJk1B6Jqynp6QGXirf8VBQ.gif\" /></figure><h3>Adding Flutter to a native newsfeed app</h3><p>In this tutorial, we’ll show you how to take a Flutter feature and, using Flutter’s add-to-app API, incorporate it into a native app in just a few lines.</p><p>The project we’ll look at is split into two parts. The first part contains three identical newsfeed applications for three separate native platforms: Android, iOS, and the web. The app is interactive, so you can run it on a device and scroll through the articles, click on the news items, and more. The second part of this project is a dialog that pops up when interacting with the app and asks users to submit feedback. This feature, which we’ll call the NPS (Net Promoter Score) module, is built with Flutter.</p><p>First, go to the <a href=\"https://github.com/flutter/put-flutter-to-work\">example repository</a>. Here you’ll see a folder for each platform containing the native code for the newsfeed app. Also in the repository is the flutter_nps folder that contains all of the Flutter code for the NPS module.</p><h3>Adding Flutter on the web with Angular</h3><p>The Flutter module runs as an &lt;iframe&gt; within the native web app. To integrate the feature into the Angular codebase, first run a Flutter build for the web target. This step generates an index.html and other necessary files. Copy all of the build files into the Angular app src folder. From there, you can reference the build files within the iframe. The next time you run the web app, you’ll see the Flutter feature!</p><p><a href=\"https://github.com/flutter/put-flutter-to-work#web\"><strong>View the README for full instructions</strong></a><strong>.</strong></p><h3>Adding Flutter to Android with Kotlin</h3><p>Now let’s add the NPS module into the Android app. First start a <a href=\"https://docs.flutter.dev/development/add-to-app/android/add-flutter-screen#step-3-optional-use-a-cached-flutterengine\">Flutter activity using a cached engine</a>. As soon as you launch the native news app, the Flutter engine warms up in the background. Then, you’ll start a new activity and point it to the Flutter activity. This ensures a quick transition from the native Kotlin code to Flutter and allow the Flutter feature to work seamlessly within the Android app.</p><p><a href=\"https://github.com/flutter/put-flutter-to-work#android\"><strong>View the README for full instructions</strong></a><strong>.</strong></p><h3>Adding Flutter on iOS with SwiftUI</h3><p>Finally, we can add the NPS Module into the iOS App. First, embed the compiled Flutter module into your application in Xcode’s build settings. Then, in your application delegate, create an instance of the Flutter engine and start it up. With that done, you’re ready to display Flutter UI wherever needed — just create a FlutterViewController using the Flutter Engine and present it. Then run flutter build ios-framework with the path.</p><p><a href=\"https://github.com/flutter/put-flutter-to-work#ios\"><strong>View the README for full instructions</strong></a><strong>.</strong></p><h3>Put Flutter to work for you (and your team!)</h3><p>Now that you have the Flutter code up and running within your app, you can experiment with some of the fun parts of Flutter. The following sections include some ideas for where to begin.</p><h3>Supporting multiple platforms</h3><p>In this newsfeed example, you can see how the NPS module supports platform differences. On the web, the module appears as a dialog on top of the newsfeed and reacts to input from a mouse or screen reader. On mobile, the module takes up the full screen space and reacts to input via touch or screen reader.</p><p>Note that the Flutter NPS module contains Material widgets, which automatically handle gesture detection, depending on the user’s device. If using a desktop device, the app receives mouse input, and if using a mobile device, the app receives touch input.</p><h3>Animations</h3><p>This prototype includes a few <a href=\"https://docs.flutter.dev/development/ui/animations/implicit-animations\">implicit animations</a> that are easy to adjust since they are built into the Flutter framework. For example, if you want to make changes to the AnimatedContainer widget, simply adjust its properties, such as the duration of the animation, the height of the container, its shape, and color.</p><pre>...<br>return AnimatedContainer(<br>  duration: duration,<br>  height: Spacing.huge,<br>  decoration: BoxDecoration(<br>    shape: BoxShape.circle,<br>    color: isSelected <br>      ? NpsColors.colorSecondary <br>      : NpsColors.colorGrey5,<br>  ),<br>...<br>)</pre><p>The NPS module includes a custom page animation transition. Take a look at the SlideTransition widget for another animation example that could be customized by updating its duration and other elements.</p><pre>SlideTransition(<br>  position: Tween&lt;Offset&gt;(<br>    begin: const Offset(0, 1),<br>    end: Offset.zero,<br>  ).animate(animation),<br>  child: child,<br>);</pre><p>If you want to take your animations to the next level, you could import the <a href=\"https://pub.dev/packages/animations\">animations</a> package from pub.dev and use some of the fancy, pre-built animations.</p><h3>Theming</h3><p>It’s also simple to update the theme of the NPS module. Because it uses the built-in Material theming via <a href=\"https://api.flutter.dev/flutter/material/ThemeData-class.html\">ThemeData</a>, you can simply update the colors, button style, and font all in one place. For example, to change the accentColor and backgroundColor of the NPS module with Flutter, update to your desired color using the provided <a href=\"https://api.flutter.dev/flutter/material/Colors-class.html\">Material color palette shades</a>, or your desired custom colors.</p><pre>class AppTheme {<br>  ThemeData get theme =&gt; ThemeData(<br>        colorScheme: ColorScheme.fromSwatch(<br>          accentColor: NpsColors.colorSecondary,<br>          backgroundColor: NpsColors.colorWhite,<br>        ),<br>        scaffoldBackgroundColor: NpsColors.colorWhite,<br>        elevatedButtonTheme: ElevatedButtonThemeData(<br>          style: ElevatedButton.styleFrom(<br>            primary: NpsColors.colorSecondary,<br>            shape: RoundedRectangleBorder(<br>              borderRadius: BorderRadius.circular(24),<br>            ),<br>          ).copyWith(<br>            backgroundColor: MaterialStateProperty.resolveWith&lt;Color?&gt;(<br>              (Set&lt;MaterialState&gt; states) {<br>                if (!states.contains(MaterialState.disabled)) {<br>                  return NpsColors.colorSecondary;<br>                } else if (states.contains(MaterialState.disabled)) {<br>                  return NpsColors.colorWhite;<br>                }<br>                return null;<br>              },<br>            ),<br>          ),<br>        ),<br>        textTheme: const TextTheme(<br>          headline5: NpsStyles.headline5,<br>          subtitle1: NpsStyles.subtitle1,<br>          bodyText2: NpsStyles.link,<br>        ),<br>      );</pre><h3>Additional features</h3><p>The Flutter NPS module uses <a href=\"https://pub.dev/packages/flutter_bloc\">flutter_bloc</a> for state management to keep track of the user’s score response. Cubit is one of <a href=\"https://docs.flutter.dev/development/data-and-backend/state-mgmt/options\">many options for state management </a>when building Flutter applications. The feature also includes <a href=\"https://docs.flutter.dev/testing\">unit and widget tests</a>, which are useful tools to ensure that the code you’re writing is working as intended. Finally, the codebase has <a href=\"https://docs.flutter.dev/development/accessibility-and-localization/internationalization\">localization</a> support for 78 languages out of the box. This project has <a href=\"https://github.com/VGVentures/take-flutter-home/tree/main/.github/workflows\">GitHub Actions integration for continuous integration</a> to run formatting, linting, and test phases before merging changes.</p><h3>Backend</h3><p>While this prototype does not currently interact with a backend, you could configure it with a backend of your choosing to store the data from the NPS module, or even pull in sample articles for the native newsfeed. One option to explore is Firebase, which integrates seamlessly with Flutter. <a href=\"https://firebase.google.com/docs/flutter/setup?platform=ios\">See the Firebase documentation to add Firebase to your Flutter app</a>.</p><p>Now that you know how to add a Flutter feature into a native web, Android, and iOS codebase, you could follow a similar process to integrate the feature into any native app. See the full <a href=\"https://docs.flutter.dev/development/add-to-app\">add-to-app documentation</a> for more information.</p><h3>Check out the full code in the <a href=\"https://github.com/flutter/put-flutter-to-work\">open source repository here</a>.</h3><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=95f5fdcc592e\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/put-flutter-to-work-95f5fdcc592e\">Put Flutter to Work</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-08-30T19:56:54.000Z":{"title":"Announcing Flutter 3.3 at Flutter Vikings","link":"https://medium.com/flutter/announcing-flutter-3-3-at-flutter-vikings-6f213e068793?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6f213e068793","category":["flutter","apps","graphics","announcements","ui-design"],"dc:creator":"Tim Sneath","pubDate":"Tue, 30 Aug 2022 19:56:54 GMT","atom:updated":"2022-08-30T19:56:54.799Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Flutter 3.3, a beautiful new app, work on improving performance, and a note of farewell</h4><p>Greetings from the beautiful Norwegian capital of Oslo, where members of the Flutter community are gathering for the <a href=\"https://fluttervikings.com/\">Flutter Vikings conference</a>. Flutter Vikings is a two day community-driven developer event with three tracks of content from experts who have traveled from across the world. Over five thousand developers have registered so far, and while the in-person event is sold out, you can <a href=\"https://www.youtube.com/playlist?list=PL4dBIh1xps-EWXK28Qn9kiLK9-eXyqKLX\">watch all the sessions online for free</a>.</p><p>Flutter continues to grow, both in usage and in the size of the ecosystem. <strong>Every day, more than 1,000 new mobile apps using Flutter are published </strong>to the Apple and Google Play stores, along with more usage on web and desktop. And the Flutter package ecosystem <a href=\"https://pub.dev/packages?q=sdk%3Aflutter\">now comprises over 25,000 packages</a>, providing further evidence of maturity and breadth.</p><figure><img alt=\"The Dash mascot and her friends celebrating the launch of Flutter 3.3.\" src=\"https://cdn-images-1.medium.com/max/1024/0*bDz2chibrm3B6QZE\" /></figure><p><strong>Today we’re announcing Flutter 3.3. </strong>This release is focused on refinements and performance improvements that reinforce the features shipped in Flutter 3. It expands support for the evolving Material 3 specification with several new components and a number of bug fixes, and it includes new features aimed at tablet and desktop developers including Scribble handwriting support on iPad, selectable text grouping, and trackpad support. This release also includes Dart 2.18, which introduces FFI support for libraries and code written in Swift or Objective-C. Apps that are built against this release will experience improved performance across desktop, web, and mobile, so we encourage you to run flutter upgrade to get the latest on all your developer workstations!</p><p>For more on all the new features and improvements, check out the detailed <a href=\"https://medium.com/flutter/whats-new-in-flutter-3-3-893c7b9af1ff\">Flutter 3.3 release notes</a> and the <a href=\"https://medium.com/dartlang/dart-2-18-f4b3101f146c\">Dart 2.18 announcement blog post</a>.</p><h3>Wonderous: a new reference app</h3><p>In partnership with the design team at <a href=\"https://gskinner.com/\">gskinner</a>, <strong>today we’re launching Wonderous</strong>, an app built to showcase Flutter’s capacity to deliver high-end, beautiful experiences without caveats. Even as it shows off the power of Flutter, we built Wonderous together to be a beautiful app in its own right. From the stunning Taj Mahal in the Indian city of Agra to the Mayan ruins of Chichén Itzá on the Yucatán peninsula of Mexico, Wonderous brings some of the most remarkable places in the world to your phone, using video and imagery to explore the intersection of art, history, and culture.</p><figure><a href=\"https://wonderous.app\"><img alt=\"Navigate to the intersection of history, art, and culture. The Wonderous app has been designed to support various accessibility aids.\" src=\"https://cdn-images-1.medium.com/max/1024/0*La9LUctqdub-CvsS\" /></a></figure><p>Wonderous is an app we hope you’ll share with your family and friends, but is also an open source project that you can explore as a developer. As a real-world app, it provides a comprehensive example of a wide variety of visual techniques and best practices that we think will inspire intermediate to advanced developers. Over the coming weeks, the gskinner.com team will be sharing more detailed technical articles on the making of the app, including its support for accessibility, animation techniques that are generalizable, and tips and tricks for performance.</p><p>For more about our motivations for building Wonderous and links to its associated website, the Android and iPhone apps, and the source code, check out the <a href=\"https://medium.com/flutter/wonderous-explore-the-world-with-flutter-f43cce052e1\">separate article</a> here on the Flutter blog.</p><h3>Impeller: our new graphics engine</h3><p>Aside from the improvements in 3.3 itself, the team has been hard at work on <a href=\"https://github.com/flutter/engine/tree/main/impeller\"><strong>Impeller</strong></a><strong>, our next-generation rendering layer</strong>.</p><p>Impeller is a significant rewrite of a core part of the Flutter engine, replacing the previous Skia code with a custom runtime that takes full advantage of modern hardware-accelerated graphics APIs such as <a href=\"https://developer.apple.com/metal/\">Metal</a> on iOS and <a href=\"https://developer.android.com/ndk/guides/graphics\">Vulkan</a> on Android. It delivers silky-smooth animations, considerably raising the bar for what applications can expect from a multiplatform UI toolkit. The difference is visceral, and apps that use Impeller can expect to be able to push boundaries further than before while staying locked to 60Hz or faster refresh rates. Most notably, Impeller totally eradicates the need for runtime shader compilation, which is a common source of frame rate ‘jank’ for apps today.</p><p>While it is not feature complete and we are still optimizing performance, we are now testing it internally on Google-class applications. And if you download <a href=\"https://apps.apple.com/us/app/wonderous/id1612491897\">Wonderous for iPhone</a> from the Apple App Store, you’ll see Impeller in action on a production-quality app.</p><p><strong>We’re thrilled to now make Impeller available as an early adopter preview on iOS.</strong> Impeller doesn’t require changes to your code, other than <a href=\"https://github.com/flutter/flutter/wiki/Impeller\">enabling a flag</a>. More information on the architecture of Impeller and how to enable it <a href=\"https://github.com/flutter/flutter/wiki/Impeller\">can be found on our wiki</a>. While it’s under active development, early adopters of Impeller should switch to the master channel of Flutter to ensure you’re working with the latest code.</p><p>We look forward to seeing apps and demos that take advantage of the performance and quality improvements in Impeller. We’d also appreciate <a href=\"https://github.com/flutter/flutter/issues/new?assignees=&amp;labels=created+via+performance+template&amp;labels=impeller&amp;template=4_performance_others.md&amp;title=[Impeller]\">reproducible issue reports</a> that demonstrate performance or fidelity regressions in current builds.</p><h3>Goodbye to Eric</h3><p>We close with an affectionate farewell to <a href=\"https://twitter.com/_eseidel?lang=en\">Eric Seidel</a>, one of the co-founders of Flutter who is leaving Google this month for new adventures. Eric was the very first person to introduce Flutter to the world, before it had a name or a mascot, at the <a href=\"https://www.youtube.com/watch?v=PnIWl33YMwA\">Dart Developer Summit back in 2015</a>; he has managed the Flutter engineering team for most of its existence, and quite simply, without Eric there would be no Flutter as we know it.</p><p>But Eric has an entrepreneur’s heart, and his “superpower” (to use one of his favorite words) is as a creator and initiator. So it didn’t come as a huge surprise when he shared his plan to start something new. And so we send him our encouragement and appreciation as he flies the nest and begins his next adventure.</p><p>It’s fitting to close this post with an extract from the <a href=\"https://developers.google.com/events/flutter-live\">Flutter 1.0 launch event</a>, in which Eric shares our vision for Flutter: <strong>a long-term bet that we can radically improve the experience of building beautiful user experiences</strong>. This <em>remains </em>our vision, and we’re not done. With millions of developers from around the world relying on it, an ecosystem of thousands of contributors to the project, and a team here at Google that is flourishing and growing, we hope you’ll continue to join us on our journey!</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F5SZZfpkVhwk%3Fstart%3D403&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D5SZZfpkVhwk&amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2F5SZZfpkVhwk%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/4a902e30c8f3f4bb1284c251c0c2ad4d/href\">https://medium.com/media/4a902e30c8f3f4bb1284c251c0c2ad4d/href</a></iframe><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6f213e068793\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-3-3-at-flutter-vikings-6f213e068793\">Announcing Flutter 3.3 at Flutter Vikings</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-08-30T19:56:09.000Z":{"title":"Wonderous: Explore the World with Flutter","link":"https://medium.com/flutter/wonderous-explore-the-world-with-flutter-f43cce052e1?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f43cce052e1","category":["ui-design","ios","announcements","flutter","android"],"dc:creator":"Leigha Jarett","pubDate":"Tue, 30 Aug 2022 19:56:09 GMT","atom:updated":"2022-09-20T03:09:49.899Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>A reference app that shows how to develop tailored UI using Flutter</h4><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F6Hb3QiH_yps%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D6Hb3QiH_yps&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F6Hb3QiH_yps%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f4ed0a69aa842feea138cbfd18abfc06/href\">https://medium.com/media/f4ed0a69aa842feea138cbfd18abfc06/href</a></iframe><p>Our vision for Flutter is to provide a blank canvas for you to design and paint beautiful apps without limitation. Recently, we teamed up with the amazing group at gskinner to make this vision a reality, by creating a new mobile app, <a href=\"http://wonderous.app\">Wonderous</a>. Wonderous uses Flutter to create a highly expressive user interface, tailored to the mobile form factor, and doesn’t conform to a stock design system. Instead, Wonderous realizes the creative vision of its designer.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Tb-JXZnxo2pu232C4c2KqQ.png\" /><figcaption>Screenshots from the Wonderous App</figcaption></figure><h4>When developing Wonderous, we had a few goals in mind:</h4><ol><li><strong>Create an interesting and useful app. </strong>Wonderous isn’t just a demonstration, it’s a fully functional app that allows users to navigate the intersection of history, art, and culture by exploring the Wonders of the World. At a time when travel is difficult for many, Wonderous leverages stunning illustrations and amplified animations to bring the wonder of these sites to life directly on your device.</li><li><strong>Showcase high-quality UX. </strong>We wanted Wonderous to be comparable in quality to any app in the system framework. Wonderous captures the audience with its tailored, imaginative design, while using familiar gestures and behaviors to ensure a seamless user experience.</li><li><strong>Create an app for testing and benchmarking. </strong>We’re already using Wonderous to test Impeller, the new rendering engine that is now available in preview on iOS. We’ve been pleased with the results so far, which have helped validate our hypotheses for improved performance. The version of the app available for download from the Apple App Store uses Impeller, and we’re eager to see how it performs on a broader variety of iOS devices in real-world conditions.</li><li><strong>Provide a reference, open-source example app that demonstrates best practices. </strong>The <a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app\">Wonderous code</a> features development best practices for custom design, engaging interactions, and novel animations — all while keeping accessibility top of mind.</li><li><strong>Create a source for learning materials and documentation. </strong>Over the course of the next few weeks, the gskinner team will be launching more content surrounding Wonderous — including details on how the animations were created, how accessibility was incorporated, and best practices for app performance. Stay tuned!</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UhID-wmcu6aSotxCJjGVtQ.png\" /></figure><p>After <a href=\"http://wonderous.app\">downloading Wonderous</a> from the Apple App Store or the Google Play Store there are a few characteristics you might want to explore:</p><ul><li>Transitions that would likely be difficult without Flutter, these are especially noticeable when swiping left to right between Wonders</li><li>Unique scroll patterns as you move through the global timeline.</li><li>Tailored buttons and icons that match the Wonderous design system.</li></ul><p>We’re so excited to share Wonderous with the world, let us know what you think!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f43cce052e1\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/wonderous-explore-the-world-with-flutter-f43cce052e1\">Wonderous: Explore the World with Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-08-30T18:28:14.000Z":{"title":"What’s new in Flutter 3.3","link":"https://medium.com/flutter/whats-new-in-flutter-3-3-893c7b9af1ff?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/893c7b9af1ff","category":["release-notes","flutter-app-development","flutter","releases"],"dc:creator":"Kevin Jamaul Chisholm","pubDate":"Tue, 30 Aug 2022 18:28:14 GMT","atom:updated":"2022-08-31T13:14:18.947Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<p><em>Exciting updates for text handling, performance improvements, and more!</em></p><p>Welcome to <strong>Flutter 3.3</strong>! Only three months ago we announced Flutter 3, a massive milestone that included stable support for all platforms! The good news is that the momentum since this major release has not slowed down. Since the release of Flutter 3, Flutter has merged 5,687 pull requests.</p><p>This release brings updates to Flutter web, desktop, text handling improvements in performance — and much more!</p><p>We are also introducing exciting updates to the go_router package, DevTools, and VS Code extensions. Keep reading to learn more.</p><h3>Framework</h3><h4>Global Selection</h4><p>Until now, Flutter web apps didn’t match the expected behavior when attempting to select text. Like Flutter apps, native web applications are composed of a tree of elements. In a traditional web app, you can select multiple web elements with a single sweeping gesture, something that couldn’t be easily done on a Flutter web app.</p><p>Today that all changes! With the introduction of the SelectableArea widget, any child of the SelectableArea widget has selection enabled for free!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4Mac8uQL3ynXVIuD\" /></figure><p>To take advantage of this powerful new feature, simply wrap your route body (such as the Scaffold) with the SelectionArea widget and let Flutter do the rest.</p><p>For a more comprehensive deep dive into this awesome new feature, please visit the <a href=\"https://api.flutter.dev/flutter/material/SelectionArea-class.html\">SelectableArea API</a> page.</p><h4>Trackpad input</h4><p>Flutter 3.3 provides improved support for trackpad input. This not only provides richer and smoother control, but also reduces misinterpretation in certain cases. For an example of this misinterpretation, check out the <a href=\"https://docs.flutter.dev/cookbook/effects/drag-a-widget\">Drag a UI element</a> page in the <a href=\"https://docs.flutter.dev/cookbook\">Flutter cookbook</a>. Scroll to the bottom of the page to get to the DartPad instance, and perform the following steps:</p><ol><li>Size the window smaller so that the upper part presents a scrollbar</li><li>Hover over the upper part</li><li>Use a trackpad to scroll</li><li>Prior to installing Flutter 3.3, scrolling on a trackpad drags the item because Flutter was dispatching emulated general events</li><li>After installing Flutter 3.3, scrolling on a trackpad correctly scrolls the list because Flutter is delivering the “scrolling” gesture, which isn’t recognized by the cards, but <em>is</em> recognized by the scroll view</li></ol><p>For more information, see the<a href=\"https://docs.google.com/document/d/1oRvebwjpsC3KlxN1gOYnEdxtNpQDYpPtUFAkmTUe-K8/edit?resourcekey=0-pt4_T7uggSTrsq2gWeGsYQ\"> Flutter Trackpad Gesture</a> design doc, and the following PRs on GitHub:</p><ul><li>PR 89944: <a href=\"https://github.com/flutter/flutter/pull/89944\">Support trackpad gestures in framework</a></li><li>PR 31591: <a href=\"https://github.com/flutter/engine/pull/31591\">iPad trackpad gestures</a></li><li>PR 34060: <a href=\"https://github.com/flutter/engine/pull/34060\">Re-land “ChromeOS/Android trackpad gestures”</a></li><li>PR 31594: <a href=\"https://github.com/flutter/engine/pull/31594\">Win32 trackpad gestures</a></li><li>PR 31592: <a href=\"https://github.com/flutter/engine/pull/31592\">Linux trackpad gestures</a></li><li>PR 31593: <a href=\"https://github.com/flutter/engine/pull/31593\">Mac trackpad gesturesmacOS</a></li></ul><h4>Scribble</h4><p>Thanks to the amazing contributions of community member <a href=\"https://github.com/fbcouch\">fbcouch</a>, Flutter now supports <a href=\"https://support.apple.com/guide/ipad/enter-text-with-scribble-ipad355ab2a7/ipados\">Scribble</a> handwriting input using the Apple Pencil on iPadOS. This feature is enabled by default on CupertinoTextField, TextField, and EditableText. To enable this feature for your end users, simply upgrade to Flutter 3.3.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*SlsnQUfdOTijdsyF\" /></figure><h4>Text input</h4><p>To improve support for rich text editing, this release introduces the ability to receive granular text updates from the platform’s TextInputPlugin. Previously, the TextInputClient only delivered the new editing state with no delta between the old and new, TextEditingDeltas and the DeltaTextInputClient fill this information gap. Having access to these deltas allows you to build an input field with styled ranges that expand and contract as you type. To learn more, check out the <a href=\"https://flutter.github.io/samples/rich_text_editor.html\">Rich Text Editor demo</a>.</p><h3>Material Design 3</h3><p>The Flutter team continues to migrate more Material Design 3 components to Flutter. This release includes updates to <a href=\"https://api.flutter.dev/flutter/material/IconButton-class.html\">IconButton</a>, <a href=\"https://api.flutter.dev/flutter/material/Chip-class.html\">Chips</a>, and large and medium variants for <a href=\"https://api.flutter.dev/flutter/material/AppBar-class.html\">AppBar</a>.</p><p>To monitor the progress on the Material Design 3 migration, check out <a href=\"https://github.com/flutter/flutter/issues/91605\">Bring Material 3 to Flutter</a> on GitHub.</p><h4>IconButton</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*AxLlKvPfaiODtzch\" /></figure><h4>Chip</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5fCsX84PRpjMtzx5\" /></figure><h4>Medium and large AppBar</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/522/0*jVFZWFsCOuzeqzTb\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/522/0*c4wovLXB8TpulHVU\" /></figure><h3>Desktop</h3><h4>Windows</h4><p>Previously, the Windows desktop application’s version was set by a file specific to the Windows application. This behavior was inconsistent with the way other platforms set their versions.</p><p>Windows desktop application versions can now be set from your projects pubspec.yaml file and build arguments. This makes it easier to enable auto updates for your end customers to get the latest and greatest when an application update is pushed.</p><p>For more information on setting your applications version, follow the documentation on <a href=\"https://docs.flutter.dev/deployment/windows#updating-the-apps-version-number\">docs.flutter.dev</a> and the <a href=\"https://docs.flutter.dev/development/platform-integration/windows/version-migration\">migration guide</a>. Projects created before Flutter 3.3 need to be updated to get this feature.</p><h3>Packages</h3><h4>go_router</h4><p>When designing apps with complex navigation needs, things can get pretty hard to wrap your head around. To extend Flutter’s native navigation API, the team has published a new version of the go_router package, making it simpler to design routing logic that works across mobile, desktop, and the web.</p><p>The <a href=\"https://pub.dev/packages/go_router\">go router</a> package, maintained by the Flutter team, simplifies routing by providing a declarative, url-based API, making it easier to navigate and handle deep-links. The latest version (4.3) enables apps to redirect using asynchronous code, and includes other breaking changes described in the <a href=\"https://docs.google.com/document/d/10l22o4ml4Ss83UyzqUC8_xYOv_QjZEi80lJDNE4q7wM/edit?usp=sharing&amp;resourcekey=0-U-BXBQzNfkk4v241Ow-vZg\">migration guide</a>.</p><p>For more information, check out the <a href=\"https://docs.flutter.dev/development/ui/navigation\">Navigation and routing</a> page on docs.flutter.dev.</p><h3>VS Code extension enhancements</h3><p>The Visual Studio Code extension for Flutter has several updates including improvements for adding dependencies. You can now add multiple, comma-separated dependencies in one step using <strong>Dart: Add Dependency</strong>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/688/0*vFIZ4WL4UWSTrC27\" /></figure><p>You can read about the Visual Studio Code extension enhancements made since the last Flutter stable release at:</p><ul><li><a href=\"https://groups.google.com/g/flutter-announce/c/u1iSDMtKMVg\">VS Code extensions v3.46</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/x4m9o93-Dng\">VS Code extensions v3.44</a></li><li><a href=\"https://groups.google.com/g/flutter-announce/c/45Wsk5pISx4\">VS Code extensions v3.42</a></li></ul><h3>Flutter DevTools updates</h3><p>DevTools comes with a number of updates since the last stable Flutter release, including UX and performance improvements to data display tables for faster, less jittery scrolling of large lists of events (<a href=\"https://github.com/flutter/devtools/pull/4175\">#4175</a>).</p><p>For the complete list of updates since Flutter 3.0, check out the individual announcements here:</p><ul><li><a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.16.0\">Flutter DevTools 2.16.0 release notes</a></li><li><a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.15.0\">Flutter DevTools 2.15.0 release notes</a></li><li><a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.14.0\">Flutter DevTools 2.14.0 release notes</a></li></ul><h3>Performance</h3><h4>Raster cache improvements</h4><p>This release increases the performance of loading images from assets by eliminating copies and reducing Dart garbage collection (GC) pressure. Previously, when loading asset images, the ImageProvider API required the compressed data to be copied multiple times. First, it was copied into the native heap when opening the asset and exposing it to Dart as a typed data array. Then, it was copied a second time when that typed data array was copied to the internal storage of a ui.ImmutableBuffer.</p><p>With <a href=\"https://github.com/flutter/engine/pull/32999\">the addition</a> of ui.ImmutableBuffer.fromAsset, compressed image bytes can be loaded directly into the structure used for decoding. This approach <a href=\"https://github.com/flutter/flutter/pull/103496\">requires changes</a> to the byte loading pipeline of ImageProviders. This process is also faster, because it bypasses some additional scheduling overhead required bythe previous method channel-based loader. In particular, image loading time improved by nearly 2x in our microbenchmarks.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*dZTaQMQri0EI7HCw\" /></figure><p>For more information and a migration guide, see <a href=\"https://docs.flutter.dev/release/breaking-changes/image-provider-load-buffer\">Adding ImageProvider.loadBuffer</a> on docs.flutter.dev.</p><h3>Stability</h3><h4>iOS pointer compression disabled</h4><p>In the 2.10 stable release, we enabled Dart’s <a href=\"https://medium.com/dartlang/dart-2-15-7e7a598e508a#0c15\">pointer compression optimization</a> on iOS. However, <a href=\"https://github.com/Yeatse\">Yeatse</a>, on GitHub, <a href=\"https://github.com/flutter/flutter/issues/105183\">alerted us</a> to an unintended consequence of the optimization. Dart’s pointer compression works by reserving a large virtual memory region for Dart’s heap. Since the total virtual memory allocation allowed on iOS is less than on other platforms, this large reservation reduces the amount of memory available for use by other components that reserve their own memory, for example, Flutter plugins.</p><p>While disabling pointer compression increases the memory consumed by Dart objects, it also increases the memory <em>available</em> for non-Dart parts of a Flutter application, which is more desirable overall.</p><p>Apple provides an entitlement that can increase the maximum allowed virtual memory allocation for an application, however this entitlement is only supported on newer iOS versions, and wouldn’t work on devices running versions of iOS that Flutter still supports. When we are able to use this entitlement everywhere, we intend to revisit this optimization.</p><h3>API improvements</h3><h4>PlatformDispatcher.onError</h4><p>In previous releases, you had to manually configure a custom Zone in order to catch all of an application’s exceptions and errors. However, custom Zones were detrimental to a number of optimizations in Dart’s core libraries, which slowed down application start-up time. <strong>In this release, instead of using a custom </strong><strong>Zone, you should catch all errors and exceptions by setting the </strong><strong>PlatformDispatcher.onError callback.</strong> For more information, check out the updated <a href=\"https://docs.flutter.dev/testing/errors\">Handling errors in Flutter</a> page on docs.flutter.dev.</p><h4>FragmentProgram changes</h4><p>Fragment shaders written in GLSL and listed under a shaders: section in the Flutter manifest of an application’s pubspec.yaml file will now be automatically compiled to the correct format understood by the Engine and bundled with the application as an asset. Thanks to this change, you will no longer have to manually compile shaders using third-party tools. Going forward, you should regard the Engine’s FragmentProgram API as accepting only the output of Flutter’s build tooling. This isn’t yet the case, but this change is planned for a future release, as described in the <a href=\"http://flutter.dev/go/fragment-program-support\">FragmentProgram API Support improvements</a> design doc.</p><p>For an example of this change, see this <a href=\"https://github.com/zanderso/fragment_shader_example\">Flutter shader example</a>.</p><h4>Fractional translation</h4><p>Previously, the Flutter Engine would always align composited layers to exact pixel boundaries because it improved rendering performance on older (32-bit) model iPhones. Since adding desktop support, we’ve noticed that this led to observable snapping behavior, since screen device pixel ratios are commonly much lower. For example, on low DPR screens, tooltips could be seen visibly snapping when fading in. After determining that this pixel snapping was no longer necessary for performance on newer iPhone models, <a href=\"https://github.com/flutter/flutter/issues/103909\">we’ve removed this pixel snapping</a> from the Flutter Engine to improve desktop fidelity. Additionally, we also found that removing this pixel snapping stabilized a number of our golden image tests, which would frequently change with small hairline rendering differences.</p><h3>Changes to supported platforms</h3><h4>32-bit iOS deprecation</h4><p>As we announced earlier with the 3.0 stable release, due to decreased usage, that release was the <a href=\"http://flutter.dev/go/rfc-32-bit-ios-unsupported\">last one to support 32-bit iOS devices and iOS versions 9 and 10</a>. This change affects the iPhone 4S, iPhone 5, iPhone 5C, and the 2nd, 3d, and 4th generation iPad devices. The 3.3 stable version of Flutter and all following stable releases no longer support 32-bit iOS devices and iOS versions 9 and 10. This means that apps built against Flutter 3.3 and later won’t run on those devices.</p><h4>Sunsetting macOS 10.11 and 10.12</h4><p>In the Q4 2022 stable release, we expect to drop support for macOS versions 10.11 and 10.12. This means that apps built against stable Flutter SDKs after that point will no longer work on these versions, and the minimum macOS version supported by Flutter will increase to 10.13 High Sierra.</p><h4>Bitcode deprecation</h4><p>Bitcode <a href=\"https://developer.apple.com/documentation/xcode-release-notes/xcode-14-release-notes\">will no longer be accepted for iOS app submission in the upcoming Xcode 14 release</a>, and projects with bitcode enabled will emit a build warning in this version of Xcode. In light of this, Flutter will drop support for bitcode in a future stable release.</p><p>By default, Flutter apps don’t have bitcode enabled, and we don’t expect this to impact many developers. However, if you have enabled bitcode manually in your Xcode project, disable it as soon as you upgrade to Xcode 14. You can do so by opening ios/Runner.xcworkspace and setting the build setting <strong>Enable Bitcode</strong> to <strong>No</strong>. Add-to-app developers should disable it in the host Xcode project.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4EQPd4ednGIAhMwl\" /></figure><p>See <a href=\"https://help.apple.com/xcode/mac/11.0/index.html?localePath=en.lproj#/devde46df08a\">Apple’s documentation</a> to learn more about bitcode distribution.</p><h3>Summary</h3><p>As we always say, the Flutter team at Google is extremely grateful for the incredible work the community puts in to make Flutter the wonderful experience that it is! We look forward to continuing to iterate on the work that has been done, focusing on what matters most — all of you!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=893c7b9af1ff\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-3-893c7b9af1ff\">What’s new in Flutter 3.3</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-08-03T23:54:36.000Z":{"title":"Firebase Crashlytics and the Flutter Casual Games Toolkit","link":"https://medium.com/flutter/firebase-crashlytics-and-the-flutter-casual-games-toolkit-5d4f952cbe35?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/5d4f952cbe35","category":["flutter","firebase","crashlytics"],"dc:creator":"Rich Hall","pubDate":"Wed, 03 Aug 2022 23:54:36 GMT","atom:updated":"2022-08-03T23:54:36.686Z","content:encoded":"<h4>Learn how to enable Crashlytics in the Flutter Games example to make detecting and fixing issues in your game easier</h4><p>The <a href=\"https://docs.flutter.dev/resources/games-toolkit\">Flutter Casual Games Toolkit</a> (FCGT) is a starter template for developers who want to create a mobile game app. It has already been customized with a main menu, game levels, a settings screen, sound effects, music, and more. In addition to the template app, you can also download a <a href=\"https://github.com/filiph/tictactoe\">TicTacToe app</a> that is based on this template.</p><p>The following screenshots show the out-of-the-box main menu, game level page, and a settings page, in that order:</p><figure><img alt=\"Screenshots of the 3 main screens from the FCGT sample app: Main menu, Select Level &amp; Settings\" src=\"https://cdn-images-1.medium.com/max/1024/1*B5i6MSUhz554dVTR484AuA.png\" /><figcaption>Screenshots of the main FCGT screens</figcaption></figure><p>Included in the FCGT are integrations with some useful services when developing your own game: the Apple Game Center, Google Play Games Services, the Google Mobile Ads SDK, and the In-App purchase package. These more advanced integrations are initially disabled because they require some setup by you, the developer, before you can use them. If you take a look at the game template’s <a href=\"https://github.com/flutter/samples/blob/main/game_template/lib/main.dart\">main.dart</a> file on GitHub and scroll down to the first “TODO”, you’ll see the code for the Ads, Games Services, and In-App Purchases plugins, lying dormant, waiting to be enabled.</p><figure><img alt=\"Screenshot of disabled integration code from main.dart file: AdsController, GamesServices, and InAppPurchases.\" src=\"https://cdn-images-1.medium.com/max/626/1*i2m8A3zAOgMPIA4LstifYg.png\" /><figcaption>Disabled Ads, Games Services, and In-App Purchases code</figcaption></figure><p>Also included in the FCGT is Firebase Crashlytics, which is a powerful crash reporting solution that helps you detect, track, prioritize, and fix issues in real time. The Crashlytics dashboard allows you to visualize issues in your code, see how many users are affected, and figure out which lines of code are causing them.</p><figure><img alt=\"Screenshot of Firebase Crashlytics dashboard showing Crash-free statistics, trends &amp; issues.\" src=\"https://cdn-images-1.medium.com/max/893/1*LcMq0sqB0w-n-3C-Zr3V-w.png\" /><figcaption>Firebase Crashlytics Dashboard</figcaption></figure><p>In its initial state, without Crashlytics enabled, the code in the <strong>crashlytics/crashlytics.dart</strong> file gathers error messages, logs, and stack traces and writes them to the console. This information is only available when testing on local development devices. With Crashlytics enabled, you can receive data from users running your production code on their own devices and view it on the Crashlytics dashboard.</p><p>This article shows you how to enable Firebase Crashlytics in the FCGT, throw some test exceptions, and demonstrate how the exceptions are represented on the Crashlytics dashboard. If you’re interested in using Crashlytics for your Flutter App but don’t want to use the FCGT to develop a game, the information about throwing exceptions and the Crashlytics dashboard applies to any app hosted on Firebase.</p><p>At the top of the <a href=\"https://github.com/flutter/samples/blob/main/game_template/lib/main.dart\">main.dart file</a>, you can see the code for the Crashlytics integration:</p><figure><img alt=\"Disabled Crashlytics code in main.dart file // To enable Firebase Crashlytics, uncomment the following lines and // the import statements at the top of this file. // See the ‘Crashlytics’ section of the main README.md file for details. FirebaseCrashlytics? crashlytics; // if (!kIsWeb &amp;&amp; (Platform.isIOS || Platform.isAndroid)) { // try …\" src=\"https://cdn-images-1.medium.com/max/1024/1*dAgFBIxj5IoU17UZxc_L7Q.png\" /><figcaption>main.dart: disabled Firebase Crashlytics code</figcaption></figure><p>This Crashlytics Firebase code wasn’t included in the original FCGT YouTube tutorial, <a href=\"https://youtu.be/zGgeBNiRy-8?t=696\">Quick start to building a game in Flutter</a> — this code will be explained soon.</p><p>The steps to enable Crashlytics in the FCGT are listed in the <a href=\"https://github.com/flutter/samples/tree/main/game_template#crashlytics\">Crashlytics section of the FCGT </a><a href=\"https://github.com/flutter/samples/tree/main/game_template#crashlytics\">README.md file</a>, but keep reading for a walk through of each step and a demonstration of how things appear in the Crashlytics dashboard.</p><p>To get started, use the following instructions:</p><p>1. Download a copy of the latest version of the game template from the <a href=\"https://github.com/flutter/samples/tree/main/game_template\">Flutter project GitHub page</a>.</p><p>2. Ensure that you have Flutter installed on your computer and that you’re able to run apps on the iOS Simulator or Android Emulator. If you have any questions about how to do this, refer to the <a href=\"https://docs.flutter.dev/get-started/install\">Flutter Get started guide</a> for your target platform.</p><p>3. Open the game template folder in your IDE or terminal and upgrade to the latest version of Flutter:</p><pre>$&gt; flutter upgrade</pre><p>4. Select the device or simulator where you’d like to run the app.</p><p>5. Run the app:</p><pre>$&gt; flutter run</pre><p>If everything goes well, the app launches and you see the home screen:</p><figure><img alt=\"Screenshot of FCGT app main screen\" src=\"https://cdn-images-1.medium.com/max/414/1*6-qalTHst8nv6KOohptX1Q.png\" /><figcaption>Game template home screen</figcaption></figure><p>The FCGT was designed to give developers a quick and comfortable foundation on which to build games. While you have the app running, navigate around and see what it can do. You’ll quickly notice that “game play” in the FCGT isn’t the most exciting (unless you’re a fan of sliders). The shallow structure of the game code is a deliberate design choice to keep things simple for when you start writing your own game.</p><figure><img alt=\"Animated gif of FCGT “game play”. User clicks “play” on main menu, selects “level #1&quot;, drags the slider to complete the level &amp; the “You Won” screen is displayed.\" src=\"https://cdn-images-1.medium.com/max/412/1*JZTY90OF41GsrvE6hFAZ3g.gif\" /><figcaption>FCGT “game play”</figcaption></figure><p>Now that you have the code, go to the <a href=\"https://firebase.google.com/\">Firebase website</a> and set up a free account (if you don’t have one). Then, open the <a href=\"https://console.firebase.google.com/\">Firebase console</a> and click <strong>Add project</strong>. From there, creating a new project is a 3-step process, just follow the on-screen instructions. You will be asked if you would like to enable Google Analytics (GA). It’s recommend that you do enable Google Analytics because, aside from being free, it unlocks some <a href=\"https://firebase.google.com/docs/analytics\">powerful analytics functionality</a>, such as crash-free user data, session breadcrumbs, Velocity alerts, and BigQuery integration.</p><p>If you enabled Google Analytics, install the Google Analytics Flutter plugin by using the following command:</p><pre>$&gt; flutter pub add firebase_analytics</pre><p>To learn more, refer to steps 1 and 2 in the <a href=\"https://firebase.google.com/docs/crashlytics/start-using-analytics?platform=flutter\">Use Google Analytics to get metrics for crash reports</a> guide, but there is no need to follow the additional steps outlined in the guide, as they are covered below.</p><p>Next, install the Firebase CLI. Go to the <a href=\"https://firebase.google.com/docs/cli\">Firebase CLI docs</a>, select your operating system, and follow the instructions. Once you’ve logged in, run the following command in your terminal and it should display a list of Firebase project names:</p><pre>$&gt; flutterfire configure</pre><p>Select the name of the Firebase project you created earlier. Then, select which target platforms your app supports. Currently, the Crashlytics console only supports iOS and Android, so select those two, at most.</p><figure><img alt=\"Result of typing “flutterfire configure” into the terminal. User is prompted to select a Firebase project, choose which platforms to support &amp; then confirm Firebase configuration and gradle build plugins updates and FirebaseOptions file overwrite. Final result is the Firebase app IDs for the selected platforms.\" src=\"https://cdn-images-1.medium.com/max/1024/1*WQJfcFmwYRGKC1GO08om7g.png\" /><figcaption>Output from FlutterFire config command</figcaption></figure><p>The FlutterFire CLI generates all the keys and client IDs needed to connect to Firebase and overwrites them in the src/firebase_options.dart file. If you add more plugins or would like to enable more platforms in the future, simply re-run the flutterfire configure command.</p><p>To enable Crashlytics, go back to the lib/main.dart file and uncomment the Crashlytics code. At the top of the file, there are 3 import statements that also must be uncommented:</p><figure><img alt=\"3 import statements at the top of the main.dart file that need to be uncommented: dart:io, firebase_core.dart &amp; firebase_options.dart.\" src=\"https://cdn-images-1.medium.com/max/1024/1*hizJxGODTTG7ufXYp75Ryw.png\" /><figcaption>Uncommented Crashlytics import statements</figcaption></figure><p>Then, lower down in the same file, uncomment the Crashlytics integration code you looked at before. This code initializes an instance of Crashlytics if one doesn’t already exist, then it checks to ensure the app is running on either Android and iOS. The Crashlytics code won’t execute if the app is running on desktop or the web because the Crashlytics dashboard doesn’t yet support these platforms.</p><figure><img alt=\"Crashlytics code in main.dart file: FirebaseCrashlytics? crashlytics; if (!kIsWeb &amp;&amp; (Platform.isIOS || Platform.isAndroid)) { try { WidgetsFlutterBinding.ensureInitialized(); await Firebase.initializeApp( options: DefaultFirebaseOptions.currentPlatform, ); crashlytics = FirebaseCrashlytics.instance; } catch (e) { debugPrint(“Firebase couldn’t be initialized: $e”); } }\" src=\"https://cdn-images-1.medium.com/max/1024/1*opmQwD9KqK0Nom7JTgdPiQ.png\" /><figcaption>Crashlytics integration code</figcaption></figure><p>After you’ve uncommented the Crashlytics integration code, use the flutter run command to run the app again to make sure that everything still works.</p><p>It’s time to crash your app!</p><p>Actually, you’ll only be raising a few test exceptions but you’ll also learn how to locate them in the Crashlytics dashboard. This is useful because an uncaught exception might not cause your app to crash, but can still cause a poor user experience and, without Crashlytics enabled, they could go unreported. The <a href=\"https://pub.dev/documentation/firebase_crashlytics/latest/firebase_crashlytics/FirebaseCrashlytics/recordFlutterFatalError.html\">Crashlytics Fatal Error APIs</a> used in the crashlytics/crashlytics.dartfile report uncaught exceptions as fatal events so they will appear in the Crashlytics dashboard and can be properly prioritized.</p><figure><img alt=\"Crashlytics Fatal Error API: FlutterError.onError = crashlytics.recordFlutterFatalError;\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZM5_Z6YnyhZitz3OOo00SA.png\" /><figcaption>Crashlytics fatal error API</figcaption></figure><p>To learn more about how this logging is implemented, check out the guide on how to <a href=\"https://firebase.google.com/docs/crashlytics/customize-crash-reports?platform=flutter\">Customize your Firebase Crashlytics Crash Reports</a> and read the comments in the crashlytics.dart file.</p><p>In your text editor or IDE of choice, navigate to the main_menu folder and open the main_menu_screen.dart file. Scroll down until you find the code for the <strong>Settings</strong> button.</p><figure><img alt=\"Code for settings button on main screen of app. ElevatedButton( onPressed: () =&gt; GoRouter.of(context).go(‘/settings’), child: const Text(‘Settings’), ),\" src=\"https://cdn-images-1.medium.com/max/1024/1*tQtclSgIB3HcSFOa6MYAxQ.png\" /><figcaption>Before (original code)</figcaption></figure><p>Make a copy of the ElevatedButton and then, inside the onPressed call-back, instead of calling GoRouter to navigate to the <strong>Settings</strong> page, throw an exception. While you’re there, change the name of the button to something like <strong>Throw Test Exception</strong> as shown below:</p><pre>ElevatedButton(<br>  onPressed: () =&gt; GoRouter.of(context).go(&#39;/settings&#39;),<br>  child: const Text(&#39;Settings&#39;),<br>),<br>_gap,<br>ElevatedButton(<br>  onPressed: () =&gt; throw Exception(),<br>  child: const Text(&quot;Throw Test Exception&quot;),<br>),</pre><p>Next, navigate to the audio folder and open the audio_controller.dart file. Scroll down until you find the _musicOnHandler function. The framework calls this function when the user toggles the music play on the <strong>Settings</strong> screen.</p><figure><img alt=\"Original code for _musicOnHandler() function from audio_controller.dart file.\" src=\"https://cdn-images-1.medium.com/max/1024/1*8MiFLAgG8cCpTtqTeX1v8Q.png\" /><figcaption>Before (original code)</figcaption></figure><p>Inside the else statement, below where the _stopMusic() function is called, use the _log.severe() method to write a message to the console. Any log message with Level.severe or above is sent to Crashlytics, so this message will appear in the Crashlytics console, too. For demonstration purposes, throw another exception here as well:</p><pre>void _musicOnHandler() {<br>  if (_settings!.musicOn.value) {<br>    // Music got turned on.<br>    if (!_settings!.muted.value) {<br>      _resumeMusic();<br>    }<br>  } else {<br>    // Music got turned off.<br>    _stopMusic();<br>    _log.severe(&quot;Someone is messing with the music!&quot;);<br>    throw Exception();<br>  }<br>}</pre><p>Now there are two places in the app where you can click a button and throw an exception. Run your app again and verify that there’s a <strong>Throw Test Exception</strong> button in the Main Menu.</p><figure><img alt=\"Screenshot of FCGT Main Menu with new “Throw Test Exception” button shown below the “Settings” button.\" src=\"https://cdn-images-1.medium.com/max/414/1*DOGxw3bdrfqppiG2ZobhIQ.png\" /><figcaption>Main menu with throw exception button</figcaption></figure><p>Clicking the <strong>Throw Test Exception</strong> button generates a full stack trace as of when the exception was thrown and writes it to the console:</p><figure><img alt=\"Example console output after an exception is thrown with full stack trace. First 3 lines are: EXCEPTION CAUGHT BY GESTURE. The following _Exception was thrown while handling a gesture: Exception When the exception was thrown, this was the stack: …\" src=\"https://cdn-images-1.medium.com/max/1024/1*RD1nSel5cnW4SCXyF6DgdQ.png\" /><figcaption>Console output after an exception was thrown</figcaption></figure><p>If you click <strong>Settings</strong> to open the settings view and then tap the musical note button a couple of times, more exceptions and stack traces will appear in your console. Now that you have Crashlytics enabled, this data is available in the Crashlytics dashboard.</p><p>Open the <a href=\"https://console.firebase.google.com/project/_/crashlytics\">Firebase console</a>, select your project, and then select <strong>Crashlytics</strong> from the menu on the left. Choose the version of the project you are running (Android or iOS) and you should be able to see the Crashlytics dashboard.</p><figure><img alt=\"Screenshot of Firebase Crashlytics dashboard showing Crash-free statistics, trends &amp; issues.\" src=\"https://cdn-images-1.medium.com/max/893/1*LcMq0sqB0w-n-3C-Zr3V-w.png\" /><figcaption>Firebase Crashlytics Dashboard</figcaption></figure><blockquote>If, after a couple of minutes, all you see when you try to access the Crashlytics dashboard, is this guy swishing around at bugs, it’s probably because Crashlytics hasn’t detected any events yet.</blockquote><blockquote>In this case, stop your app from running and then go back to your device or simulator, close the app, and start it again by tapping on the app icon. Now, try throwing some exceptions in the app and check the Crashlytics dashboard again. If you’ve refreshed the Firebase console, restarted your app manually, and you’re still not seeing the test crash after five minutes, <a href=\"https://firebase.google.com/docs/crashlytics/test-implementation#enable-debug-logging\">enable debug logging</a> to see if your app is sending crash reports.</blockquote><figure><img alt=\"Cartoon image of man with butterfly net trying to catch bugs. This is displayed on the Crashlytics site when events haven’t been detected yet.\" src=\"https://cdn-images-1.medium.com/max/414/1*OEZMrFP7te_MknrCaSuDiw.png\" /><figcaption>No events detected by Crashlytics yet</figcaption></figure><p>If you’ve enabled Google Analytics, the crash-free statistics pane will show you the percentage of users who have not experienced a crash during a selected time range.</p><figure><img alt=\"Screenshot of the crash-free statistics pane from the Firebase Crashlytics dashboard\" src=\"https://cdn-images-1.medium.com/max/880/1*4KjDPJFvTyV_8eRVSwug5w.png\" /><figcaption>Crashlytics dashboard crash-free statistics pane</figcaption></figure><p>The <strong>Issues</strong> table of the bottom of the Crashlytics dashboard displays the thrown exceptions.</p><figure><img alt=\"Screenshot of the Issues table at the bottom of the Crashlytics dashboard. There are 2 example issues in the table. 1) Crash Fresh issue audio_controller.dart line 197 AudioController._musicOnHandler 2) Crash Fresh issue dart:async _BroadcastStreamController.add\" src=\"https://cdn-images-1.medium.com/max/971/1*Tm7AYGZ0eWWjoCBdK0g1Nw.png\" /><figcaption>Crashlytics dashboard issues table</figcaption></figure><p>Clicking on a particular issue in the table shows a card for every time the issue has occurred, along with more detailed information about the issue. By default, the stack trace is shown, which allows you to identify where in your code the crash happened. As you can see in the screenshot below, the exception was thrown from the _musicOnHandler()<em> </em>function on line 197 of the audio_controller.dart file. This is no surprise because that’s exactly where you placed that exception in the code, but imagine how useful this is for tracking down issues in complex production apps.</p><figure><img alt=\"Screenshot of an events summary in Crashlytics dashboard events table with a specific event selected and the stack trace tab selected.\" src=\"https://cdn-images-1.medium.com/max/963/1*5pbF1OIADrJvldPPBOjTYg.png\" /><figcaption>Crashlytics dashboard stack trace</figcaption></figure><p>If you click on the <strong>Logs</strong> tab, you can see any messages written to the console by the _log.severe() method:</p><figure><img alt=\"Screenshot of an events summary in Crashlytics dashboard events table with a specific event selected and the log tab selected.\" src=\"https://cdn-images-1.medium.com/max/981/1*3l-v0ElBcVHNAEwhei1ZkA.png\" /><figcaption>Crashlytics dashboard logs</figcaption></figure><p>Congratulations!! Now, when you go on to write an award-winning game (maybe with lots of sliders in it), you’ll have Crashlytics enabled to help you find and fix any issues.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5d4f952cbe35\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/firebase-crashlytics-and-the-flutter-casual-games-toolkit-5d4f952cbe35\">Firebase Crashlytics and the Flutter Casual Games Toolkit</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-09-12T18:15:25.000Z":{"title":"Studying developer’s usage of IDEs for Flutter development","link":"https://medium.com/flutter/studying-developers-usage-of-ides-for-flutter-development-4c0a648a48?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/4c0a648a48","category":["integrated-development","flutter","developer-experience","surveys","flutter-app-development"],"dc:creator":"JaYoung Lee","pubDate":"Mon, 12 Sep 2022 18:15:25 GMT","atom:updated":"2022-09-12T18:15:25.578Z","content:encoded":"<h3>Studying developer’s IDE usage for Flutter development</h3><h4><strong>Findings from the Q2 2022 user survey. Written by JaYoung Lee and Ander Dobo.</strong></h4><p>The Flutter team at Google currently builds and maintains support for Android Studio (which is based on IntelliJ-IDEA), and Visual Studio Code (VS Code). We integrate features into plugins for these IDEs for Flutter app development, such as code completion, syntax highlighting, widget editing assists, run &amp; debug support, and more. Flutter developers have used both IDEs since the earliest days of Flutter with Android Studio, traditionally being more popular than VS Code. VS Code has steadily gained popularity faster than, and recently surpassed, the popularity of Android Studio for Flutter development as shown in the figure below.</p><p>To better understand Flutter developers’ thoughts behind IDE choice, the Flutter UX team fielded a survey specifically for this topic in May 2022.</p><p><em>In the rest of the article, “Android Studio” represents both Android Studio and IntelliJ-IDEA together.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lHHYRiiookkYcA-Uhq9pgg.png\" /><figcaption><em>Figure 1. The number of Flutter developers from each IDE, from August 2021 to July 2022, shows that VS Code became more popular in the recent few months.</em></figcaption></figure><h3>What we already knew about the IDEs</h3><p>In addition to the fact that Flutter developers were split between Android Studio and VS Code 50:50 at the beginning of 2022, we knew a bit more about the developers’ choice based on the previous surveys.</p><h4>Flutter developers tend to use the IDE familiar to them</h4><p>In 2019 Q3, we asked Flutter developers why they prefer the IDE they use the most. The most common choice was that the IDE was “more familiar to me”.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*fSlfAxkzo4DXfFvW\" /><figcaption><em>Figure 2. 80% of Android Studio users and 61% of VS Code users said that they chose the IDE because of familiarity, according to the Q3 2019 survey.</em></figcaption></figure><h4>VS Code users value the speed they experience with the IDE</h4><p>Another notable thing from the figure above (Figure 2) is that 68% of VS Code users chose the IDE because it’s faster than other IDEs, while only 12% of Android Studio users thought so. In an open-ended question, VS Code users said that they like the IDE because it is lightweight but has a variety of extensions.</p><h4>VS Code users are more satisfied with Flutter’s IDE support</h4><p>We also asked about satisfaction with Flutter’s IDE support, and VS Code users tended to be more satisfied. (We record the IDE developers are using when they open the survey from an IDE. We notify developers about this recording when they click the survey link.)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*cmGZIWZvGJlGLslQ\" /><figcaption><em>Figure 3. While 93.3% of VS Code users are satisfied with Flutter’s IDE support, only 85.9% of Android Studio users are satisfied.</em></figcaption></figure><p>Android Studio is, of course, designed as a fully-integrated IDE for Android development, so it has a much richer feature set for that purpose. Developers have mentioned that it’s easy to handle native Android code and use convenient features like refactoring in Android Studio. In the next section, we dig deeper into the preference and why developers are less happy with using Flutter in Android Studio despite these advantages.</p><h3>What we learned from the Q2 2022 survey</h3><p>The results above made us wonder why Flutter developers are happier with the VS Code support than with the Android Studio support. We wanted to understand the things that Flutter developers really like about VS Code.</p><p>To understand that, we asked a set of questions to developers who switched their main IDE from one to the other in either direction. We believe these developers are well placed to tell us about the unique values in each IDE from their perspective.</p><p>First of all, there were more Flutter developers who switched from Android Studio to VS Code.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/848/0*YwvNR6rKmm9AZd8-\" /><figcaption><em>Figure 4. More Flutter developers switched their main IDE from Android Studio (blue) to VS Code (teal) than vice versa.</em></figcaption></figure><p>As shown in the following graph, those who switched to VS Code liked its performance (82%) and usability (63%). On the other hand, those who switched to Android Studio liked its features (51%) and integration with Flutter tools (39%) and native platforms (27%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1002/0*lsCeAx1gT5qxWONz\" /><figcaption><em>Figure 5. Reasons for switching to a new IDE.</em></figcaption></figure><p>Still, about 23% of Flutter developers use <em>both</em> VS Code and Android Studio. When we asked them why they use more than one IDE, the most prominent theme that emerged was that VS Code users need to use Android Studio and Xcode for native-specific functionalities, such as emulator set-up, build configuration, release requirements (such as key generation and signing), and when developing hybrid Flutter+native apps.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_waE6swxNd-8j2r-\" /><figcaption>Figure 6. 22.5% of Flutter developers use both VS Code and Android Studio together</figcaption></figure><p>Another insight we gained from the survey is that Flutter developers from different countries or regions prefer different IDEs. While most Flutter developers prefer VS Code over Android Studio, developers from China prefer Android Studio (56%) over VSCode (23%). We found this interesting — Flutter is adopted globally, yet used under different development environments. Please leave a comment on this article, if you have any stories from your country or region to share around this tendency.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ejP8ZefmPBh8PF1o\" /><figcaption>Figure 7. IDE by countries or regions. Countries or regions with at least 100 survey respondents are included in the chart.</figcaption></figure><h3>In conclusion</h3><p>Our goal is to deliver a useful and complete development experience that minimizes the friction to get started with Flutter and maximizes developers’ productivity. We will take account of these and future study findings to inform our roadmap for future Flutter IDE support and documentation. As a first step, we’re making minor updates to our website’s getting started documentation to reflect the IDE preferences and patterns of usage described above.</p><p>The insights we gain from this and other surveys are invaluable to us and ensure that we invest in the right areas to continue improving the Flutter developer experience. Thank you to everyone who participated! If you’re interested in participating in future user studies, you can sign up at <a href=\"https://flutter.dev/research-signup\">https://flutter.dev/research-signup</a>. We’ll be back next quarter to share the Q3 survey results. See you in the next article!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4c0a648a48\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/studying-developers-usage-of-ides-for-flutter-development-4c0a648a48\">Studying developer’s usage of IDEs for Flutter development</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-20T08:02:26.000Z":{"title":"Playful typography with Flutter","link":"https://medium.com/flutter/playful-typography-with-flutter-f030385058b4?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f030385058b4","category":["flutter-animation","shaders","flutter-app-development","flutter","typography"],"dc:creator":"Brian James","pubDate":"Fri, 20 Jan 2023 08:02:26 GMT","atom:updated":"2023-01-20T08:02:25.214Z","content:encoded":"<p>Exploring variable fonts and shaders</p><h3>Intro</h3><p>I’m Brian, a newcomer to the Flutter-verse, and I’ve been a UX engineer on Google’s Flutter team for about six months now. As a UX engineer, I combine my background as a graphic designer with coding skills to help the team build Flutter itself, and to show off what Flutter can do. This blog post shares one of my first experiments with Flutter as a hybrid designer–developer: a simple typography-themed puzzle app. It combined my creative background in design with technical explorations around a couple of Flutter APIs you might not have tried yet: <a href=\"https://api.flutter.dev/flutter/dart-ui/FontVariation-class.html\">FontVariation</a> and <a href=\"https://api.flutter.dev/flutter/animation/AnimationController-class.html\">AnimationController</a>. I had a lot of fun creating this app, and through it I saw first-hand how great Flutter is for designers who code, or developers with an eye for design.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*x9XqN84kLr7s86vK\" /><figcaption><em>A palette of customized Flutter text widgets, using variable fonts and shaders.</em></figcaption></figure><h3>Typography</h3><p>Graphic designers love geeking out on “typography,” which is just a fancy word for the styling of text. This includes things like choosing fonts, sizing, layout, spacing, and so on. With all of these settings to work with, letters can become a kind of art form in themselves! Being a designer by training, I knew whatever I created for this exploratory project would somehow involve digging into typography with Flutter. In the past few years, <a href=\"https://fonts.google.com/knowledge/introducing_type/introducing_variable_fonts\">variable fonts</a> have emerged as an intriguing way for designers to have unprecedented control over text styling. It’s an area I’ve been meaning to explore more, and with Flutter’s support for variable fonts, it seemed like the perfect opportunity.</p><p>You’re probably already familiar with fonts in general, which determine what each character in a block of text looks like. Normal fonts usually give us a few settings that we can choose from, for instance weight: bold, normal, or light. Variable fonts take that customization to the next level. In the case of weight, for instance, we might be able to pick any numerical setting between 100 (extremely light) and 1000 (extremely bold). And we aren’t limited only to weight; font creators can allow users to set all kinds of things, like the width of the letters, or depth of the descenders (how far lowercase letters like ‘p’ and ‘y’ drop down), and much more. Each of these different settings is called an “axis,” like the axes of a graph.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*pO_MkjR1GrLhb8va\" /><figcaption><em>The letter ‘g’ in the variable font Roboto Flex, with variations along the width axis (left to right) and weight axis (top to bottom). These are just two of its many axes in effect!</em></figcaption></figure><p>Flutter offers a straightforward way to adjust these settings in the TextStyle widget, by using the fontVariations field. For example, the following code snippet would create a text style in the Roboto Flex variable font, at a size of 18, with variable axis settings for the weight (wght) and width (wdth):</p><pre>TextStyle(<br>  fontFamily: &#39;RobotoFlex&#39;,<br>  fontSize: 18,<br>  fontVariations:[<br>    FontVariation(&#39;wght&#39;, 374),<br>    FontVariation(&#39;wdth&#39;, 118)<br>  ],<br>)</pre><p>For more information on variable fonts, check out the <a href=\"https://fonts.google.com/knowledge/topics/variable_fonts\">variable fonts resources</a> on the Google Fonts site.</p><p>Setting the variations was easy enough, but then I wanted to animate from one variation setting to another, and between combinations of settings. Fortunately, Flutter and Dart made it easy to take two existing underlying features (<a href=\"https://api.flutter.dev/flutter/dart-ui/FontVariation-class.html\">FontVariation</a> and <a href=\"https://api.flutter.dev/flutter/animation/AnimationController-class.html\">AnimationController</a>), and glue them together to make my own new custom motion typography effect.</p><p>For my demo, I made a WonkyChar widget and a WonkyAnimPalette helper class, which gave me a simple way to choose any letters to show on screen, control the text size, and feed in a mix of settings related to variable font axes. The WonkyChar widget also contained a standard Flutter AnimationController object, which I used to animate the settings. In this example, the letter ‘M’ will show at a size of 200, and animate its weight (boldness) from very thin to very bold, in a four-second animation:</p><pre>WonkyChar(<br>  text: &#39;M&#39;,<br>  size: 200,<br>  animationDurationMillis: 4000,<br>  animationSettings: [<br>    WonkyAnimPalette.weight(<br>      from: 100,<br>      to: 900,<br>    ),<br>  ],<br>),</pre><h3>Custom shaders</h3><p>The effect of the variable fonts, especially with animation, was great, but I wanted to push my visual creativity even further and see what I could do with the letter shapes. Incidentally, I had heard that Flutter just added support for custom fragment shaders. Shaders are programs that run on the computer’s Graphics Processing Unit (GPU), allowing developers to create all kinds of visuals while maintaining high frame rates. Flutter supports writing shaders in GLSL, one of the most well-known and well-documented shader languages, with many tutorials and examples available in books, websites, YouTube videos, and massive open online courses (MOOCs). I’m definitely not an expert in shaders or graphics programming, but I’ve tinkered with them before, so this was another great opportunity to explore Flutter’s features while building my own skills.</p><blockquote><strong>Note</strong>: Shaders are a fairly advanced coding topic, and the details about plugging them into your Flutter app are beyond the scope of this blog post. If you’d like to try writing some shaders yourself, check out <a href=\"https://docs.flutter.dev/development/ui/advanced/shaders\">Writing and using fragment shaders</a> in the Flutter docs. It’s a really fascinating approach to coding!</blockquote><p>Initially, just to show one possibility, I wrote a simple GLSL shader to act like a filter on one of my WonkyChar widgets (described above), to create the following effect:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-N5jTlkJHFmEeb0e\" /><figcaption><em>WonkyChar widget before and after applying the shader.</em></figcaption></figure><h3>Project description</h3><p>These raw components — typography, variable font support, and shaders — were an interesting start, but they needed to actually come together in a coherent project. As a self-assignment to learn more about coding in Flutter and the Flutter community, I made a simple tile-based puzzle game, Type Jam, inspired by the <a href=\"https://flutterhack.devpost.com/\">2022 Flutter Puzzle Hack</a> competition. Brainstorming around these ideas in context of the puzzle hack prompt, I came up with the following concept: You, the player, have to help a beleaguered font company put a glitchy font file back together by solving a series of tile-based puzzles.</p><p>Each screen of the app features a puzzle consisting of scrambled pieces of a glitchy letter, surrounded by whole letters animating according to a variable font axis, like weight or width. The glitchy effect on the puzzle tiles is created by a different shader on each page, causing the tile pieces to look wavy, or fractured, etc. And, in a switch from the usual tile puzzle mechanics, I decided to have players solve puzzles by rotating tiles rather than sliding them, so that the entire letter could be viewed upon completion, with no empty slots. Looking back, this might have made the puzzles a little too easy, but maybe I can come up with more challenges for version 2.0!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/270/0*90hPGzJLj7qBZp7t\" /><figcaption><em>Variable fonts plus shader effects (on the tiles pieces) applied in the puzzle game app. Letters on this screen animate on the “optical size” axis.</em></figcaption></figure><p>If you’d like to see how it all came together, check out the <a href=\"https://github.com/flutter/samples/tree/main/experimental/varfont_shader_puzzle\">varfont_shader_puzzle</a> example for the Type Jam app in the <a href=\"https://github.com/flutter/samples\">flutter/samples repo</a>, in the “experimental” folder. As I mentioned before, I’m still pretty new to Flutter, and I have just a basic working knowledge of shaders, so I’m looking forward to improving it going forward! For now, please think of it as a quick demo, rather than as a template.</p><h3>Conclusion</h3><p>As a design-focused UX engineer, it was incredibly satisfying to combine my design and technical interests to create playful typography, and allow others to play with the letters, too. Plus, I saw for myself Flutter’s potential as a creative tool that can go beyond the typical patterns for app design. I had a great time making this project, and hope it inspires other designer–coders to try out their weird and fun ideas, and bring their designs to life as real apps!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f030385058b4\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/playful-typography-with-flutter-f030385058b4\">Playful typography with Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-18T08:02:28.000Z":{"title":"Material 3 for Flutter","link":"https://medium.com/flutter/material-3-for-flutter-d417a8a65564?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/d417a8a65564","category":["mobile-app-development","web-development","flutter","dart","material-design"],"dc:creator":"Eilidh Southren","pubDate":"Wed, 18 Jan 2023 08:02:28 GMT","atom:updated":"2023-01-31T17:05:14.576Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RuCmIqSnK0G0kHmy.png\" /></figure><h4>Sherlock Holmes and Dr Watson; peanut butter and jam; Flutter and Material! These matches are made in heaven!</h4><p><a href=\"https://m3.material.io/\">Material</a> is a design system that helps you build beautiful, accessible apps across mobile, web, and desktop.</p><p>In Flutter, the <a href=\"https://api.flutter.dev/flutter/material/Material-class.html\">Material library</a> provides developers with all the building blocks your UI needs. Since the launch of Material 3 at Google I/O 2021, the Flutter team has been updating Flutter’s Material library to support these new changes.</p><p>I joined the Material for Flutter team in August 2022. Since then, I’ve been helping update widgets to Material 3 specifications, while supporting Material 3 users in the open source Flutter community.</p><p>In this article, I’ll show you the new features in Material 3, how to integrate them into your Flutter app, and update you on what’s coming next.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/497/0*6JGBM5itMcIMnvYV\" /><figcaption>The Flutter Material 3 sample app</figcaption></figure><h3>Material 3</h3><p>To see all the latest Material 3 updates, check out our <a href=\"https://flutter.github.io/samples/web/material_3_demo/#/\">sample app</a>. It allows you to interact with all of the widgets live.</p><p>This app demonstrates the updated components and lets you toggle between Material 2 and Material 3, light mode and dark mode, and try out different color schemes.</p><h3>Getting started</h3><p>To add Material 3 to your app, set the <a href=\"https://api.flutter.dev/flutter/material/ThemeData/useMaterial3.html\">useMaterial3</a> flag to true in your theme’s constructor:</p><pre>class MyApp extends StatelessWidget {<br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      theme: ThemeData.light(useMaterial3: true),<br>      body: MyHomePage(),<br>    );<br>  }<br>}</pre><p>For information on migrating an existing Flutter app, check out <a href=\"https://blog.codemagic.io/migrating-a-flutter-app-to-material-3/\">Migrating a Flutter app to Material 3</a>, an article by Flutter contributor Taha Tesser at CodeMagic.</p><p>At the time of this writing, you have the <em>option</em> to use Material 3. In the future, it will become the default (and mandatory) Material version for Flutter apps.</p><h3>New widgets</h3><p>To get most of the widget changes, set the useMaterial3 flag. However, some widgets have changed so much in Material 3 that they’ve been replaced with new widgets. Here are some of the new widgets:</p><h4>NavigationBar &amp; NavigationDrawer</h4><p>The <a href=\"https://api.flutter.dev/flutter/material/BottomNavigationBar-class.html\">BottomNavigationBar</a> widget has been replaced with the <a href=\"https://api.flutter.dev/flutter/material/NavigationBar-class.html\">NavigationBa</a>r. It’s a little taller and doesn’t have a drop-shadow (that indicates elevation).</p><h4>Segmented buttons</h4><p>Segmented buttons give your user a toggleable choice from several options <em>in a single widget</em>. By default, you can only select one item, unless you specify the multiSelectionEnabled parameter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/368/0*gjBdIy6V7lT5XGk2\" /><figcaption>Segmented buttons — single selection and multi selection</figcaption></figure><h4>Filled buttons</h4><p>We’ve increased our selection of Buttons to include the new <a href=\"https://m3.material.io/components/buttons/guidelines#07a1577b-aaf5-4824-a698-03526421058b\">FilledButton</a>. This button creates a colored, non-elevated button. The FilledButton.tonalmethod sets current background as a secondary color.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/146/1*Rh5tEKBvA8ivNBGgDB7X9w.gif\" /><figcaption>Elevated, Filled, and Outlined buttons</figcaption></figure><h4>Badges</h4><p>The new <a href=\"https://master-api.flutter.dev/flutter/material/Badge-class.html\">Badge</a> widget can be used to give extra information, generally indicating a count or change of status, to a parent widget. They’re available in large and small sizes:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/261/0*SgE01KkHs1LzX0TN\" /><figcaption>Badge widgets attached to parent Icons</figcaption></figure><h3>Generating a color scheme</h3><p>A brand new feature of Material 3 allows you to set the color theme of your <em>entire</em> app from a single seed color. Set the color scheme seed parameter in your theme constructor and, from that <em>one</em> entry, Flutter generates a harmonious color scheme for <strong>every</strong> widget in your app. This scheme works in both light <em>and </em>dark modes!</p><pre>class MyApp extends StatelessWidget {<br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      theme: ThemeData.light(<br>        useMaterial3: true,<br>        colorSchemeSeed: Color.fromRGBO(188, 0, 74, 1.0);<br>        ),<br>      body: MyHomePage(),<br>    );<br>  }</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*udIjHdleLcn1C0Ox\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IM7o73HEWHQMgHUe\" /><figcaption>Color schemes and tint values generated from a seed color</figcaption></figure><p>If you’d like to customize your color scheme further, visit the <a href=\"https://m3.material.io/theme-builder#/custom\">Material generator app</a>. You can define secondary and tertiary colors to create a completely unique color palette. Best of all, it exports Dart files that you can use immediately in your Flutter app.</p><h3>What’s next?</h3><p>Flutter’s migration to Material 3 continues. You can follow the progress at the <a href=\"https://github.com/flutter/flutter/issues/91605#issuecomment-1264995277\">Bring Material 3 to Flutter</a> GitHub issue. You can also contribute! We welcome bug reports and fixes that make Material 3 even better for Flutter developers like you.</p><p>Our most recent update brought the <a href=\"https://api.flutter.dev/flutter/material/SnackBar-class.html\">SnackBar</a>, <a href=\"https://api.flutter.dev/flutter/material/TabBar-class.html\">TabBar</a> and <a href=\"https://api.flutter.dev/flutter/material/Slider-class.html\">Slider</a>widgets up to Material 3 spec. So far, we’ve migrated 27/30 components, and added a range of new features to support dynamic color, text themes, Android 12 functionality, and more.</p><p>If you’d like to get more involved with the Flutter community, head over to <a href=\"https://flutter.dev/community\">flutter.dev/community</a> and find us on your favorite social platform. See you there!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d417a8a65564\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/material-3-for-flutter-d417a8a65564\">Material 3 for Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-05T19:02:21.000Z":{"title":"Join us for #17DaysOfFlutter","link":"https://medium.com/flutter/join-us-for-17daysofflutter-924ede5063ca?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/924ede5063ca","category":["flutter-app-development","flutter-web","flutter-forward","flutter-game","17daysofflutter"],"dc:creator":"Shamira Marshall","pubDate":"Thu, 05 Jan 2023 19:02:21 GMT","atom:updated":"2023-01-05T19:02:21.002Z","content:encoded":"<p>Curated content leading up to the Flutter Forward event.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cKk9QrcolzFfqB2ZWyUxSQ.png\" /><figcaption>Banner for #17DaysOfFlutter</figcaption></figure><p>Happy 2023!</p><p>Why not celebrate the new year by leveling up your Flutter skills? Starting January 9th, and leading up to our <a href=\"https://flutter.dev/events/flutter-forward\">Flutter Forward event</a> on January 25th, we’ll be hosting 17 Days of Flutter, a Flutter content marathon unveiling brand new content on Monday through Friday from our Flutter experts. Plus, a chance to apply what you learn and share your work with the Flutter community. Whether you’re just starting out with Flutter, or you’re a seasoned Flutter pro, we have new YouTube videos, codelabs, live events, and other curated content to help you along your learning journey.</p><p><strong>#17DaysOfFlutter Schedule</strong></p><p>The content leading up to Flutter Forward will look like this:</p><p><strong>Week 1</strong></p><p>The first week is all fun and games! Watch as Developer Relations Engineers <a href=\"https://twitter.com/khanhNwin\">Khanh</a> and <a href=\"https://twitter.com/ericwindmill\">Eric</a> build their first ever web game (using Flame) in <a href=\"https://www.youtube.com/watch?v=CkcvVZZEsJE&amp;list=PLjxrf2q8roU3X18pAQWLyCJaa79RpqWnn\">Learning to Fly Season 2</a>. Follow along as they try their hand at game development, or work at your own pace creating a game from scratch with our new Games codelab. Later in the week, learn about the <a href=\"https://docs.flame-engine.org/1.4.0/index.html\">Flame</a> game engine in a new episode of Widget of the Week. We’re providing several ways to get you building games in Flutter.</p><p><strong>Week 2</strong></p><p>In week two, we’re dropping another codelab and some blog posts about <a href=\"https://m3.material.io\">Material 3</a> and UX design that will reframe how you think about your Flutter app experience. Then check out The Boring Show — Live on January 17th, hosted by <a href=\"https://twitter.com/craig_labenz\">Craig</a> on the <a href=\"https://www.youtube.com/watch?v=NuX4b6qtU2U&amp;list=PLjxrf2q8roU3ahJVrSgAnPjzkpGmL9Czl\">Flutter YouTube channel</a>. To close out the second week of #17DaysOfFlutter, we’re demystifying <a href=\"https://dart.dev/tools/dart-fix\">dart fix</a> in a new Decoding Flutter video.</p><p><strong>Community Game Submissions</strong></p><p>Get involved in the Flutter community by sharing your own game! Starting January 14th, you’ll get a chance to participate in the games coding challenge. Power up Doodle Dash from Learning To Fly and the games codelab by adding a new feature or enemy. You can find out more details about how to share your game with the community on the <a href=\"https://flutter.dev/events/flutter-forward/#17-days-of-flutter\">17DaysOfFlutter</a> website.</p><p>Be sure to follow <a href=\"https://twitter.com/flutterdev\">@FlutterDev</a> on Twitter, to get updates about #17DaysOfFlutter.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FhpgkrUPRBjc%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DhpgkrUPRBjc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FhpgkrUPRBjc%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3fec75153699458e706785300b9f7e9d/href\">https://medium.com/media/3fec75153699458e706785300b9f7e9d/href</a></iframe><p>(Why 17DaysOfFlutter? Someone on the Flutter team decided to kick off Flutter Forward on a Wednesday, and we wanted at least two full weeks of content!)</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=924ede5063ca\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/join-us-for-17daysofflutter-924ede5063ca\">Join us for #17DaysOfFlutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-12-12T17:02:06.000Z":{"title":"How can we improve the Flutter experience for desktop?","link":"https://medium.com/flutter/how-can-we-improve-the-flutter-experience-for-desktop-70b34bff9392?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/70b34bff9392","category":["flutter","app-development","ux-research","user-experience","flutter-desktop"],"dc:creator":"Mindy Hoover","pubDate":"Mon, 12 Dec 2022 17:02:06 GMT","atom:updated":"2022-12-12T17:02:05.642Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Insights and priorities based on 2022 Flutter desktop user research by Mindy Hoover and Chris Bracken</h4><p>In February, Flutter launched official <a href=\"https://medium.com/flutter/announcing-flutter-for-windows-6979d0d01fed\">support for developing Windows</a> apps, extending its cross-platform capabilities to desktop. With the release of <a href=\"https://medium.com/flutter/introducing-flutter-3-5eb69151622f\">Flutter 3</a> in May 2022, Flutter announced stable support for macOS and Linux, completing the trifecta of desktop support! Now that Flutter users have had a few months to experiment with these new capabilities, we wanted to know: <em>how can Flutter better support desktop developers?</em></p><p>To answer that question, we collected data from 1,901 Flutter desktop developers in the Q3 Flutter survey. If you attended Flutter Vikings in August, you might have seen UX researchers chatting with developers during focus group sessions as well. Here’s what we found and how we’ll use it to improve Flutter.</p><h3>How satisfied are you with Flutter on desktop?</h3><p>On average 78% of Flutter desktop developers across Windows, macOS, and Linux reported that they were <em>very</em> or <em>somewhat satisfied</em> with their development experience. This rating is on par with satisfaction for iOS (78%) and in between Android (92%) and web (63%). That’s great news for Flutter desktop! But it also begs the question, where is the experience falling short for the other 22%?</p><figure><img alt=\"Bar chart of developer satisfaction with Flutter’s support of each target platform.\" src=\"https://cdn-images-1.medium.com/max/600/1*3nXqiZ_vAvOXBU4yeRTOHA.png\" /><figcaption>Satisfaction by target platform</figcaption></figure><h3>What parts of the desktop developer workflow are most challenging?</h3><p>Next, we asked developers to gauge their satisfaction at various stages of the software development workflow. The results showed that satisfaction tended to decrease over the course of the desktop app development process. This resulted in the lowest user satisfaction while <em>debugging performance issues</em> and <em>deploying the app</em>. Additionally, finding Flutter packages that work for desktop is challenging, according to qualitative feedback from the survey and focus groups.</p><figure><img alt=\"Line chart showing satisfaction on the y-axis and development stage on the x-axis. Satisfaction is high at the beginning when developers are seting up the environment, falls a bit when searching for documentation, and rises again when running and refreshing the app. Satisfaction steadily falls starting with debugging syntax and UI. Finally, it ends with the lowest satisfaction around debugging performance issues and deploying the app.\" src=\"https://cdn-images-1.medium.com/max/1024/1*VbmSF-liAOyeParju2Y4kw.png\" /><figcaption>Flutter for desktop satisfaction by development workflow stage</figcaption></figure><p>The Flutter ecosystem needs more desktop-enabled packages to better support desktop. (The most requested packages are listed later in this article.) We are hard at work on new desktop-enabled APIs (more on that below), but we can’t do it all. We hope that the community will also step up and help fill those gaps by creating new packages and adding desktop support to existing ones using <a href=\"https://docs.flutter.dev/development/packages-and-plugins/developing-packages#federated-plugins\">federated plugins</a>, for example.</p><p>We know that troubleshooting performance issues isn’t a fun task, but it should at least be a satisfying experience. Our team is working hard to improve the functionality of Flutter DevTools, especially the memory analysis features, to make troubleshooting performance easier. For example, now you can use Flutter’s DevTools to <a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.20.0\">compare memory snapshots</a>! Also, see the completely rewritten <a href=\"https://docs.flutter.dev/development/tools/devtools/memory\">memory view page</a>.</p><p>Flutter desktop developers told us that deploying desktop apps requires too many steps. The desktop team will be conducting a task analysis on desktop app deployment to determine where we can improve app deployment processes and documentation.</p><h3>What would help you make better desktop user interfaces?</h3><p>72% of users agreed that “Flutter’s built-in widgets can create UIs that are suitable for desktop.” When we asked developers what would help them improve the UI design of their desktop apps, they overwhelmingly replied that they wanted better support for:</p><ol><li>Adaptive layouts (44%)</li><li>Drag and drop (31%)</li><li>Keyboard shortcuts (27%)</li></ol><figure><img alt=\"A horizontal bar chart of design feature requests for improving Flutter desktop apps. Adaptive layouts were most requested, followed by drag and drop, and keyboard shortcuts.\" src=\"https://cdn-images-1.medium.com/max/836/1*kfqE355iFMpjF2r52wVviA.png\" /><figcaption>Which of the following could be improved to help you reach your design goals when using flutter to develop desktop apps?</figcaption></figure><p>We strive to make Flutter the best <em>cross-platform</em> app development framework, so this is always top of mind. However, improving “<em>adaptive layouts</em>” is an ambiguous problem space that affects every target platform, not just desktop. There are also many factors at play including screen size, operating system, input devices (to name a few), so designing a useful solution isn’t a trivial task. But our engineers are on the job, working on improvements to the <a href=\"https://pub.dev/packages/flutter_adaptive_scaffold\">flutter_adapative_scaffold</a> package and creating codelabs to walk you through how to efficiently build adaptive apps. In the meantime, stay tuned for <a href=\"https://flutter.dev/events/flutter-forward\">Flutter Forward</a> in January, where Greg Spencer and Justin McCandless will be discussing how to architect adaptive apps using existing Flutter tools.</p><p>As for drag and drop and keyboard shortcuts, they have both been on our radar for a while now. In fact, the <a href=\"https://api.flutter.dev/flutter/widgets/Shortcuts-class.html\">Shortcuts Widget</a> was recently released. You can see it in action in this recent “<a href=\"https://www.youtube.com/watch?v=6ZcQmdoz9N8\">Widget of the Week” episode</a>. Finally, support for drag and drop is one of our top priorities in 2023!</p><h3>What packages would make Flutter desktop development simpler?</h3><p>Package support for desktop is still catching up to that of mobile and web. The most requested packages from desktop developers were:</p><ol><li>multi-window (35%)</li><li>native controls (32%)</li><li>local storage (24%)</li><li>web views (23%)</li></ol><figure><img alt=\"Horizontal bar chart showing API requests for desktop with the most requested being multi-window and native controls. They were followed by local storage, web views, database access, and Firebase storage.\" src=\"https://cdn-images-1.medium.com/max/737/1*tleEgMs6XOSPDo4smD7Zvg.png\" /><figcaption>Which APIs or features do you wish were better supported by Flutter?</figcaption></figure><p>This feedback was closely aligned with Flutter’s current list of priorities with APIs for multi-window, native menus, and web views in the pipeline. Once those are released we can begin to prioritize solutions to local data storage and database access. Some additional package requests that are currently lower on the priority list, but also warrant consideration, are audio/video players and audio/video devices. A need for packages that support clipboard management and complex input devices (3D mouse, gamepad controllers, for example) came up during focus groups at Flutter Vikings, but wasn’t included in the quarterly survey.</p><p>If you are interested in contributing to Flutter packages for desktop, consider helping grow the Flutter ecosystem by creating packages to fill these gaps or submitting PRs to existing packages. By working together, we are confident the Flutter package ecosystem will grow and adapt to better support desktop developers.</p><h3>What additional desktop documentation is needed?</h3><p>The last category surveyed covered Flutter’s desktop documentation. Satisfaction with Flutter’s desktop docs was 13% lower than satisfaction with the rest of Flutter’s documentation in Q3. Next, we asked what documentation would help streamline the desktop development process. The most requested documentation topics were:</p><ol><li>Publishing apps (43%)</li><li>Automatic updating (42%)</li><li>Foreign Function Interface (FFI) (42%)</li></ol><p>This feedback has been very helpful for prioritizing documentation work in Q4 2022 and 2023. As a result, our team is currently drafting documentation to help desktop developers publish their apps and including a helpful <a href=\"https://github.com/flutter/codelabs/tree/main/ffigen_codelab\">codelab</a> that is nearly complete! Although automatic updating is not a feature we maintain for Flutter, there are a number of <a href=\"https://pub.dev/packages/auto_updater\">community</a> <a href=\"https://pub.dev/packages/squirrel\">packages</a> in the Flutter ecosystem that provide this capability. Therefore, it’s not high on our priority list to provide an additional package. Please see <a href=\"http://pub.dev\">pub.dev</a> for automatic updating packages and their associated documentation.</p><figure><img alt=\"A horizontal bar chart showing documentation requests for desktop with publishing apps, automatic updating, and FFI being the most requested.\" src=\"https://cdn-images-1.medium.com/max/725/1*Ku1PCFW0lYew-Dh7pIGDvQ.png\" /><figcaption>Which of the following desktop-specific topics do you wish was better documented?</figcaption></figure><h3>What’s next?</h3><p>In 2023, the Flutter team is prioritizing work based on your feedback. We are actively working on solutions for multi-window and native menu bars. Drag and drop is also high on our priority list. A task analysis is in the works to determine how to make app deployment more efficient; additional documentation on this topic is forthcoming. We are also hard at work making improvements to Flutter DevTools so you can better monitor app performance and fix memory leaks. Lastly, we are creating codelabs and investigating improvements to the flutter_adaptive_scaffold package to help developers build adaptive, cross-platform apps with Flutter.</p><p>Now that we’ve set the bar, we’ll be enacting these improvements, and checking in with Flutter developers to measure our success. So keep an eye out for future Flutter surveys!</p><p>Thank you to everyone who contributed their desktop feedback during the Q3 Flutter survey and to those who took the time to talk to us at Flutter Vikings! The value of your feedback is immeasurable. If you would like to participate in future studies beyond the quarterly surveys, you can <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSe0i4De809KXVCdljGKrjMj3lxhuzbuFKCtY5PEQPCYtGxFMg/viewform\">sign up for upcoming UX studies</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=70b34bff9392\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-can-we-improve-the-flutter-experience-for-desktop-70b34bff9392\">How can we improve the Flutter experience for desktop?</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-12-08T19:07:05.000Z":{"title":"What we learned from the Flutter Q3 2022 survey","link":"https://medium.com/flutter/what-we-learned-from-the-flutter-q3-2022-survey-9b78803accd2?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/9b78803accd2","category":["developer-experience","surveys","flutter"],"dc:creator":"JaYoung Lee","pubDate":"Thu, 08 Dec 2022 19:07:05 GMT","atom:updated":"2022-12-08T19:07:05.701Z","content:encoded":"<h4>About Firebase SDKs, quick fixes and refactorings, and target platforms</h4><p>More than 10,000 Flutter developers have been participating in the quarterly user survey in the past couple years to give feedback to the Flutter team. The most recent quarter was no exception — the Flutter team wanted to collect developer feedback about four topics: 1) Firebase SDKs, 2) quick fixes and refactorings, 3) target platforms, and 4) desktop support. Of these four topics, the survey presented each respondent with two random topics. Thanks to those who responded!</p><p>This article covers the results about the first three topics. We’ll cover the last topic (desktop development) in another article.</p><p>Before jumping into the results of the first three special topics, we’d like to report that Flutter developers continue to love the framework. Of the survey respondents, 55% are <em>very satisfied</em> with Flutter, and an additional 38% are<em> somewhat satisfied</em> with Flutter. This brings the total of satisfied developers to 93%. This has been consistent over the last three quarters. The percentage of <em>very satisfied</em> developers had a slight drop to 55%. We plan to track this metric and study what might reduce developer satisfaction from <em>very satisfied</em> to <em>somewhat satisfied</em>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jYeqpOHh1OgqKmqW\" /><figcaption>Figure 1. Satisfaction with Flutter over time</figcaption></figure><p>As shown in <strong>Figure 2</strong>, our respondents love the core framework, Android support, and Material widgets. Our biggest opportunity lies with Cupertino widgets and web support. We continue to study what’s needed to improve developer experience in these areas and further invest to advance it. If you want to participate in future user studies, you can sign up at <a href=\"https://flutter.dev/research-signup\">flutter.dev/research-signup</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*XaZXV1SPtqbuZhFc\" /><figcaption>Figure 2. Satisfaction with subsystems</figcaption></figure><h3>Firebase SDKs for Flutter</h3><p>Flutter developers use <a href=\"https://pub.dev/publishers/firebase.google.com/packages\">Firebase SDKs for Flutter</a> (aka FlutterFire) for tools and services that Firebase provides. These include authentication, databases, analytics, and messaging. Currently, fifteen stable <a href=\"https://firebase.google.com/docs/flutter/setup?platform=ios#available-plugins\">Firebase plugin packages</a> are available on pub.dev. Because of the great adoption of these packages, we wanted to explore what kind of learning materials would increase their usability.</p><p>The most useful information we learned was the problems developers had when trying to use various Firebase packages. As shown in <strong>Figure 3</strong>, Developers cited “not enough real-world examples” as the most common issue that they faced when trying a new Firebase package (14.2%). This was particularly problematic for complex packages with many moving parts, like firebase_messaging or firebase_dynamic_links. To address this, we’ll be adding more <a href=\"https://firebase.google.com/docs/samples\">sample apps to the Firebase docs</a>. We’re adding two types of sample apps. The first, “quickstart samples”, will cover the use of a specific Firebase package. The second will provide more complex, real-world example apps that use multiple Firebase packages.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hdD0EJyfncwlgAtW\" /><figcaption>Figure 3. Problems with adopting a new Firebase SDK for Flutter</figcaption></figure><p>In the survey, a number of developers also selected “API design was too complicated or inconvenient”. This finding was consistent across many packages, like firebase_database, firebase_in_app_messaging, including the packages mentioned in the previous section. We found this result notable. Though some APIs are simple and small, the concepts they cover, like asynchronous data, aren’t. With this in mind, we will strive to simplify learning materials. Furthermore, we will aim to make new and existing APIs for tools and services as easy to understand as possible.</p><p>“Overall quality of documentation was low” was the last of the top three issues. To respond to this need, we plan to improve the Firebase documentation for Flutter developers. We will add new sections in the Firebase documentation for the Firebase UI packages, such as Firebase UI for Auth, and more code samples throughout. The changes will roll out throughout the coming quarters.</p><h3>Quick fixes and refactorings</h3><p>In the <a href=\"https://medium.com/flutter/does-flutter-boost-developer-productivity-475f713724b3\">first survey of 2022</a>, developers indicated that quick fixes and refactorings are the top missing or insufficiently-supported features in our IDEs. As you can see in <strong>Figure 4</strong>, we support quick fixes and refactorings in the IDE, but we wanted to identify <em>why</em> developers think that the IDEs are missing or not supporting these features.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/718/0*8Ewc1lTs1hnn1Y0w\" /><figcaption>Figure 4. Quick fixes and refactorings in VS Code</figcaption></figure><p>First, we learned that more than half of the respondents think that quick fixes and refactorings work fine (53.1%), as shown in <strong>Figure 5</strong>. Yet, 34.6% said more features need to be added. This was almost three times more than the number of developers who asked us to fix bugs (12.4%).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*CfG7t7ePTA-LlwyZ\" /><figcaption>Figure 5. The current status of quick fixes and refactorings</figcaption></figure><p>We then asked those who want new features what general category of quick fixes or refactoring features they needed. Before designing the question, we reviewed all the relevant GitHub issues and did a quick <a href=\"https://twitter.com/craig_labenz/status/1547650452023435%20267?s=20&amp;t=hOjRR_RImDoyIP38CqsjLA\">Twitter survey</a> to organize various feature requests into groups. You can see the list of groups in <strong>Figure 6.</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rbSxslPyUG71IB-Y\" /><figcaption>Figure 6. Importance of quick fixes and various refactorings features</figcaption></figure><p>From this question, we learned that respondents found adding more quick fixes for “fixing compilation errors, warnings, or lints” to be more important than others (76.4% “very important”), though it doesn’t reduce the importance of other features. We also learned that respondents found “extracting or moving widgets” to be more important than other refactorings (69.2% “very important”). We now know that, although we support extracting and moving widgets, developers want more options, such as extracting a widget to a new file. This matches various GitHub issues filed: <a href=\"https://github.com/flutter/flutter-intellij/issues/5591\">flutter/flutter-intellij/issues/5591</a>, <a href=\"https://github.com/Dart-Code/Dart-Code/issues/1831\">Dart-Code/Dart-Code/issues/1831</a>, <a href=\"https://github.com/flutter/flutter-intellij/issues/4540\">flutter-intellij/issues/4540</a>, <a href=\"https://github.com/dart-lang/sdk/issues/35767\">dart-lang/sdk/issues/35767</a>, and others. In addition, developers also want more features for restructuring libraries, classes, or methods (61.9% “very important”), as well as managing imports (59.7% “very important”).</p><p>All of this information was greatly valued by the Dart Analyzer team, who will be reviewing the diagnostics to identify opportunities for additional fixes. The team has already started adding some new fixes for diagnostics (to be released with Dart 2.19), with more planned for future releases.</p><h3>Target platforms</h3><p>Flutter developers can build production quality apps for six platforms: Android, iOS, web, Windows, macOS, and Linux. In this section of the survey, we wanted to know which of the six platforms developers target, and whether they use Flutter for multiplatform development at a team-level. Our questions asked first about the platforms on which developers write code and then asked about additional platforms their team targets.</p><p>As shown in <strong>Figure 7</strong>, most developers target Android (91.7%), iOS (61.3%), and web (35.5%). Some overlap occurred, as this question allowed for multiple answers. Counting the number of platforms selected, only 24% of the developers targeted only one platform in the last month. Of the respondents, 76% developed for two or more platforms, with(32% developing for three or more).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*WHlC27Td3vNoiDFc\" /><figcaption>Figure 7. Target platforms developers are actively building and app for</figcaption></figure><p>In addition, we wanted to know how many of the developers were on a development team, where teammates developed for a platform that’s different from their own. For example, developer A targets Android and developer B targets iOS. As shown in <strong>Figure 8</strong>, 40% of the developers said they had a coworker who’s working on a different platform than theirs. This increased to 61%, when we filtered for the developers who said they themselves were developing for only one platform.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DWsq2C8LftK67nYq\" /><figcaption>Figure 8. Teammates developing for an additional platform</figcaption></figure><p>When combined, we could calculate that 91% of the Flutter teams are active multiplatform development teams (24%*0.61 + 76%). At least 72% of the respondents developed apps for both Android and iOS. Of the total respondents, 34% targeted iOS, Android, and the web and 12% targeted iOS, Android, the web, and Windows.</p><h3>What’s next?</h3><p>We want to deliver a great development experience that maximizes productivity. The insights we gain from this and other surveys are invaluable. We’ll use these results to prioritize engineering tasks and education content that’s useful to the Flutter developers.</p><p>We’ll be back in 2023 with more survey results. Before then, we will publish a separate article about what we learned from the research about desktop support. See you in the next article!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9b78803accd2\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/what-we-learned-from-the-flutter-q3-2022-survey-9b78803accd2\">What we learned from the Flutter Q3 2022 survey</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-12-06T23:52:58.000Z":{"title":"Supporting six platforms with two keyboards","link":"https://medium.com/flutter/supporting-six-platforms-with-two-keyboards-3cb3eb46d763?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/3cb3eb46d763","category":["flutter","flutter-windows","flutter-desktop","multiplatform","flutter-app-development"],"dc:creator":"Brett Morgan","pubDate":"Tue, 06 Dec 2022 23:52:58 GMT","atom:updated":"2022-12-06T23:52:58.723Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Developing Flutter applications for Android, iOS, the web, Windows, macOS, and Linux without losing your sanity</h4><figure><img alt=\"A beautiful sunrise on a idyllic beach. Waves calmly lapping at your toes.\" src=\"https://cdn-images-1.medium.com/max/1024/1*RQs5hWCyE30nkyfsVqDb0A.jpeg\" /></figure><p>The joy of Flutter is the ease of developing applications for six platforms. The pain is verifying your application on six platforms.</p><p>I’m writing a codelab that uses Dart’s Foreign Function Interface (FFI) to integrate C code from iOS, Android, macOS, Linux, and Windows. This story describes how I can develop for all the platforms that Flutter supports without covering my desk in devices.</p><p>Accept that you need more than one machine. As you plan to build your application on at least a subset of the six platforms, consider that this isn’t nearly as bad as it sounds.</p><p>I can develop apps on six platforms with two machines: one macOS laptop and one Windows 11 desktop. Additionally, I have two keyboards, one mouse, and one magic touch pad.</p><p>Here’s why you need the two platforms.</p><p>Start with the obvious: you need a macOS machine to develop for macOS and iOS. Apple says so. Develop for Windows on Windows. It’s what Flutter for Windows supports out of the box, so that’s the paved path. Flutter supports web and Android development on either or both of macOS and Win11. For reasons of keyboard familiarity (I’ve been on macOS for over a decade), I use macOS.</p><p>Windows Subsystem for Linux version 2, or WSL2, on Windows 11 prevented my needing three full keyboards. When you have the Microsoft Windows Subsystem for Linux Product Manager presenting a keynote on WSL2 at Ubuntu Summit to a room full of Linux devotees, you start to understand how much the world has changed over the last twenty years.</p><p>The Linux support in WSL2 extends beyond running graphical Linux applications. Visual Studio Code provides stellar support for WSL2-hosted development. WSL2 runs a headless version of VSCode inside its Linux environment and controls it from a Windows VSCode instance. This keeps Windows and Linux development on one machine with all of the same key shortcuts even if the file system layout differs.</p><p>This said, don’t try to run both your Flutter Windows and Linux development out of the one shared file area. Yes, WSL2 allows you to see the Windows file system from Linux and the Linux file system from Windows. Dart, though, won’t know which binaries to use. Another minor issue would be that the line endings in your source files will get confused as well. Transfer code between Linux and Windows using Git configured with <a href=\"https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings\">appropriate line ending mappings</a>. Your sanity will thank you.</p><p>If you want to develop Flutter on all the platforms Flutter supports, do yourself a favor and grab both a macOS machine and a Windows 11 machine. Your compile times will thank you.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3cb3eb46d763\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/supporting-six-platforms-with-two-keyboards-3cb3eb46d763\">Supporting six platforms with two keyboards</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-11-15T19:02:00.000Z":{"title":"Announcing Flutter Forward","link":"https://medium.com/flutter/announcing-flutter-forward-666f9a506cc6?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/666f9a506cc6","category":["flutter","ios-app-development","android","multiplatform","events"],"dc:creator":"Kelvin Boateng","pubDate":"Tue, 15 Nov 2022 19:02:00 GMT","atom:updated":"2022-11-15T19:01:59.822Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4><em>Register for the next Flutter event, streaming live from Nairobi, Kenya</em></h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2u_pjVJlgpQw4XHy\" /></figure><p>Tune in for <strong>Flutter Forward</strong>, the next global Flutter event, streaming live from Nairobi, Kenya on January 25, 2023.</p><p><a href=\"https://rsvp.withgoogle.com/events/flutter-forward-2022-virtual/forms/registration\">Registration is now open!</a></p><p>With the launch of Flutter 3 at Google I/O this year, we completed <a href=\"https://www.youtube.com/watch?v=kpcjBD1XDwU&amp;t=108s\">a journey that we first mapped out four years ago at Flutter Live</a>: delivering a powerful, open source UI toolkit for building stunning experiences across mobile, desktop, embedded, and web devices.</p><p>Now we’re ready to share some new investments we’re working on, which showcase the direction we are planning to take Flutter over the coming year or so.</p><p>We can’t wait to bring our global community together virtually, like we did at Flutter Live and Flutter Interact. And what better place to talk about the technologies of tomorrow than in an area of the world that is undergoing rapid digital transformation?</p><p>We’re excited to host our next global event in Africa. Not only is Google heavily investing in the region, including opening our first <a href=\"https://techcrunch.com/2022/04/19/google-opens-product-development-center-in-nairobi-the-first-in-africa/?guccounter=1&amp;guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&amp;guce_referrer_sig=AQAAAKYdxE7OdnBWrzyv5kgve4Wb_0sT7guGi_DeKOZ2_sFPBEmeJ_wsHSh077n6xrk83OtPuikdhfQ0zPKU1H3cXhqeZQcMY9U54t3eB4otQyCj3-C_xP_JzbwQMDCCRF5wi9xqDcCverqQE0l2gNazZIsKqGuT1oA5Hmwd9zd-5zJ0\">African engineering center in Nairobi</a>, but the <a href=\"https://thebigdeal.substack.com/p/rain-always-falls-where-its-wet\">startup scene is booming</a>, and <a href=\"https://nextbillionusers.google/research/africa-developer-community-2021/\">hundreds of thousands of developers work in the African Internet economy</a>. It’s the perfect place to give you a peek at the future of Flutter.</p><p>Here’s what you can expect from the event:</p><h3>Keynote</h3><p>During our live keynote, we’ll demo what we’re working on — and show what others in the broader community are doing with Flutter — to push UI development forward.</p><h3>#AskFlutter live</h3><p>#AskFlutter will be back, answering all the questions you’re yearning to ask, from platform-specific inquiries to why Dash must always have a sharp beak, never curved.</p><h3>Tech talks</h3><p>As always, we’ll expand on the keynote with a collection of tech talks covering the latest news, hot topics, and tips and tricks for building amazing experiences with Flutter.</p><h3>Watch parties</h3><p>If you want to gather with others to watch Flutter Forward together, attend a local viewing party in one of over 300 cities all over the globe. If one is happening near you, be sure to attend to network with and learn from local Flutter developers.</p><h3>Stay tuned</h3><p>The community has grown considerably since our last event, but it remains Flutter’s lifeblood, and is the momentum behind Flutter’s ever-unfolding story. We’re beyond grateful for the opportunity to bring the global Flutter community together again.</p><p>We’ve got plenty planned between now and January 25, so <a href=\"https://rsvp.withgoogle.com/events/flutter-forward-2022-virtual/forms/registration\">register now</a> to be sure you don’t miss the agenda announcement, a chance to find a watch party near you, or a couple of special surprises we’ve got planned.</p><p>Once you’ve registered, follow us on <a href=\"https://twitter.com/FlutterDev\">Twitter</a>, <a href=\"https://www.linkedin.com/showcase/flutterdevofficial/\">LinkedIn</a>, and subscribe to the Flutter <a href=\"https://www.youtube.com/c/flutterdev\">YouTube</a> channel to be sure you don’t miss any more of Dash’s multiverse adventures.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=666f9a506cc6\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-flutter-forward-666f9a506cc6\">Announcing Flutter Forward</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2022-11-10T16:54:40.000Z":{"title":"Introducing the Flutter News Toolkit — now accepting applications","link":"https://medium.com/flutter/introducing-the-flutter-news-toolkit-now-accepting-applications-9e926db55f6d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/9e926db55f6d","category":["google-news-initiative","mobile-apps","flutter","news"],"dc:creator":"Zoey Fan","pubDate":"Thu, 10 Nov 2022 16:54:40 GMT","atom:updated":"2022-11-10T23:57:09.531Z","content:encoded":"<h3>Introducing the Flutter News Toolkit — now accepting applications</h3><h4>Be among the first to launch news mobile applications with the Flutter News Toolkit</h4><p>The way we consume the news has changed considerably over the last twenty years. Market research suggests that <a href=\"https://www.insiderintelligence.com/content/the-majority-of-americans-mobile-time-spent-takes-place-in-apps\">US smartphone users spend 88% of their time using apps versus mobile web browsers</a>. However, for news publishers that are often resource-constrained, mobile apps can be difficult and costly to build.</p><p>Building a high-quality mobile news app is a major undertaking: you want to include a rich reading experience, great navigation and search, authentication, ad integration, notifications, profiles and subscriptions, and a tailored design experience. Moreover, you have to do all that for multiple platforms (such as iOS and Android), continue to update your app with the latest features, and keep multiple products in sync. This is a tremendous effort for large news organizations with a portfolio of brands <em>and</em> for smaller publishers who can’t afford to staff large app development teams that specialize in each platform.</p><p>We’ve invested in helping news organizations solve this problem, using industry best practices and a powerful new toolkit from Google.</p><h4>Introducing the Flutter News Toolkit</h4><p>We’re excited to announce that Google’s Flutter team is partnering with the <a href=\"https://newsinitiative.withgoogle.com/\">Google News Initiative (GNI)</a> to release<a href=\"https://forms.gle/J6t3Auz4QoZTunBJ7\"> a free toolkit</a> that allows publishers to create mobile apps on iOS and Android faster by reducing the app development time up to 80%.</p><p>The Flutter News Toolkit is an easy-to-use template on which a news organization can build an app and includes blocks of sample code for common user interface and app functionalities.</p><p>We worked closely with industry experts and news publishers across the world to understand the most critical features and user workflows for a news application, and incorporated the best practices from <a href=\"https://news-consumer-insights.appspot.com/\">News Consumer Insights </a>to help you achieve higher reader engagement and meet financial goals through the Flutter news toolkit.</p><p>The Flutter News Toolkit includes critical features such as:</p><ul><li>User onboarding</li><li>Account creation/login</li><li>Content feeds and content pages</li><li>Analytics</li><li>Notifications</li><li>Social sharing</li><li>Subscriptions</li><li>Ads</li></ul><p>You can use these pre-integrated features out of the box, or easily modify and swap them with other functionalities that you prefer.</p><figure><img alt=\"This image shows a number different examples of features provided in the Flutter News Toolkit\" src=\"https://cdn-images-1.medium.com/max/1024/1*eQsCJ1lXurwLVnD5wIDxkg.png\" /><figcaption><em>Sample features provided in the Flutter News Toolkit</em></figcaption></figure><h4>Early adopter of the Flutter News Toolkit</h4><p>One of the Flutter News Toolkit’s early adopters is Hespress, which is one of Morocco’s largest news sites. Hespress had been wanting to reach more audiences by creating a mobile application targeting English speakers, but didn’t have enough resources to get started. With the Flutter News Toolkit, Hespress was able to finish the entire application development within 6 weeks and they have recently launched their app <a href=\"https://apps.apple.com/us/app/hespress-english/id1609463589\">Hespress</a> <a href=\"https://play.google.com/store/apps/details?id=com.hespress.english&amp;hl=en_US&amp;gl=US\">English</a>.</p><p>“The Flutter News Toolkit was intuitive to work with and customized to look and feel like a proper Hespress app,” says El Guennouni Hassane, the General Manager of Hespress. “It contained all the core features, sections, and layouts that would be required for us. It helped us save months of development and optimized the whole process of revamping our English app while maintaining one code base instead of two.”</p><figure><img alt=\"Screenshots of Hespress English app\" src=\"https://cdn-images-1.medium.com/max/1024/0*TC5XvMCLwYWLzFhG\" /><figcaption><em>Screenshots of Hespress English app</em></figcaption></figure><h4>Apply now to access the Flutter News Toolkit</h4><p>As we roll out the Flutter News Toolkit, we are offering limited spaces to publishers who are interested in launching news mobile apps within the next 3–6 months. This program is open for application to all publishers across the world and in any language. We will be expanding our program over time, but here are some benefits you will get by joining now:</p><ul><li>Access to all of the source code and a step-by-step guide for the Flutter News Toolkit for free</li><li>The ability to modify, delete, or add new features as you wish</li><li>Assistance from Google in launching your custom app in the Play Store and Apple Store</li><li>The opportunity to be featured in Google’s marketing materials</li></ul><p>Please fill out the <a href=\"https://forms.gle/J6t3Auz4QoZTunBJ7\">application</a>. We’re accepting new publishers in batches as we refine the product before launching to general availability in the coming months. We look forward to helping more news organizations expand their digital presence, establish audience relationships, and build sustainable business models with diversified revenue streams.</p><h3>FAQ</h3><h4>What is Flutter?</h4><p>Flutter is Google’s open source UI toolkit for building beautiful apps for mobile, web, and desktop from a single codebase. Flutter significantly reduces the time required to build and publish an app. Today, Flutter is <a href=\"https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/\">the most popular cross-platform</a> development framework, with over 3 million developers around the world. There are more than 500,000 Flutter apps, including Alibaba, BMW, Google Pay, PUBG, Shein, and Wechat.</p><h4>Is Flutter easy to learn?</h4><p>Yes, for developers who have knowledge of other programming languages such as Java, learning Flutter is quick. Besides, we have a wealth of <a href=\"https://flutter.dev/learn\">learning resources</a> available for you to get started.</p><h4><strong>Can I use other non-Google services such as Ads, analytics, and subscriptions in the app?</strong></h4><p>Of course! The Flutter News Toolkit only aims to provide a sample. You are not required to use any service you don’t want. In fact, it is easy to remove or swap the existing integrations with other services. For example, if you want to use non-Google Ads services, you can find other <a href=\"https://pub.dev/packages?q=platform%3Aandroid+platform%3Aios+ads\">packages</a> on pub.dev.</p><h4>How much work am I required to do to launch the app?</h4><p>While the news template can lower the barrier to entry for building news mobile applications, this solution still requires Flutter development work. The template doesn’t support no-code or wysiwyg functionality or tools (such as dashboards) for non-technical users to modify the app branding and styling.</p><p>We have mapped out the deployment process at a high-level with an assumption of 2–3 Flutter engineers working on the project. As an example, early adopters like Hespress finished their application development within 6 weeks.</p><figure><img alt=\"This image maps out the deployment process at a high-level\" src=\"https://cdn-images-1.medium.com/max/1024/0*NfASfTMOVQde8r-K\" /><figcaption><em>Deployment process at a high-level</em></figcaption></figure><h4>If I don’t have an in-house development team, how can I use the template?</h4><p>We can recommend Flutter agencies who can help you take the template to the finish line. As a disclaimer, Google is not associated with these agencies, and we do not take any revenue share from them.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9e926db55f6d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/introducing-the-flutter-news-toolkit-now-accepting-applications-9e926db55f6d\">Introducing the Flutter News Toolkit — now accepting applications</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-23T20:29:17.000Z":{"title":"Introducing background isolate channels","link":"https://medium.com/flutter/introducing-background-isolate-channels-7a299609cad8?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/7a299609cad8","category":"flutter","dc:creator":"Aaron Clarke","pubDate":"Mon, 23 Jan 2023 20:29:17 GMT","atom:updated":"2023-01-23T20:32:28.242Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bSKidxVM7-brUJFuyKdVFg.png\" /></figure><p>Now as of Flutter 3.7, I’m pleased to announce that developers can use Plugins and Platform Channels from <em>any</em> isolate. This has been one of our <a href=\"https://github.com/flutter/flutter/issues/13937\">highest ranked issues</a> and has been around since 2018. It was deprioritized since it wasn’t trivial to implement and there was a workaround, albeit cumbersome: always use Plugins from the root isolate (the isolate that Flutter provides). However, as Flutter has matured it has increasingly focused on performance, following the old software adage “Make it work, make it right, make it fast.” Choosing to implement this feature was a happy intersection of improving performance and also making Flutter easier to use. So, it became an easy decision to make the investment.</p><p>If you want to see how this feature is used, check out the <a href=\"http://tbd\">sample code</a> on GitHub.</p><h3>Use cases</h3><p>Why would someone want to use plugins from a background isolate? Well it’s clear that there is a need for plugins since not all of the world’s code is written in Dart. There are years of effort from the community to make that code accessible using plugins, things like: <em>path_provider</em>’s ability to find the temporary directory or <em>flutter_local_notifications</em>’s ability to post notifications.</p><p>The next logical question is: “why would someone execute code on a background isolate?” The answer is that sometimes you don’t have a choice, a library might be invoking callbacks on a background isolate, like <em>android_alarm_manager_plus</em>. Or an app might be doing significant computations and the developer doesn’t want those to interfere with the UI.</p><p>In my time on the team helping other teams at Google adopt Flutter, it was inevitable that, as a product matured, they would eventually get into a situation where the root isolate would become a bottleneck. So, we need to make sure everything in the framework is optimized and give tools to users to easily offload work when necessary.</p><p>Here is a contrived concrete use case for Background Isolate Channels:</p><p>Imagine an app for generating high resolution images from text prompts with AI. The user’s previous creations are stored on Firebase Cloud Storage and there is a feature to export and share the creations from the user’s phone. The Flutter app launches a background isolate which downloads the 8k version of their image from Firebase Cloud Store, downsample the image to the desired export size, save the image to the camera roll, and finally post a local notification when the export is finished.</p><p>At least 3 plugins were used from a background isolate in this example, one to read from Firebase Cloud Store, one to save to the phone’s camera roll, and one to post a local notification. Without Background Isolate Channels, the app would have to copy the 8k image from the root isolate to the background isolate in order for it to be downsampled. There is no way to make that a constant time operation with Dart today.</p><h3>Quick sample</h3><p>Here is a quick sample using the new API to call the <em>shared_preferences</em> plugin from a background isolate:</p><pre>import ‘package:flutter/services.dart’;<br>import ‘package:shared_preferences/shared_preferences.dart’;</pre><pre>void main() {<br> // Identify the root isolate to pass to the background isolate.<br> // (API introduced in Flutter 3.7)<br> RootIsolateToken rootIsolateToken = RootIsolateToken.instance!;<br> Isolate.spawn(_isolateMain, rootIsolateToken);<br>}</pre><pre>void _isolateMain(RootIsolateToken rootIsolateToken) async {<br> // Register the background isolate with the root isolate.<br> BackgroundIsolateBinaryMessenger<br>   .ensureInitialized(rootIsolateToken);<br> // You can now use the shared_preferences plugin.<br> SharedPreferences sharedPreferences =<br>   await SharedPreferences.getInstance();<br> print(sharedPreferences.getBool(‘isDebug’));<br>}</pre><h3>Technical details</h3><p>Here is a high level overview of how Platform Channels work:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/834/0*Db7Niu7FqKGszecZ\" /></figure><p>When the result from the Platform Channel was invoked there was a hardcoded hop to the <em>platform</em> thread. In order for Background Isolate Channels to work, the isolate sending the message must be stored so that the engine can schedule the result on that isolate’s event loop. That was implemented by using <a href=\"https://github.com/dart-lang/sdk/blob/eb9554d70e386bb3177f63509ba8f7e4bbf500a0/runtime/include/dart_native_api.h#L125\">Dart’s <em>ports</em></a><em>.</em> Dart <em>ports</em> store the isolate that owns them and is the only way to schedule on those isolates from the C API.</p><p>The other thing needing to be implemented was some way of associating background isolates with their root isolate. This was a surprise to me, but in order to shut down platform channels when a Flutter engine is destructed, one must know what background isolates are associated with that engine. Otherwise a background isolate could try to communicate with a Flutter engine that is in the process of being destroyed. The ramifications of this can be seen in the final API where a <em>RootIsolateToken</em> must be used to initialize the <em>BackgroundIsolateBinaryMessenger</em>.</p><p>For more information on the implementation, check out the <a href=\"https://docs.google.com/document/d/1yAFw-6kBefuurXWTur9jdEUAckWiWJVukP1Iay8ehyU/edit#heading=h.722pnbmlqbkx\">Isolate Platform Channels</a> design doc. This doc also contains proposals for communicating in the opposite direction, which have not been implemented or accepted yet.</p><p>Thank you to the Flutter community for your support and I hope you all find amazing uses for this new feature.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7a299609cad8\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/introducing-background-isolate-channels-7a299609cad8\">Introducing background isolate channels</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-24T19:32:28.000Z":{"title":"What’s new in Flutter 3.7","link":"https://medium.com/flutter/whats-new-in-flutter-3-7-38cbea71133c?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/38cbea71133c","category":["dart","release-notes","announcements","flutter"],"dc:creator":"Kevin Chisholm","pubDate":"Tue, 24 Jan 2023 19:32:28 GMT","atom:updated":"2023-01-26T05:51:08.338Z","content:encoded":"<h4><em>Material 3 updates, iOS improvements, and much more!</em></h4><p>We are excited to start 2023 with the release of Flutter 3.7! In Flutter 3.7, we as a community, continue to improve the framework with the addition of some great new features such as: the ability to create custom menu bars, cascading menus, tools to better support internationalization, new debugging tools, and much more.</p><p>We also continue to refine features such as global selection, faster rendering with Impeller, DevTools, and as always, performance!</p><p>Let’s go on a quick journey together to explore the new features in Flutter 3.7!</p><h3>Enhanced Material 3 support</h3><p>Material 3 support has been greatly enhanced in 3.7 with the migration of the following widgets:</p><ul><li><a href=\"https://api.flutter.dev/flutter/material/Badge-class.html\">Badge</a></li><li><a href=\"https://api.flutter.dev/flutter/material/BottomAppBar-class.html\">BottomAppBar</a></li><li><a href=\"https://api.flutter.dev/flutter/material/FilledButton-class.html\">Filled</a> and <a href=\"https://api.flutter.dev/flutter/material/FilledButton/FilledButton.tonal.html\">Filled Tonal</a> buttons</li><li><a href=\"https://api.flutter.dev/flutter/material/SegmentedButton-class.html\">SegmentedButton</a></li><li><a href=\"https://api.flutter.dev/flutter/material/Checkbox-class.html\">Checkbox</a></li><li><a href=\"https://api.flutter.dev/flutter/material/Divider-class.html\">Divider</a></li><li><a href=\"https://api.flutter.dev/flutter/material/MenuBar-class.html\">Menus</a></li><li><a href=\"https://api.flutter.dev/flutter/material/DropdownMenu-class.html\">DropdownMenu</a></li><li><a href=\"https://api.flutter.dev/flutter/material/Drawer-class.html\">Drawer</a> and <a href=\"https://api.flutter.dev/flutter/material/NavigationDrawer-class.html\">NavigationDrawer</a></li><li><a href=\"https://api.flutter.dev/flutter/material/ProgressIndicator-class.html\">ProgressIndicator</a></li><li><a href=\"https://api.flutter.dev/flutter/material/Radio-class.html\">Radio</a> buttons</li><li><a href=\"https://api.flutter.dev/flutter/material/Slider-class.html\">Slider</a></li><li><a href=\"https://api.flutter.dev/flutter/material/SnackBar-class.html\">SnackBar</a></li><li><a href=\"https://api.flutter.dev/flutter/material/TabBar-class.html\">TabBar</a></li><li><a href=\"https://api.flutter.dev/flutter/material/TextField-class.html\">TextFields</a> and <a href=\"https://api.flutter.dev/flutter/material/InputDecorator-class.html\">InputDecorator</a></li><li><a href=\"https://api.flutter.dev/flutter/widgets/Banner-class.html\">Banner</a></li></ul><p>To use these new features just turn on the <a href=\"https://api.flutter.dev/flutter/material/ThemeData/useMaterial3.html\">useMaterial3</a> flag in your application’s <a href=\"https://api.flutter.dev/flutter/material/ThemeData-class.html\">ThemeData</a> widget. To take full advantage of M3 support you will want a complete M3 color scheme. You can provide your own, use the new <a href=\"https://m3.material.io/theme-builder#/custom\">theme builder</a> tool, or Flutter can generate one for you from a single seed color using the colorSchemeSeed parameter of the <a href=\"https://api.flutter.dev/flutter/material/ThemeData-class.html\">ThemeData</a> constructor:</p><pre>MaterialApp(<br>  theme: ThemeData(<br>     useMaterial3: true,<br>    colorSchemeSeed: Colors.green,<br>  ),<br>  // …<br>);</pre><p>For the latest details of Flutter’s Material 3 support, see the <a href=\"https://github.com/flutter/flutter/issues/91605\">umbrella issue</a> on GitHub.</p><p>To play with these components yourself, check out the <a href=\"https://flutter.github.io/samples/web/material_3_demo/\">interactive demo</a> showing off all the new M3 features:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AsyYVtFMXY0iS6gLz_O4BA.png\" /></figure><h3>Menu bars and cascading menus</h3><p>Flutter can now create menu bars and cascading context menus.</p><p>For macOS, create a menu bar using the PlatformMenuBar widget, which defines platform native menu bars rendered by macOS instead of Flutter.</p><p>And, for all platforms, you can define a <a href=\"https://m3.material.io/components/menus/overview\">Material Design menu</a> that provides cascading menu bars (<a href=\"https://api.flutter.dev/flutter/material/MenuBar-class.html\">MenuBar</a>), or standalone cascading menus triggered by another user interface element (<a href=\"https://api.flutter.dev/flutter/material/MenuAnchor-class.html\">MenuAnchor</a>). These menus are fully customizable, and the menu items can be custom widgets, or you can use the new menu item widgets (<a href=\"https://api.flutter.dev/flutter/material/MenuItemButton-class.html\">MenuItemButton</a>, <a href=\"https://api.flutter.dev/flutter/material/SubmenuButton-class.html\">SubmenuButton</a>).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/683/0*8T3nUAK-8AUveoD2\" /></figure><h3>Impeller preview</h3><p>The team is pleased to announce that the new <a href=\"https://github.com/flutter/engine/tree/main/impeller\">Impeller rendering engine</a> is <a href=\"https://github.com/flutter/engine/tree/main/impeller#try-impeller-in-flutter\">ready for preview</a> on iOS on the stable channel. We believe the performance of Impeller will meet or exceed the Skia renderer for most apps, and as for fidelity, Impeller implements all but a small number of rarely used corner cases. We expect to make Impeller the default renderer on iOS in a forthcoming stable release, so please continue to file <a href=\"https://github.com/flutter/flutter/issues\">Impeller feedback</a> on GitHub.</p><p>While we are increasingly confident that Impeller on iOS will meet the rendering needs of nearly all existing Flutter apps, there are still a few gaps in API coverage. The small number of remaining gaps are listed <a href=\"https://github.com/flutter/flutter/wiki/Impeller#status\">on the Flutter wiki</a>. Users might also notice minor visual differences in rendering between Skia and Impeller. These minor differences might be bugs, so please don’t hesitate to <a href=\"https://github.com/flutter/flutter/issues\">file issues</a>.</p><p>Our progress on Impeller was greatly accelerated by contributions from the community. In particular, GitHub users <a href=\"https://github.com/ColdPaleLight\">ColdPaleLight</a>, <a href=\"https://github.com/guoguo338\">guoguo338</a>, <a href=\"https://github.com/JsouLiang\">JsouLiang</a>, and <a href=\"https://github.com/magicianA\">magicianA</a> contributed 37 out of 291 (&gt;12%) Impeller-related patches to this release. Thank you!</p><p>We continue to make progress on a Vulkan backend for Impeller (with fallback to OpenGL on older devices), but Impeller on Android isn’t yet ready for preview. Android support is under active development, and we hope to share more about it — with more news about support for desktop and web — in future releases.</p><p>Follow along with our progress in the <a href=\"https://github.com/orgs/flutter/projects/21\">Impeller project board</a> on GitHub.</p><h3>iOS release validation</h3><p>When you release an iOS app, a <a href=\"https://docs.flutter.dev/deployment/ios#review-xcode-project-settings\">checklist of settings to update</a> ensures that your app is ready for submission to the App Store.</p><p>The flutter build ipa command now validates some of these settings, and informs you if there are changes that should be made to your app before release.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/699/0*nMxlWBkYUzlFdnI2\" /></figure><h3>DevTools updates</h3><p>In this release, there are several new tooling features and overall improvements to try out. The DevTools Memory debugging tool has undergone a complete overhaul. There are three new feature tabs, <strong>Profile</strong>, <strong>Trace</strong>, and <strong>Diff</strong>, that support all the previously supported memory debugging features and added more for your debugging ease. New features include the ability to analyze the current memory allocation for your app by class and memory type, investigate what code paths are allocating memory for a set of classes at runtime, and diff memory snapshots to understand memory management between two points in time.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*i5K5F5bxN_5X0EAi\" /></figure><p>All of these new memory features have been documented on <a href=\"https://docs.flutter.dev/development/tools/devtools/memory\">docs.flutter.dev</a>, so check out the documentation for more details.</p><p>The Performance page also has a couple notable new features. A new <strong>Frame Analysis</strong> tab at the top of the Performance page provides insights for the selected Flutter frame. Insights might include suggestions on how to trace expensive parts of the Flutter frame in more detail, or warnings about expensive operations detected in the Flutter frame.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1014/0*op4bHcx7HvorMKSE\" /></figure><p>These are just a couple highlights, but this release contains several bug fixes and improvements beyond the features mentioned here, including some important bug fixes for the Inspector, the Network profiler, and the CPU profiler. For a more in-depth list of updates, check out the release notes for the DevTools changes that made it into Flutter 3.7.</p><ul><li><a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.17.0\">Flutter DevTools 2.17.0 release notes</a></li><li><a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.18.0\">Flutter DevTools 2.18.0 release notes</a></li><li><a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.19.0\">Flutter DevTools 2.19.0 release notes</a></li><li><a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.20.0\">Flutter DevTools 2.20.0 release notes</a></li></ul><h3>Custom context menus</h3><p>You can now create custom context menus anywhere in a Flutter app. You can also use them to customize built-in context menus.</p><p>For example, you could add a “Send email” button to the default text selection toolbar that shows up when the user has selected an email address (<a href=\"https://github.com/flutter/samples/blob/main/experimental/context_menus/lib/email_button_page.dart\">code</a>). See the <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoTextField/contextMenuBuilder.html\">contextMenuBuilder</a> parameter, which has been added to existing widgets that show a context menu by default, like TextField. You can return any widget you want from contextMenuBuilder, including modifying the default platform-adaptive context menu.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*dYBqWaVEAscMJ2Yz\" /></figure><p>This new feature works outside of text selection, too. You could, for example, create an Image widget that shows a <strong>Save</strong> button when right clicked or long pressed (<a href=\"https://github.com/flutter/samples/blob/main/experimental/context_menus/lib/image_page.dart\">code</a>). Use <a href=\"https://api.flutter.dev/flutter/widgets/ContextMenuController-class.html\">ContextMenuController</a> to display the current platform’s default context menu, or a custom one, anywhere in your app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*uq8A_Zq5BM2DGDRT\" /></figure><p>See a full suite of examples in <a href=\"https://github.com/flutter/samples/tree/main/experimental/context_menus\">Flutter’s samples repository</a>.</p><h3>CupertinoListSection and CupertinoListTile widgets</h3><p>Thanks to the efforts of the Github user <a href=\"https://github.com/campovski\">Campovski</a>, Cupertino has two new widgets, <a href=\"https://github.com/flutter/flutter/pull/78732\">CupertinoListSection and </a><a href=\"https://github.com/flutter/flutter/pull/78732\">CupertinoListTile</a>, for showing a scrollable list of widgets in the iOS style. They are the Cupertino versions of ListView and ListTile in Material.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*7rMA1GAEoQxfkwYC\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oLSR3-_9jQzCozYV\" /></figure><h3>Scrolling improvements</h3><p>Several <a href=\"https://github.com/flutter/flutter/issues?page=1&amp;q=is%3Aissue+is%3Aclosed+closed%3A2022-07-11..2022-11-30+label%3A%22f%3A+scrolling%22+reason%3Acompleted\">scrolling updates</a> have arrived with this release: polish and refinement for trackpad interactions, new widgets like Scrollbars and DraggableScrollableSheet, and improved handling for text selection within scrolling contexts.</p><p>Notably, MacOS apps will now experience higher fidelity with the addition of <a href=\"https://github.com/flutter/flutter/pull/108298\">new scrolling physics</a> to match the desktop platform.</p><p>New <a href=\"https://github.com/flutter/flutter/pull/112982\">AnimatedGrid</a> and SliverAnimatedGrid widgets animate items added to (or removed from) a list.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*SY_JFBrqhg_Gs64Z\" /></figure><p>Lastly, we <a href=\"https://github.com/flutter/flutter/pull/108706\">fixed a regression</a> in the builder constructor of several scrolling widgets, like ListView. During the NNBD migration of the Flutter framework, the itemBuilder, which allows users to provide widgets on demand, was migrated to an IndexedWidgetBuilder. This meant that the itemBuilder could no longer return null, which (in the past) could be used to indicate that the end of the list had been reached. This functionality was restored with NullableIndexedWidgetBuilder. Thanks to @rrousselGit for noticing this — years after the migration — and sending a fix!</p><h3>Internationalization tools and docs</h3><p>Internationalization support has been completely revamped! We’ve completely rewritten the gen-l10n tool to support:</p><ul><li>Descriptive syntax errors.</li><li>Complex messages involving nested/multiple plurals, selects, and placeholders.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VSZRJbLyqlfekARB\" /></figure><p>For more information, see the updated <a href=\"https://docs.flutter.dev/development/accessibility-and-localization/internationalization\">Internationalizing Flutter apps</a> page.</p><h3>Global selection improvements</h3><p>SelectionArea now supports keyboard selections. You can extend an existing selection with keyboard shortcuts such as shift+right.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F792060738%3Fh%3D8caf43dccd%26app_id%3D122963&amp;dntp=1&amp;display_name=Vimeo&amp;url=https%3A%2F%2Fvimeo.com%2F792060738&amp;image=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F1594192506-31e585daa093e70f28f72c26dbc4c35a48d3c315abffafcb24507ea1b387ec77-d_640&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=vimeo\" width=\"796\" height=\"616\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d1a576670ac8dada616a26ca68437c2b/href\">https://medium.com/media/d1a576670ac8dada616a26ca68437c2b/href</a></iframe><h3>Background isolates</h3><p>Now <a href=\"https://docs.flutter.dev/development/platform-integration/platform-channels\">Platform Channels</a> can be invoked from any <a href=\"https://docs.flutter.dev/development/packages-and-plugins/background-processes\">Isolate</a>. Previously, users were only able to invoke Platform Channels from Flutter’s supplied main isolate. This makes working with isolates and host platform code in <a href=\"https://docs.flutter.dev/development/packages-and-plugins/developing-packages\">Plugins</a> or <a href=\"https://docs.flutter.dev/development/add-to-app\">Add-to-app</a> better. For more information, check out <a href=\"https://docs.flutter.dev/development/platform-integration/platform-channels\">Writing custom platform-specific code</a> on flutter.dev, and the in-depth article, <a href=\"https://medium.com/flutter/introducing-background-isolate-channels-7a299609cad8\">Introducing background isolate channels</a>, a free article on Medium.</p><h3>Text magnifier</h3><p>The magnifying glass that appears during text selection on Android and iOS now works in Flutter. This is enabled out of the box for all apps with text selection, but if you want to disable or customize it, see the <a href=\"https://master-api.flutter.dev/flutter/material/TextField/magnifierConfiguration.html\">magnifierConfiguration</a> property.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*vuIpoOEp5lqEZYeW\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*FIlFtTa6DAlXUwqE\" /></figure><h3>Swift migration for plugins</h3><p>With Apple focusing on Swift for their own APIs, we wanted to develop references to help Flutter plugin developers migrate or create new plugins with Swift. The <a href=\"https://pub.dev/packages/quick_actions\">quick_actions</a> plugin has been migrated from Objective-C to Swift, and can be used as a demonstration of best practices. If you are interested in helping us migrate 1P plugins, see <a href=\"https://github.com/flutter/flutter/wiki/Contributing-to-Plugins-and-Packages#swift-migration-for-1p-plugins\">the Swift migration section</a> of the wiki.</p><p><strong>Resources for iOS developers</strong></p><p>We have published several new resources for iOS developers, including:</p><ul><li><a href=\"https://docs.flutter.dev/get-started/flutter-for/ios-devs?tab=swiftui\">Flutter for SwiftUI developers</a></li><li><a href=\"https://dart.dev/guides/language/coming-from/swift-to-dart\">Dart for Swift developers</a></li><li><a href=\"https://docs.flutter.dev/resources/dart-swift-concurrency\">Flutter concurrency for Swift Developers</a></li><li><a href=\"https://docs.flutter.dev/development/add-to-app/ios/add-flutter-screen\">Adding Flutter to an existing SwiftUI app</a></li><li><a href=\"https://docs.flutter.dev/deployment/flavors\">Creating flavors with Flutter</a> (for both Android and iOS)</li></ul><h3>Bitcode deprecation</h3><p><a href=\"https://developer.apple.com/documentation/xcode-release-notes/xcode-14-release-notes\">Starting with Xcode 14, bitcode is no longer required for watchOS and tvOS applications, and the App Store no longer accepts bitcode submissions from Xcode 14.</a> As such, bitcode support has been removed from Flutter.</p><p>By default, Flutter apps don’t have bitcode enabled, and we don’t expect this to impact many developers. However, if you have enabled bitcode manually in your Xcode project, disable it as soon as you upgrade to Xcode 14. You can do so by opening ios/Runner.xcworkspace and set <strong>Enable Bitcode</strong> to <strong>No</strong>. Add-to-app developers should disable it in the host Xcode project.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OQtroLJAJcetxyeV\" /></figure><p>To learn more about bitcode distribution, Check out <a href=\"https://help.apple.com/xcode/mac/11.0/index.html?localePath=en.lproj#/devde46df08a\">Apple’s documentation</a>.</p><h3>iOS PlatformView BackdropFilter</h3><p>We’ve added the ability for native iOS views to be blurred when rendered underneath a blurred Flutter widget, and UiKitView widgets can now be wrapped inside a BackdropFilter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/345/0*kdYw1nYkT8aKHjZP\" /></figure><p>For more information, see the <a href=\"http://flutter.dev/go/ios-platformview-backdrop-filter-blur\">iOS PlatformView BackdropFilter</a> design doc.</p><h3>Memory management</h3><p>This release introduces a few improvements to memory management that have the collective effect of reducing jank caused by garbage collection pauses, reducing CPU utilization due to allocation velocity and background GC threads, and reducing the memory footprint.</p><p>As one example, we have expanded the existing practice of manually deallocating native resources that back certain dart:ui Dart objects. Previously, the native resources would be held by the Flutter engine until the Dart VM garbage collected the Dart objects. Through the analysis of user applications and our own benchmarks, we determined that this strategy in general doesn’t do enough to avoid ill-timed GCs and overuses memory. Therefore, in this release, the Flutter engine adds API for explicitly deallocating the native resources held by Vertices, Paragraph, and ImageShader objects.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/996/0*LmVDzMTW34id5CNV\" /></figure><p>In our benchmarks of the Flutter framework migrated to this API, these improvements reduced 90%-ile frame build times up to more than 30%, which end-users will experience as smoother animations with less jank.</p><p>Additionally, the Flutter engine <a href=\"https://github.com/flutter/engine/pull/35473\">no longer registers</a> the size of GPU images with the Dart VM. As above, these images were already manually deallocated by the framework when no longer needed, so informing Dart’s GC policies of the size of the GPU memory backing the Dart heap objects needlessly increased Dart heap memory pressure, triggering ill-timed GCs that could not have collected any additional memory. Along similar lines, it’s now the policy of the Flutter engine to report to the Dart VM <a href=\"https://github.com/flutter/engine/pull/35813\">only the shallow size</a> of the native objects that back dart:ui Dart objects.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/697/0*P_s-0gE5JGUerDkA\" /></figure><p>In our benchmarks, this change eliminates synchronous GC work while building frames when a widget creates GPU resident images.</p><p>In this release, the Flutter Engine also does a better job of dynamically updating the Dart VM with information about Flutter application state. In particular, Flutter now uses the Dart VM’s <a href=\"https://web.dev/rail/\">RAIL</a> style <a href=\"https://github.com/dart-lang/sdk/commit/c6a1eb1b61844b2d733f9e2f4c7754f1920325d7\">API</a> to enter a <a href=\"https://github.com/flutter/flutter/pull/110600\">low-latency mode during route transition animations</a>. During this low-latency mode, the Dart VM’s memory allocator prefers heap growth over garbage collection to avoid interrupting transition animations with GC pauses. While this change didn’t entail any dramatic performance improvement, we plan to expand usage of this model in future releases to further eliminate ill-timed GC pauses. Additionally, we have <a href=\"https://github.com/flutter/engine/pull/37737\">fixed errors</a> in the logic that decides when to notify the Dart VM that the Flutter engine is idle. Fixing these errors also prevents GC-related jank. Finally, for add-to-app Flutter applications, the Flutter engine now <a href=\"https://github.com/flutter/engine/pull/37539\">informs the Dart VM</a> when the Flutter view is no longer displayed. This now causes the Dart VM to trigger a final major GC for the Isolate associated with the view. This change reduces Flutter’s memory footprint when no Flutter views are visible.</p><h3>Sunsetting macOS 10.11 through 10.13</h3><p>As <a href=\"https://medium.com/flutter/whats-new-in-flutter-3-3-893c7b9af1ff#19cd\">previously announced</a>, Flutter no longer supports macOS versions 10.11 and 10.12. Since that announcement, <a href=\"https://github.com/flutter/flutter/issues/114445\">further analysis</a> revealed that removing support for 10.13 as well would have limited additional impact, and would help the team to greatly simplify the codebase. This means that apps built against stable Flutter SDKs with this release and onward will no longer work on these versions, and the minimum macOS version supported by Flutter increases to 10.14 Mojave.</p><p>As a consequence, since all versions of iOS and macOS supported by Flutter include Metal support, the OpenGL backend has been removed from both the iOS and macOS embedders. Removing these backends reduced the compressed size of the Flutter engine by about 100KB.</p><h3>toImageSync</h3><p>This release <a href=\"https://github.com/flutter/engine/pull/33736\">adds the methods</a> Picture.toImageSync and Scene.toImageSync to dart:ui, analogous to the asynchronous methods Picture.toImage, and Scene.toImage.Picture.toImageSync synchronously returns a handle to an Image from a Picture, with the rasterization for the Image taking place asynchronously in the background. The image is then kept as GPU resident when a GPU context is available, meaning that it is faster to draw compared to images produced by toImage. (Images produced by toImage could also be kept GPU resident, but this optimization has not yet been implemented in that scenario.)</p><p>The new toImageSync APIs support use-cases, such as:</p><ul><li>Quickly snapping off an expensive-to-rasterize picture for reuse across multiple frames.</li><li>Applying multi-pass filters to a picture.</li><li>Applying custom shaders.</li></ul><p>As one example, the Flutter framework <a href=\"https://github.com/flutter/flutter/pull/106621\">now uses this API</a> to improve the performance of page transitions on Android, which nearly halves frame rasterization times, reduces jank, and allows the animation to hit 90/120fps on devices that support those refresh rates.</p><h3>Custom shader support improvements</h3><p>This release includes numerous improvements to Flutter’s support for custom fragment shaders. The Flutter SDK now includes a shader compiler that compiles GLSL shaders listed in the pubspec.yaml file to the correct backend-specific format for the target platform. Additionally, custom shaders can now be hot reloaded for a convenient development cycle. Custom shaders are also now supported by both the Skia and Impeller backends on iOS.</p><p>We are very impressed by the demos that the community has already shared, and are excited to see further innovative use of custom shaders in Flutter:</p><p><a href=\"https://twitter.com/reNotANumber/status/1599717360096620544\">https://twitter.com/reNotANumber/status/1599717360096620544</a></p><p><a href=\"https://twitter.com/reNotANumber/status/1599810391625719810\">https://twitter.com/reNotANumber/status/1599810391625719810</a></p><p><a href=\"https://twitter.com/wolfenrain/status/1600242975937687553\">https://twitter.com/wolfenrain/status/1600242975937687553</a></p><p><a href=\"https://twitter.com/iamjideguru/status/1598308434608283650\">https://twitter.com/iamjideguru/status/1598308434608283650</a></p><p><a href=\"https://twitter.com/rxlabz/status/1609975128758026247\">https://twitter.com/rxlabz/status/1609975128758026247</a></p><p><a href=\"https://twitter.com/RealDevOwl/status/1528357506795421698\">https://twitter.com/RealDevOwl/status/1528357506795421698</a></p><p><a href=\"https://twitter.com/TakRutvik/status/1601380047599808513\">https://twitter.com/TakRutvik/status/1601380047599808513</a></p><p><a href=\"https://twitter.com/wolfenrain/status/1600601043477401606\">https://twitter.com/wolfenrain/status/1600601043477401606</a></p><p>See detailed documentation for <a href=\"https://docs.flutter.dev/development/ui/advanced/shaders\">writing and using custom fragment shaders</a> on docs.flutter.dev, and a helpful package of utilities, <a href=\"https://pub.dev/packages/flutter_shaders\">flutter_shaders</a> on pub.dev.</p><h3>Font asset hot reload</h3><p>Previously, adding new fonts to the pubspec.yaml file required rebuilding the application to see them, unlike other asset types that could be hot reloaded. Now changes to the font manifest, including additions of new fonts, can be hot reloaded into an application.</p><h3>Reduce animation jank on iOS devices</h3><p>Thanks to open source contributions from <a href=\"https://github.com/luckysmg\">luckysmg</a>, two improvements have reduced animation jank on iOS. In particular, <a href=\"https://github.com/flutter/engine/pull/35592\">the addition</a> of a dummy CADisplayLink on the main thread during gestures now forces refreshes at the max refresh rate. Also, keyboard animations <a href=\"https://github.com/flutter/engine/pull/34871\">now set</a> the refresh rate of the CADisplayLink to the same refresh rate used by Flutter engine’s animator. Thanks to these changes, users should notice more consistently smooth animations on 120Hz iOS devices.</p><h3>Summary</h3><p>It is an understatement to say that Flutter would not be the amazing experience that it is today without its community of talented and passionate contributors. As we continue this journey together, the Flutter team at Google wants you all to know that we could not do this without you. Thank you!</p><p>The momentum isn’t slowing down, stay tuned for future updates!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=38cbea71133c\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-7-38cbea71133c\">What’s new in Flutter 3.7</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-24T17:55:13.000Z":{"title":"How it’s made: Holobooth","link":"https://medium.com/flutter/how-its-made-holobooth-6473f3d018dd?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6473f3d018dd","category":["flutter-app-development","tensorflow","firebase","flutter","machine-learning"],"dc:creator":"Very Good Ventures Team","pubDate":"Tue, 24 Jan 2023 17:55:13 GMT","atom:updated":"2023-01-24T17:55:13.290Z","content:encoded":"<h3>A virtual photo booth experience showcasing Flutter and Machine Learning</h3><p>Introducing the Flutter Forward <a href=\"https://holobooth.flutter.dev/\">Holobooth</a>, a new experience showcasing the power of <a href=\"https://flutter.dev/\">Flutter</a>, <a href=\"https://firebase.google.com/\">Firebase</a>, and Machine Learning (using <a href=\"https://mediapipe.dev/\">MediaPipe</a> and <a href=\"https://tensorflow.org/js\">TensorFlow.js</a>) in a virtual photo booth experience. Start by selecting your avatar (Dash or Sparky) and transport yourself to a tropical beach, volcanic mountain, outer space, the ocean floor, or somewhere else! Since we can’t transport everyone to Nairobi to attend <a href=\"https://flutter.dev/events/flutter-forward\">Flutter Forward</a> in person, we wanted to provide a virtual experience that is just as exciting! With Holobooth, you can capture a short video to commemorate your virtual visit. Then, show your friends by sharing on Twitter or Facebook.</p><figure><img alt=\"Landing screen for the Flutter Forward Holobooth web app. On the left, Dash is taking a picture inside a photo booth decorated with purple and blue hues and the Flutter logo. On the right is a button to get started.\" src=\"https://cdn-images-1.medium.com/max/1024/1*8zOCQg2Qwh_dzC4ndMzoqg.png\" /><figcaption>Try out the Flutter Forward Holobooth at <a href=\"https://holobooth.flutter.dev/\">holobooth.flutter.dev</a></figcaption></figure><p>The Holobooth builds on the first version of the <a href=\"https://medium.com/flutter/how-its-made-i-o-photo-booth-3b8355d35883\">Photo Booth app from Google I/O 2021</a>. Instead of taking photos of you and Dash or Sparky, Holobooth uses machine learning to control animations of Dash or Sparky using your facial expressions.</p><p>We’ll break down how our team collaborated with Google to create a more immersive and futuristic photo booth experience by tapping into the power of Google tools. We used <a href=\"https://flutter.dev/\">Flutter</a> and <a href=\"https://firebase.google.com/\">Firebase</a> to build the Holobooth app. Web ML in JavaScript allowed us to take the experience to the next level with virtual, interactive, 3D avatars. Let’s dive into how we built it!</p><h3>Detecting faces with TensorFlow.js</h3><p>One of the most exciting features of the <a href=\"https://holobooth.flutter.dev/\">Holobooth</a> is the ability to map live video of your face onto a 3D model of Dash (or Sparky) as you travel through their virtual world. If your face expresses surprise, Dash’s face expresses surprise, and so on. To achieve this, we used the <a href=\"https://pub.dev/packages/camera\">camera</a> plugin for Flutter web and <a href=\"https://www.tensorflow.org/js\">TensorFlow.js</a> to detect the user’s face within the frame of the camera. More specifically, we used the <a href=\"https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection\">MediaPipe FaceMesh</a> model, which estimates 468 3D face landmarks in real-time, to detect features of the user’s face within the camera frame across web and mobile browsers.</p><figure><img alt=\"A man with a grey shirt and glasses sitting in a chair. On his face are a bunch of red dots that map onto his features. There is a high concentration of red dots around his eyes and around his mouth.\" src=\"https://cdn-images-1.medium.com/max/750/1*_Pp7DaS5DOfQJtMfjJ3m2Q.png\" /><figcaption>Features detected with the MediaPipe FaceMesh model</figcaption></figure><p>Based on the position of each facial feature, we can determine if the user is in frame, if their eyes or mouth are open, and more. As the user moves around the camera view, the MediaPipe <a href=\"https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection\">FaceMesh</a> model (available via the <a href=\"https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection\">TensorFlow.js Face Landmarks Detection package</a>) ensures that we can track the exact coordinates of the user’s features so that we can mirror them on Dash or Sparky. For more details, you can dig into the <a href=\"https://github.com/flutter/holobooth/blob/1c5bc00f0b43dd56ea7f964b26756a5991d6502e/packages/face_geometry/lib/src/face_geometry.dart\">face_geometry.dart file</a>. While there isn’t an official Dart package for TensorFlow.js yet, the Dart <a href=\"https://pub.dev/packages/js\">JS</a> package allowed us to import the javascript library into a Flutter web app (see the <a href=\"https://github.com/flutter/holobooth/tree/1c5bc00f0b43dd56ea7f964b26756a5991d6502e/packages/tensorflow_models\">tensorflow_models</a> package folder for more details).</p><pre>  FaceGeometry({<br>    required tf.Face face,<br>    required tf.Size size,<br>  }) : this._(<br>          rotation: FaceRotation(keypoints: face.keypoints),<br>          leftEye: LeftEyeGeometry(<br>            keypoints: face.keypoints,<br>            boundingBox: face.boundingBox,<br>          ),<br>          rightEye: RightEyeGeometry(<br>            keypoints: face.keypoints,<br>            boundingBox: face.boundingBox,<br>          ),<br>          mouth: MouthGeometry(<br>            keypoints: face.keypoints,<br>            boundingBox: face.boundingBox,<br>          ),<br>          distance: FaceDistance(<br>            boundingBox: face.boundingBox,<br>            imageSize: size,<br>          ),<br>        );<br><br>  const FaceGeometry._({<br>    required this.rotation,<br>    required this.mouth,<br>    required this.leftEye,<br>    required this.rightEye,<br>    required this.distance,<br>  });</pre><h3>Animating backgrounds and avatars with Rive and TensorFlow.js</h3><p>We turned to <a href=\"https://rive.app/\">Rive</a> to bring Holobooth animations to life. Rive is a web app built in Flutter that provides tools for building highly performant, lightweight, interactive animations that are easy to integrate into a Flutter app. We collaborated with talented designers at Rive and <a href=\"https://www.hopr.tv/\">HOPR design studio</a> to create animated Rive graphics that work seamlessly within our Flutter app. The animated backgrounds and avatars are Rive animations.</p><figure><img alt=\"On the left is a face that moves to the left, then right, up, down, blinks, then opens its mouth. Dash mimics the same movements as the face on the left moves.\" src=\"https://cdn-images-1.medium.com/max/600/1*mvB6J_LUq2WQWJpIZ4A7IQ.gif\" /><figcaption>Move your face to see the Rive model mimic your behavior</figcaption></figure><p>The avatars use Rive <a href=\"https://help.rive.app/editor/state-machine\">State Machines</a> that allow us to control how an avatar behaves and looks. In the Rive State Machine, designers specify all of the inputs. Inputs are values that are controlled by your app. You can think of them as the contract between design and engineering teams. Your product’s code can change the values of the inputs at any time, and the State Machine reacts to those changes.</p><p>For Holobooth, we used inputs to control things like how wide a mouth is open or closed. Using the feature detection from the <a href=\"https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection\">FaceMesh</a> model, we can map them to the corresponding coordinates on our avatar models. Using the StateMachineController, we transform the input from the models to determine how the avatar appears on screen.</p><pre>class CharacterStateMachineController extends StateMachineController {<br>  CharacterStateMachineController(Artboard artboard)<br>      : super(<br>          artboard.animations.whereType&lt;StateMachine&gt;().firstWhere(<br>                (stateMachine) =&gt; stateMachine.name == &#39;State Machine 1&#39;,<br>              ),</pre><p>For example, the avatar models have a property to measure the <a href=\"https://github.com/flutter/holobooth/blob/1c5bc00f0b43dd56ea7f964b26756a5991d6502e/lib/rive/widgets/character_animation.dart\">openness of the mouth</a> (measured from 0–1 where 0 is fully closed and 1 is fully open). If the user closes their mouth within the camera view, the app provides the corresponding value and feeds it into the avatar model so you see your avatar’s mouth also closes on the screen.</p><h3>Capturing the dynamic photo with Firebase</h3><p>The main feature of Holobooth is the GIF or video that you can share to celebrate Flutter Forward. We turned to <a href=\"https://firebase.google.com/products/functions\">Cloud Functions for Firebase</a> to help us generate and upload your dynamic photo to <a href=\"https://firebase.google.com/products/storage\">Cloud Storage for Firebase</a>. Once you press the camera button, the app starts capturing frames for a duration of 5 seconds. With <a href=\"https://www.npmjs.com/package/fluent-ffmpeg\">ffmpeg</a>, we use a Cloud Function to convert the frames into a single GIF and video that are then uploaded to <a href=\"https://firebase.google.com/products/storage\">Cloud Storage for Firebase</a>. You can choose to download your GIF or video for later viewing or to manually upload it to social media.</p><figure><img alt=\"User selects Dash as an avatar, then selects an animated background of outerspace with planets and stars. A rocket moves diagonally up to the left behind Dash. The user selects a blue wizard hat with stars, a matching shirt, and a Flutter mug, then presses the camera button to record a dynamic photo. The final photo is displayed on a separate screen with buttons to share the photo, download it, or retake it.\" src=\"https://cdn-images-1.medium.com/max/800/1*YV7A0DsrEyf2r3hvJ6HqNA.gif\" /><figcaption>Capturing the dynamic photo</figcaption></figure><p>To share your GIF directly to Twitter or Facebook, you can click the share button. You are then taken to the selected platform with a pre-populated post containing a photo of the first frame of your video. To see the full video, click on the link to your holocard — a web page that displays your video in full and a button directing visitors to try out Holobooth for themselves!</p><figure><img alt=\"Holocard page with the first frame of a user’s dynamic photo on the left. Dash is wearing an astronaut suit in front of a futuristic city. On the right is the Flutter Forward event logo with the text “Check out my Flutter holocard” and a button that says “Try now” where users can take their own photo in the Holobooth.\" src=\"https://cdn-images-1.medium.com/max/1024/1*gqq0z-7kyXE0GS086zbVUw.png\" /><figcaption>Example holocard</figcaption></figure><h3>Challenges and how we addressed them</h3><p>Holobooth contains a lot of elements that are expanding what’s possible with Flutter — like using machine learning models and Rive graphics, all while ensuring a performant, smooth experience for users.</p><p>Working with TensorFlow.js was a first for us at Very Good Ventures. There are currently no official Flutter libraries, so much of our early work on this project focused on experimenting with the available models to figure out which one fit our needs. Once we settled on the landmark detection model, we then had to make sense of the data that the models output and map them onto the Rive animations. Here is an early exploration with face detection:</p><figure><img alt=\"A man wearing a light blue shirt and red hoodie is moving his face around the screen. There is a blue box around his face and red dots mapping onto his face, with a high concentration of dots around his eyes and mouth. As he moves his face, red dots move along with his facial features.\" src=\"https://cdn-images-1.medium.com/max/600/1*hdTGZAcinWlt2yR-4CLt2w.gif\" /><figcaption>Early exploration of face detection</figcaption></figure><p>The official Flutter <a href=\"https://pub.dev/packages/camera\">camera</a> plugin gave us a lot of functionality out of the box, but it currently doesn’t support streaming images on the web. For Holobooth, we <a href=\"https://github.com/flutter/plugins/compare/main...VGVentures:plugins:feat/camera-video-controller?expand=1\">forked</a> the camera plugin to add this functionality. We hope that this is supported by the <a href=\"https://github.com/flutter/flutter/issues/92460\">official plugin in the future</a>.</p><p>Another challenge was optimizing for performance. Recording the screen can be an expensive operation because the app is capturing lots of data. We also had to take into account that users would be accessing this app from different browsers and devices. We wanted to ensure that the app is performant and provides a smooth experience for users no matter what device they’re using. When accessing Holobooth on desktop, video backgrounds are animated and reflect a landscape orientation. To optimize for mobile browsers, backgrounds are static and cropped to fit portrait mode orientation. Since a mobile screen is smaller than on desktop, we also optimized the resolution of image assets to reduce the initial page load and the amount of data used by the device.</p><p>For more details on how we addressed these challenges and more, you can check out the <a href=\"https://github.com/flutter/holobooth\">open source code</a>. We hope that this can serve as inspiration for developers wanting to experiment with TensorFlow.js, Rive, and videos, or even those just looking to optimize their web apps.</p><h3>Looking forward</h3><p>In creating this demo, we wanted to explore the potential for Flutter web apps to integrate with TensorFlow.js models in an easy, performant, and fun way. While a lot of what we’ve built is still experimental, we’re excited for the future of machine learning in Flutter apps to create delightful experiences for users on any device! Join the community conversation, let us know what you think, and how you might use machine learning in your next Flutter project.</p><p><a href=\"https://holobooth.flutter.dev/\"><strong>Take a video in the Holobooth and share it with us on social media!</strong></a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6473f3d018dd\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-its-made-holobooth-6473f3d018dd\">How it’s made: Holobooth</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-25T16:23:56.000Z":{"title":"What’s next for Flutter","link":"https://medium.com/flutter/whats-next-for-flutter-b94ce089f49c?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/b94ce089f49c","category":["flutter","mobile-app-development","programming","web-development","announcements"],"dc:creator":"Tim Sneath","pubDate":"Wed, 25 Jan 2023 16:23:56 GMT","atom:updated":"2023-02-16T16:40:10.081Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Setting out our vision at the Flutter Forward event in Nairobi</h4><p>Today we’re excited to share our vision for Flutter at <a href=\"https://flutter.dev/events/flutter-forward\">Flutter Forward</a>, our developer event streaming live from Nairobi, Kenya, as developers from around the world gather in-person and online to learn about future directions for Flutter.</p><p>Flutter is a UI toolkit that enables app developers to build for mobile, web, and desktop from a single codebase. Flutter enables you to build <strong>beautiful</strong> apps, giving you complete control over every pixel on the screen. It’s <strong>fast</strong>, taking advantage of your phone or computer’s hardware with support for hardware-accelerated graphics and natively-compiled machine code. It’s <strong>productive</strong>, with technologies like stateful hot reload that allow you to immediately see code changes in your app. Its <strong>portability</strong> enables you to deploy to a wide variety of platforms with the same source code and without surprises. And it’s fully <strong>open source</strong>, with no cost to license it or need to pay for tools to develop for it.</p><p>Flutter has proven popular, with over 700,000 published apps to date: from <a href=\"https://flutter.dev/showcase/so-vegan\">small startups with big ideas</a> to <a href=\"https://flutter.dev/showcase/credit-agricole\">enterprises with critical needs</a>. At Google, too, we’re finding Flutter a valuable tool, enabling teams like <a href=\"https://edu.google.com/workspace-for-education/classroom/\">Google Classroom</a> to deliver high-quality solutions to mobile and web users; we’re also adding support for it in our other developer tools including <a href=\"https://developers.google.com/admob/flutter/quick-start\">Google Ads</a>, <a href=\"https://codelabs.developers.google.com/codelabs/google-maps-in-flutter#0\">Google Maps</a>, <a href=\"https://pub.dev/packages/pay\">Google Pay</a>, and of course <a href=\"https://firebase.google.com/docs/flutter/setup?platform=ios\">Firebase</a>.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FJVJF_M9bgj4%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DJVJF_M9bgj4&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FJVJF_M9bgj4%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3f3ea2554e92675ad5b80ec3b5300271/href\">https://medium.com/media/3f3ea2554e92675ad5b80ec3b5300271/href</a></iframe><blockquote>“With Flutter, we reduced the code size by 66% for the same functionality… this means less bugs for each platform and less tech debt in the future.” (Kenechi Ufondu, Software Engineer, Google Classroom)</blockquote><p>The first release of Flutter provided a UI toolkit for building mobile apps on Android and iOS, but with Flutter 3, we expanded production support to include Windows, macOS, Linux, and the web, while also enabling embedded platforms to use Flutter. Building on that, <a href=\"https://medium.com/flutter/whats-new-in-flutter-3-7-38cbea71133c\">this week we shipped our latest stable release, Flutter 3.7</a>, which adds a broad set of new features including a new rendering engine on iOS, enhanced support for Material 3 and iOS-style widgets, revamped support for internationalization, background processing improvements, and updates to developer tooling.</p><p>But at this event, we’re looking <strong><em>forward</em></strong>, offering a preview of the next wave of investments we’re making in Flutter: breakthrough graphics performance, seamless integration for web and mobile, early support for new and emerging architectures, and a continued focus on developer experience. We’re showcasing work that will gradually be delivered over the coming months, and we hope that this leaves you excited about our vision for Flutter as a powerful toolkit for any developer who wants to build high-quality, beautiful user experiences that can go anywhere pixels are painted.</p><p><em>A disclaimer: the features we’re previewing here are still under development and may change significantly over the coming months. Showing them at this early stage is designed to give early adopters a chance to contribute.</em></p><figure><img alt=\"Four themes: Breakthrough graphics performance, seamless integration for web and mobile, early to new and emerging architectures, and a continued focus on developer experience.\" src=\"https://cdn-images-1.medium.com/max/1024/0*1m_CqCW7oMEoqPrl\" /></figure><h3>Breakthrough graphics performance</h3><p>Historically, cross-platform frameworks have required compromise on visuals, due to the challenges of creating an abstraction layer. Flutter has taken a different approach than most, with its own rendering layer that offers hardware-accelerated graphics and a consistent visual appearance on every device. Moving forward, we will invest in<em> breakthrough graphics performance</em> that extends Flutter’s existing strength in this area.</p><p>At Flutter Forward, we’re showing more progress on <a href=\"https://github.com/flutter/flutter/wiki/Impeller\"><strong>Impeller</strong></a>, Flutter’s next generation rendering engine. Impeller is optimized for Flutter, giving us even more flexibility and control over the graphics pipeline, and opening new opportunities for us. Impeller provides more predictable performance, using precompiled shaders that alleviate dropped frames at runtime caused by shader compilation. It takes advantage of primitives in Metal and Vulkan, the modern low-level APIs in iOS and Android. And it makes effective use of concurrency, distributing single-frame workloads across threads.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/739/1*QrEupNb6Ebc5_4c0PW4fQw.jpeg\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/624/1*-DXiE7L987-q6zs8hczbOQ.jpeg\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xoVH5v5x7znMLB6NTjcqCA.jpeg\" /><figcaption>Impeller provides silky-smooth performance for demanding graphical apps like <a href=\"https://wonderous.app\">Wonderous</a>, a beautiful app that takes you on a tour of the world’s wonders. Shown here: the latest version of Wonderous, which adapts its UI for different devices and form factors, available at <a href=\"https://wonderous.app.\">https://wonderous.app.</a></figcaption></figure><p>In addition to offering a silky-smooth UI, Impeller can drastically improve performance in certain scenarios. One demo (shown below) demonstrates a best-case example of this. On the left is a kaleidoscope app using SVG clipping, built using the current default renderer. Scrolling down the page, performance drops with rendering taking longer than the per-frame budget, leading to a frame rate of 7–10 fps. The right side shows the same app running under Impeller, rendering at a glitch-free 60 fps.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FZ7v-YRdHusM%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZ7v-YRdHusM&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FZ7v-YRdHusM%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e6f4fd96384182e61b27a738d6c6e787/href\">https://medium.com/media/e6f4fd96384182e61b27a738d6c6e787/href</a></iframe><p>One advantage of building from the ground up is that the architecture can support brand new use cases. Newly introduced <strong>support for custom shaders</strong> is already leading to some <a href=\"https://twitter.com/reNotANumber/status/1599717360096620544\">amazing new demos</a> that show seamless integration with the Flutter widget hierarchy. Our work here isn’t limited to mobile devices, though: we now have early support for custom shaders on the web too, with the same code now powering hardware-accelerated experiences across iOS, Android, and the browser.</p><figure><img alt=\"A screenshot of the Chrome web browser, showing a Flutter pixel shader demo. There is an image of Dash, our Flutter mascot, but it has a mosaic-style effect that is adjustable with a slider control.\" src=\"https://cdn-images-1.medium.com/max/1024/0*aS5btwRMIK-AkltC\" /><figcaption>Flutter now supports pixel shaders on the web, enabling various cool visual effects. (Credit: <a href=\"https://medium.com/u/21767146c3d4\">Erick Ghaumez</a>.)</figcaption></figure><p>And now we’re starting early work on supporting <strong>3D with Flutter</strong>. During the keynote, we showed that you can import models created with <a href=\"https://www.blender.org/\">Blender</a>, and even use hot reload to iterate with Blender in real-time and see the results in a running app. It’s early days, but we’re excited about the initial performance we’re getting, along with the potential of integrating 3D into other Flutter experiences.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/1*ZaldnkdSaQZqWX5LKWB5Ig.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/1*MdyKANeEPV0iIQTTwOBGog.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/1*R-Lktrjfd8lLirhC_BBg5Q.png\" /><figcaption>Impeller enables Flutter to render 3D graphics, as shown in this fun demo of Dash.</figcaption></figure><p>Adding 3D and custom shaders raises the bar for graphics performance in a portable UI toolkit to a new level. We’re very excited to see what you do with these new features as they become available.</p><h3>Seamless integration for web and mobile</h3><p>While you can write an app entirely using Flutter and Dart, almost any non-trivial project needs to connect with other code. On the web, Flutter may be used as an embedded component within a larger app; on mobile, apps may need to call system APIs or other code written in another language. Our second major theme of investment is therefore <em>seamless integration for web and mobile.</em></p><p>On the web, we’re previewing a new feature that we’re calling <strong>element embedding</strong>, which allows Flutter content to be added to any standard web &lt;div&gt;. When embedded in this way, Flutter just becomes a web component, integrating cleanly with the web DOM and even enabling the use of CSS selectors and transformations to style the parent Flutter object.</p><p>We’re also making some big changes to the <a href=\"http://pub.dev/packages/js\">js</a> package, to enable seamless <strong>interoperability between JavaScript and Dart</strong> code. With js, you can annotate any function in your Dart code with a @JSExport attribute, and then call it from your JavaScript code.</p><p>Combining these two new features opens up some exciting new scenarios for using Flutter on the web. In <a href=\"https://flutter-forward-demos.web.app/#/\">a proof-of-concept demo</a> that we showed at Flutter Forward, you can see a simple Flutter app embedded in a HTML-based webpage. Using CSS, we apply an animated rotation effect; even while rotating, the Flutter content remains interactive. The demo also shows that you can use an HTML button and JavaScript event handler to make changes to the Flutter state, and vice versa. When this work is complete, we think this will open up many new opportunities to use Flutter to add interactivity to an existing web app.</p><figure><img alt=\"A screenshot of a Flutter web demo. The traditional Flutter counter app is shown, but it is skewed and transformed in CSS to look as if it is part of a photo where a woman holds an iPhone.\" src=\"https://cdn-images-1.medium.com/max/1024/1*QjyV-g_N50iwOVNSGglxxA.png\" /><figcaption>With Element Embedding, you can embed Flutter into a &lt;div&gt; element and use CSS to style it.</figcaption></figure><p>Turning to Android and iOS, Flutter has long supported integration with system APIs using platform channels, which offer a message-based approach for communicating with code written in a language like Kotlin or Swift. While this unlocks access to those libraries, it requires an app author to be conversant with multiple languages and requires a fair amount of boilerplate code.</p><p>We’re now starting work on <strong>a new approach for system interoperability</strong> that allows libraries to be called directly. On iOS, we’re building on our work on FFI for C interoperability, adding support for Swift and Objective-C libraries. On Android, we’re using JNI to bridge to Jetpack libraries written in Kotlin. With a new command, Dart automatically creates bindings for cross-language interoperation and converting data classes appropriately. When complete, we aspire that this work will enable a Flutter developer to call a new Jetpack or iOS library without needing to use a plugin or learn a different API syntax, as well as greatly easing the work for a plugin author. <a href=\"https://github.com/flutter/samples/tree/main/experimental/pedometer\">Check out our sample</a> to learn more!</p><h3>Early to new and emerging architectures</h3><p>Thanks to Dart’s broad support for a wide range of processor architectures, as well as its highly-optimized JavaScript compiler, Flutter can already run on a broad variety of devices and form factors. But with some exciting new options on the horizon, our third theme is bringing <em>early support to new and emerging architectures</em>.</p><p><a href=\"https://webassembly.org/\">WebAssembly</a> has been growing in maturity as a platform-neutral binary instruction format, with <a href=\"https://caniuse.com/wasm\">growing support on modern browsers</a>. Excitingly, WebAssembly opens the web platform to other languages beyond JavaScript. Over recent months, we’ve been collaborating with the Chrome team and other WebAssembly partners to add <a href=\"https://github.com/WebAssembly/gc\">early support for garbage-collected languages</a> like Dart. This new extension to WebAssembly is now supported with a flag in the latest development builds of Chrome. At Flutter Forward, we’re unveiling early support for <strong>Flutter compilation to WebAssembly</strong>, which will enable further speed and size optimizations for our web support.</p><p>Another platform architecture that is generating growing interest is <a href=\"https://en.wikipedia.org/wiki/RISC-V\">RISC-V</a>, an open standard instruction set architecture (ISA) designed for broad usage. The Android team recently gave a talk on <a href=\"https://www.youtube.com/watch?v=70O_RmTWP58\">their work to support RISC-V</a>, and we’re happy to also announce that <strong>Dart now supports RISC-V</strong>, as part of our own journey to enable Flutter to run on RISC-V devices as they become available. Production RISC-V hardware is still in its infancy, but at Flutter Forward we demonstrated our progress to date on the <a href=\"https://www.clockworkpi.com/product-page/devterm-kit-r01\">ClockworkPi DevTerm Kit R-01</a>, a self-assembly portable terminal running Linux. We believe RISC-V support will be of particular interest for embedded scenarios, where Flutter can provide a powerful UI toolkit for a diverse set of needs.</p><figure><img alt=\"A photo of the ClockworkPi RISC-V portable terminal. This is a small device of approximately the same size as an iPad, but with a miniature keyboard, trackpoint mouse and terminal display.\" src=\"https://cdn-images-1.medium.com/max/1024/1*LfW_XnTVxV1dL1CLT7iAWQ.jpeg\" /><figcaption>The ClockworkPi DevTerm R-01, an experimental RISC-V computer, running a Dart console app.</figcaption></figure><h3>Continued focus on developer experience</h3><p>Foundational to everything we’ve described above is developer productivity, which has been a hallmark of Flutter since its inception, with features like stateful hot reload. Our fourth and final area of investment for the future is a <em>continued focus on developer experience</em>, across both Flutter and Dart.</p><p>At Flutter Forward, we’re previewing some of our early work on some major new Dart language features that we hope demonstrate our commitment to tasteful evolution of the language. In our development channel, we now have early support for <strong>records and patterns</strong>, two new enhancements that work particularly well together.</p><figure><img alt=\"An image of VSCode running a demo of the new records and patterns features. It shows that Dart can now return multiple values. The code for the demo is at https://gist.github.com/timsneath/a75fd9f76b5b61c42676c9232160d14d\" src=\"https://cdn-images-1.medium.com/max/1024/0*uGTJ0p_XZE_yZ9NS\" /><figcaption>A simple example of records and patterns being used to return and receive multiple function parameters.</figcaption></figure><p>We’re also <strong>formally announcing Dart 3</strong>, which is the culmination of our work to introduce sound null safety to the language. Dart 3 also removes other long-deprecated features to further modernize the language. We have started publishing alpha-quality builds of Dart 3, along with matching Flutter builds, enabling developers to test packages and apps. For more information on Dart 3, check out the <a href=\"https://medium.com/dart-lang/dart-3-alpha-f1458fb9d232\">separate blog post on the Dart channel</a>.</p><p>We’re investing in the developer experience for Flutter as well, of course. Following on from the success of the casual game toolkit we <a href=\"https://medium.com/flutter/announcing-the-flutter-casual-games-toolkit-c22e401d8fee\">announced at I/O</a> last year, we’re sharing <a href=\"https://medium.com/flutter/announcing-the-flutter-news-toolkit-180a0d32c012\">the first version of our <strong>news toolkit</strong></a>, which accelerates mobile development for news publishers and other content providers who want to reach mobile users without having to design an app from scratch. It includes everything you need to build an article-centric app, with navigation and search, authentication, ad integrations, notifications, profiles and subscriptions, while incorporating best practices from Google News Initiative’s research. We’re today featuring three early adopters here in Africa who are building apps based on this toolkit, including <a href=\"https://www.hespress.com/\">Hespress</a>, one of the largest news sites in Morocco, <a href=\"https://boldsportsng.com/\">Bold Sports</a>, a popular the Nigerian sports site; and <a href=\"https://www.standardmedia.co.ke/\">The Standard</a>, the oldest newspaper in Kenya.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FYnJwjZ3jCTc%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYnJwjZ3jCTc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FYnJwjZ3jCTc%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d349741327c90c711abcbe3f978dd369/href\">https://medium.com/media/d349741327c90c711abcbe3f978dd369/href</a></iframe><h3>Moving forward together</h3><p>We hope you share our excitement about where we’re taking Flutter moving forward. We’re continuing to invest heavily in the core developer experience, while making some foundational improvements that pave the way for ourselves and others to build even more powerful experiences with Flutter.</p><p>This image summarizes our direction:</p><figure><img alt=\"Four themes for future work: breakthrough graphics performance (Impeller, shaders, 3D support); seamless integration for web and mobile (element embedding, JNIgen and FFIgen); early to new and emerging architectures (WebAssembly and RISC-V); and a continued focus on developer experience (Dart language features, sound null safety, Google News Toolkit and Wonderous).\" src=\"https://cdn-images-1.medium.com/max/1024/1*iIgYbZq3WKnUBctIWBap_Q.png\" /></figure><p>Beyond our own development themes, it’s gratifying to see how the Flutter ecosystem continues to expand, like <a href=\"https://flutterflow.io/\">FlutterFlow</a> is a low-code builder for developing native mobile applications, and <a href=\"http://widgetbook.io\">Widgetbook</a>, which provides flexible tooling for designers and developers to collaborate on user interface development.</p><p>In closing, it has been wonderful to come to Kenya and see the entrepreneurship and talent of local developers. The vibrancy of the Flutter community here in Africa is special; the Flutter Kenya user group alone has over 1,000 developers. And we’re thrilled that Flutter can provide new opportunities for developers across Africa to participate in the fast-growing app economy. Klasha is a great example of this promise, using Flutter to quickly get to market and solve local problems. Here’s a video of their experience with Flutter:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fo8NPZ2ofLbI%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Do8NPZ2ofLbI&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fo8NPZ2ofLbI%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/66cf87664a2d1cae8b949b194832a985/href\">https://medium.com/media/66cf87664a2d1cae8b949b194832a985/href</a></iframe><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b94ce089f49c\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-next-for-flutter-b94ce089f49c\">What’s next for Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-25T16:05:24.000Z":{"title":"Adapting Wonderous to larger device formats","link":"https://medium.com/flutter/adapting-wonderous-to-larger-device-formats-ac51e1c00bc0?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/ac51e1c00bc0","category":["ux-design","android-development","ios-development","tablets","flutter"],"dc:creator":"Leigha Jarett","pubDate":"Wed, 25 Jan 2023 16:05:24 GMT","atom:updated":"2023-01-25T16:05:24.800Z","content:encoded":"<h4>Using Flutter to design mobile applications that look beautiful on all devices</h4><p>Today, we’re announcing the next version of Wonderous, which adds support for foldable devices, tablet, and tablet landscape. This iteration allowed us to test Flutter’s ability to <strong>adapt to different device formats</strong>, and the <a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app\">code</a> repo on GitHub provides a reference for leveraging <a href=\"https://docs.flutter.dev/development/ui/layout/building-adaptive-apps\">adaptive design</a>.</p><p>In this post, we’ll walk through some of what we learned. While our focus was on apps for handheld devices, many of these concepts can be adapted to desktop and web.</p><h3>Narrowing focus</h3><p>When thinking through adaptive design, designers should first ask <em>“What form factors are we possibly supporting?”</em> Flutter supports nearly every device, but app creators should be explicit about what formats their app has been designed and tested for. Narrowing the focus allows designers to carefully consider how to optimize the digital experience for the canvas that is available. Without careful design, layouts suited for mobile can look unpolished on larger form factors.</p><h3>Taking advantage of extra real estate</h3><p>When adapting the design of an app to larger screen sizes, designers should consider how to take advantage of the extra real estate. This might mean enhancing the presentation by showing a different layout. For example:</p><figure><img alt=\"Portrait and landscape version of the Wonder Events page\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y_ROvg5zl7edWeA-G6THzg.png\" /><figcaption><em>iPad Pro 12.9-inch portrait and landscape</em></figcaption></figure><p>Adding additional rows or columns:</p><figure><img alt=\"Showing the artifcats search results on a larger screen with 4 columns, versus a smaller screen with only two columns\" src=\"https://cdn-images-1.medium.com/max/1024/1*G0_f2A0k1sK7aWmFbKAFlg.png\" /><figcaption><em>iPad Pro 12.9-inch and iPhone 11</em></figcaption></figure><p>Or changing columns to rows:</p><figure><img alt=\"Showing vertically scrollable rows in portrait mode, and a single horizontally scrollable row in landscape.\" src=\"https://cdn-images-1.medium.com/max/1024/1*g3j3u2aTh1m5pR4M5CqX_w.png\" /><figcaption><em>iPad Pro 12.9-inch portrait and landscape</em></figcaption></figure><p>Alternatively, you might use the extra canvas to do more of the same. Wonderous features beautiful illustrations so the larger screen sizes allowed us to showcase even more of this work:</p><figure><img alt=\"Showing an image of the Machu Picchu illustration scaled to multiple devices sizes\" src=\"https://cdn-images-1.medium.com/max/1024/1*PpfHUeUH0sr5vDUUdcG81A.png\" /><figcaption><em>iPhone 11, Samsung Fold4 closed, iPad Pro 12.9-inch</em></figcaption></figure><p><strong>Consider approaches for how UI components can react</strong></p><p>As the screen becomes larger, you’ll need to consider how your app’s UI components will react. For example, you might scale the component to fit the available space:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IURgMIU9x8zzm-p6lZUNwg.png\" /><figcaption><em>Samsung Fold4 open and iPhone 11</em></figcaption></figure><p>You might also consider keeping the content center weighted, or pinning certain assets to the device bounds:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/1*RA_cBWkp9GOQsK_H0-Dg8w.gif\" /></figure><p><strong>Adaptive design with Flutter</strong></p><p>There are many features in the Flutter framework that were useful for adapting Wonderous. For example:</p><ul><li>Hot reload empowered the design team to make small adjustments in real time</li><li>Dynamic padding and font sizes</li><li>The <a href=\"https://api.flutter.dev/flutter/widgets/Flex-class.html\">Flex</a> widget dynamically displays either a row or a column</li><li><a href=\"https://api.flutter.dev/flutter/widgets/MediaQuery-class.html\">MediaQuery</a> returns details like screen size and device orientation</li></ul><p>You can read more specifics on the technical implementations on <a href=\"https://blog.gskinner.com/archives/2023/01/flutter-adapting-wonderous-for-landscape.html\">gSkinner’s website</a>. You can also learn more about designing apps for larger screen sizes on Android in <a href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality\">Large screen app sizes</a> on the Android docs site.</p><p>We hope you’ll install Wonderous and leverage the code as a reference while developing your own apps. If you have any feedback on the app itself, please <a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app\">file an issue on Github</a>. If you have any thoughts on adaptive design with Flutter, feel free to send me a message on <a href=\"https://twitter.com/LeighaJarett\">Twitter</a> (@leighajarett) or <a href=\"https://www.linkedin.com/in/leighajarett/\">LinkedIn</a> (Leigha Jarett).</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ac51e1c00bc0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/adapting-wonderous-to-larger-device-formats-ac51e1c00bc0\">Adapting Wonderous to larger device formats</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-01-25T15:59:54.000Z":{"title":"Announcing the Flutter News Toolkit","link":"https://medium.com/flutter/announcing-the-flutter-news-toolkit-180a0d32c012?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/180a0d32c012","category":["news","mobile-app-development","ios","android","flutter"],"dc:creator":"Zoey Fan","pubDate":"Wed, 25 Jan 2023 15:59:54 GMT","atom:updated":"2023-01-26T17:15:17.652Z","content:encoded":"<p>An accelerated toolkit for building mobile apps for news and content</p><figure><img alt=\"This image shows Dash is reading newspaper\" src=\"https://cdn-images-1.medium.com/max/1024/0*_Xb_zBUOvsH6CL9A\" /></figure><p>Google’s Flutter team has partnered closely with the <a href=\"https://newsinitiative.withgoogle.com/\">Google News Initiative (GNI)</a> in creating the <a href=\"https://github.com/flutter/news_toolkit\">Flutter News Toolkit</a> — a free, prebuilt Flutter app template — to accelerate news application development. Some early adopters have already built iOS and Android applications in as little as 6 weeks, claiming up to 80% time savings compared to traditional double-ended development on iOS and Android.</p><p>Three months ago, we announced the Toolkit in an early access period and received an overwhelming number of applications from organizations across the world, so we’re excited to announce the first version of the Flutter News Toolkit is now generally available!</p><h4>Why did we build the Flutter News Toolkit?</h4><p>Nowadays, most people turn to smartphones for news. In addition to mobile websites, mobile apps can be a great way for news publishers to engage with existing readers, reach new audiences, and create new revenue streams. But it takes time and effort to design, implement and deploy mobile apps.</p><p>For news publishers who have limited financial and human resources, building apps from scratch is a major undertaking. Here at Google, we want to help developers be successful and productive, so we’re investing in a toolkit that offers all the common functionalities news publishers need, so they can focus on differentiating their brand and content without writing boilerplate code.</p><h4>What features are included in the Flutter News Toolkit?</h4><p>We collaborated with industry experts and news publishers globally to identify essential features and user workflows for a news application template. With these pre-built, out-of-the-box features, news publishers only need to connect their data source and customize the UI to reflect their brand.</p><p>Using best practices from <a href=\"https://news-consumer-insights.appspot.com/\">News Consumer Insights</a>, The Flutter News Toolkit includes features, such as:</p><ul><li><strong>User onboarding: </strong>re-engage your audience with push notifications permissions; acquire ad tracking permissions</li><li><strong>Account creation/login: </strong>authenticate through your platform and user social networks (such as Google login); create passwordless accounts</li><li><strong>Content feeds and content pages</strong>: display news articles, videos, pictures, ads, and newsletter sign-up prompts</li><li><strong>Monetization</strong>: easily add subscriptions and different ad formats</li><li><strong>Search</strong>: allow user searches for articles by keyword or click into popular searches</li><li><strong>Settings:</strong> allow user preferences for notifications, login, and ads tracking</li></ul><p>You can use these pre-integrated features out-of-the-box, or easily modify and swap them with other functionalities you prefer.</p><figure><img alt=\"This image includes sample features provided in the Flutter News Toolkit\" src=\"https://cdn-images-1.medium.com/max/1024/1*HOaHUtxwx2S4urCrztI88g.png\" /><figcaption><em>Sample features provided in the Flutter News Toolkit</em></figcaption></figure><h4>Early adopters</h4><p>The Flutter News Toolkit has already begun helping news publishers across the globe accelerate mobile strategy and achieve business goals. For example,</p><ul><li>The Standard (one of Kenya’s largest news publishers) claimed time savings of up to 80% when they built <a href=\"https://play.google.com/store/apps/details?id=ke.co.group.standard.thestandardkenya.thestandard&amp;hl=en&amp;gl=US\">The Standard News</a>.</li><li>Commerce enablement company AnyMind Group built apps for <a href=\"https://play.google.com/store/apps/details?id=co.th.khaosod.mobile&amp;hl=en&amp;gl=US\">Khaosod Online</a> (one of Thailand’s largest news sites) in 2 weeks;</li><li><a href=\"https://play.google.com/store/apps/details?id=ng.boldsports.news.template&amp;hl=en&amp;gl=US\">Boldsports</a>, a Nigerian-based sports news start-up, created an early version within just a few days;</li><li>Hespress (one of Morocco’s largest news sites) finished its<a href=\"https://play.google.com/store/apps/details?id=com.hespress.english&amp;hl=en&amp;gl=US\"> English app</a> development within 6 weeks and also reported that the new app drove 93% higher organic user acquisition organically and 50% growth in ad revenue within two months of launching the app.</li></ul><p>Let’s hear from some of them in their own words.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FYnJwjZ3jCTc%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYnJwjZ3jCTc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FYnJwjZ3jCTc%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d349741327c90c711abcbe3f978dd369/href\">https://medium.com/media/d349741327c90c711abcbe3f978dd369/href</a></iframe><h4>Get Started</h4><p>If you have been waiting to get access to the Flutter News Toolkit, the wait is over! You can now directly access the <a href=\"https://github.com/flutter/news_toolkit\">code hosted on Github</a>.</p><p>If you are interested in adopting the News Toolkit but need help customizing it to your needs, we’ve also got you covered! Just email us at <a href=\"mailto:flutter-news-core-group@google.com\">flutter-news-core-group@google.com</a>, and we can recommend trusted Flutter agencies to help you with app creation using the Flutter News Toolkit.</p><p>Although the Flutter News Toolkit was originally designed for news organizations, anyone who wants to create flow-based content can use the sample code. Whether you want to create a company newsletter app (see <a href=\"https://play.google.com/store/apps/details?id=au.com.dius.news\">Medius</a> built by DiUS as an example) or a social media app, you’ll likely find pre-built features like user login, social sharing, and content feeds to be helpful to your app.</p><p>We plan to continue to improve the Flutter News Toolkit as we learn more from publishers and developers. Don’t forget to check out our <a href=\"https://www.youtube.com/watch?v=dukRAS-OUMM\">video tutorial</a> for more details on the <a href=\"https://github.com/flutter/news_toolkit\">Flutter News Toolkit</a>!</p><h3>FAQ</h3><h4>What is Flutter?</h4><p>Flutter is Google’s open-source UI toolkit for building beautiful apps for mobile, web, and desktop from a single codebase. Flutter significantly reduces the time required to build and publish an app. Today, Flutter is <a href=\"https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/\">the most popular cross-platform</a> development framework, with over 3 million developers around the world. There are more than 700,000 Flutter apps, including Alibaba, BMW, Google Pay, PUBG, Shein, and Wechat.</p><h4>Is Flutter easy to learn?</h4><p>Yes, for developers who have knowledge of other programming languages such as Java, learning Flutter is quick. Besides, we have a wealth of <a href=\"https://flutter.dev/learn\">learning resources</a> available for you to get started.</p><h4>Can I use other non-Google services such as Ads, analytics, and subscriptions in the app?</h4><p>Of course! The Flutter News Toolkit only aims to provide a sample. You are not required to use any service you don’t want. In fact, it is easy to remove or swap the existing integrations with other services. For example, if you want to use non-Google Ads services, you can find other <a href=\"https://pub.dev/packages?q=platform%3Aandroid+platform%3Aios+ads\">packages</a> on pub.dev.</p><h4>How much work am I required to do to launch the app?</h4><p>While the news template can lower the barrier to entry for building news mobile applications, this solution still requires Flutter development work. The template doesn’t support no-code or wysiwyg functionality or tools (such as dashboards) for non-technical users to modify the app branding and styling.</p><p>We have mapped out the deployment process at a high-level with an assumption of 2 Flutter engineers working on the project. As an example, early adopters like Hespress finished their application development within 6 weeks. But we also have customers like AnyMind launched the app within 2 weeks with 1 engineer.</p><figure><img alt=\"This image maps out the deployment process at a high-level\" src=\"https://cdn-images-1.medium.com/max/1024/0*n4yFaH37OzEQ9Ys8\" /><figcaption><em>Deployment process at a high-level</em></figcaption></figure><h4>If I don’t have an in-house development team, how can I use the template?</h4><p>We can recommend trusted Flutter agencies who can help you take the template to the finish line. You can email <a href=\"mailto:flutter-news-core-group@google.com\">flutter-news-core-group@google.com</a> for more information. As a disclaimer, Google is not associated with these agencies, and we do not take any revenue share from them.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=180a0d32c012\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-the-flutter-news-toolkit-180a0d32c012\">Announcing the Flutter News Toolkit</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-05-18T18:02:00.000Z":{"title":"How It’s Made: I/O FLIP","link":"https://medium.com/flutter/how-its-made-i-o-flip-da9d8184ef57?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/da9d8184ef57","category":["flutter","ai","game-development","firebase","google-cloud-run"],"dc:creator":"Very Good Ventures Team","pubDate":"Thu, 18 May 2023 18:02:00 GMT","atom:updated":"2023-05-18T18:01:59.165Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nGcHw9zmkDT1oGhYwuZMqA.jpeg\" /></figure><h4>AI-generated text and images add some fun to this card game built with Flutter, Firebase, and Google Cloud</h4><p><a href=\"http://flip.withgoogle.com\">I/O FLIP</a> is an AI-designed card game powered by Google and built in Flutter. It unites a handful of Google products and techniques. This includes <a href=\"https://flutter.dev/\">Flutter</a>, <a href=\"https://firebase.google.com/\">Firebase</a>, generative AI tools, Dreambooth on Muse, <a href=\"https://developers.googleblog.com/2023/03/announcing-palm-api-and-makersuite.html\">PaLM API</a>, and <a href=\"https://developers.googleblog.com/2023/03/announcing-palm-api-and-makersuite.html\">MakerSuite</a>. Players can play multiple matches and share cards from their game to social media.</p><p>To play the game, visit <a href=\"http://flip.withgoogle.com\">http://flip.withgoogle.com</a>. To start and to generate your deck, answer a few prompts. To make your hand and join a match, select three cards. You’ll use these cards to play your opponent for three rounds in which the highest card wins the round. The fun doesn’t have to end when the match does. Keep playing matches to increase your win streak and try to make the leaderboard!</p><p>Let’s dig into the technical details of we used Flutter and Firebase to build I/O FLIP.</p><h3>A card game created with Flutter</h3><p>The I/O FLIP user interface, animations, hologram effects, and backend, were all built with Flutter and Dart.</p><p>To start, we leveraged the <a href=\"https://docs.flutter.dev/resources/games-toolkit\">Flutter Casual Games Toolkit</a>. We used the out-of-the-box audio functionality, game lifecycle, and app navigation with <a href=\"https://pub.dev/packages/go_router\">go_router</a> as a foundation. From there, we built out the game logic and UI. I/O FLIP is a <a href=\"https://docs.flutter.dev/ui/layout/adaptive-responsive\">responsive web app</a>. It resizes its UI based on the players’ screen. The app also handles input based on the device the player uses. It receives touch input when accessed on a mobile device or tablet and mouse input on desktop.</p><p>Playing cards are a key element of I/O FLIP. Thousands of cards could end up in a player’s deck. Each card displays a Google mascot, element, and power value. The elements come into play when they go up against each other. For example, when someone plays a fire card and their opponent plays a water card, the water card receives a penalty of 10 points. We also used records, a <a href=\"https://medium.com/dartlang/dart-3-alpha-f1458fb9d232\">new feature of Dart 3</a>, to render a frame based on the card element.</p><pre>…<br> (String, SvgPicture) _mapSuitNameToAssets() {<br>    switch (suitName) {<br>      case &#39;fire&#39;:<br>        if (isRare) {<br>          return (<br>            Assets.images.cardFrames.holos.cardFire.keyName,<br>            Assets.images.suits.card.fire.svg(),<br>          );<br>        }<br>        return (<br>          Assets.images.cardFrames.cardFire.keyName,<br>          Assets.images.suits.card.fire.svg(),<br>        );<br>…</pre><h4>Cards created with AI-generated images and descriptions</h4><figure><img alt=\"Example I/O FLIP cards featuring Dash, Sparky, Android, and Dino against various backdrops with props.\" src=\"https://cdn-images-1.medium.com/max/985/1*-8FtGtAwiERpc5_ctA0GKg.png\" /><figcaption>Example I/O FLIP cards</figcaption></figure><p>Each card in I/O FLIP is unique because it contains an AI-generated image and description. At the beginning of the game, players answer two prompts. These prompts help populate a deck of 12 cards that feature images and descriptions that AI models pre-generated.</p><p>Google team used two technologies to pre-generate the images: <a href=\"https://muse-model.github.io/\">Muse</a>, a Transformer text-to-image model, and <a href=\"https://dreambooth.github.io/\">DreamBooth</a>. DreamBooth enables synthesizing a subject in diverse scenes, poses, views, and lighting conditions. Each card contains one of four Google mascots: <a href=\"https://docs.flutter.dev/dash\">Dash</a>, Sparky, <a href=\"https://source.android.com/docs/setup/about/brands#robot-android\">Android</a>, or Dino, and a location. The mascot also has an item that designates their team. The “team type” prompt at the beginning of the game seed the creation of this item. For example, selecting “wizard” may result in a character with a wizard hat, magic wand, or something else wizardly!</p><p>The Google team used the <a href=\"https://developers.googleblog.com/2023/03/announcing-palm-api-and-makersuite.html\">PaLM API</a> to pre-generate card descriptions. The PaLM API accesses Google’s large language models. The prompts at the beginning of the game included the team type and power type for their team. Let’s say you selected team “Wizard” and power “Magnetism”. When your cards generate, one card’s description includes context to the generated image including the character’s special powers. For example, “Dash the Wizard lives in a castle with his pet dragon. He loves to cast spells and make people laugh.”</p><p>Flutter composes the cards via the GameCard widget. This widget receives the card’s data: name, description, image, and power. Once it creates the card, it applies a border to depict the card’s suit element. If a card is a special card, Flutter applies a foil shader effect.</p><p>To learn more about how the Generative AI aspects of the game were created, check out <a href=\"https://www.google.com/url?q=https://developers.googleblog.com/2023/05/how-its-made-io-flip-adds-twist-to.html&amp;sa=D&amp;source=docs&amp;ust=1684366112610573&amp;usg=AOvVaw1fj9CV5BxCPvxUEGfcZF39\">this Google Developer blog post</a>.</p><h4>Shaders add foil effect to special cards</h4><figure><img alt=\"Two cards in a match, one card shows Royalty Sparky wearing a crown with a point value of 100 and a rainbow foil effect, achieved by using a fragment shader\" src=\"https://cdn-images-1.medium.com/max/664/1*oMUDkIUdJaEb6tX1jdQjKg.gif\" /><figcaption>I/O FLIP uses a fragment shader to render the holo effect on a card</figcaption></figure><p>Flutter supports <a href=\"https://docs.flutter.dev/ui/advanced/shaders\">fragment shaders</a>. To generate these per-pixel visual effects, Flutter runs the OpenGL Shading Language (GLSL) on the device’s GPU. Trading card collectors might remember the feeling of opening a pack to find a special edition card with a shiny, holographic foil. I/O FLIP includes special foil cards, too. They are valued at 100 points. Regular cards have a point values ranging from 10 to 99. We used custom shaders to render the foil effect.</p><p>We implemented the foil shader in the foil.frag file. The effect uses the following constants:</p><ul><li>STRENGTH. This mixes the original pixel color with the color of the foil effect. This ranges from 0.0 for no effect to 1.0 for full effect.</li><li>SATURATION. This sets the intensity of a color. This ranges from 0.0 for grayscale, or absence of color, to 1.0 for full color or absence of black.</li><li>LIGHTNESS. This ranges from 0.0 for full black to 1.0 for full white.</li></ul><p>The shader also receives input through <a href=\"https://docs.flutter.dev/ui/advanced/shaders#uniforms\">uniforms</a>, in this case resolution and offset. The uniform sampler2d called tSource represents the card image to which the shader is applied. The final result is a card with a foil effect.</p><pre>vec4 rainbowEffect(vec2 uv) {<br>    vec4 srcColor = texture(tSource, uv);<br>    float hue = uv.x / (1.75 + abs(offset.x)) + offset.x / 3.0;<br>    float lightness = LIGHTNESS + 0.25 * (0.5 + offset.y * (0.5 - uv.y));<br>    hue = fract(hue);<br><br>    float c = (1.0 - abs(2.0 * lightness - 1.0)) * SATURATION;<br>    float x = c * (1.0 - abs(mod(hue / (1.0 / 6.0), 2.0) - 1.0));<br>    float m = LIGHTNESS - c / 2.0;<br><br>    vec3 rainbowPrime;<br><br>    if (hue &lt; 1.0 / 6.0) {<br>        rainbowPrime = vec3(c, x, 0.0);<br>    } else if (hue &lt; 1.0 / 3.0) {<br>        rainbowPrime = vec3(x, c, 0.0);<br>    } else if (hue &lt; 0.5) {<br>        rainbowPrime = vec3(0.0, c, x);<br>    } else if (hue &lt; 2.0 / 3.0) {<br>        rainbowPrime = vec3(0.0, x, c);<br>    } else if (hue &lt; 5.0 / 6.0) {<br>        rainbowPrime = vec3(x, 0.0, c);<br>    } else {<br>        rainbowPrime = vec3(c, 0.0, x);<br>    }<br><br>    vec3 rainbow = rainbowPrime + m;<br>    return mix(srcColor, vec4(rainbow, srcColor.a), STRENGTH);<br>}</pre><h3>Firebase enables game hosting and sharing to social media</h3><p>All of the gameplay communication happens in real time via <a href=\"https://firebase.google.com/docs/firestore\">Firebase’s Cloud Firestore</a>. Firebase Storage hosts the card assets that generate players’ card decks. We also use Cloud Firestore to track the “Highest Win Streak” on the leaderboard. When a leaderboard adds new leader, the <a href=\"https://pub.dev/packages/firedart\">firedart</a> package adds it to Firestore.</p><h4>Dart Frog enables sharing code between the backend and frontend</h4><p>I/O FLIP needed a backend to prevent cheating. This server-authoritative game logic prevent malicious clients from sending fabricated requests. Dart Frog keeps the game logic, such as the winner of each round, on the backend. It also shares this code between the Flutter frontend and the Firestore backend. Sharing code has a few benefits. It allows us to share logic. For example, if one player wins a round, the game can display a win animation without needing to query Firebase every time. Sharing code also sped development, since the team could write backend and frontend code in the same language: Dart. We deployed the I/O FLIP Dart Frog server to <a href=\"https://cloud.google.com/run\">Cloud Run</a>. This means the server code runs in Google Cloud and can autoscale, so the app can handle many players at once.</p><pre>FutureOr&lt;Response&gt; onRequest(RequestContext context) async {<br>  if (context.request.method == HttpMethod.post) {<br>    final cardsRepository = context.read&lt;CardsRepository&gt;();<br>    final promptRepository = context.read&lt;PromptRepository&gt;();<br><br>    final body = await context.request.json() as Map&lt;String, dynamic&gt;;<br>    final prompt = Prompt.fromJson(body);<br><br>    if (!await promptRepository.isValidPrompt(prompt)) {<br>      return Response(statusCode: HttpStatus.badRequest);<br>    }<br><br>    final characterClass = prompt.characterClass;<br>    if (characterClass == null) {<br>      return Response(statusCode: HttpStatus.badRequest);<br>    }<br><br>    final characterPower = prompt.power;<br>    if (characterPower == null) {<br>      return Response(statusCode: HttpStatus.badRequest);<br>    }<br><br>    final cards = await cardsRepository.generateCards(<br>      characterClass: characterClass,<br>      characterPower: characterPower,<br>    );<br>    return Response.json(<br>      body: {&#39;cards&#39;: cards.map((e) =&gt; e.toJson()).toList()},<br>    );<br>  }<br>  return Response(statusCode: HttpStatus.methodNotAllowed);<br>}</pre><p>Dart Frog also facilitates sharing on social media. When selecting cards, a player can share an individual card to Twitter or Facebook. When you submit your score to the leaderboard, you can share your hand to Twitter or Facebook. Once the user clicks <strong>Share</strong>, Dart Frog generates a pre-populated post. This post contains text and a link to a webpage with your corresponding hand or card and a button for visitors to play I/O FLIP themselves!</p><h3>What’s next</h3><p>I/O FLIP showcases how to combine Flutter and Firebase, along with Google generative AI tools and techniques, in a fun game that people around the world can play.</p><p><a href=\"http://flip.withgoogle.com\">Play a game</a> and show us your hand, or dig into the <a href=\"https://github.com/flutter/io_flip\">open source code</a>!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=da9d8184ef57\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-its-made-i-o-flip-da9d8184ef57\">How It’s Made: I/O FLIP</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-05-18T15:32:45.000Z":{"title":"The future of iOS development with Flutter","link":"https://medium.com/flutter/the-future-of-ios-development-with-flutter-833aa9779fac?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/833aa9779fac","category":["ios","ux","flutter","development"],"dc:creator":"Leigha Jarett","pubDate":"Thu, 18 May 2023 15:32:45 GMT","atom:updated":"2023-05-18T17:44:20.490Z","content:encoded":"<h4>Our recent accomplishments and future priorities for making Flutter a better tool for developing iOS apps</h4><p>Since its launch in 2017, <a href=\"http://flutter.dev\">Flutter</a> has quickly become a top choice for iOS app development. Developers worldwide <em>love</em> Flutter. Using Flutter, they can code once and deploy their apps to iOS, Android, web and desktop. This has led to a massive following, with over a<a href=\"https://medium.com/flutter/racing-forward-at-i-o-2023-with-flutter-and-dart-df2a8fa841ab\"><em> </em><strong>million apps</strong></a><em> </em>built using Flutter.</p><p>For iOS developers who value innovative design, Flutter has become a go-to platform. By providing a blank canvas, Flutter gives designers endless possibilities. They can create original experiences that break free from pre-set design systems.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F6IKhXXFFOuw%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D6IKhXXFFOuw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F6IKhXXFFOuw%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/74e2089a1be1cf51198ae3051d228c7e/href\">https://medium.com/media/74e2089a1be1cf51198ae3051d228c7e/href</a></iframe><p>Today, I want to tell you about some recent improvements to Flutter and our future focus areas for iOS developers. If you’re a pro or new to Flutter, read on to learn about the future of Flutter for iOS.</p><h3>Notable Flutter iOS apps</h3><p>Flutter has seen success across various industries and categories for iOS development. Large enterprises like <a href=\"https://apps.apple.com/us/app/my-bmw/id1519457734\">BMW</a>, <a href=\"https://apps.apple.com/us/app/sonos/id1488977981\">Sonos</a>, and <a href=\"https://apps.apple.com/us/app/nubank-conta-e-cart%C3%A3o/id814456780\">Nubank</a> build their digital experiences with Flutter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OGs9_siPcMAYd1yDAp-AOA.png\" /></figure><p>Tech giants like <a href=\"https://apps.apple.com/us/app/wechat/id414478124\">WeChat</a> and <a href=\"https://www.youtube.com/watch?v=03ETVuWZiBc\">PUBG MOBILE</a> use Flutter to support over one billion active users. Smaller companies have also capitalized on Flutter’s quick development cycle. One example would be <a href=\"https://apps.apple.com/us/app/brickit-app/id1477221636\">BrickIt</a> which uses machine learning to suggest new LEGO brick creations.</p><p>Apple and other tech leaders have even recognized Flutter iOS apps. <a href=\"http://wonderous.app\">Wonderous</a>, Flutter’s reference app, was <a href=\"https://winners.webbyawards.com/2023/apps-dapps-and-software/app-features/best-user-interface/239934/wonderous\">nominated for a Webby in design</a>. Apple accepted <a href=\"https://flutter.dev/showcase/reflectionapp\">Reflection.app</a> to its prestigious accelerator program. <a href=\"https://flutter.dev/showcase/so-vegan\">So Vegan</a> was awarded Apple’s App of the Day <em>several</em> times.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4QurT4QkFUMSNCSFtfOzxg.png\" /></figure><h3>Recent enhancements</h3><p>Flutter’s iOS support has been a top priority. We’ve made significant improvements in recent releases. Let’s review some highlights:</p><h4><strong>Improved Performance</strong></h4><p>Impeller, our purpose-built rendering engine, now serves as the default for Flutter on iOS. Impeller has been a multi-year journey for our team. It addresses the top concerns for iOS developers leveraging Flutter: smooth graphics and top tier performance. Since its release, we’ve seen great improvements in app quality. More recently, enhancements to Flutter’s engine continue to improve startup latency and reduce app size.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fvd5NqS01rlA%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dvd5NqS01rlA&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fvd5NqS01rlA%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/00d9b96c5bffb92fbb364fd59fdf966b/href\">https://medium.com/media/00d9b96c5bffb92fbb364fd59fdf966b/href</a></iframe><p>Impeller also simplifies adding new features. These features range from wide gamut image support to custom rendering solutions. We demonstrated one such custom rendering solution, a proof of concept for 3D support, at <a href=\"https://www.youtube.com/watch?v=goL7tvLQ7Dw\">Flutter Forward.</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/0*MUGkFV9MRrcT7-68.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/0*YnEEnzt7QIuuxofn.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/0*4Mb0dUry2lkuUvXI.png\" /><figcaption>Impeller enables Flutter to render 3D graphics, as shown in this fun demo of Dash (our mascot).</figcaption></figure><h4><strong>Developer Experience Enhancements</strong></h4><p>We understand the challenges of building and releasing an iOS app. To save help save developer’s time, we’ve added new tools and resources to simplify the entire process. You can now <a href=\"https://docs.flutter.dev/get-started/install/macos#ios-setup\">connect to iOS devices</a> over Wi-Fi to test and debug your app. We’ve also<a href=\"https://github.com/flutter/flutter/issues/97730\"> added validation</a> to the release process. This step ensures that you took all necessary steps before releasing your app to the App Store.</p><h3>Enzo Conty 💙 on Twitter: &quot;#Flutter now support iOS Wireless Debugging ! Here&#39;s me trying it: pic.twitter.com/o7ziMasiYq / Twitter&quot;</h3><p>Flutter now support iOS Wireless Debugging ! Here&#39;s me trying it: pic.twitter.com/o7ziMasiYq</p><p>In addition, we’ve created iOS-focused documentation and tutorials to help developers learn Flutter and build iOS apps. We’ve incorporated Swift and SwiftUI examples into our documentation. We added guides on moving from<a href=\"https://dart.dev/guides/language/coming-from/swift-to-dart\"> Swift to Dart</a>, <a href=\"https://docs.flutter.dev/get-started/flutter-for/swiftui-devs\">SwiftUI to Flutter</a> and adding<a href=\"https://docs.flutter.dev/add-to-app/ios/project-setup\"> Flutter to an existing iOS app</a>. We’ve also added resources for supporting <a href=\"https://docs.flutter.dev/deployment/flavors\">flavors on iOS</a> and using<a href=\"https://docs.flutter.dev/platform-integration/ios/app-extensions\"> iOS app extensions</a> like home and lock screen widgets.</p><h4><strong>iOS-style UI ComponentUpdates</strong></h4><p>The <a href=\"https://docs.flutter.dev/ui/widgets/cupertino\">Cupertino library</a> provides widgets (UI components) resembling SwiftUI and UIKit views. This should make your app feel right at home on Apple devices. To better align with the latest iOS design guidelines, we’ve made significant updates to our Cupertino library.</p><p>We’ve addressed top-voted issues and added new widgets like <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoCheckbox-class.html\">CupertinoCheckbox</a>, <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoRadio-class.html\">CupertinoRadio</a>, <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoListTile-class.html\">CupertinoListTile</a> and spell check support on text input fields.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/489/1*qYEQdMvlHvAFS1biiH6phg.png\" /><figcaption>Automatic iOS style spell check on TextField and CupertinoTextField</figcaption></figure><p>In addition, we recognize the importance of cross-platform design. We’ve added <a href=\"https://docs.flutter.dev/resources/platform-adaptations#ui-components\">adaptive constructors</a> to several Material widgets. This allows your Flutter app to adapt between Android and iOS design conventions. For common widgets <em>without</em> adaptive constructors, we’ve created <a href=\"https://docs.flutter.dev/resources/platform-adaptations#top-app-bar-and-navigation-bar\">preliminary guides</a> to give you code snippets to adapt entire widgets or widget properties.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rBWjG-4wCqJlY98oPeADrw.png\" /></figure><h3><em>Roadmap</em></h3><p>As we continue to make Flutter a better tool for iOS developers, we’re focusing on a few key areas:</p><h4><strong>Integrations with the Apple ecosystem</strong></h4><p>Flutter developers should be able to easily use Apple’s APIs in their apps. This allows them to create immersive experiences that integrate all of Apple’s great offerings.</p><p>A few months ago, we launched <a href=\"https://pub.dev/packages/ffigen\">FFIgen</a>. This tool generates bindings to <a href=\"https://dart.dev/guides/libraries/objective-c-interop\">call Objective-C and Swift APIs directly from Dart code.</a> Some apps are using FFIgen to call Apple’s APIs now. But, there are still limitations. We’re actively working on making the tool more robust with support for async callbacks and better Swift interop.</p><p>Furthermore, we know the importance of <a href=\"https://developer.apple.com/app-extensions/\">app extensions</a> within the iOS ecosystem. That’s why we’re developing a way to create the user interface (UI) for some extensions using Flutter. This will enable developers to reuse components from their Flutter app to design their extension’s interface. It’s worth noting that this approach won’t work for all types of extensions. WidgetKit widgets, for instance, have strict API restrictions. However, it will work for other common extensions such as <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/Share.html#//apple_ref/doc/uid/TP40014214-CH12-SW1\">Share</a> or <a href=\"https://developer.apple.com/documentation/messages\">iMessage</a>. To keep up with our progress, you can follow <a href=\"https://github.com/flutter/flutter/issues/124287\">this work in this Flutter Github issue</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/240/1*K2e5QrjXtv0bCU35H_uRkw.gif\" /><figcaption>A proof of concept for a Flutter app running as an iOS share extension</figcaption></figure><h4><strong>Cross-platform design</strong></h4><p>Deploying your app across multiple platforms requires some design considerations. There’s a balance between customizing the design of UI components to match your brand, while adhering to platform conventions.</p><p>As such, we’re investigating ways to improve the experience for designing and building Flutter apps. First, we want to make Flutter’s out-of-the-box UI components more flexible. This way, developers can quickly customize widgets to match their own design systems. Second, we want to leverage more automated adaptations that make Flutter apps feel natural on both iOS and Android.</p><h4><strong>Developer experience</strong></h4><p>We’re committed to improving the iOS developer experience with Flutter. One key focus is decreasing build times to improve developer productivity. Additionally, we’re addressing long-standing requests such as the ability to <a href=\"https://github.com/flutter/flutter/issues/9767\">rename the Runner app</a>. Finally, we’ll continue to prioritize performance enhancements and general iOS fidelity.</p><h3>Send us your feedback</h3><p>As an open source project, you can track our progress on <a href=\"https://github.com/flutter/flutter\">GitHub</a>. We may add, prolong, or defer features based on what we learn and what you tell us.</p><p>As always, we value your feedback and appreciate your support! The best way to send us your input is by filing issues in <a href=\"http://github.com/flutter/flutter/issues\">GitHub</a> and filling out our quarterly user survey. You can stay up to date on future Flutter iOS work by following me on <a href=\"https://twitter.com/LeighaJarett\">Twitter</a>.</p><h3>Resources</h3><ul><li><a href=\"http://flutter.dev\">Flutter website</a></li><li><a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app\">Wonderous app GitHub</a></li><li><a href=\"https://github.com/flutter\">Flutter GitHub</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=833aa9779fac\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/the-future-of-ios-development-with-flutter-833aa9779fac\">The future of iOS development with Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-05-10T19:51:06.000Z":{"title":"What’s new in Flutter 3.10","link":"https://medium.com/flutter/whats-new-in-flutter-3-10-b21db2c38c73?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/b21db2c38c73","category":["flutter-app-development","dart","flutter"],"dc:creator":"Kevin Chisholm","pubDate":"Wed, 10 May 2023 19:51:06 GMT","atom:updated":"2023-05-11T00:03:19.598Z","content:encoded":"<h4>Seamless web and mobile integration, breakthrough graphics performance via Impeller in stable, and more</h4><p>Welcome to Flutter 3.10! We can’t wait to show off the huge efforts of our amazing Flutter community. This Flutter release runs the incredible <a href=\"https://medium.com/dartlang/announcing-dart-3-53f065a10635\">Dart 3</a> also available <em>today</em>!</p><p>Flutter 3.10 includes many improvements to web, mobile, graphics, security and so much more. Let’s get down to business!</p><h3>Framework</h3><h4>Material 3</h4><p>The Material library now matches the latest <a href=\"https://m3.material.io/components\">Material Design spec</a>. Changes include new components and component themes, updated component visuals and more. Developers must “opt in” to these changes using the useMaterial3 theme flag. <em>In the next stable release, </em><em>useMaterial3 defaults to </em><em>true.</em></p><p>To opt in to the M3 version of the Material library, set useMaterial3 : true in your MaterialApp theme. The flutter create command adds this to your theme when creating a new app.</p><p>To preview these changes, check out the <a href=\"https://flutter.github.io/samples/material_3.html\">demo app</a>. The demo lets you toggle useMaterial3 on and off.</p><h4>ColorScheme.fromImageProvider()</h4><p>All M3 components configure the default colors of the theme’s ColorScheme. The default color scheme uses shades of purple. You can create a custom color scheme either from a single “seed” color or from an image. Try both variations with the demo. Color schemes generated should look good and be accessible.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CPv57Dp1cYXPz-YtZ2jMcA.gif\" /></figure><h4><strong>NavigationBar</strong></h4><p>This provides an M3 version of BottomNavigationBar widget. While <a href=\"https://m3.material.io/components/navigation-bar/overview\">M3</a> uses different colors, highlighting, and elevation, it works as it did before. To override the default appearance of the NavigationBars widget, use the NavigationBarTheme widget. Though you don’t need to migrate existing apps to this component, you should use it for new apps.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*sApyn1E7o2DqWJx4fG6T8w.gif\" /></figure><h4>NavigationDrawer</h4><p>This provides an <a href=\"https://m3.material.io/components/navigation-drawer/overview\">M3</a> destination selection widget based on the Drawer widget. NavigationDrawer shows a single-selection list of NavigationDestinations widgets. You can include other widgets in this list as well. The NavigationDrawer can scroll when needed. To override the default appearance of the NavigationDrawers widget, use the NavigationDrawerTheme widget.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*tSZSZ2DVOT3CzX2OjxTg2Q.gif\" /></figure><h4>SearchBar and SearchAnchor</h4><p>These components provide predictive text for search queries. When the user enters a search query, the app computes a list of matching responses in a “search view”. The user either selects one or adjusts the query. To override the <a href=\"https://m3.material.io/components/search/overview\">M3</a> design of these components, use the SearchBarTheme and SearchAnchorTheme widgets.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*SzGgItEwmTCzwMRTgnTy5A.gif\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/1*67iesripk2_62VSr5US-Iw.gif\" /></figure><h4>Secondary Tab Bar</h4><p>M3 allows you to create a second tier of tabbed content. To distinguish this second TabBar, use <a href=\"https://m3.material.io/components/tabs/overview#34192702-8a18-4da7-b2cf-d1579632cb96\">TabBar.secondary</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*Fzkz6aIl-ZIry-vGojaM9w.gif\" /></figure><h4>DatePicker updated for <a href=\"https://m3.material.io/components/date-pickers/overview\">M3</a></h4><p>The M3 DatePicker updates the colors, layout, and shape for both the calendar and textfield versions of the widget. This doesn’t change the API, but adds a new DatePickerTheme.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/338/1*6cpF7kqYEBCHqv-YswfLhg.gif\" /></figure><h4>TimePicker updated for <a href=\"https://m3.material.io/components/time-pickers/overview\">M3</a></h4><p>The M3 TimePicker, like the DatePicker, updates the colors, layout, and shapes for both the regular and compact versions of the widget.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/363/1*jYLsooI9kMMCqibaOgwwFA.gif\" /></figure><h4>BottomSheet updated for <a href=\"https://m3.material.io/components/bottom-sheets/overview\">M3</a></h4><p>Beyond M3 color and shape updates, the bottom sheet now adds an optional drag handle that’s included when you set showDragHandle to true.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*x52LrlHvIpARkrF1RevMeA.gif\" /></figure><h4>ListTile updated for <a href=\"https://m3.material.io/components/lists/overview\">M3</a></h4><p>The M3 ListTile updates positioning and spacing of this widget. This includes content padding, leading and trailing widget alignment, minimum leading width, and vertical spacing. The API remains unchanged.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*54RCRghfN9g3tTXzl0U9ew.gif\" /></figure><h4>Drawer updated for M3</h4><p>The M3 Drawer updates the colors and elevation while making some small layout changes.</p><h3>TextField Updates</h3><p>M3 updates all TextField widgets to support native gestures. Double clicking or triple clicking with a mouse work the same as double tapping or triple tapping on a touch device. By default, the TextField and CupertinoTextField widgets use these features.</p><h4><strong>TextField double click/tap gestures</strong></h4><ul><li><strong>Double click + drag:</strong> Extends the selection in word blocks.</li><li><strong>Double tap + drag:</strong> Extends the selection in word blocks.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*QFzoK7Gj3Q6uFopP7dOJhw.gif\" /></figure><h4><strong>TextField triple click/tap gestures</strong></h4><h4>Triple click</h4><ul><li>Selects a paragraph block at the clicked position when inside of a multi-line TextField (Android/Fuchsia/iOS/macOS/Windows).</li><li>Selects a line block at the clicked position when inside of a multi-line TextField (Linux).</li><li>Selects all text in a single-line TextField.</li></ul><h4>Triple tap</h4><ul><li>Selects a paragraph block at the clicked position when inside of a multi-line TextField.</li><li>Selects all text in a single-line TextField.</li></ul><h4>Triple click + drag</h4><ul><li>Extends the selection in paragraph blocks (Android/Fuchsia/iOS/macOS/Windows).</li><li>Extends the selection in line blocks (Linux).</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*sqmvK_z8gkQw-eFNur6PIQ.gif\" /></figure><h3>Flutter supports SLSA level 1</h3><p>Flutter Framework now compiles with Supply Chain Levels for Software Artifacts (<a href=\"https://slsa.dev/\">SLSA</a>) Level 1. This acknowledges the implementation of many security features including:</p><ul><li><strong>Scripted build process</strong>. The build scripts for Flutter now allow automated builds on trusted build platforms. Building on protected architecture helps prevent artifact tampering which improves supply chain security.</li><li><strong>Multi-party approval with audit logging</strong>. Flutter release workflows execute only after multiple engineers approve. All executions create auditable log records. These changes ensure that no one can introduce changes between source code and artifact generation.</li><li><strong>Provenance</strong>. Beta and stable releases now build with <a href=\"https://slsa.dev/provenance/v0.1\">provenance</a>. This means trusted sources with expected contents built the framework release artifacts. Each release publishes links to view and verify provenance on the <a href=\"https://docs.flutter.dev/release/archive\">SDK archive</a>.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*n2OloNCiXMyvmFrLOk_WBw.png\" /></figure><p>This work also allows the team to advance toward SLSA L2 and L3 compliance. These two levels focus on protecting artifacts during and after the build process.</p><h3>Web</h3><h4><strong>Flutter web apps improved load times</strong></h4><p>This release reduces the file size of icon fonts. It pruned unused glyphs from both Material and Cupertino.</p><h4><strong>CanvasKit reduced size for all browsers</strong></h4><p>Chromium-based browsers can use an even smaller custom CanvasKit “flavor”. The hosted CanvasKit serves from Google’s industry-leading CDN. This should improve performance further.</p><h4><strong>Element embedding</strong></h4><p>You can now <a href=\"https://docs.flutter.dev/deployment/web#embedding-a-flutter-app-into-an-html-page\">serve Flutter web apps from a specific element in a page</a>. Before this release, your apps could either fill the entire page body or display within an iframe tag. <a href=\"https://github.com/flutter/samples/tree/main/web_embedding\">Sample code</a> can be found in GitHub.</p><h4><strong>Shader support</strong></h4><p>Web apps can use Flutter’s <a href=\"https://docs.flutter.dev/development/ui/advanced/shaders\">fragment shader support</a>.</p><h3>Engine</h3><h4>Impeller</h4><p>In the 3.7 stable release, we previewed <a href=\"https://docs.flutter.dev/perf/impeller\">Impeller</a> on iOS. Since then, we received and addressed a lot of great feedback from users. With over 250 commits to Impeller in this release, we set Impeller as our default renderer on iOS. By default, all apps built for iOS with Flutter 3.10 use Impeller. These iOS apps will have less jank and better consistent performance.</p><p>Since the 3.7 release, Impeller on iOS has improved its memory footprint. Impeller uses fewer render passes and intermediate render targets. On newer iPhones, enabling lossy texture compression reduced memory footprint without affecting fidelity. These advances also made a marked improvement in performance on iPads.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/236/1*m8HdyPAVFESHa3dpiEU41g.png\" /></figure><p>Consider a complex screen like the “pull quote” screen in the <a href=\"https://flutter.gskinner.com/wonderous/\">Wonderous</a> app. Together, these improvements cut the memory footprint of those screens almost in half. The reduction in memory usage also gives a modest drop in GPU and CPU load. The Wondrous app may not register that drop in load. Its frames had rendered under budget before, but this change should extend battery life.</p><p>Impeller also unlocks the team’s ability to deliver popular feature requests faster. One example results in support for the wider P3 color gamut on iOS. Look elsewhere in this post for a description of that feature.</p><p>Community contributions accelerated our progress, in particular GitHub users <a href=\"https://github.com/ColdPaleLight\">ColdPaleLight</a> and <a href=\"https://github.com/luckysmg\">luckysmg</a>. They authored several Impeller-related patches that improved fidelity and performance.</p><p>While Impeller meets the rendering needs of most Flutter apps, you can opt-out of Impeller. If you choose to opt-out, consider <a href=\"https://github.com/flutter/flutter/issues/new/choose\">filing an issue on GitHub</a> to tell us why. App users may notice that Skia and Impeller render with minor differences. These differences could be bugs, so don’t hesitate to file issues. In a future release, we will remove the legacy Skia renderer for iOS to reduce Flutter’s size.</p><p>Progress continues on a Vulkan backend for Impeller. Impeller on Android remains under active development but not ready for preview. We plan to share more about it in the near future.</p><p>To follow along with our progress, check out <a href=\"https://github.com/orgs/flutter/projects/21\">our GitHub project board</a>.</p><h3>Performance</h3><p>This release covers more performance improvements and fixes aside from Impeller.</p><h4>Eliminating Jank</h4><p>We want to thank open-source contributor <a href=\"https://github.com/luckysmg\">luckysmg</a>. They discovered they could slash the time to get the next drawable layer from the Metal driver. To get that bonus, you need to set the FlutterViews background color to a non-nil value. This change eliminates low frame rates on recent iOS 120Hz displays. In some cases, it <em>triples</em> the frame rate. This helped us close over half a dozen GitHub issues. This change held such significance that we backported a hotfix into the 3.7 release.</p><p>In the 3.7 stable release, we shifted loading of local images from the platform thread to the Dart thread to avoid delaying vsync events from the platform thread. However, <a href=\"https://github.com/flutter/flutter/issues/121525\">users</a> <a href=\"https://github.com/flutter/flutter/issues/121351\">noticed</a> that this additional work on the Dart thread also caused some jank. In this release, we moved the opening and decoding of local images from the Dart thread to a <a href=\"https://github.com/flutter/engine/pull/39918\">background thread</a>. This change eliminates potential long pauses on screens with a lot of local images, while avoiding delaying vsync events. In our local testing and automated benchmarks, this change cut the load time for several simultaneous images in half.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/391/1*LyQyiGe8oQrQkQByS1PK5Q.png\" /></figure><p>We continue to build optimizations on top of Flutter’s new internal DisplayList structure. In this release, we added an <a href=\"https://github.com/flutter/engine/pull/38429\">R-Tree based culling</a> mechanism. This mechanism removes the processing of drawing operations much earlier in our renderer. This optimization accelerates, <a href=\"https://github.com/flutter/flutter/issues/92366\">for example</a>, a custom painter whose output fails offscreen. Our <a href=\"https://flutter-engine-perf.skia.org/e/?begin=1671661938&amp;end=1671754421&amp;keys=X789f7ff76f30f8ccc672464f335fe09b&amp;num_commits=50&amp;request_type=1&amp;xbaroffset=31974\">microbenchmarks</a> showed a decreased DisplayList processing time of up to 50%. Apps with clipped custom paints could see differing improvements. The degree of improvement depends on the complexity and number of hidden draw operations.</p><h4>Reducing iOS startup latency</h4><p>An <a href=\"https://github.com/flutter/flutter/issues/37826\">inefficient strategy</a> for identifier lookups in app bundles increased app startup latency. This startup latency grows in proportion to the app’s size. In this release, <a href=\"https://github.com/flutter/engine/pull/39975\">we fixed the bundle identifier lookup</a>. This reduced startup latency by 100ms or about 30–50% in a large production application.</p><h4>Reducing Size</h4><p>Flutter uses SkParagraph as the default library for text shaping, layout, and rendering. We included a flag to fall back on the legacy libtxt and minikin libraries. As we have full confidence in SkParagraph, <a href=\"https://github.com/flutter/engine/pull/39499\">we removed</a> libtxt and minikin and their flag in this release. This reduces Flutter’s compressed size by 30KB.</p><h4>Stability</h4><p>In the 3.0 release, we enabled an Android feature late in our rendering pipeline. This Android feature used advanced GPU driver features. These driver features repaint less of the screen when only one “dirty” region changes. We added this to earlier optimizations to our graphics pipeline with similar effects. Though our benchmarks results encouraged us, two issues surfaced. First, the most improved benchmark might not represent practical use cases. Second, the set of devices and Android versions that supported this GPU driver feature proved <a href=\"https://github.com/flutter/engine/pull/37493\">hard to find</a>. Given the limited advances and support, we <a href=\"https://github.com/flutter/engine/pull/40898\">disabled</a> the partial repaint feature on Android.</p><p>The feature remains enabled on iOS when using the Skia backend. We expect to <a href=\"https://github.com/flutter/flutter/issues/124526\">enable it with Impeller</a> in a future release.</p><h3>API Improvements</h3><h4>APNG Decoder</h4><p>Flutter 3.10 addresses one of our most <a href=\"https://github.com/flutter/flutter/issues/37247\">promoted issues</a>. It <a href=\"https://github.com/flutter/engine/pull/31098\">adds the ability</a> to decode APNG images. You can load APNG images with Flutter’s existing image loading APIs.</p><h4>Image loading API improvements</h4><p>Flutter’s esteemed Director of Engineering <a href=\"https://github.com/tvolkert\">tvolkert</a> has landed improvements to dart:ui’s image loading APIs. We have added a <a href=\"https://master-api.flutter.dev/flutter/dart-ui/instantiateImageCodecWithSize.html\">new method</a> instantiateImageCodecWithSize. This supports the <a href=\"https://github.com/flutter/flutter/issues/118543\">use case</a> of loading an image that meets these three conditions:</p><ul><li>an aspect ratio unknown at load time</li><li>a bounding box constraint</li><li>an original aspect ratio constraint</li></ul><p>An example would be when an app tries to display one image from a pool of possibilities loaded from the network.</p><h3>Mobile</h3><h3>iOS</h3><h4>Wireless debugging</h4><p>You can now run and hot reload your Flutter iOS apps without a cable! After a successful wireless pairing of your iOS device in Xcode, you can deploy your app to that device using flutter run. If you encounter issues, verify the network icon appears next to your device under <strong>Window &gt; Devices</strong> and <strong>Simulators &gt; Devices</strong>. To learn more, check out our <a href=\"https://docs.flutter.dev/get-started/install/macos#ios-setup\">documentation</a>.</p><h4>Wide gamut image support</h4><p>Flutter apps on iOS can now support accurate rendering for wide gamut images. To use wide gamut support, the app must use Impeller and add the <a href=\"https://github.com/flutter/flutter/blob/a463bb82c413af319c8b715deedd7f2c345becd6/dev/integration_tests/wide_gamut_test/ios/Runner/Info.plist#L52\">FLTEnableWideGamut</a> flag in the Info.plist file.</p><h4>Spellcheck support</h4><p>The SpellCheckConfiguration() widget now defaults to supporting <a href=\"https://developer.apple.com/documentation/uikit/uitextchecker\">Apple’s spell check service</a> on iOS. To use this widget, set it using the spellCheckConfiguration parameter in CupertinoTextField.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/362/1*4ibBYWIZH1FhDIpaw0BDFg.gif\" /></figure><h4>Adaptive checkbox and radio</h4><p>This release adds the CupertinoCheckBox and CupertinoRadio widgets to the Cupertino library. They create checkbox and radio button components that match Apple’s styling.</p><p>The Material checkbox and radio widgets added the .adaptive constructors. On iOS and macOS, these constructors use the corresponding Cupertino widgets. On other platforms, they use Material widgets.</p><h4>Refining Cupertino animations, transitions and colors</h4><p>Flutter 3.10 improved some animations, transitions, and colors to match SwiftUI. These improvements include:</p><ul><li><a href=\"https://github.com/flutter/flutter/pull/122275\">Updating</a> the CupertinoPageRoute transition</li><li><a href=\"https://github.com/flutter/flutter/pull/110127\">Adding</a> a title magnification animation to CupertinoSliverNavigationBar</li><li>Adding several <a href=\"https://github.com/flutter/flutter/pull/118971\">new iOS system colors</a> to CupertinoColors</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/248/1*80sFA4-LrCTojCDvUJ9j2w.gif\" /></figure><h4>PlatformView performance</h4><p>When PlatformViews appear on screen, Flutter <a href=\"https://github.com/flutter/engine/pull/39172\">throttles the refresh rate</a> on iOS to reduce jank. App users will notice this when the app displays animated or scrollable PlatformViews.</p><h4>macOS and iOS can use shared code in plugins</h4><p>Flutter now supports the <a href=\"https://docs.flutter.dev/development/packages-and-plugins/developing-packages#shared-ios-and-macos-implementations\">sharedDarwinSource</a> key in the pubspec.yaml file for plugins. This key indicates that Flutter should share iOS and macOS code.</p><pre>ios:<br>  pluginClass: PathProviderPlugin<br>  dartPluginClass: PathProviderFoundation<br>  sharedDarwinSource: true<br>macos:<br>  pluginClass: PathProviderPlugin<br>  dartPluginClass: PathProviderFoundation<br>  sharedDarwinSource: true</pre><h4>New resources for app extensions</h4><p>We added <a href=\"https://docs.flutter.dev/development/platform-integration/ios/app-extensions\">documentation</a> for Flutter developers to use iOS app extensions. These extensions include live activities, home screen widgets, and share extensions.</p><p>To simplify creating home screen widgets and sharing data, we added new methods to the <a href=\"https://github.com/flutter/packages/pull/3450\">path_provider</a> and homescreen_widget plugins.</p><h4>New resources for cross-platform design</h4><p>The documentation now includes cross platform design considerations for specific <a href=\"https://docs.flutter.dev/resources/platform-adaptations#ui-components\">UI components</a>. To learn more about each of these UI components, check out the <a href=\"https://github.com/flutter/uxr/discussions\">discussions in the Flutter UX GitHub repository</a>. We appreciate any input or feedback!</p><h3>Android</h3><h4><strong>Android CameraX support</strong></h4><p><a href=\"https://developer.android.com/training/camerax\">Camera X</a>, a Jetpack library, simplifies adding rich camera functionality to your Android app. This functionality applies across a wide selection of Android Camera hardware. With this release, we add preliminary support for CameraX to the Flutter Camera plugin. This support covers the following use cases:</p><ul><li>Image Capture</li><li>Video Recording</li><li>Display live camera preview</li></ul><p>To give it a try, opt in to using the CameraX implementation. To opt in, add the following line to your pubspec.yaml file.</p><pre>Dependencies:<br>  camera: ^0.10.4 # Latest camera version<br>  camera_android_camerax: ^0.5.0</pre><p>We would love your feedback as we continue to add more CameraX features then make CameraX the default implementation.</p><h3>DevTools</h3><p>We continue to improve DevTools, the suite of performance and debugging tools for Dart and Flutter. Some highlights include:</p><ul><li>The DevTools UI uses Material 3. This both modernizes the look and enhances accessibility.</li><li>The DevTools console supports evaluations for a running app in debug mode. Before this release, you could only do this when you paused an app.</li><li>An embedded <a href=\"https://perfetto.dev/\">Perfetto trace viewer</a> replaces the previous timeline trace viewer. Perfetto handles larger datasets and performs better than the legacy trace viewer. Perfetto includes more features, such as:<br>- Allowing you to pin threads of interest.<br>- Clicking and dragging to select multiple timeline events from multiple frames.<br>- Using SQL queries to pull specific data from the timeline events.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/1*fOYGagsonbND_VnkasWmzw.png\" /></figure><p>To learn more, check out the release notes for <a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.23.1\">DevTools 2.23.1</a>, <a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.22.2\">DevTools 2.22.2</a>, and <a href=\"https://docs.flutter.dev/development/tools/devtools/release-notes/release-notes-2.21.1\">DevTools 2.21.1</a>.</p><h3>Deprecations &amp; Breaking Changes</h3><h4>Deprecated APIs</h4><p>Breaking changes in this release include deprecated APIs that expired after the release of v3.7. To see all affected APIs, along with additional context and migration guidance, check out <a href=\"https://docs.flutter.dev/release/breaking-changes/3-7-deprecations\">the deprecation guide for this release</a>. <a href=\"https://docs.flutter.dev/development/tools/flutter-fix\">Dart Fix</a> can remedy many of these issues, including quick fixes in the IDE and bulk apply with the dart fix command.</p><h4>Android Studio Flamingo upgrade</h4><p>After you upgrade Android Studio to Flamingo, you might see an error when you try to flutter run or flutter build your Flutter Android apps. This error occurs because Android Studio Flamingo updates its bundled Java SDK from 11 to 17. Gradle versions <a href=\"https://docs.gradle.org/current/userguide/compatibility.html#java\">earlier than 7.3</a> can’t run when using Java 17. We <a href=\"https://github.com/flutter/flutter/pull/123916\">updated</a> flutter analyze --suggestions to validate if this error occurs due to incompatibility between your Java SDK and your Gradle version.</p><p>To learn different ways to fix this error, check out <a href=\"https://docs.flutter.dev/go/android-java-gradle-error\">our migration guide</a>.</p><h4>Window singleton deprecation</h4><p>This release deprecates the window singleton. Apps and libraries relying on it should <a href=\"https://docs.flutter.dev/release/breaking-changes/window-singleton\">migrate</a> away from it. This prepares your app for multi-window support when it launches in a future version of Flutter.</p><h3>Thanks to the community</h3><p>As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a>, they help us identify these breaking changes. To learn more, check out <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">our breaking change policy</a>.</p><h3>Wrapping it up</h3><p>As we wrap up this release, the Flutter team at Google wants to thank all the contributors who have made this release possible. Your dedication and hard work have helped to make Flutter a game-changer in the industry and continue to revolutionize application development. We encourage you to start exploring this latest stable version of Flutter to take advantage of all the amazing features it has to offer. To do so, just flutter upgrade! Stay tuned for more exciting updates from Flutter in the future.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b21db2c38c73\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-10-b21db2c38c73\">What’s new in Flutter 3.10</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-05-10T19:50:50.000Z":{"title":"Racing Forward at I/O 2023 with Flutter and Dart","link":"https://medium.com/flutter/racing-forward-at-i-o-2023-with-flutter-and-dart-df2a8fa841ab?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/df2a8fa841ab","category":["web-development","mobile-app-development","flutter","announcements","google"],"dc:creator":"Tim Sneath","pubDate":"Wed, 10 May 2023 19:50:50 GMT","atom:updated":"2023-05-10T19:50:50.740Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>Major updates to graphics performance, web integration, developer productivity and security in Flutter 3.10</h4><figure><img alt=\"A fun image of the Flutter mascot, Dash, standing by a racecar. She is holding a blue flag with “3.10” printed on it.\" src=\"https://cdn-images-1.medium.com/max/1024/1*bzC0ul7jBVhOJiastVGKlw.png\" /></figure><p>We’re <em>delighted</em> to be back for this year’s Google I/O, streaming live around the world from near our headquarters in Mountain View, California!</p><p>Just over three months ago, we introduced a bold new roadmap for Flutter and Dart at Flutter Forward in Nairobi, Kenya. At I/O, we’re sharing our progress against that vision with updates across the four themes that we shared: breakthrough graphics experiences, seamless integration with web and platforms, support for new and emerging architectures, and a focus on developer experience.</p><figure><img alt=\"At Flutter Forward, we announced four areas of focus for the upcoming months: breakthrough graphics performance, seamless integration for web and mobile, early to new and emerging architectures, and continued focus on developer experience.\" src=\"https://cdn-images-1.medium.com/max/1024/1*Zd93zNHQec6C55G3pEJuvA.png\" /></figure><p>As you probably know, Flutter is a UI toolkit that enables app developers to build for mobile, web, desktop, and embedded devices from a single codebase. Flutter enables you to build <strong>beautiful</strong> apps, giving you complete control over every pixel on the screen. It’s <strong>fast</strong>, taking advantage of your device’s capabilities with support for hardware-accelerated graphics and natively-compiled machine code. It’s <strong>productive</strong>, with technologies like stateful hot reload that allow you to immediately see code changes in your app. Its <strong>portability</strong> enables you to deploy to a wide variety of platforms with the same source code and without surprises. And it’s fully <strong>open source</strong>, with no cost to license it or need to pay for tools to develop for it.</p><h3>Ongoing Flutter momentum</h3><p>Use of Flutter continues to grow both at Google and across the broader industry. Here at Google, teams have deployed Flutter apps across mobile, web and desktop platforms, with examples including:</p><ul><li>Android’s new <a href=\"https://www.android.com/better-together/nearby-share-app/\">Nearby Share app for Windows</a>, built with Flutter, which allows wireless sharing of photos and documents between Windows and Android devices.</li><li>The <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.playconsole\">new Play Console app</a>, currently in open beta, which lets developers view app statistics and reply to reviews.</li><li>The <a href=\"https://cloud.google.com/blog/products/management-tools/google-cloud-mobile-app-with-uptime-checks\">Google Cloud mobile app</a>, which lets you monitor your services with a new Flutter-powered experience.</li><li><a href=\"https://workspaceupdates.googleblog.com/2023/04/practice-sets-for-google-classroom.html\">Google Classroom practice sets</a>, a new web-based tool for creating and distributing interactive assignments that deliver real-time feedback and help to students.</li></ul><p>On the subject of Classroom, <a href=\"https://www.youtube.com/watch?v=JVJF_M9bgj4\">we announced at Flutter Forward</a> that the team was building a new version of the mobile app using Flutter. The new version is starting to roll out on iOS now, with new features in an updated version of the Android app coming soon. This version of Classroom uses the latest Flutter technologies, including our new Impeller graphics rendering engine, which enables fast, jank-free UI.</p><p>Rewriting Classroom in Flutter has even improved performance. The new version of the app has faster cold startup time than the old version, as this side-by-side video demonstrates:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F_5CIATSDSPI%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D_5CIATSDSPI&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F_5CIATSDSPI%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ad76616860f484598ec6540d358fa538/href\">https://medium.com/media/ad76616860f484598ec6540d358fa538/href</a></iframe><p>We are continuing to invest in packages to connect your Flutter app with the rest of the Google developer ecosystem. This includes major updates to our <a href=\"https://medium.com/flutter/2023-google-mobile-ads-updates-for-flutter-16b603df9ec9\">Google Ads support</a> for native ads; <a href=\"https://github.com/firebase/flutterfire\">new Windows and better web support for Firebase</a>; and new experimental support for <a href=\"https://io.google/2023/program/2f02692d-9a41-49c0-8786-1a22b7155628/\">deeper Android interoperability</a>.</p><p>With Flutter support on six platforms (Android, iOS, web, Windows, macOS, and Linux), <strong>over one million published apps now use Flutter</strong>. They come from all over the world: from <a href=\"https://play.google.com/store/apps/details?id=com.vsct.vsc.mobile.horaireetresa.android&amp;hl=en_US&amp;gl=US\">SNCF Connect</a>, the train travel app for the French railway; to Apple App of the Day winner <a href=\"https://apps.apple.com/us/app/so-vegan/id1572826611\">SO VEGAN</a>; from <a href=\"https://rive.app/downloads\">Rive’s blazing-fast desktop apps</a> for creating animated graphics to the relationship-empowering <a href=\"https://www.getdailyagape.com/\">Agapé</a> mobile and tablet app; from the beautiful, <a href=\"https://www.globalcitizen.org/en/content/new-global-citizen-app-impact-activism-every-day/\">newly-redesigned Global Citizen app</a> to the <a href=\"https://9to5linux.com/first-look-at-ubuntu-23-04s-brand-new-desktop-installer-written-in-flutter\">new Ubuntu Linux installer</a>. We’re so glad to see proof of Flutter’s value!</p><h3>Breakthrough graphics performance with Impeller</h3><p>We aspire for Flutter to offer developers and designers immense power for delivering amazing graphical experiences. Over the last few years, we’ve been rebuilding our graphics rendering architecture for speed and power. We call this new engine <em>Impeller</em>.</p><blockquote>“We aspire for Flutter to offer developers and designers immense power for delivering amazing graphical experiences.”</blockquote><p>Since we introduced Impeller on iOS, we’ve expanded testing and our work with early adopters to validate production quality and further tune performance. With today’s Flutter 3.10 release, we’re delighted to announce that <a href=\"https://github.com/flutter/flutter/issues/122223\">Impeller is now turned on by default for iOS</a>, giving apps a big performance boost simply by migrating to the latest version of Flutter.</p><p>With Impeller now enabled for production iOS use, we turn our attention to adding preview support for Android. Just as Impeller on iOS uses the underlying Metal APIs, Android’s implementation of Impeller builds on <a href=\"https://www.vulkan.org/\">Vulkan</a>, which provides low-level APIs for speedy rendering on the underlying graphics hardware. While the vast majority of <a href=\"https://developer.android.com/about/dashboards#Vulkan\">modern Android devices</a> support Vulkan, we will support a backward-compatible mode for older devices. We’ll be sharing an early preview of Impeller for Android, along with more details about the technical underpinnings of Impeller, in an upcoming blog post.</p><h3>Seamless integration with the web</h3><p>As we described at Flutter Forward, we have a different goal than most existing web frameworks. The implementation of Flutter we’re building for the web is explicitly <em>not</em> designed to be a general purpose web framework. There are plenty of existing web frameworks, like Angular and React, that fill that space very well. Instead, Flutter is the first framework designed architecturally around new and emerging web technologies like <a href=\"https://skia.org/docs/user/modules/canvaskit/\">CanvasKit</a> and <a href=\"https://webassembly.org/\">WebAssembly</a>, which particularly suit complex app experiences.</p><blockquote>“Flutter is the first framework designed architecturally around new and emerging web technologies like CanvasKit and WebAssembly.”</blockquote><p>Since our early releases of Flutter’s web support, we’ve been working hard to improve performance, accessibility and interoperability.</p><p>A major contributor to perceived performance is <em>load time</em>, the interval between a page being requested and becoming interactive. In this release, we’ve taken a leap forward, thanks to reductions in the size of CanvasKit on all browsers, and additional optimizations for Chromium-based browsers. In Flutter 3.10, CanvasKit shrank to 1.5MB (from 2.7MB in our previous version). Icon fonts have also been trimmed of unused glyphs, resulting in a 100× reduction in size in most cases. Thanks to these optimizations, we reduced the load time for our default counter app by 42% using a simulated cable connection.</p><p>As previewed at Flutter Forward, we now <a href=\"https://flutter-forward-demos.web.app/#/\">support embedding Flutter content in an existing HTML web page</a>, rather than Flutter occupying the entire page or needing to use inline frames. With Flutter 3.10, we introduced <em>element embedding</em>, which allows you to integrate Flutter content just like any other CSS element on the page — for instance, applying complex CSS transitions and transformations. To get started, try one of these samples that use <a href=\"https://github.com/flutter/samples/tree/main/web_embedding/element_embedding_demo\">JavaScript</a> or wrap Flutter in an <a href=\"https://github.com/flutter/samples/tree/main/web_embedding/ng-flutter\">Angular component</a>.</p><p>Continuing our focus on breakthrough graphics performance, Flutter 3.10 also gains support for <a href=\"https://docs.flutter.dev/development/ui/advanced/shaders\">fragment shaders</a> on the web. Custom shaders can be used to provide rich graphical effects beyond those that the Flutter SDK provides. A shader is a program authored in a small, Dart-like language, known as <a href=\"https://www.khronos.org/opengl/wiki/Core_Language_(GLSL)\">GLSL</a>, and executed on the user’s GPU. If you want to learn more, check out <a href=\"https://docs.flutter.dev/ui/advanced/shaders\">our documentation on shaders</a>, as well as our <a href=\"https://codelabs.developers.google.com/codelabs/flutter-next-gen-uis#0\">new codelab</a>.</p><h3>Early to new architectures with WebAssembly</h3><p><a href=\"https://webassembly.org/\">WebAssembly</a> (often abbreviated to Wasm) has been growing in maturity as a platform-neutral binary instruction format for <a href=\"https://caniuse.com/wasm\">modern browsers</a>. On the web, Flutter has been using Wasm to distribute the CanvasKit runtime, while the Dart framework and application code has historically been compiled to JavaScript. We’ve been interested in targeting Wasm, instead of JavaScript, for a while. Until recently, however, Wasm lacked native support for garbage-collected languages like Dart.</p><p>Over the past year we’ve therefore collaborated with several teams across the WebAssembly ecosystem to introduce garbage collection to the standard. This has been achieved via a new extension called <a href=\"https://github.com/WebAssembly/gc/blob/main/proposals/gc/Overview.md\">WasmGC</a>, which now has near-stable implementations in Chromium-based and Firefox browsers.</p><p>WebAssembly excites us with its potential to bring the performance of native code to the web. Dart’s JavaScript compiler, used across millions of lines of code at Google, already generates fast, well-tuned JavaScript. However, switching to Wasm will give us the efficiency of native code with the portability of JavaScript, which will further improve our performance on the web. In some early benchmarks, we’ve seen a boost of 3× for execution speeds, which translates into yet richer web-based experiences. And Wasm couples this with easier integration with code written in other languages like Kotlin and C++.</p><blockquote>“WebAssembly excites us with its potential to bring the performance of native code to the web.”</blockquote><p>As we wait for browser support to become more pervasive, we have introduced preview support for compiling Flutter apps to WebAssembly in pre-release channels. We’d love you to try it for your own apps and give us early feedback. To learn more, check out <a href=\"https://flutter.dev/wasm\">flutter.dev/wasm</a>.</p><h3>Continued focus on developer experience</h3><p>While we hope to delight many with the breakthrough graphics performance and richer web support listed earlier, we also introduce many improvements to developer velocity and productivity in this release. And <a href=\"https://medium.com/flutter/whats-new-in-flutter-3-10-b21db2c38c73\">our detailed technical blog captures hundreds of improvements to Flutter itself</a>, which will be of great interest to existing Flutter developers.</p><p>But perhaps the most significant improvement in this release to the core developer experience is <strong>the release of </strong><a href=\"https://dart.dev\"><strong>Dart 3</strong></a><strong>, which is included in Flutter 3.10</strong>.</p><p>Dart 3 completes a long journey to bring sound null safety to the Dart ecosystem. Writing null-safe code protects against a whole class of programming bugs that come from uninitialized values being used without checks. While we’ve supported null safe code since Dart 2.0, we’ve now turned off the legacy “unsafe” mode. As an ecosystem, we’ve been preparing for this for some time, and with 99% of the top 1,000 packages supporting null safety, we believe now is the right time to make the transition.</p><blockquote>“Dart 3 completes a long journey to bring sound null safety to the Dart ecosystem.”</blockquote><p>Dart 3 introduces many other new features, including records, patterns, and class modifiers, which will improve the readability and fluidity of Dart code. Head to the <a href=\"https://medium.com/dartlang/announcing-dart-3-53f065a10635\">main Dart 3 blog</a> for more information and examples. Flutter itself is already taking advantage of these new Dart 3 features, so you’ll see improvements to our own codebase as these roll in. And we think you’ll enjoy using them in your own code.</p><h3>SLSA and software supply chain security</h3><p>In the modern age, protecting against threats to critical software infrastructure is unfortunately a necessity. So in addition to the headline features listed earlier, our engineering team has <a href=\"https://medium.com/flutter/flutter-in-2023-strategy-and-roadmap-60efc8d8b0c7\">made a priority this year</a> of investing in security. This investment spans security testing, automation, and supply chain security.</p><blockquote>“Our team has prioritized investments in security”</blockquote><p>By undertaking the following work, we aim to give businesses further confidence in adopting Flutter:</p><ul><li>The Open Source Security Foundation <a href=\"https://bestpractices.coreinfrastructure.org/en\">Best Practices Program</a> serves as a useful benchmark for helping projects adhere to best practices for security and vulnerability management. We are delighted to announce that we have completed <a href=\"https://bestpractices.coreinfrastructure.org/en/projects/5631\">100% of the passing requirements</a> for this program <a href=\"https://bestpractices.coreinfrastructure.org/en/projects/5631\">passing level</a>. We continue to advance towards demonstrating adherence to <a href=\"https://bestpractices.coreinfrastructure.org/en/projects/5631?criteria_level=1\">silver</a> and <a href=\"https://bestpractices.coreinfrastructure.org/en/projects/5631?criteria_level=2\">gold</a> criteria.</li><li>Flutter has also enabled <a href=\"https://securityscorecards.dev/\">OpenSSF Scorecards</a> and <a href=\"https://github.com/dependabot/dependabot-core\">Dependabot</a> on all Flutter critical repositories. OpenSSF Scorecards is a static analysis tool that checks how well your repository adheres to best practices, and creates issues when those practices aren’t being met. Dependabot monitors vulnerabilities in project dependencies and creates pull requests to update them as necessary. Using these tools, the Flutter team has identified and resolved over 300 vulnerabilities across our sites and codelabs.</li><li>The Flutter and Dart SDKs, along with the release workflows for these SDKs, have recently reached the <a href=\"https://slsa.dev/spec/v1.0/levels#build-l1\">SLSA L1</a> level. The SLSA (Supply-chain Levels for Software Artifacts) framework helps open source projects maintain strong supply chain security. Reaching SLSA L1 is a great step towards protecting the tools Flutter developers use daily.</li><li>Lastly, we made many security improvements to our infrastructure. This includes migrating to more secure build and test environments while limiting access to these environments. In addition, we have improved our logging and auditing capabilities for Flutter framework and engine artifacts, providing exceptional protection of our artifacts. These improvements provide the Flutter team far greater insight into how the artifacts we generated are handled during the build process.</li></ul><h3>An open-source project, a work of thousands</h3><p>There are thousands of other changes in this release that we hope will delight existing Flutter developers. But it’s worth noting how many of those contributions come from developers outside Google. They include new features; documentation improvements; packages that extend Flutter to horizons we never could have anticipated; and reproducible issue reports and feature requests that give us fresh perspectives on how we can improve.</p><p>Flutter is not a <em>Google</em> project, it’s an <em>all of us</em> project. We’re so grateful for the diversity and enthusiasm of the community that makes Flutter the product it is. It’s a joy to join you on this mission; the future for Flutter is brighter than ever!</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F1J3B-xaoXgw%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D1J3B-xaoXgw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F1J3B-xaoXgw%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8d2a2370558295517945a9e689310b7c/href\">https://medium.com/media/8d2a2370558295517945a9e689310b7c/href</a></iframe><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=df2a8fa841ab\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/racing-forward-at-i-o-2023-with-flutter-and-dart-df2a8fa841ab\">Racing Forward at I/O 2023 with Flutter and Dart</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-05-10T17:01:59.000Z":{"title":"2023 Google Mobile Ads Updates for Flutter","link":"https://medium.com/flutter/2023-google-mobile-ads-updates-for-flutter-16b603df9ec9?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/16b603df9ec9","category":["flutter","mobile-ads","google"],"dc:creator":"Timothy Hoang","pubDate":"Wed, 10 May 2023 17:01:59 GMT","atom:updated":"2023-05-10T20:20:35.502Z","content:encoded":"<h4>We added new GMA Flutter features based on your feedback!</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/658/1*PLQQUPqp_e0LmXTbAgb_iQ.png\" /></figure><p>As you build and grow your Flutter apps, you may want your apps to make money. You can monetize appin many ways. Introducing advertising would be one of the most common strategies. To introduce ads, you can use the <a href=\"https://pub.dev/packages/google_mobile_ads\">Google Mobile Ads</a> (GMA) Flutter plugin. The GMA plugin can place ads from AdMob, Google Ad Manager, or AdSense in your Flutter mobile app.</p><p>Feature and tooling requests have grown in step with GMA Flutter plugin usage. Based on your Ad Manager and AdMob survey responses, the plugin now supports:</p><ul><li>Dart support for Native Ads</li><li>Updated application samples</li><li>WebView API for Ads</li></ul><h3>Dart support for Native ads</h3><p>With Native ads, you can customize the look and feel of the ads that appear in your app. You design the ads from the ground up. Configure how they look, where they’re placed, and how they work within your existing app design.</p><p>Native ads can match the layout of the surrounding content. This results in a more cohesive, natural app experience. You can implement these ads in a number of ways. Add them in your feeds, on transition screens and overlays, or anywhere else you want ads within your app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CkTEpg9fxmW7j_UxQX481A.png\" /></figure><p>Before, implementing Native ads required writing platform code. We agree this was a suboptimal developer experience and want to enable you to use Dart whenever possible.</p><p>We added Dart APIs to enable you to customize your Native ads using Dart. These APIs leverage GMA <a href=\"https://developers.google.com/admob/flutter/native/templates\">Native Templates in Dart</a> to accelerate the creation of your ad experiences. The new Dart APIs don’t replace platform code. If you want more control over platform-specific ad customization, you can continue to write platform code.</p><p>To learn more about best practices with building Native ad experiences, check out our <a href=\"https://storage.googleapis.com/gweb-dblclk-native-gallery.appspot.com/NativePlaybook.pdf\">Native ads playbook</a>.</p><p>To get started with implementing these ads, check out our <a href=\"https://developers.google.com/admob/flutter/native\">developer documentation</a>.</p><h3>Updated application samples</h3><p>When you submit issues on the GMA Flutter plugin, it helps if you include a minimum reproducible app sample to investigate the issue. That said, we heard your feedback that you might have difficulty generating or sharing reproducible samples.</p><p>To simplify troubleshooting issues, we cut our big sample into smaller samples. We replaced our monolithic app sample with <a href=\"https://github.com/googleads/googleads-mobile-flutter/tree/main/samples/admob\">samples for each ad format and mediation</a>. When you submit issues now, you can use these apps. These apps allow you to share a minimum reproducible sample. This helps when sharing a sample of your own app would be cumbersome or impossible.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/216/1*AwHtPUcFDv1jToZIKjye_w.png\" /></figure><p>We hope that these smaller individual app samples simplify testing out new formats or mediation. Each sample includes a readme that supplements our GMA developer documentation (<a href=\"https://developers.google.com/ad-manager/mobile-ads-sdk/flutter/quick-start\">Ad Manager</a>, <a href=\"https://developers.google.com/admob/flutter/quick-start\">AdMob</a>).</p><p>Each sample app implements two important features:</p><ol><li>Google test ads for <a href=\"https://developers.google.com/admob/android/test-ads\">Android</a> and <a href=\"https://developers.google.com/admob/ios/test-ads\">iOS</a></li><li>A test application ID.</li></ol><p>When testing functionality of your own ad units in the application samples, replace the ad unit IDs and app IDs with your own. Make sure you have <a href=\"https://developers.google.com/ad-manager/mobile-ads-sdk/flutter/test-ads\">enabled test ads</a>. If you click on too many ads without being in test mode, you risk your account being flagged for invalid activity.</p><p>To illustrate with the <a href=\"https://github.com/googleads/googleads-mobile-flutter/blob/main/samples/admob/banner_example/lib/main.dart#L25\">banner app sample</a>:</p><p>1. Replace the following test ad unit IDs with your own:</p><pre>final String _adUnitId = Platform.isAndroid<br>? &#39;ca-app-pub-3940256099942544/6300978111&#39;<br>: &#39;ca-app-pub-3940256099942544/2934735716&#39;;</pre><p>2. Replace the following test application IDs in the <a href=\"https://github.com/googleads/googleads-mobile-flutter/blob/main/samples/admob/banner_example/android/app/src/main/AndroidManifest.xml#L30\">Android</a> and <a href=\"https://github.com/googleads/googleads-mobile-flutter/blob/main/samples/admob/banner_example/ios/Runner/Info.plist#L51\">iOS</a> config files with your own.</p><p>That’s all it takes to start testing functionality of your</p><p>To view all samples, check out <a href=\"https://github.com/googleads/googleads-mobile-flutter/tree/main/samples/admob\">googleads-mobile-flutter/samples</a>.</p><h3>WebView API for Ads</h3><p>We understand some developers prefer using WebViews in their mobile apps. This allows them to avoid the need to re-tag their ad inventory. As stated in our <a href=\"https://support.google.com/adsense/answer/48182?sjid=16092961064586512819-NA#trs\">AdSense policy</a> and <a href=\"https://support.google.com/admanager/answer/6310245?sjid=16092961064586512819-NA\">Ad Manager policy</a>, we only supported monetization of web content in certain WebView technologies.</p><p>To support Ad Manager and AdSense monetization of mobile app WebViews, we’re introducing Flutter support for the GMA WebView API for Ads. If your app uses WebViews to display web content that serves ads from Ad Manager or AdSense, you must use the WebView API for Ads.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Vj2zT8BlnstyfZmvgSXuSw.png\" /></figure><ol><li>If you don’t need to request ads from an in-app WebView, implement the ad format using the GMA Flutter plugin (<a href=\"https://support.google.com/admanager/answer/6238696\">Ad Manager guide</a>, <a href=\"https://support.google.com/admob/answer/6128738\">AdMob guide</a>)</li><li>If you request ads from an in-app WebView, use the WebView API for Ads to register the WebView to follow our <a href=\"https://support.google.com/adsense/answer/48182?sjid=16092961064586512819-NA#trs\">AdSense policy</a> and <a href=\"https://support.google.com/admanager/answer/6310245?sjid=16092961064586512819-NA\">Ad Manager policy</a>.</li></ol><p>You can do either option, or even both, in the same app.</p><p><strong>Note</strong>: The JavaScript in the <a href=\"https://support.google.com/adsense/answer/9274634\">AdSense code</a> or <a href=\"https://support.google.com/admanager/answer/181073\">Google Publisher Tag</a> builds and sends ad requests. You don’t need to make any ad requests with the SDK. Only the mobile web and desktop web <a href=\"https://support.google.com/admanager/answer/9796545\">inventory formats</a> may be used with this API.</p><p>To start implementing, check out our <a href=\"https://developers.google.com/admob/flutter/webview\">developer documentation</a>.</p><h3>How do we determine what to build next?</h3><p>Your feedback influences our product roadmap.</p><p>Since the open beta in 2020, we’ve been working with you in GitHub to troubleshoot issues and collect feature requests. Adoption of the GMA Flutter plugin has seen significant growth. We want to scale our support to meet this higher demand.</p><p>Starting in Q3 2023, if you report a bug or feature request via GitHub Issues, we recommend you visit our <a href=\"https://groups.google.com/group/google-admob-ads-sdk/\">developers forum</a> for your issue. The developers forum provides your best technical support option. We staff the forum with a technical support team. Developers who use the GMA SDK participate in the forum as well. If you have a question about the Flutter GMA SDK, the forum should provide the fastest and most accurate responses. We’re scaling support for Flutter in the forums to the same teams that support the Android, iOS, and Unity GMA plugins.</p><p>We welcome Flutter developers to the Google Mobile Ads community. We invite you to try the GMA SDK and consult with your fellow app publishers in the forum!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=16b603df9ec9\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/2023-google-mobile-ads-updates-for-flutter-16b603df9ec9\">2023 Google Mobile Ads Updates for Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-04-06T14:15:47.000Z":{"title":"Wonderous nominated for Webby Award","link":"https://medium.com/flutter/wonderous-nominated-for-webby-award-8e00e2a648c2?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/8e00e2a648c2","category":["mobile-app-development","flutter","ux","ux-design","design"],"dc:creator":"Leigha Jarett","pubDate":"Thu, 06 Apr 2023 14:15:47 GMT","atom:updated":"2023-04-06T14:15:47.614Z","content:encoded":"<p><strong>Wonderous has been nominated for a Webby award in the Best User Interface category.</strong></p><p><strong>You can vote for Wonderous on the </strong><a href=\"https://vote.webbyawards.com/PublicVoting#/2023/apps-dapps-and-software/app-features/best-user-interface\"><strong>Webby awards website</strong></a><strong>.</strong></p><p>In August, we partnered with the <a href=\"https://gskinner.com/\">gSkinner</a> team to launch <a href=\"http://wonderous.app\">Wonderous</a> — a mobile app that demonstrates Flutter at its best. Since its launch, over 30 thousand users have installed Wonderous. Users rated it with 5 stars in the App Store.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F6Hb3QiH_yps%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D6Hb3QiH_yps&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F6Hb3QiH_yps%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5a5b327dab949e7c369b1473fb91f426/href\">https://medium.com/media/5a5b327dab949e7c369b1473fb91f426/href</a></iframe><p>Wonderous has been nominated for Best User Interface for Apps, dApps and Software in the 27th Annual Webby Awards. The New York Times hails the Webby Awards as the “Internet’s highest honor”. The International Academy of Digital Arts and Sciences (IADAS), the leading international awards organization honoring excellence on the Internet, presents the Webby Awards each year.</p><blockquote>“Nominees are setting the standard for innovation and creativity on the Internet,” said Claire Graves, President of The Webby Awards. “It is an incredible achievement to be selected among the best from the nearly 14,000 entries we received this year.”</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XksvK4Wq0YbZoIG8udUShw.png\" /></figure><p>With beautiful graphics and unique animations, Wonderous lets you experience the wonders of the world straight from your device. Wonderous uses Flutter to create an expressive user interface that tailors to the mobile form factor and doesn’t conform to a stock design system. Instead, it realizes the creative vision of its designer.</p><p>You can download Wonderous from the <a href=\"https://apps.apple.com/us/app/wonderous/id1612491897\">App Store</a> or<a href=\"https://play.google.com/store/apps/details?id=com.gskinner.flutter.wonders&amp;hl=en_US&amp;gl=US\"> Play Store</a>. You can <a href=\"http://wonderous.app\">read about its best practices</a> in adaptive design, animation, performance and accessibility, or inspect the <a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app\">complete source code.</a></p><p>As a nominee, Wonderous could also win a Webby People’s Voice Award. This would be the online vote of fans across the globe. From now until April 20, Wonderous fans and Flutter developers can cast their votes at <a href=\"https://vote.webbyawards.com/PublicVoting#/2023/apps-dapps-and-software/app-features/best-user-interface\">the Webby Awards website</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8e00e2a648c2\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/wonderous-nominated-for-webby-award-8e00e2a648c2\">Wonderous nominated for Webby Award</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-03-30T04:33:43.000Z":{"title":"Flutter in 2023: strategy and roadmap","link":"https://medium.com/flutter/flutter-in-2023-strategy-and-roadmap-60efc8d8b0c7?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/60efc8d8b0c7","category":["flutter","strategy","app-development","announcements","developer"],"dc:creator":"Tim Sneath","pubDate":"Thu, 30 Mar 2023 04:33:43 GMT","atom:updated":"2023-03-30T04:33:43.292Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>A guide to our strategy and areas of investment</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/617/1*OMkiWPCxgYijkAvNn-e3MA.png\" /></figure><p>As an open source project, we believe that we serve our customers best when we are transparent about our roadmap.</p><p>For developers who adopt a technology like Flutter, it’s not enough for a product to merely offer a useful set of features. A dependency on Flutter is also a long-term commitment to maintain a skillset and codebase. For that reason, it’s important that we articulate a vision and direction that is compelling and realistic. We hope that sharing more about why we (Google) invest in Flutter will give you greater trust in our future and direction, and allow you to plan with better clarity as to how your investments might connect or supplement ours.</p><p><strong>We’re therefore sharing </strong><a href=\"https://flutter.dev/go/strategy-2023\"><strong>our 2023 strategy document today</strong></a>, where we express our statement of purpose and guiding principles, and describe the major investments that we plan to undertake through the remainder of this year. By necessity, there are some minor redactions (such as commercially-sensitive data or references to unannounced products), and like all plans, we don’t expect this to survive first contact with reality. This strategy document should be read alongside the <a href=\"https://github.com/flutter/flutter/wiki/Roadmap\">engineering roadmap</a> on our wiki, which adds further specifics around features that we’re working on.</p><p>In closing, an important note on the use of the word ‘we’ in the above sentences, which might be read as “those who Google pay to work on Flutter”. We hope that the Flutter contributors remain far more numerous than just those who are employed by Google, but we don’t claim to speak for the incentives that others have or the work that they might independently undertake. We’re unendingly grateful for this collaboration.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=60efc8d8b0c7\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-in-2023-strategy-and-roadmap-60efc8d8b0c7\">Flutter in 2023: strategy and roadmap</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-08-16T18:02:25.000Z":{"title":"What’s new in Flutter 3.13","link":"https://medium.com/flutter/whats-new-in-flutter-3-13-479d9b11df4d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/479d9b11df4d","category":["flutter","flutter-app-development"],"dc:creator":"Kevin Chisholm","pubDate":"Wed, 16 Aug 2023 18:02:25 GMT","atom:updated":"2023-08-16T18:02:24.523Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*H4kTD2wabl_kscFq\" /></figure><h4>2D scrolling, faster graphics, Material 3 updates and more</h4><p>Welcome back to our quarterly Flutter stable release, this time for Flutter 3.13! In just the three months since our last release, we have had 724 pull requests merged and 55 community members authoring their first commit to Flutter!</p><p>Keep reading to learn about all the new additions and improvements the Flutter community has contributed to this latest release!</p><h3>Engine</h3><p>We’ve made several improvements to Impeller — our new graphics renderer — and added new Engine APIs for foldable devices.</p><h3>Impeller</h3><h4>iOS performance improvements</h4><p>Thanks to the high-quality feedback from Flutter users, in this release we have continued to improve the performance of Impeller on iOS. As a result of many different optimizations, the Impeller renderer on iOS now not only has lower latency (by completely eliminating shader compilation jank), but on some benchmarks also have higher average throughput. In particular, on our flutter/gallery transitions performance benchmark, average frame rasterization time is now around half of what it was with Skia.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ivWbcnIt-1Mln5Lx\" /></figure><p><em>Improvements to average frame rasterization time in the Flutter Gallery transitions performance benchmark on an iPhone 11. The time period covered is roughly the time from the 3.10 branch cut to the 3.13 branch cut.</em></p><p>This progress was thanks to these and other optimizations, including:</p><ul><li>Enabled dirty region management and partial repaint (<a href=\"https://github.com/flutter/engine/pull/40959\">flutter/engine#40959</a>)</li><li>Implemented concurrent render pass encoding (<a href=\"https://github.com/flutter/engine/pull/42028\">flutter/engine#42028</a>)</li><li>Made numerous improvements to text rendering (<a href=\"https://github.com/flutter/engine/pull/41290\">flutter/engine#41290</a>, <a href=\"https://github.com/flutter/engine/pull/41780\">flutter/engine#41780</a>, <a href=\"https://github.com/flutter/engine/pull/42417\">flutter/engine#42417</a>)</li><li>Added a fast path for convex shapes to avoid expensive tessellation calls (<a href=\"https://github.com/flutter/engine/pull/41834\">flutter/engine#41834</a>)</li><li>Started to use compute shaders for a few operations (<a href=\"https://github.com/flutter/engine/pull/42192\">flutter/engine#42192</a>)</li><li>More eager culling of out-of-bounds draw operations (<a href=\"https://github.com/flutter/engine/pull/41606\">flutter/engine#41606</a>)</li></ul><h4>Fidelity improvements</h4><p>In 3.10 we announced that wide gamut colors were available under a flag when using Impeller. After hearing and addressing feedback from users, wide gamut colors are now the default on iOS when using Impeller.</p><h4>Progress update on Impeller on Android</h4><p>We continue to make progress on the Vulkan backend for Impeller, however it hasn’t yet reached the level of quality where an official preview period would be useful. We want to ensure that our users’ first experience with Impeller on Android is high quality and we are not quite there yet. We hope to enter a preview period for Impeller on Android in a stable release later this year. Even though Impeller on Android isn’t quite ready for preview yet, the OpenGL and Vulkan backends have benefited from many of the backend agnostic optimizations that we’ve made to Impeller’s HAL during the past year. In particular, average frame rasterization times for Android have also improved significantly on the flutter/gallery transitions performance benchmark. Further improvements are in progress so that the preview on Android can be high quality.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_hbW2fQla6t5bDSg\" /></figure><p>Once again, our progress was greatly accelerated by contributions from the community, in particular GitHub user <a href=\"https://github.com/ColdPaleLight\">ColdPaleLight</a>, who authored several much appreciated Impeller-related patches, improving fidelity and performance, including adding <a href=\"https://github.com/flutter/engine/pull/42567\">support for conical gradients</a>.</p><p>Please continue to follow along with our progress on Impeller using the Impeller <a href=\"https://github.com/orgs/flutter/projects/21\">project dashboard</a> on GitHub. We greatly appreciate all the feedback and encourage users to continue filing fidelity and performance issues in the <a href=\"https://github.com/flutter/flutter/issues\">issue tracker</a>.</p><h4>Impeller (and Wonderous) on macOS</h4><p>In our last stable release, we announced that Impeller, a rewrite of our rendering engine, would be turned on by default for iOS. Since then, we’ve heard great feedback from customers. Now, we’re excited to announce that Impeller for macOS is available in preview. You can test Impeller and enable it in your app by following the guidance on the <a href=\"https://docs.flutter.dev/perf/impeller#availability\">Impeller page</a>.</p><p>We’re eager for you to test this out and provide feedback. The best way to help us improve Impeller for macOS is to establish baseline metrics by running your macOS app without SkSL warmup and use DevTools to find instances of <a href=\"https://docs.flutter.dev/tools/devtools/performance#shader-compilation\">jank</a> due to shader compilation. Next, test your app using Impeller — click through and check for bugs, performance improvements or performance regressions. If you notice any issues, we strongly encourage you to file them on GitHub. Be sure to include information about the device you’re running on, video recordings, and an <a href=\"https://docs.flutter.dev/tools/devtools/performance#import-and-export\">export of your performance trace.</a></p><p>Looking to try Impeller on macOS? <a href=\"https://apps.apple.com/us/app/wonderous/id1612491897\">Install Wonderous from the Mac App Store</a>!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/880/0*mr1oUAyNBl6RWCOD\" /></figure><h3>New engine API</h3><h4>Improved foldable support</h4><p>In order to better support foldable devices, we have added a new API to retrieve various properties of a display. The new getter <a href=\"https://master-api.flutter.dev/flutter/dart-ui/FlutterView/display.html\">FlutterView.display</a> returns a <a href=\"https://master-api.flutter.dev/flutter/dart-ui/Display-class.html\">Display</a> object. The Display object reports the physical size, the device pixel ratio, and the refresh rate of the display. Check out <a href=\"https://master-api.flutter.dev/flutter/services/SystemChrome/setPreferredOrientations.html\">setPreferredOrientations</a> for an example that uses the new API.</p><h3>Framework</h3><h3>Material</h3><p>We’ve made a number of improvements to the Material Framework to 1) offer more platform adaptability, 2) allow for more customization, and 3) add new capabilities.</p><h4>Character recognition in TextField</h4><p>When using TextField on iOS, users will automatically see an option to use the device camera to recognize characters and insert them into the field.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/796/1*J-fzkm7jc2ORDimcTWRPxg.gif\" /></figure><p>This feature would not be possible without the contributions of community members <a href=\"https://github.com/luckysmg\">luckysmg</a> (Author) and <a href=\"https://github.com/tgucio\">tgucio</a> (reviewer). This feature was a 1000 line and 70 commit effort that bridged the <a href=\"https://github.com/flutter/engine/pull/34751\">engine</a> and <a href=\"https://github.com/flutter/flutter/pull/96637\">framework</a>! Thank you!</p><h4>Platform adaptive dialog</h4><p>An adaptive constructor has been added to the AlertDialog, along with the adaptive function showAdaptiveDialog, to display either a Material or Cupertino dialog depending on the current platform.</p><p>Now using AlertDialog.adaptive() uses the <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoAlertDialog-class.html\">CupertinoAlertDialog</a> widget on iOS:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/714/0*-F0HReZy8hO7g4Ua\" /></figure><p>And Material <a href=\"https://api.flutter.dev/flutter/material/AlertDialog-class.html\">AlertDialog</a> on Android.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*mXhB49hbDgipj12y\" /></figure><h4>CupertinoDatePicker with month and year</h4><p>Adds a monthYear mode to the CupertinoDatePicker.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/416/0*hduILuHCxPFxzZwT\" /></figure><h4>Cupertino (iOS-style) check styled radio</h4><p>The useCheckmarkStyle property has been added to CupertinoRadio. This also allows the Radio.adaptive and RadioListTile.adaptive widgets to control whether they use the checkmark style on iOS.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*cmIR1i5jjDqtSf7e\" /></figure><h4>More customization options for Material widgets</h4><p>There have been several improvements that make it easier to customize the design of the Material widgets:</p><ul><li>You can now use the error property for InputDecoration (as opposed to a string) to customize the error widget that is shown on text fields:</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/680/0*GxTex9TCfT9Hwmzg\" /></figure><ul><li>You can now add tooltips to ButtonSegment:</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/530/0*HCwY_q2qHScr7iYn\" /></figure><ul><li>You can now customize the gap in ExpansionPanelList using the materialGapSize property</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_kpFAizvZpn1TbiX\" /></figure><ul><li>You can now customize the trackOutlineWidth for Switch</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/154/0*2iGWjI0i3e6CztlR\" /></figure><ul><li>You can now customize the padding with the tilePadding property on NavigationDrawer</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*h1eFxKZNaxJoWshN\" /></figure><ul><li>You can choose how to align the tabs using the alignment property for TabBar</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ALRxynRXg1MkS-nB\" /></figure><h4>MaterialState color for chips</h4><p><a href=\"https://github.com/flutter/flutter/pull/128584\">This</a> makes it possible to customize the color of the chips in all of the different states.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/912/0*EzVRz68A8GCFiuJN\" /></figure><h4>Elevated Chips</h4><p>FilterChip.elevated,ChoiceChip.elevated,and ActionChip.elevated variants have been added in accordance with the <a href=\"https://m3.material.io/components/chips/overview\">Material 3 specs.</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/779/0*VxRhItQg2lCdN5ka\" /></figure><h4>onSubmitted to SearchBar</h4><p>Allows for a different action to be initiated when a user finishes the text entry and presses the Done button on the keyboard.</p><h4>BaseTapAndDragGestureRecognizer</h4><p>A base class has been added for a family of classes, which includes support for tap + pan (TapAndPanGestureRecognizer), and tap + horizontal drag (TapAndHorizontalDragGestureRecognizer). These classes have already been used to implement native text field gestures. However, they’re also great for other use cases — for example, scaling a widget using a double tap + vertical drag gesture.</p><h3>App Lifecycle Changes</h3><h4>AppLifeCycleListener</h4><p>AppLifecycleListener class was <a href=\"https://github.com/flutter/flutter/pull/123274\">added</a> for listening to changes in the application lifecycle, and responding to requests to exit the application.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/920/0*bN0QtrIRWGDMC9LJ\" /></figure><h3>Scrolling</h3><h4>TwoDimensional scrolling foundation</h4><p>This release of Flutter also contains the foundation for building widgets that scroll in two dimensions, which means a bunch of new classes to build with, including:</p><ul><li><a href=\"https://master-api.flutter.dev/flutter/widgets/ChildVicinity-class.html\">ChildVicinity</a>, a representation similar to an index in a one dimensional scrollview, representing the relative position of children in two dimensions.</li><li><a href=\"https://master-api.flutter.dev/flutter/widgets/TwoDimensionalChildDelegate-class.html\">TwoDimensionalChildDelegate</a>, similar to SliverChildDelegate with equally similar subclasses: <a href=\"https://master-api.flutter.dev/flutter/widgets/TwoDimensionalChildBuilderDelegate-class.html\">TwoDimensionalChildBuilderDelegate</a> &amp; <a href=\"https://master-api.flutter.dev/flutter/widgets/TwoDimensionalChildListDelegate-class.html\">TwoDimensionalChildListDelegate</a></li><li><a href=\"https://master-api.flutter.dev/flutter/widgets/TwoDimensionalScrollView-class.html\">TwoDimensionalScrollView</a>, an abstract base class that creates a <a href=\"https://master-api.flutter.dev/flutter/widgets/TwoDimensionalScrollable-class.html\">TwoDimensionalScrollable</a> and <a href=\"https://master-api.flutter.dev/flutter/widgets/TwoDimensionalViewport-class.html\">TwoDimensionalViewport</a>, matching the same model as the one dimensional ScrollView.</li><li><a href=\"https://master-api.flutter.dev/flutter/widgets/RenderTwoDimensionalViewport-class.html\">RenderTwoDimensionalViewport</a>, and finally, the workhorse of laying out box children in two dimensions.</li></ul><p>Scrolling in two dimensions also comes with some new interactions, including diagonal scrolling. See <a href=\"https://master-api.flutter.dev/flutter/widgets/DiagonalDragBehavior.html\">DiagonalDragBehavior</a> for new interaction types, and configure them on your TwoDimensionalScrollView or TwoDimensionalScrollable.</p><p>We conducted a user study in order to develop this foundation for developers to be able to build whatever they could imagine while scrolling in all directions. Check out an example of a simple, lazy loading, two dimensional grid implemented <a href=\"https://dartpad.dev/?id=4424936c57ed13093eb389123383e894\">in this DartPad</a> in about 200 lines of code!</p><p>The Flutter team is already at work building two dimensional scrolling widgets on top of this framework, coming soon in the two_dimensional_scrollables package.</p><h4>New slivers</h4><p>Flutter 3.13 brings with it a new set of slivers for composing unique scrolling effects.</p><p><a href=\"https://master-api.flutter.dev/flutter/widgets/SliverMainAxisGroup-class.html\">SliverMainAxisGroup</a> and <a href=\"https://master-api.flutter.dev/flutter/widgets/SliverCrossAxisGroup-class.html\">SliverCrossAxisGroup</a> both support arranging multiple slivers together. In the main axis, one effect this can create is sticky headers, allowing pinned headers to be pushed out of view as each group of slivers scrolls by.</p><p>The cross axis grouping allows for slivers to be arranged side by side in the viewport, with (also new) widgets like <a href=\"https://master-api.flutter.dev/flutter/widgets/SliverCrossAxisExpanded-class.html\">SliverCrossAxisExpanded</a> and <a href=\"https://master-api.flutter.dev/flutter/widgets/SliverConstrainedCrossAxis-class.html\">SliverConstrainedCrossAxis</a> capable of determining the allotment of space for each grouped sliver in the cross axis.</p><p>Also new to the sliver library is <a href=\"https://master-api.flutter.dev/flutter/widgets/DecoratedSliver-class.html\">DecoratedSliver</a>, similar to <a href=\"https://master-api.flutter.dev/flutter/widgets/DecoratedBox-class.html\">DecoratedBox</a>. This allows users to embellish a sliver, which could even be a sliver group, with a <a href=\"https://master-api.flutter.dev/flutter/painting/Decoration-class.html\">Decoration</a>.</p><p>See all of these new slivers in action in <a href=\"https://dartpad.dev/?id=6e2b7245063001576a3a83adb23f1121\">this DartPad</a> example.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/595/0*OY76w1Hu7LqTODA9\" /></figure><h3>Accessibility</h3><h4>Accessibility updates</h4><ul><li>The onOffSwitchLabels accessibility property was added for CupertinoSwitch to display I/O labels</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/158/0*aKqjrDI5zXHm7Dza\" /></figure><ul><li>The <a href=\"https://github.com/flutter/flutter/pull/126171\">FocusSemanticEvent has been added. </a>However, it should be used with caution as it might break a users’ expectation of how a11y focus works.</li><li>IconButton’s isSelected is<a href=\"https://github.com/flutter/flutter/issues/127145\"> now available to screen readers</a>.</li></ul><h3>Platforms</h3><h3>Android</h3><h4>New support targets</h4><p>With this release, Flutter now supports targeting <a href=\"https://developer.android.com/about/versions/14\">Android 14/ API 34</a>. While we are still working on a few new features in Android 14 (i.e. predictive back navigation), we have thoroughly tested this release against the new Android SDK and prioritize fixing any related issues you may find.</p><h3>iOS</h3><h4>Reduced rotation distortion on iOS</h4><p>When an iOS screen rotates, Flutter apps would previously experience some distortion that looked different from native iOS applications. We’ve made some modifications to reduce the <a href=\"https://github.com/flutter/flutter/issues/16322\">distortion</a>:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/737/0*veAtL_lhOkJ7kU7b\" /></figure><h4>Renaming Runner</h4><p>When a Flutter iOS app is created, a <em>Runner</em> Xcode project and Xcode workspace are created in the /ios folder. Now, you can rename the workspace or project so that you don’t end up with a list of <em>Runners</em>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/598/0*HuzkGU7owliBNi5N\" /></figure><h4>Preparing for iOS 17 and Xcode 15</h4><p>With the impending release of iOS 17 and Xcode 15, users who desire to develop using this toolchain will need to be on Flutter 3.13. In addition, when downloading Xcode 15, make sure you also download the iOS 17 simulator.</p><h3>Games</h3><h4>Flutter games updates</h4><p>We launched the <a href=\"http://flutter.dev/games\">Flutter casual games toolkit</a> in 2022 with a game template, tutorials, documentation, community spaces, and GCP/Firebase/Ad credits to jumpstart game development for Flutter Developers. Since then, tens of thousands of games have been published using Flutter! Since launch, we’ve actively engaged and surveyed Flutter game developers to find out how we could improve the games toolkit. Almost all of them mentioned wanting more resources and sample code to help them better design, develop and monetize their games.</p><p>Today, we are releasing a new update to the <a href=\"https://flutter.dev/games\">Flutter Games web page</a> with a carousel of video resources and new games to learn about while building in Flutter. We have a number of new updates to the toolkit coming in the next few months with additional resources and samples to kickstart your game development journey.</p><p>As a first step, we partnered with AdMob in July 2023 and co-hosted an exclusive UX design and Monetization workshop dedicated to Flutter game devs. ~ 100 developers joined us via a live interactive webinar, and gave the session a 4.6/5.0 satisfaction rating. We hope to summarize the workshop content and share these insights more broadly with all of you soon.</p><p>We are actively working on more updates, so please stay tuned! If you are already using the games toolkit, and would love to send us ideas for future improvement, please don’t hesitate to email us at <a href=\"mailto:flutter-games@google.com\">flutter-games@google.com</a>.</p><h3>Tooling</h3><h3>DevTools</h3><h4>New DevTools features</h4><p>We’ve made improvements to the performance and usability of DevTools that include:</p><p>We added a new overflow menu on the navigation bar to handle cases when the list of tabs can’t be displayed at once.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5Z-VWLi5EB_4_s1x\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/272/0*eenzRMajhOc8R62L\" /></figure><p>We added a legend for class types on the Memory tab.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/890/0*K_zKIHXbEXlHt-Jz\" /></figure><p>Additionally, we made scrolling a tree table in the CPU profiler faster and smoother. In the debugger, we’ve made searching in a file, or searching for a file up to 5x faster.</p><p>To learn more, check out the release notes for <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.25.0\">DevTools 2.25.0</a>, and <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.24.0\">DevTools 2.24.0</a>.</p><h3>Breaking changes and deprecations</h3><h3>Breaking changes</h3><h4>Material 3 by default in the next release</h4><p>We’re excited to announce that in the <strong>next</strong> Flutter stable release we plan to change the ThemeData useMaterial3 default from false to true. In other words, applications will get the Material 3 colors, text styles, and other visuals, by default.</p><p>The <a href=\"https://flutter.github.io/samples/web/material_3_demo/#/\">Material 3 demo</a> should be helpful for previewing the differences between M2 and M3.</p><h4>Android supported platforms</h4><p>Flutter no longer supports the Android Jelly Bean API levels (16, 17, and 18). The good news is that most apps should be <a href=\"https://github.com/flutter/flutter/pull/129729\">migrated to this new minSdkVersion by default</a>.</p><p>However, if you were not migrated automatically, it could be because you made changes to your module level build.gradle, and you might need to increase the minSdkVersion manually. To update, locate the module level build.gradle from the root of your Flutter project. It is typically found at &lt;YOUR PROJECT&gt;/android/app/build.gradle. Bump minSdkVersion version to 19. If you see flutter.minSdkVersion and it’s at least 19, then your minimum is set correctly.</p><p>Flutter plugins won’t be migrated by default, so plugin authors should update the minSdkVersion in the top level build.gradle file found at &lt;YOUR PLUGIN&gt;/android/build.gradle.</p><h4>List of changes and migration guides</h4><p>Breaking changes in this release include deprecated APIs that expired after the release of v3.10. To see all affected APIs, along with additional context and migration guidance, see <a href=\"https://docs.flutter.dev/release/breaking-changes/3-10-deprecations\">the deprecation guide for this release</a>. Many of these are supported by <a href=\"https://docs.flutter.dev/development/tools/flutter-fix\">Flutter Fix</a>, including quick fixes in the IDE, and bulk apply with the dart fix command.</p><p>As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a>, they help us identify these breaking changes. To learn more, check out <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">Flutter’s breaking change policy</a>.</p><h3>Contributions</h3><h3>Flutter repository priorities and triage</h3><h4>Triage updates</h4><p>Over the past few months we have adopted a new set of definitions for our priorities (P0-P3). This brings us more in line with the definitions used by most other open source projects, and simplifies the decisions we have to make regarding how important bugs are — rather than 7 categories, we now only have 4. Hopefully this will also help us communicate more effectively with those of you who file bugs and then wonder <a href=\"https://github.com/flutter/flutter/wiki/Issue-hygiene#when-will-my-bug-be-fixed\">when things will be fixed</a>!</p><p>We’ve also introduced a <a href=\"https://github.com/flutter/flutter/wiki/Triage\">new triage scheme</a> for our teams, which we hope will make it harder for issues to fall between the cracks. If you are active in our issue database you may see our new bot commenting and adding or removing labels:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xDizfkUpX6Kk5wCR\" /></figure><p>This bot also integrates with <a href=\"https://discord.com/invite/N7Yshp4\">our Discord</a>, helping us keep on top of what is happening on GitHub. We hope it will make us more productive in the long run, but bear with us while we get used to the new system!</p><h3>Conclusion</h3><p>As we come to the end of this announcement, I want to acknowledge that we would not be where we are today without the efforts of our fantastic community!</p><p>For a full list of PRs that were included in this release, please check out the <a href=\"https://docs.flutter.dev/release/release-notes\">release notes and change log</a> section for this release.</p><p>Flutter 3.13 is available in stable today, and includes <a href=\"https://medium.com/dartlang/a1f4b3a7cdda/\">Dart 3.1</a>. To get started with these newest updates, all it takes is a <a href=\"https://docs.flutter.dev/release/upgrade\">flutter upgrade</a>.</p><p>See you all again soon!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=479d9b11df4d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-13-479d9b11df4d\">What’s new in Flutter 3.13</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-06-30T00:10:15.000Z":{"title":"Flutter 2023 Q1 survey — API breaking changes, deep linking, and more","link":"https://medium.com/flutter/flutter-2023-q1-survey-api-breaking-changes-deep-linking-and-more-7ff692f974e0?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/7ff692f974e0","category":["developer-experience","surveys","flutter"],"dc:creator":"JaYoung Lee","pubDate":"Fri, 30 Jun 2023 00:10:15 GMT","atom:updated":"2023-06-30T00:10:14.893Z","content:encoded":"<h3>Flutter 2023 Q1 survey — API breaking changes, deep linking, and more</h3><p>The Flutter team has been running a quarterly user survey program since its 1.0 release in 2018. The 19th survey <a href=\"https://twitter.com/FlutterDev/status/1630674202297610240\">was announced</a> in the first quarter of 2023, collecting 13,378 responses over the 14-day window. The survey intended to collect timely feedback from Flutter developers, and included questions about the following subjects:</p><ul><li>Perceived growth of Flutter</li><li>API breaking changes</li><li>Deep linking</li></ul><p>Overall, 93% of respondents were positively satisfied (somewhat + very satisfied), with 55% being very satisfied. This number has been consistent since August 2022. It’s also notable that developers continued to be highly satisfied with Flutter, because the number of users increased by 24% over this period.</p><h3>Perceived growth of Flutter</h3><p>In this section, we asked how respondents feel about Flutter’s recent growth. We believe that developers’ perception of Flutter’s growth influences their decision to continue using it, and we wanted to know if our perception matches that of our users.</p><p>When we asked the respondents to rate the recent growth, 80% said that Flutter’s growth in popularity is fast, as shown in the following graph. This matches our data, which shows that the number of monthly active users has increased by 24% over the last 3 quarters, as previously mentioned.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EvfHfmRcMbEyHcAh\" /><figcaption><em>42% said that Flutter’s growth is very fast and 38% said that it is somewhat fast</em></figcaption></figure><p>The Flutter team’s improvements are a major factor (63%) in the perceived rapid growth of Flutter, according to 80% of respondents who selected “fast” in the previous question (N=2877). Other notable factors include learning resources (57%), tools and services that work with Flutter (51%), and global online communities (50%). It was reassuring to learn that the areas where the Flutter team can improve also contribute to the perceived growth. We will continue introducing new videos, collaborating with other teams to improve tools, and supporting healthy communities.</p><p>Of those who said that the growth of the technology is slow (4%, or 137 people), the most common reasons given were a lack of job postings (66%) and adoption by well-known companies (55%). Flutter’s Developer Relations team found that some hiring managers are having trouble finding qualified candidates, and job seekers are having trouble improving their skills to meet the requirements of hiring companies. To bridge this gap, the Flutter team is planning to work on more resources to help Flutter developers improve their skills while working towards a job. We will also continue to share <a href=\"https://youtu.be/bHg6TzuP9bc\">developer stories</a>, so you can see how others are using Flutter for their production apps.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*zeJT-J_oHhKYFcem\" /><figcaption><em>Reasons to think the Flutter’s recent growth is fast or slow</em></figcaption></figure><h3>API breaking changes</h3><p>Breaking changes refer to changes that introduce new behavior incompatible with previous versions of the API. Breaking changes help us keep the API clean and consistent, but developers need to update their previously written code to work with the new behavior, whether the change is major like the introduction of null-safety in Dart, or minor like the deprecation of `GestureRecognizer.kind()`.</p><p>To reduce the pain associated with the process, Flutter has been announcing breaking changes in various places (such as <a href=\"https://docs.flutter.dev/release/breaking-changes\">the Flutter website</a>, and the <a href=\"https://groups.google.com/forum/#!forum/flutter-announce\">Flutter Announce</a> or <a href=\"https://groups.google.com/a/dartlang.org/g/announce\">Dart Announce</a> Google groups). In each stable release, tooling is updated to display warning messages when appropriate and migration tools are provided where possible (Flutter Fix, `dart fix` command). A Flutter developer 2019 survey questioned developers how they felt about breaking changes in order to ensure a cleaner API. Overall, developers liked the idea, but we were asked to keep the following in mind:</p><ul><li>Change slowly</li><li>Offer a good migration tool</li><li>Provide documentation, examples, tutorials, change logs</li><li>Clearly explain the benefit</li><li>Broadly announce it</li></ul><p>Because Flutter has experienced significant growth since then (both in number of developers and size of API), we wanted to survey you again and decide whether an update to our policy was necessary.</p><p>Overall, the proportion of developers who have been affected by breaking changes in the last 12 months increased from 30% to 51%, over the last 4 years.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BujM3j2SMg1qp3hi\" /><figcaption><em>51% of the developers have experienced breaking changes in the last 12 months</em></figcaption></figure><p>44% of respondents affected by breaking changes find it frustrating that they have to keep updating their code, which was also higher than 2019 (32%). However, the majority of you agree that the changes made the code cleaner (67%), compared to 2019 (47%). Also, the majority of respondents agree that the changes were valuable (63%), which increased from 49% in 2019.</p><p>This suggests that the complexity of the changes we introduced appears to have increased, but we were successful in having the changes deliver value to developers. Given that overall 60% of the respondents think that breaking changes have more benefits than annoyances (whereas 11% hold the opposite view), we learned that the changes have been largely beneficial to the Flutter developers.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YjPyKLHdN6xW-4-3\" /><figcaption><em>Perception around breaking changes</em></figcaption></figure><p>We also asked how satisfied you are with how breaking changes are handled. We learned that satisfaction rates were consistent across the various aspects of our efforts.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LreVRDXghbLuzKDR\" /><figcaption><em>Ratings on the Flutter team’s handling of breaking changes</em></figcaption></figure><p>In light of this, we have decided to double down on our current policy. We plan to find more ways to automate migrations, improve the discoverability of our documentation, and more broadly communicate the value and reasoning behind the changes we do make.</p><p>We expect to revisit this again in a few years. As Flutter matures, we believe it’s likely that developers will shift from valuing the improvements introduced in breaking changes to valuing the stability of an API that never breaks. We want to make best use of the time where our community understands the value of breaking changes but not frustrate the Flutter developer base if this attitude changes.</p><h3>Deep linking</h3><p>Deep links send users directly to an in-app location instead of a website or an app store location. Since this is a useful feature for developers, we wanted to measure the awareness of this feature, understand how developers are implementing the feature, and assess how easy it is to set up deep links, so that we can support this feature better.</p><p>First of all, we learned that deep links are known to about half of the respondents (55%). Among these, about 50% tried implementing deep links in their Android app, and about 39% tried implementing them in their iOS app, as displayed in the following graph. In both platforms, less than 5% reported that they had trouble implementing the feature.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*dQYszaV1ZKzV_b-y\" /><figcaption><em>Percentage of developers who implemented deep links in Android and iOS apps</em></figcaption></figure><p>To implement deep links for your app, you need to configure a web portion and an app portion. The web portion directs users to the app, and the app portion then directs users to the correct page.</p><p>When it comes to the technology that developers chose to set up their web, about half of respondents said that they use Firebase Dynamic Links. However, we recently learned from the Firebase team that Firebase Dynamic Links is no longer recommended for new projects. The Dynamic Links service will be discontinued in favor of native files (App Links for Android and Universal Links for iOS). You will have at least 12 months to migrate from the date Firebase announces the shutdown. For more information, check out the <a href=\"https://firebase.google.com/support/dynamic-links-faq\">Dynamic Links FAQ</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*GfXUuto3tB79I47F\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*q-OVlB4QmxOfjfOM\" /><figcaption>What developers use to guide users from their websites to an iOS or Android app</figcaption></figure><p>For app setup, users have adopted various approaches. Named routes, which is the simplest solution, was the most popular choice (31%). It was followed by the `go_router` package, which is a better solution if you want the features that named routes don’t support, such as route stack management. These features can be particularly useful when you need more control over your deep links.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6ZkWSeMzkU_vy8uJ\" /><figcaption>What developers use to route users within an app</figcaption></figure><p>From the survey, we learned that we should put more effort into explaining the value of the feature so that more developers can benefit from it, and make it easier to implement. We are planning to launch a validation tool in the coming quarters to streamline the implementation process.</p><h3>What’s next?</h3><p>The Flutter team is always eager to hear from you and incorporate your feedback into the engineering roadmap. This quarter’s survey was particularly valuable because it gave us the confidence to continue our breaking change policy and helped us identify blind spots around deep linking. We will continue to listen to you and incorporate your feedback into our work.</p><p>The Flutter team is committed to providing the best possible experience for developers. We believe that with your input, we can create a framework that is both powerful and developer-friendly. We appreciate your continued support and look forward to hearing from you in the future. See you in the next survey!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7ff692f974e0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-2023-q1-survey-api-breaking-changes-deep-linking-and-more-7ff692f974e0\">Flutter 2023 Q1 survey — API breaking changes, deep linking, and more</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-09-13T19:01:02.000Z":{"title":"Introducing the Flutter Consulting Directory","link":"https://medium.com/flutter/introducing-the-flutter-consulting-directory-f6fc4c1d2ba3?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f6fc4c1d2ba3","category":["ios","technology","android","app-development","flutter"],"dc:creator":"Leigha Jarett","pubDate":"Wed, 13 Sep 2023 19:01:02 GMT","atom:updated":"2023-09-13T19:01:01.699Z","content:encoded":"<h4>Where organizations can find consultants to help build their next application</h4><p>Design agencies and digital technology consultancies play a vital role in the success of applications. Enterprises often look to consultancies to help them build out proof of concepts, re-design existing applications, or act as a subject matter expert for development projects. Startups look to agencies to build their brand identity and create minimum viable prototypes. These trusted partners can be difficult to find.</p><p>That’s why we’re excited to launch the <a href=\"http://flutter.dev/consultants\">Flutter Consultant Directory.</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*m5eYW0Qgmdse1bpkqbsPLQ.png\" /><figcaption>flutter.dev/consultants</figcaption></figure><p>We’re launching this new page to simplify finding trusted Flutter partners. We vet the partners listed in the directory to verify their record of successful Flutter projects, a sufficient number of skilled developers on staff, and their commitment to grow the Flutter community.</p><h3><strong>Resources for consultants</strong></h3><p>As part of this launch, we’re highlighting resources to help prospective consultants ramp up their Flutter expertise. This includes:</p><h4><a href=\"https://docs.google.com/presentation/d/1TblnxXMVO1c75ggdLnA4cPh_nsDVvT--RsFqUIN6Fvg/copy\">Flutter pitch deck</a></h4><p><em>Make a copy and add in some studies from your own team to make a compelling Flutter case for potential clients</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*7xi_G_tYKGROB8su\" /><figcaption>Visit the <a href=\"https://docs.google.com/presentation/d/1TblnxXMVO1c75ggdLnA4cPh_nsDVvT--RsFqUIN6Fvg/copy\">link</a> to make your own copy.</figcaption></figure><h4>Building Wonders with Flutter</h4><p><em>Testimonial from a top Flutter design agency, gSkinner, on why Flutter has been a valuable toolkit for their team.</em></p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F6IKhXXFFOuw%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D6IKhXXFFOuw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F6IKhXXFFOuw%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/74e2089a1be1cf51198ae3051d228c7e/href\">https://medium.com/media/74e2089a1be1cf51198ae3051d228c7e/href</a></iframe><h4><a href=\"https://medium.com/flutterflow-enterprise/how-flutterflow-helps-consultants-solve-clients-last-mile-of-digital-transformation-b6d8e7d3b49e\">How FlutterFlow makes consultants faster</a></h4><p><em>Learn how consultancies can deliver high quality client projects faster with FlutterFlow. </em><a href=\"https://medium.com/flutterflow-enterprise/how-flutterflow-helps-consultants-solve-clients-last-mile-of-digital-transformation-b6d8e7d3b49e\"><em>Read the blog post</em></a><em>.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/896/0*H35eVj4imixLHgDv\" /></figure><h4><a href=\"https://medium.com/flutter/how-ibm-is-creating-a-flutter-center-of-excellence-3c6a3c025441\"><strong>How IBM Created their Flutter Center of Excellence</strong></a></h4><p><em>Learn why and how IBM built out a Flutter Center of Excellence with hundreds of Flutter developers. </em><a href=\"https://medium.com/flutter/how-ibm-is-creating-a-flutter-center-of-excellence-3c6a3c025441\"><em>Read the blog post</em></a><em>.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wgS4PLHJhlegD-knIZhEFA.png\" /></figure><h4><a href=\"http://verygood.ventures/blog/training-clients-in-flutter\">Training Clients on Flutter</a></h4><p><em>Learn how VGV created their successful Flutter training program. You can up skill your own developers, or your clients.</em> <a href=\"https://verygood.ventures/blog/training-clients-in-flutter\"><em>Read the blog post</em></a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*0WsqrUDKa7Uikyh9\" /></figure><h3><strong>Ready to apply?</strong></h3><p>To apply, agencies and consultancies should complete <a href=\"https://docs.google.com/forms/d/1CS1Ysbwyeya4o0kzu1acPFie8ozHrUgEmAK4kx0_MZM/edit?usp=drive_open&amp;resourcekey=0-Qi5RvEWxp_WT86zHombxgg\">this Google form</a>. We review submissions on a periodic basis and will inform you of your status in due course. We ask consultants to update their information on a quarterly basis to ensure the accuracy and relevance of the directory.</p><h3><strong>Have feedback?</strong></h3><p>We’re always eager for feedback. If you have ideas on how to improve the directory or partner resources, send us a note at <a href=\"mailto:flutter-partner-program@google.com\">flutter-partner-program@google.com</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f6fc4c1d2ba3\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/introducing-the-flutter-consulting-directory-f6fc4c1d2ba3\">Introducing the Flutter Consulting Directory</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-09-13T19:01:01.000Z":{"title":"How IBM is creating a Flutter Center of Excellence","link":"https://medium.com/flutter/how-ibm-is-creating-a-flutter-center-of-excellence-3c6a3c025441?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/3c6a3c025441","category":["flutter","flutter-app-development","ibm"],"dc:creator":"John Mutter","pubDate":"Wed, 13 Sep 2023 19:01:01 GMT","atom:updated":"2023-09-13T19:01:01.579Z","content:encoded":"<h4>Learn why and how IBM makes their clients successful with Flutter</h4><p>The basics of a good client engagement include two critical factors: wise use of resources and timely delivery.</p><p>In today’s mobile and digital-first world, clients have exponentially increased their expectations for experiences, speed, personalization, and convenience. Using Flutter, developers and designers can create beautiful cross-platform web and mobile applications faster, and more efficiently.</p><h3><strong>Why we’re expanding our Flutter practice</strong></h3><h4><em>Flutter helps us deliver client projects faster</em></h4><p>By targeting multiple platforms from a single codebase, our team can prototype, refine and deploy client apps faster than ever. With Flutter, we can deliver projects three times as fast — without sacrificing quality.</p><p>During the early days of the Covid-19 crisis, the government of Bizkaia, Spain approached IBM to help keep its citizens informed of the latest actions and news. They needed a mobile app — in two weeks. With Flutter, the first version of the app was published in just 11 days. It quickly became the third most-downloaded app in the region.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YqawQ_2If_xPlvIbC0mj3g.png\" /></figure><blockquote>“In such a constrained timeframe, Flutter came to our rescue. It was the quickest hard decision we took and one of the most relevant we made. Building the app both for iOS and Android was like having super powers for our development team and beating the race against the clock.”<br>— IBM Project Director Joanra Mallart</blockquote><h4><em>Flutter helps our clients get more for less</em></h4><p>Delivering great user experiences is always at the forefront of our mind. However, many clients have tight budgets, which often requires foregoing platforms or features that would help their apps succeed. With Flutter, we’re able to exceed client expectations by building without compromise.</p><h4><em>Customers are asking about Flutter</em></h4><p>Flutter has grown in popularity — as seen in the recent <a href=\"https://stackoverflow.blog/2022/02/21/why-flutter-is-the-most-popular-cross-platform-mobile-sdk/\">StackOverflow report</a> that lists it as the most popular UI framework. As such, we’ve seen a sharp increase in customers coming to us asking how they can use Flutter in their applications. Developers and business stakeholders alike are interested in making use of Flutter’s benefits.</p><h4><em>Seamless collaboration with Google</em></h4><p>As a premier Google Cloud partner, IBM and Google already have a close relationship. By adopting Flutter, we’re able to take advantage of seamless integration between developer offerings while leveraging support from the Google team where necessary.</p><h3><strong>How we’re building a center of excellence</strong></h3><p>For decades, IBM has been at the forefront of user-centric mobile innovation, led by IBM iX, the experience and design partner within IBM Consulting. We’ve been delivering exceptional mobile experiences to clients across the globe in our 60 IBM iX studios with over 15,000 development, design, and strategy practitioners.</p><p>However, with a large, distributed team, it was vital to create a single place for knowledge sharing. Creating a center of excellence helps our team recommend best practices, reuse learnings and celebrate customer wins in a consolidated community.</p><p>Here’s what we prioritized for creating an IBM Consulting center of excellence for Flutter development and design:</p><h4><strong>1. Host a regular community forum</strong></h4><p>At IBM, we host a quarterly Flutter community call. On this call, developers and designers can share learnings from client engagements, discuss new Flutter and Dart features, and get updates from the broader Flutter community.</p><h4><strong>2. Create an environment for asking questions</strong></h4><p>We’ve created a dedicated chat room where developers and designers can ask Flutter-specific questions at any time. We have a group of Flutter experts who jump in to help troubleshoot issues or recommend specific approaches.</p><h4><strong>3. Centralize knowledge sharing and reusable components</strong></h4><p>Many client projects share similarities in their architecture. Therefore, we’ve created simple project templates that practitioners can pull from to expedite their development.</p><h4><strong>4. Build educational materials for clients</strong></h4><p>While many clients know about Flutter’s benefits, some might want to better understand how Flutter can help <em>them</em>. Building off the<a href=\"https://docs.google.com/presentation/d/1TblnxXMVO1c75ggdLnA4cPh_nsDVvT--RsFqUIN6Fvg/copy\"> Flutter pitch deck,</a> we’ve developed materials to educate clients on how Flutter differs from other frameworks. We’ve created a central repository of client case studies to easily showcase how Flutter has helped past clients.</p><h4><strong>5. Create a learning path for Flutter practitioners</strong></h4><p>At IBM, practitioners can become certified in specific technologies or areas. We’ve created a dedicated learning path to help developers learn Flutter and apply those learnings to new client engagements. When a practitioner completes this path, they’re recorded as a Flutter practitioner in our database — so it’s easy to quickly staff Flutter engagements.</p><p>By creating this center of excellence, we’ve helped our practitioners expedite their Flutter learning. With this information, we can deliver client projects better and faster.</p><h3><strong>The Future: Fueling Excellence in Flutter</strong></h3><p>To date, IBM has seen major success in delivering Flutter projects. Our clients include global banks, federal and state governments, and international military personnel. We have also delivered numerous proofs of concept around the world.</p><p>With Flutter’s agility and IBM Consulting’s legacy of innovation, we’re on a path to shape outstanding mobile experiences that resonate with businesses and their customers. As we embrace this new phase of collaboration, we invite you to join us on this transformative journey.</p><p>Reach out today and discover how <a href=\"https://www.ibm.com/consulting/ibmix\">IBM Consulting</a> can empower your business with the speed, efficiency, and excellence of Flutter.</p><p><em>John Mutter is the Global CTO Experience Engineering at IBM and an IBM Distinguished Engineer.</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3c6a3c025441\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-ibm-is-creating-a-flutter-center-of-excellence-3c6a3c025441\">How IBM is creating a Flutter Center of Excellence</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-11-15T21:32:22.000Z":{"title":"Dart & Flutter DevTools Extensions","link":"https://medium.com/flutter/dart-flutter-devtools-extensions-c8bc1aaf8e5f?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/c8bc1aaf8e5f","category":["extension-development","dart","flutter","developer-tools","devtools"],"dc:creator":"Kenzie Davisson","pubDate":"Wed, 15 Nov 2023 21:32:22 GMT","atom:updated":"2023-11-15T21:32:22.092Z","content:encoded":"<h4>A guide for building custom tooling in Dart &amp; Flutter DevTools</h4><p>Have you ever wanted to build developer tooling for Dart and Flutter but didn’t know where to start? Or maybe you didn’t want to go through all the work of establishing a connection to a running Dart or Flutter application to access debugging data? Then, even if you did create a development tool, how would you deploy it or give users easy access to it? Well, we have some good news for you: now you can create developer tooling without all these hurdles.</p><p>With the new Dart &amp; Flutter DevTools extensions framework, you can easily build developer tooling that is tightly integrated with the existing DevTools tooling suite. Extensions are built using Flutter web and leverage existing frameworks and utilities from DevTools to simplify the developer tool authoring experience.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JsdgKjxlVmm5EAFfXvQ2yA.png\" /><figcaption>Example DevTools extension for package:foo</figcaption></figure><h3>How do DevTools extensions work?</h3><p>Extensions are shipped as part of a pub package. For example, imagine we have some package:foo, and this package provides a DevTools extension. When a user depends on package:foo in their app, they automatically get access to the DevTools extension provided by this package. When this user is debugging their app with DevTools, they will see a new tab “Foo” that contains the developer tools provided by package:foo.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FFl2jeYpyn8DfjRI5xQ8mQ.jpeg\" /></figure><p>You can add a DevTools extension to an existing pub package, for example <a href=\"https://pub.dev/packages/provider\">package:provider</a>, <a href=\"https://pub.dev/packages/patrol\">package:patrol</a>, or <a href=\"https://pub.dev/packages/drift\">package:drift</a>, which have all already published DevTools extensions, or you can create a new package that provides a DevTools extension only. In both these scenarios, the user must list a dependency on the package providing the DevTools extension in order to see the developer tool in DevTools.</p><h3>Writing a DevTools extension: a step-by-step guide</h3><h4>Before you get started</h4><p>What you will need:</p><ul><li>Flutter SDK &gt;= 3.17.0–0.0.pre &amp; Dart SDK &gt;= 3.2.</li><li>A <a href=\"https://pub.dev/\">Pub</a> package (existing or new) to add a DevTools extension to.</li></ul><blockquote>It is recommended to develop your extension from the Flutter master channel in order to use the latest <a href=\"https://pub.dev/packages/devtools_extensions\">devtools_extensions</a> and <a href=\"https://pub.dev/packages/devtools_app_shared\">devtools_app_shared</a> packages</blockquote><h3>Step 1: Set up your package hierarchy</h3><p>To add an extension to your Dart package, add a top-level extension directory to your package.</p><pre>foo/<br>  extension/<br>  lib/<br>  ...</pre><p>Under the extension directory, create the following structure (exactly as shown):</p><pre>extension/<br>  devtools/<br>    build/<br>    config.yaml</pre><p>The config.yaml file should contain metadata that DevTools needs to load the extension:</p><pre>name: foo<br>version: 0.0.1<br>issue_tracker: &lt;link_to_your_issue_tracker.com&gt;<br>material_icon_code_point: &#39;0xe0b1&#39;</pre><p>Copy the config.yaml file content above and paste it into the config.yaml file you just created in your package. For each key, fill in the appropriate value for your package.</p><ul><li>name: the package name that this DevTools extension belongs to. The value of this field is used in the extension page title bar. <strong>[required]</strong></li><li>version: the version of your DevTools extension. This version number should evolve over time as you ship new features for your extension. The value of this field is used in the extension page title bar. <strong>[required]</strong></li><li>issue_tracker: the url for your issue tracker. When a user clicks the “Report an issue” link in the DevTools UI, they are directed to this url. <strong>[required]</strong></li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/583/1*H0Q1Zv2L6_NUFUedI6mkQw.png\" /><figcaption>DevTools extension screen title bar</figcaption></figure><ul><li>material_icon_code_point: corresponds to the codepoint value of an icon from <a href=\"https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/material/icons.dart\">material/icons.dart</a>. This icon is used for the extension’s tab in the top-level DevTools tab bar. <strong>[required]</strong></li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/83/1*bkNzahdp7eXUo7Xwh1U07Q.png\" /><figcaption>DevTools extension tab icon</figcaption></figure><p>For the most up-to-date documentation on the config.yaml spec, see <a href=\"https://github.com/flutter/devtools/blob/master/packages/devtools_extensions/extension_config_spec.md\">extension_config_spec.md</a>.</p><h4>Where to put your extension source code</h4><p>Only the pre-compiled output of your Flutter extension web app needs to be shipped with your pub package for DevTools to load it in an embedded iFrame. To keep the size of your pub package small, we recommend that you develop your DevTools extension outside of your pub package. We recommend the following package structure:</p><pre>foo/  <br>  packages/<br>    foo/  # your pub package<br>      extension/<br>        devtools/<br>          build/<br>            ...  # pre-compiled output of foo_devtools_extension<br>          config.yaml<br>      ...<br>    foo_devtools_extension/  # source code for your extension</pre><p>Now it’s time to develop your extension.</p><h3>Step 2: Create a DevTools extension</h3><p>From the directory where you want your extension source code to live (foo/packages in the example above), run the following command, replacing foo_devtools_extension with &lt;your_package_name&gt;_devtools_extension:</p><pre>flutter create --template app --platforms web foo_devtools_extension</pre><p>In foo_devtools_extension/pubspec.yaml, add a dependency on devtools_extensions:</p><pre>devtools_extensions: ^0.0.10</pre><p>In foo_devtools_extension/ib/main.dart, place a DevToolsExtension widget at the root of your app:</p><pre>import &#39;package:devtools_extensions/devtools_extensions.dart&#39;;<br>import &#39;package:flutter/material.dart&#39;;<br><br>void main() {<br>  runApp(const FooDevToolsExtension());<br>}<br><br>class FooDevToolsExtension extends StatelessWidget {<br>  const FooDevToolsExtension({super.key});<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return const DevToolsExtension(<br>      child: Placeholder(), // Build your extension here<br>    );<br>  }<br>}</pre><p>The DevToolsExtension widget automatically performs all extension initialization required to interact with DevTools. From anywhere in your extension web app, you can access the global variables extensionManager and serviceManager to send messages back and forth with DevTools or interact with the connected app.</p><h4>Utilize helper packages</h4><p>Use <a href=\"https://pub.dev/packages/devtools_app_shared\">package:devtools_app_shared</a> for access to service managers, common widgets, DevTools theming, utilities, and more. See <a href=\"https://github.com/flutter/devtools/tree/master/packages/devtools_app_shared/example\">devtools_app_shared/example</a> for sample usages.</p><h3>Step 3: Debug a DevTools extension</h3><p>When developing and maintaining your DevTools extension, you’ll want to run, debug, and test your extension Flutter web app. You have a couple of different options for this, outlined below.</p><h4>Option A: Use the Simulated DevTools Environment (recommended for development)</h4><p>For debugging purposes, you will likely want to use the “simulated DevTools environment”. This is a simulated environment that allows you to build your extension without having to develop it as an embedded iFrame in DevTools. Running your extension this way will wrap your extension with an environment that simulates the DevTools-to-DevTools extension connection. It also gives you access to hot restart and a faster development cycle.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-3c-p57ai0Quc5rJOL9qEQ.png\" /><figcaption>Debugging an extension with the Simulated DevTools Environment</figcaption></figure><ol><li><em>Your DevTools extension.</em></li><li><em>The VM service URI for a test app that your DevTools extension will interact with. This app should depend on your extension’s parent package (package:foo in this example).</em></li><li><em>Buttons to perform actions that a user may trigger from DevTools.</em></li><li><em>Logs showing the messages that will be sent between your extension and DevTools.</em></li></ol><p>The simulated environment is enabled by the environment parameter use_simulated_environment. To run your extension web app with this flag enabled, add a configuration to your launch.json file in VS code:</p><pre>{<br>    ...<br>    &quot;configurations&quot;: [<br>        ...<br>        {<br>            &quot;name&quot;: &quot;foo_devtools_extension + simulated environment&quot;,<br>            &quot;cwd&quot;: &quot;packages/foo_devtools_extension&quot;,<br>            &quot;request&quot;: &quot;launch&quot;,<br>            &quot;type&quot;: &quot;dart&quot;,<br>            &quot;args&quot;: [<br>                &quot;--dart-define=use_simulated_environment=true&quot;<br>            ],<br>        },<br>    ]<br>}</pre><p>or launch your app from the command line with the added flag:</p><pre>flutter run -d chrome - dart-define=use_simulated_environment=true</pre><h4>Option B: Use a real DevTools environment</h4><p>Once you develop your extension to a point where you are ready to test your changes in a real DevTools environment, you need to perform a series of setup steps:</p><p>1. Build your Flutter web app and copy the built assets from the your_extension_web_app/build/web directory to the parent package’s extension directory (your_pub_package/extension/devtools/build). To do this, use the build_and_copy command from package:devtools_extensions:</p><pre>cd your_extension_web_app;<br>flutter pub get;<br>dart run devtools_extensions build_and_copy --source=. --dest=path/to/your_pub_package/extension/devtools</pre><blockquote>Note: if you are using the recommended package structure from above, the value for<em> — dest</em> should be <em>../your_pub_package/extension/devtools</em>.</blockquote><p>2. Prepare and run a test application that depends on your pub package. In the test application’s pubspec.yaml file, you’ll need to change the dependency on your package to be a <a href=\"https://dart.dev/tools/pub/dependencies#path-packages\">path dependency</a> that points to your local package source code. Once you have done this, run flutter pub get on the test app, and run the application.</p><p>3. Start DevTools. Open the DevTools instance that was just started by running your test application. You can open DevTools from either the url printed to the command line or from the IDE where you ran your test app. Optionally, you can also run dart devtools from the command line.</p><blockquote>Note: If you need local or unreleased changes from DevTools, you’ll need to build and run DevTools from source (<a href=\"https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md#frontend--devtools-server\">server + front end</a>). See the DevTools <a href=\"https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md\">CONTRIBUTING</a> guide.</blockquote><p>4. Connect DevTools to your test app if it is not connected already, and you should see a tab in the DevTools app bar for your extension. The enabled or disabled state of your extension is managed by DevTools. The extension-enabled states are exposed from an “Extensions” menu in DevTools, available from the action buttons in the upper right corner of the screen.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/576/0*s9-Y9X5dTyuk6Xj4\" /><figcaption>DevTools Extensions menu button</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/789/1*DSi_p-2FO60qo5JUKXk-3Q.png\" /><figcaption>DevTools Extensions menu</figcaption></figure><h3>Step 4: Publish your package with a DevTools extension</h3><p>In order for a package to provide a DevTools extension to its users, it must be published with the expected content in the your_pub_package/extension/devtools/ directory (see the setup instructions above).</p><ol><li>Ensure that the your_pub_package/extension/devtools/config.yaml file exists and is configured per the specifications above.</li><li>Use the build_and_copy command provided by package:devtools_extensions to build your extension and copy the output to the extension/devtools directory:</li></ol><pre>cd your_extension_web_app;<br>flutter pub get;<br>dart run devtools_extensions build_and_copy --source=. --dest=path/to/your_pub_package/extension/devtools</pre><p>Then publish your package on <a href=\"https://pub.dev/\">pub.dev</a>: flutter pub publish. For additional guidance around publishing your package, see the package:devtools_extensions <a href=\"https://pub.dev/packages/devtools_extensions#publish-your-package-with-a-devtools-extension\">publishing guide</a>.</p><h3>Conclusion</h3><p>That’s it! Now, when a user depends on the latest version of your package, they will automatically get access to the tools you provide in your DevTools extension. This feature is hot off the press, so we are eager to hear your feedback.</p><p>For issues and feature requests, please file an issue on the DevTools <a href=\"https://github.com/flutter/devtools/issues\">issue tracker</a>.</p><p>For general support and access to the community of DevTools extension authors, check out the <a href=\"https://discord.com/channels/608014603317936148/1159561514072690739\">#devtools-extension-authors</a> Discord channel (you will first need to join the <a href=\"https://github.com/flutter/flutter/wiki/Chat\">Flutter Discord server</a>).</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c8bc1aaf8e5f\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/dart-flutter-devtools-extensions-c8bc1aaf8e5f\">Dart &amp; Flutter DevTools Extensions</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-11-15T21:31:28.000Z":{"title":"What’s new in Flutter 3.16","link":"https://medium.com/flutter/whats-new-in-flutter-3-16-dba6cb1015d1?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/dba6cb1015d1","category":["releases","release-notes","flutter","announcements","flutter-app-development"],"dc:creator":"Kevin Chisholm","pubDate":"Wed, 15 Nov 2023 21:31:28 GMT","atom:updated":"2023-11-16T16:22:34.990Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TDndNB8cS95g5faXBKitHA.png\" /></figure><h4>Material 3 by default, Impeller preview for Android, DevTools extensions, and much more</h4><p>Welcome back to the quarterly Flutter stable release, this time for Flutter 3.16. This release sets Material 3 as the new default theme, brings a preview of Impeller to Android, allows adding extensions for DevTools, and much more! It also coincides with <a href=\"https://medium.com/flutter/building-your-next-casual-game-with-flutter-716ef457e440\">significant updates to the Flutter Casual Games Toolkit</a>!</p><p>In only three months since our last release, we’ve had 928 pull requests merged by 145 community members with 40 community members authoring their first commit to Flutter!</p><p>Keep reading to learn about all the new additions and improvements the Flutter community has contributed to this latest release!</p><h3>Framework</h3><h4>Material 3 is the new default</h4><p>As of the 3.10 release (May 2023) the Material library has been updated to match the latest Material Design spec. Changes include new components and component themes, and updated component visuals. Prior to the 3.16 release, the changes were “opt-in” with the useMaterial3 theme flag. As of this release, useMaterial3 is true by default. (<a href=\"https://github.com/flutter/flutter/pull/130764\">#130764</a>)</p><p>You can still opt out of the M3 version of the Material library by specifying useMaterial3: false in your MaterialApp theme, but Material 2 will eventually be deprecated and removed. Also, some of the widgets couldn’t merely be updated, but needed a whole new implementation. For this reason, your UI might look a little strange when you see it running as Material 3. To fix this, manually migrate to the new widgets, such as <a href=\"https://api.flutter.dev/flutter/material/NavigationBar-class.html\">NavigationBar</a>. For more details, check out the <a href=\"https://github.com/flutter/flutter/issues/91605\">Material 3 umbrella issue</a> on GitHub.</p><p>A <a href=\"https://flutter.github.io/samples/material_3.html\">demo application</a> allows you to try all of the components. The demo supports toggling useMaterial3 so that you can compare the changes.</p><p>The appearance of Material 3 components are primarily determined by the values for [ThemeData.colorScheme] and [ThemeData.textTheme]. The preferred way to create a Material 3 color scheme is with ColorScheme.fromSeed(), which creates dark and light schemes that are both aesthetically pleasing and compliant with the contrast requirements for accessibility. You can also create a color scheme from the dominant colors in an image with ColorScheme.fromImageProvider. To further customize the appearance of Material 3 components, add component themes to your ThemeData, such as <a href=\"https://api.flutter.dev/flutter/material/SegmentedButtonThemeData-class.html\">ThemeData.segmentedButtonTheme</a> or <a href=\"https://api.flutter.dev/flutter/material/SnackBarThemeData-class.html\">ThemeData.snackBarTheme</a>. Non-null component theme properties override the defaults specified in the component’s API documentation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LMOV8BTSB4tEIisF\" /></figure><h4>Support Material 3 motion</h4><p>Improvements to Material 3 motion includes the addition of Easing and Durations classes. Material 2 curves have been renamed to include the word “legacy” and will eventually be deprecated and removed. (<a href=\"https://github.com/flutter/flutter/pull/129942\">#129942</a>)</p><h4>Add additional options in edit menu</h4><p>On native iOS, users can now select text and initiate a share menu that provides several standard services. In this release, we’ve added the look up, search, and share options.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*YKZc4cxJjsafHgd4\" /></figure><h4>TextScaler for specifying a global text scale factor</h4><p>To support Android 14’s <a href=\"https://blog.google/products/android/android-14/#:~:text=Also%2C%20you%20can%20improve%20readability,rate%20than%20smaller%20font%20size.\">non-linear font scaling feature</a> that helps those who are visually impaired, the new <a href=\"https://api.flutter.dev/flutter/painting/TextScaler-class.html\">TextScaler</a> class replaces the Text.textScaleFactor property. (<a href=\"https://github.com/flutter/flutter/pull/128522\">#128522</a>)</p><h4>SelectionArea updates</h4><p>Flutter’s SelectionArea is updated to support native gestures associated with a single or double click using a mouse, and long pressing on a touch device. These new gestures are available by default with SelectionArea and SelectableRegion.</p><ul><li>Single click: Sets the collapsed selection at the clicked position.</li><li>Double click: Select the word at the clicked position.</li><li>Double click + drag: Extends the selection in word blocks.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/424/0*4RDi6tkvHa3R2uqa\" /></figure><ul><li>Long press + drag: Extends the selection in word blocks.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/652/0*Xhow360Xn88KLAWF\" /></figure><h4>Menu items that operate on the focused widget</h4><p>This release features cleanup of focus changes when using menu items: The FocusManager’s applyFocusChangesIfNeeded function now restores menu focus — when the user clicks a menu item, focus will already have returned to the item that had focus before the menu was opened. (<a href=\"https://github.com/flutter/flutter/pull/130536\">#130536</a>)</p><h4>Automatic reordering of menu item shortcuts for iOS, macOS</h4><p>Flutter apps on Mac platforms now order the shortcut modifiers in menus to follow Apple Human Interface Guidelines. (<a href=\"https://github.com/flutter/flutter/pull/129309\">#129309</a>)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/522/0*b1mnWiuWv-cxt7g7\" /><figcaption>Before</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/522/0*LbHdBtWltdB4_Kcf\" /><figcaption>After</figcaption></figure><h4>MatrixTransition animation</h4><p>A new MatrixTransition widget allows transforms when creating animated transitions. Based on the current animation value, you can provide a matrix transformation that is applied to the child widget to create effects like the one in the following GIF. (<a href=\"https://dartpad.dev/?channel=beta&amp;id=c82be58209035722f2cc7d78da855329\">Example in DartPad</a>) (<a href=\"https://github.com/flutter/flutter/pull/131084\">#131084</a>)</p><h4>PaintPattern added to flutter_test</h4><p>In the flutter_test package, the new PaintPattern class allows you to validate paint calls made to the canvas by widgets like CustomPainters and Decorations (used in unit tests).</p><p>Previously, a golden file was needed to verify that the correct color and rect were painted, but you can now use PaintPattern. The following example verifies that MyWidget painted a circle on the canvas:</p><pre>expect(<br>  find.byType(MyWidget),<br>  paints<br>    ..circle(<br>      x: 10,<br>      y: 10,<br>      radius: 20,<br>      color: const Color(0xFFF44336),<br>    ),<br>);<br>// Multiple paint calls can even be chained together.<br>expect(<br>  find.byType(MyWidget),<br>  paints<br>    ..circle(<br>      x: 10,<br>      y: 10,<br>      radius: 20,<br>      color: const Color(0xFFF44336),<br>    ),<br>    ..image(<br>      image: MyImage,<br>      x: 20,<br>      y: 20,<br>    ),<br>);</pre><p>This API previously existed deep in the framework test files, and we noticed some developers found it so useful, they had copied it into their own projects. If this applies to you, you can delete the copy from your project after upgrading to Flutter 3.16.</p><h4>Scrolling updates</h4><p>After the initial release of the two dimensional scrolling foundation in Flutter 3.13, this release brings more features and polish. With Flutter 3.16, the 2D foundation now supports KeepAlive widgets, as well as default focus traversal and implicit scrolling. 2D scrolling widgets built on top of the foundation will automatically adopt this support. For a comprehensive guide on building on the 2D foundation, see <a href=\"https://www.youtube.com/watch?v=ppEdTo-VGcg\">the latest episode of the Flutter Build Show</a>.</p><p>Soon after the 3.13 release, the <a href=\"https://pub.dev/packages/two_dimensional_scrollables\">two_dimensional_scrollables</a> package was published. This package is maintained by the Flutter team, and contains the first of several 2D scrolling widgets built on the framework’s foundation — TableView. Since the initial release, more decoration and styling support has been added with additional bug fixes.</p><h3>Engine</h3><h4>Impeller</h4><h4><strong>Android</strong></h4><p>In this release, we are pleased to share that Impeller on Android is ready for preview feedback on the stable channel. Since early this year, the team has been hard at work on a Vulkan backend for Impeller, and this preview includes gathering feedback about Impeller’s characteristics on Vulkan-capable devices.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wyMXhtcLW98BTKl-\" /><figcaption><em>This chart shows improvements over the past year in 99%-ile, 90%-ile, and average frame rasterization times on the Flutter Gallery transition performance benchmark running on Impeller’s Vulkan backend, which users will observe as both less jank and higher steady state framerates. Towards the end of this period, we switched from Samsung S10 devices to Pixel 7 Pro devices, which accounts for a substantial drop in the numbers. Nevertheless, we find the trend and overall results to be very encouraging.</em></figcaption></figure><p>Impeller isn’t yet expected to perform well on devices without Vulkan support. As we bring Impeller’s OpenGL backend up to feature completeness in the coming months, we plan to also seek feedback about Impeller’s characteristics on such devices in a future stable release.</p><p>Flutter developers can try out Impeller on Vulkan-capable Android devices by passing the — enable-impeller flag to flutter run, or by adding the following setting to their project’s AndroidManifest.xml file under the &lt;application&gt; tag:</p><pre>&lt;meta-data<br>  android:name=&quot;io.flutter.embedding.android.EnableImpeller&quot;<br>  android:value=&quot;true&quot; /&gt;</pre><p>To determine whether a device supports Vulkan, Impeller uses the tests discussed in the <a href=\"https://github.com/flutter/engine/blob/main/impeller/docs/android.md#rendering-backend-selection\">Impeller repo docs</a>. Generally, Impeller uses the Vulkan backend on devices running a 64-bit OS at Android API level 29 or newer. Users can also determine whether their device supports Vulkan by following the advice in <a href=\"https://docs.vulkan.org/guide/latest/checking_for_support.html#_android\">checking for Vulkan support</a>.</p><p>While confident in the progress we’ve made on Impeller’s Vulkan backend so far, there are a few known issues going into the preview period:</p><ul><li>Platform views aren’t yet implemented, and frames that would otherwise include a platform view perform somewhat poorly.</li><li>Custom shaders are not yet implemented.</li><li>For the full list of <a href=\"https://github.com/orgs/flutter/projects/21/views/1?filterQuery=-status%3A%22%E2%9C%85+Done%22+status%3A%22%F0%9F%90%9E+Bugs%22\">known bugs</a> and <a href=\"https://github.com/orgs/flutter/projects/21/views/11\">missing features</a>, the most up-to-date information is on the Impeller <a href=\"https://github.com/orgs/flutter/projects/21\">project board</a> on GitHub. Many issues already have fixes coming in the 3.17 beta, so please give it a try as well.</li></ul><p>We are generally happy with our progress on Impeller’s fidelity and performance on the Vulkan capable Android devices that we’ve tried. However, compared with iOS, the Android hardware ecosystem is much more diverse, and we anticipate a longer preview period for Android than for iOS before making it the default backend on the stable channel. For that reason, the most helpful feedback about Impeller should include detailed information about the specific device and Android version where issues occurred.</p><p>Further, Impeller’s Vulkan backend enables additional debugging capabilities in “debug” builds beyond what is used with Skia, and these capabilities have additional runtime overhead. Therefore it’s important that feedback about Impeller’s performance is from a profile or release build, and should include timelines from DevTools and a comparison with the Skia backend on the same device. Finally, as always, we are very grateful for feedback that includes a small reproducible test case that demonstrates the issue.</p><h4>Impeller performance, fidelity, and stability</h4><p>In addition to the focus on the Vulkan backend, since the beginning of the year, the team has also made a number of improvements to text performance in Impeller that benefit both Android and iOS. In particular, we have made improvements to the management of Impeller’s glyph atlas and the way that text workloads are divided across the Engine’s UI and raster threads. As a result, users will notice less jank in text heavy workloads.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RPu62U3N57JJqu0b\" /><figcaption><em>This chart shows a decrease in 99%-ile, 90%-ile, and average frame rasterization times in milliseconds in one of our text-heavy benchmarks on an iPhone 11 using Impeller. In particular, 90%-ile and average frame rasterization times are nearly halved.</em></figcaption></figure><p>The team has also been hard at work on fidelity and stability improvements for both Android and iOS, especially those reported by users. In particular, in the three months of this stable release cycle, the team has made 209 Impeller related commits to the flutter/engine repo, closing 217 issues, including 42 user reports of fidelity, stability, or performance issues.</p><h4>Engine performance</h4><p>To support better performance on mobile devices with heterogeneous multiprocessing, we <a href=\"https://github.com/flutter/engine/pull/45673\">have modified</a> the engine so threads that are performance sensitive, such as the UI and raster threads, have affinity for a device’s more powerful cores. We observed that this change had a positive impact across a range of benchmarks and devices. In some cases the improvement was dramatic, halving or better 99%-ile or 90%-ile frame times. We anticipate that users will notice less jank after this change with both the Skia and Impeller backends on Android. The effect is less dramatic on iOS devices, where there is a smaller difference between the more powerful and less powerful cores.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*v9hhy6Y9fhfIbejZ\" /><figcaption><em>This chart shows improvements in worst, 99%-ile, 90%-ile, and average frame build and frame rasterization times across nearly all of our Android benchmarks and devices.</em></figcaption></figure><h4>API and fidelity improvements</h4><h4>Impeller performance overlay</h4><p>In previous releases, Flutter’s <a href=\"https://docs.flutter.dev/perf/ui-performance#the-performance-overlay\">performance overlay</a> feature wasn’t displayed with Impeller. This release fixes that issue. The performance overlay <a href=\"https://github.com/flutter/engine/pull/45259\">now displays correctly</a> with Impeller enabled.</p><h4>Dithering is now displayed correctly</h4><p>In this release, the Paint.enableDithering property is set to true, and is deprecated as per <a href=\"https://docs.flutter.dev/release/compatibility-policy#deprecation-policy\">Flutter’s deprecation policy</a>. Dithering is now enabled by default (developer-configurable dithering is no longer supported), and you will no longer see banding issues. For the full explanation of this change and the migration guide, see <a href=\"https://docs.flutter.dev/release/breaking-changes/paint-enableDithering\">the breaking change page</a> on docs.flutter.dev.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1014/0*yoTgJmfOTF1NrHyf\" /><figcaption>Before</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1019/0*cnBlQufEWMXx6AJI\" /><figcaption>After</figcaption></figure><h3>Games</h3><h4>Flutter Games Toolkit</h4><p>Over the past few years, we’ve seen a growing community around casual game development. Tens of thousands of games have been published using Flutter, from simple but fun puzzles to more complex arcade games. Some of our favorites include Etermax’s <a href=\"https://triviacrack.com/\">Trivia Crack</a>, Lotum’s <a href=\"https://flutter.dev/showcase/lotum\">4 Pics 1 Word</a> (word guess game), Dong Digital’s <a href=\"https://play.google.com/store/apps/details?id=net.countrymania.brick&amp;hl=en\">Brick Mania</a> (arcade game), Onrizon’s <a href=\"https://play.google.com/store/apps/details?id=com.gartic.StopotS&amp;hl=en\">StopotS</a> (categories game), the <a href=\"https://pinball.flutter.dev/\">retro pinball game</a> we built in Flutter for I/O, and <a href=\"https://flutter.dev/showcase/pubg-mobile\">PUBG</a> mobile who uses Flutter in their social and menu screens.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/942/1*yWHI-1YwQAFUIVFvr5jGHQ.gif\" /></figure><p>To help game developers become more productive, today Flutter is launching a major update to its <a href=\"http://flutter.dev\">Casual Games Toolkit.</a> It is a collection of new resources to help you move from concept to launch with more genre-specific templates such as a card game, an endless runner game, and service integrations like Play Games Services, in-app purchase, ads, achievements, crashlytics and multiplayer support. To learn more, check out the <a href=\"https://medium.com/flutter/building-your-next-casual-game-with-flutter-716ef457e440\">games toolkit launch post</a> by <a href=\"https://medium.com/@zoeyfan_43394\">Zoey Fan</a>.</p><h3>Web</h3><h4>Flutter timeline events on Chrome DevTools</h4><p>Flutter Timeline events are now exposed in the performance panel of Chrome DevTools. (<a href=\"https://github.com/flutter/flutter/issues/130132\">#130132</a>)</p><p>To learn more, check out <a href=\"https://docs.flutter.dev/perf/web-performance\">Debugging performance for web apps</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*UDd-ZshZBEIfb4OA\" /></figure><h3>Android</h3><h4>Mouse scroll wheel support</h4><p>While optimizing <a href=\"https://medium.com/flutter/developing-flutter-apps-for-large-screens-53b7b0e17f10\">Wonderous to meet Android’s large screen guidelines</a>, one issue we discovered was that the mouse scroll wheel didn’t work well on tablets or foldables. It was <a href=\"https://github.com/flutter/flutter/issues/82973\">well known</a> that the user had to move the scroll wheel a significant amount for the screen to respond.</p><p>With this release, scrolling with a mouse on a flutter view matches the scroll speed on Android devices. (<a href=\"https://github.com/flutter/engine/pull/44724\">44724</a>)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*wlSYQiElLRGgOTmO\" /><figcaption>Before</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*KZki5KYsfeMi01Lw\" /><figcaption>After</figcaption></figure><h4>Predictive back navigation</h4><p>The Android 14 release included the predictive back gesture feature that allows you to use the back gesture on your device to “peek” at the home screen behind your current screen. This update brings predictive back gestures to Flutter! Check out the <a href=\"https://docs.flutter.dev/release/breaking-changes/android-predictive-back#migration-guide\">migration guide</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/530/0*KdmeVMUgmKWzw0-P\" /></figure><h3>iOS</h3><h4>App extensions</h4><p>Flutter can now be used to target some<a href=\"https://developer.apple.com/app-extensions/\"> iOS app extensions</a>. This means that you can draw the UI for certain types of iOS app extensions using Flutter widgets. This doesn’t work for all types of app extensions because there might be limitations to the API (for example, home screen widgets) or memory.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/368/0*OxjjAlCbFFXWrrR9\" /></figure><p>Learn more and see an example for how to target the Share extension at <a href=\"https://docs.flutter.dev/platform-integration/ios/app-extensions\">Adding iOS app extensions</a> on docs.flutter.dev.</p><h3>Package ecosystem</h3><h4>New Flutter Favorites</h4><p>We have rebooted the <a href=\"https://docs.flutter.dev/packages-and-plugins/favorites\">Flutter Favorite</a> program! For this cycle, the Flutter Ecosystem Committee designated the <a href=\"https://pub.dev/packages/flame\">flame</a>, <a href=\"https://pub.dev/packages/flutter_animate\">flutter_animate</a>, <a href=\"https://pub.dev/packages/flutter_rust_bridge\">flutter_rust_bridge</a>, <a href=\"https://pub.dev/packages/riverpod\">riverpod</a>, <a href=\"https://pub.dev/packages/video_player\">video_player</a>, <a href=\"https://pub.dev/packages/macos_ui\">macos_ui</a> and <a href=\"https://pub.dev/packages/fpdart\">fpdart</a> packages as new Flutter Favorites. Congrats to all!</p><p>Look out for new Flutter Favorites in the future. To nominate a package or plugin as a potential future Flutter Favorite, or to bring any other issues to the attention of the committee, send the committee an email at <a href=\"mailto:flutter-committee@googlegroups.com\">flutter-committee@googlegroups.com</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/150/0*RAkkLR53oDQekLmN\" /></figure><h4>First package ecosystem virtual summit</h4><p>In August, we held a first-time virtual summit for the package ecosystem, attended by more than 50 non-Googler and Googler contributors to <a href=\"https://pub.dev\">pub.dev</a>. The goal was to bring contributors together in unconference-style discussions to plan, educate, learn, and share amongst the community. Satisfaction with the event was 100% in a post-event survey. We plan to partner with the community on similar events for the package ecosystem (in-person and virtually) in the future. Find out more in an upcoming Package ecosystem update blog post.</p><h4>Cloud-based Google Maps styling</h4><p>Google Maps Platform offers the ability to customize the style of your map from the Map Styles page in the Google Cloud Console. This lets you create a customized experience without having to update your app code each time you make a style change.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*b3vDhobD-p7YRw6O\" /></figure><p>To use this feature in Flutter, you simply refer to your map using the Map ID set in the console:</p><pre>GoogleMap(<br>        onMapCreated: _onMapCreated,<br>        initialCameraPosition: const CameraPosition(<br>          target: _kMapCenter,<br>          zoom: 7.0,<br>        ),<br>        key: _key,<br>        cloudMapId: _mapId<br>);</pre><h4>Camera X improvements</h4><p>In the 3.10 stable release, we added preliminary support for Camera X to the Flutter camera plugin. <a href=\"https://developer.android.com/training/camerax\">Camera X</a> is a Jetpack library that simplifies adding rich camera functionality to your Android app.</p><p>With this release, we’ve added most of the features needed by any app that uses a camera. CameraX solves many issues that exist with the Camera 2 implementation of the plugin.</p><p>We encourage you to use the CameraX plugin. To opt in, add the following line to your pubspec.yaml file.</p><pre>Dependencies:<br> camera: ^0.10.4 # Or try the latest camera version<br> camera_android_camerax: ^0.5.0</pre><p>We would love your feedback as we plan on making CameraX the default implementation in a future release.</p><h4>macOS Video Player</h4><p>We have added macOS support to the <a href=\"https://pub.dev/packages/video_player\">video player plugin</a>, allowing developers to play videos on a widget surface.</p><p>To learn more check out the <a href=\"https://pub.dev/packages/video_player\">video player plugin</a> on <a href=\"http://pub.dev\">pub.dev</a>.</p><h3>DevTools</h3><h4>DevTools extensions</h4><p>The new <a href=\"https://pub.dev/packages/devtools_extensions\">DevTools extensions framework</a> enables:</p><ul><li>package authors to build custom tooling for their package that is surfaced directly in DevTools.</li><li>package authors to write powerful tools that leverage existing frameworks and utilities from DevTools.</li><li>Dart and Flutter developers who are debugging an app with DevTools to get access to tools that are specific to their use cases (as determined by their app’s dependencies and which dependencies provide DevTools extensions).</li></ul><p>Thanks to the package authors of <a href=\"https://pub.dev/packages/provider\">Provider</a>, <a href=\"https://pub.dev/packages/drift\">Drift</a>, and <a href=\"https://pub.dev/packages/patrol\">Patrol</a>, this ecosystem is already being built out and you can use the DevTools extensions for those packages today!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gprea_z4l0Y_mizE\" /><figcaption>Provider</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*uGcjhY3w8eKoKwLH\" /><figcaption>Patrol</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*PlGmgXXrK7LBpiPR\" /><figcaption>Drift</figcaption></figure><p>For a deep dive into DevTools extensions, check out the <a href=\"https://medium.com/flutter/dart-flutter-devtools-extensions-c8bc1aaf8e5f\">Dart and Flutter DevTools Extensions announcement</a> by <a href=\"https://medium.com/@kenzieschmoll\">Kenzie Davisson</a>.</p><h4>DevTools updates</h4><p>Some highlights for DevTools with this release are:</p><ul><li>Added support for DevTools extensions</li><li>Added a new “Home” screen that shows a summary of your connected app.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/935/0*1nmVYze1uMCxvzoI\" /></figure><p>Other improvements include:</p><ul><li>Overall performance</li><li>Hot restart robustness</li><li>Text selection and copy behavior</li><li>Network profiler response viewer polish</li></ul><p>To learn more, check out the release notes for DevTools <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.26.1\">2.26.1</a>, <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.27.0\">2.27.0</a>, and <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.28.1\">2.28.1</a>.</p><h4>VS Code UI discoverability</h4><p>Thanks to the amazing work by Flutter community member <a href=\"https://github.com/DanTup\">DanTup</a>, the Flutter VS Code extension now has a Flutter Sidebar that gives you easy access to:</p><ul><li>Open Flutter DevTools screens</li><li>View active debug sessions</li><li>View available devices</li><li>Create new projects</li><li>Hot reload and restart</li><li>Run Flutter Doctor -v</li><li>Much more</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FXlCMB0adYkH2y4u\" /></figure><h3>Deprecations and breaking changes</h3><h4>Deprecations and breaking changes</h4><p>Breaking changes in this release include deprecated APIs that expired after the release of v3.13. To see all affected APIs, along with additional context and migration guidance, see <a href=\"https://docs.flutter.dev/release/breaking-changes/3-13-deprecations\">the deprecation guide for this release</a>. Many of these are supported by <a href=\"https://docs.flutter.dev/development/tools/flutter-fix\">Flutter fix</a>, including quick fixes in the IDE. Bulk fixes can be evaluated and applied with the dart fix command.</p><p>As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a> — these help us identify these breaking changes. To learn more, check out <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">Flutter’s breaking change policy</a>.</p><p>In our next release, we will be planning to extend the deprecation policy to cover the flutter_driver package in addition to already supported packages, flutter and flutter_test.</p><h3>Conclusion</h3><p>We called out the number of contributors at the beginning of this announcement, this is with intention. Flutter would not be the delightful and productive toolkit that it is today without the efforts of you all — our amazing community. Thank you.</p><p>For a full list of PRs that were included in this release, check out the <a href=\"https://docs.flutter.dev/release/release-notes\">release notes and change log</a>.</p><p>Flutter 3.16 is available on the stable channel today, and includes <a href=\"https://medium.com/dartlang/dart-3-2-c8de8fe1b91f\">Dart 3.2</a>. To get started with these newest updates, all it takes is a <a href=\"https://docs.flutter.dev/release/upgrade\">flutter upgrade</a>.</p><p>See you all again soon!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=dba6cb1015d1\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-16-dba6cb1015d1\">What’s new in Flutter 3.16</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-11-15T21:29:36.000Z":{"title":"Major steps this year on the journey to multiplatform development","link":"https://medium.com/flutter/major-steps-this-year-on-the-journey-to-multiplatform-development-b9218b17f0f7?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/b9218b17f0f7","category":["announcements","flutter-app-development","releases","flutter"],"dc:creator":"Michael Thomsen","pubDate":"Wed, 15 Nov 2023 21:29:36 GMT","atom:updated":"2023-11-15T21:58:06.204Z","content:encoded":"<p>Today, we’re happy to announce two new SDK releases — Dart 3.2 and Flutter 3.16 — and a major refresh of the Flutter Casual Games Toolkit.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*r2pc1eaUCaAe21EK-OlGpg.png\" /><figcaption>Flutter 3.16</figcaption></figure><h3>The Flutter and Dart value proposition</h3><p>At the beginning of the year at Flutter Forward in Nairobi, Kenya, we introduced new roadmaps for Flutter and Dart. Both roadmaps focused on four high-level themes: breakthrough graphics experiences, seamless integration with web and mobile platforms, early to new and emerging architectures, and continued focus on developer experience.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*iomk4DoJwIXI44jX\" /><figcaption>Four high-level themes from Flutter Forward</figcaption></figure><p>In May at Google I/O, we <a href=\"https://www.youtube.com/watch?v=yRlwOdCK7Ho&amp;t=11s\">announced</a> significant progress towards that vision, including (but not limited to) improving rendering performance on iOS (with Impeller), supporting element embedding on the web, and the finalization of the journey towards 100% null safety in Dart 3.</p><p>As we approach the end of the year, here’s another update on the progress made since then.</p><h3>Delivering user value with Flutter and Dart</h3><p>With every new feature, improvement, or bug fix, the overall goal remains unchanged: to provide a strong language and framework pairing, enabling you to build beautiful, rich, and fast apps. And you can do so from a single, shared code base — delivering to app users on mobile, web, and desktop — without having to fragment your product roadmap. We also remain committed to open source, with no licensing costs, and seek to develop rich ecosystems powered by openness and collaboration.</p><p>This goal continues to resonate with developers both inside Google, and across Flutter’s far reaching ecosystem across the globe. Lots of great Google apps built with Flutter shipped this year:</p><ul><li>As we announced at Flutter Forward, the <strong>Google Classroom</strong> team uses Flutter for their mobile apps, which are now live on iOS and in beta on Android. They are seeing greatly <a href=\"https://www.youtube.com/watch?v=_5CIATSDSPI&amp;t=5s\">improved performance</a>, powered by the new <a href=\"https://docs.flutter.dev/perf/impeller\">Impeller</a> rendering engine.</li><li><strong>YouTube Create</strong>, another new Flutter app released by Google, is <a href=\"https://t.co/rn0yN2Sk9X\">available in beta</a> in 8 countries. This app leverages the flexibility of the Flutter widget library to offer a complete video editing experience with filters, effects, and music &amp; voiceover editing.</li><li>With <strong>Google Earth</strong> 10 — now powered by Flutter — users can easily create, collaborate, and organize maps and geospatial data not only on the web, but also on Android and iOS mobile and tablet devices! Check out the <a href=\"https://medium.com/google-earth/a-fresh-look-for-google-earth-507d218b42d3\">Google Earth post</a> for more details about the new design, and stay tuned for a future blog post detailing how the Earth team built their app using Flutter.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Vd72-ykzg8BadAGp\" /><figcaption><em>Screenshots from Classroom (left), YouTube Create (middle), and Google Earth (right)</em></figcaption></figure><p>Flutter adoption also continues to grow outside of Google, across the globe:</p><ul><li>Apps that shipped this year include banking apps like <a href=\"https://flutter.dev/showcase/skandia\">Skandia</a> in Sweden and <a href=\"https://flutter.dev/showcase/credit-agricole\">Credit Agricole</a> in Poland, the US <a href=\"https://flutter.dev/showcase/dow-jones\">MarketWatch</a> Virtual Stock Exchange investment education app, the <a href=\"https://www.youtube.com/watch?v=OTn8Ngp2X8Q\">CZ</a> health insurance app in the Netherlands, and Canada’s <a href=\"https://flutter.dev/showcase/kijiji1\">Kijiji</a> classifieds marketplace app. A common theme is that these teams chose Flutter to enable a consistent feature set across Android and iOS while still delivering a rich and compelling UI experience.</li><li>Further east, Tencent launched <a href=\"https://flutter.dev/showcase/tencent-cloud-chat\">Cloud Chat</a>, a rich new Chat SDK and UI library currently ranked number one in China’s chat service market that is expanding internationally.</li><li>In Brazil, the SOMA fashion group initiated a major digital refresh of their Farm brand and, in the process, realized the flexibility of Flutter enabled them to scale this to other brands in the group, too. In the US, Caribou Coffee combined Flutter with Firebase to accelerate their productivity, while Lucid Motors reported that Flutter allowed them to not only deliver two mobile apps with a small team, but also that Flutters’ web support enabled internal sharing of prototypes.</li></ul><p>We’re delighted to witness the evolution of these apps. Read on to see the continued progress we’re making in the core framework.</p><h3>Breakthrough graphics performance</h3><p>We firmly believe that multiplatform development shouldn’t imply a degradation of experience for developers or end users. So we go to great lengths to deliver on this aspiration. At Flutter Forward, we introduced the Impeller engine — a complete redesign and reimplementation of the graphics rendering architecture for speed and power. In Flutter 3.10, we announced that Impeller was enabled by default on iOS. Today, in Flutter 3.16, we’re pleased to share that Impeller on Android is ready for preview feedback on the stable channel. Performance has improved dramatically over the year; compared to a year ago rasterization performance measured in the Flutter Gallery benchmark is roughly twice as fast with Impeller on Vulkan. For details on how to enable Impeller, see the <a href=\"https://medium.com/flutter/whats-new-in-flutter-3-16-dba6cb1015d1\">Flutter 3.16 post</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*vtUIXYkW6Bt9fvaI\" /><figcaption>Flutter Gallery benchmark showing a 2x+ improvement over the past year with Impeller on Vulkan</figcaption></figure><h4>Casual Games Toolkit</h4><p>One category of apps that especially benefits from fast and powerful graphics rendering is games. In 2022, we published the initial Flutter <a href=\"https://docs.flutter.dev/resources/games-toolkit\">Casual Games Toolkit</a>. Today, we’re announcing a major update featuring a selection of new templates, from card games to runner-type games, and a set of game service developer resources for topics such as leaderboards, monetization, and telemetry. For more details, check out the <a href=\"https://medium.com/flutter/building-your-next-casual-game-with-flutter-716ef457e440\">Casual Games Toolkit blog post</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/942/0*3DmGJe1yD4eKdnfs.gif\" /><figcaption>An animated gif showing multiple Flutter-based games such as Trivia Crack, Debertz, and Landover running on mobile, web and desktop devices.</figcaption></figure><h3>Seamless integration</h3><p>While Flutter apps generally feature very high levels of shared code across platforms — many developers report 95–99% sharing — we still believe it’s important to support platform-specific features. On iOS, <a href=\"https://developer.apple.com/app-extensions/\">app extensions</a> offer a way for users to interact with smaller versions of your app from other apps on their phone. In our last stable release, we launched <a href=\"https://codelabs.developers.google.com/flutter-home-screen-widgets#0\">new resources</a> to help you build home and lock screen widgets for your Flutter app. In Flutter 3.16, we added support for rendering <a href=\"https://docs.flutter.dev/platform-integration/ios/app-extensions\">the UI for some iOS app extensions</a> using Flutter, for example, the <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/Share.html\">share extension</a>. Android 14 introduced a new <a href=\"https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture\">predictive back gesture</a>, which gives the user the ability to glimpse the system UI behind the app when using a back gesture (left swipe). Flutter 3.16 supports this gesture.</p><h3>Continued focus on developer experience</h3><p>Modern devices come in a variety of form factors — such as phones, foldables, and tablets — which have a wide range of screen sizes, and support external input devices like keyboards and mice. To ensure that your users have a great user experience, it’s important to take this into account. We recently collaborated with the Android team on adding support for their <a href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality\">large screen guidelines</a>. We’ve published<a href=\"https://medium.com/flutter/developing-flutter-apps-for-large-screens-53b7b0e17f10\"> learnings from adding large screen support</a>, updated our reference app <a href=\"https://wonderous.app\">Wonderous</a> to support multiple screen sizes, and made several fixes in the Flutter framework to better support things like keyboard, mouse, and trackpad input. New APIs allow you to determine the display’s size and pixel ratio, and support multi-window rendering.</p><p>Throughout the year we’ve worked on completing support for <a href=\"https://m3.material.io/get-started\">Material 3</a>, the latest version of the Material Design design system. Flutter’s Material widgets now fully support Material 3 and, in Flutter 3.16, Material 3 is now the default style. We find that Material adds a fresh look to apps; the new color schemes are both aesthetically pleasing and compliant with the contrast requirements for accessibility. For a hands-on experience, check out the <a href=\"https://flutter.github.io/samples/material_3.html\">Material 3 gallery</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZACl0_Sm8xPguexZrc4vKA.png\" /><figcaption>Screenshots of the Material 3 demo</figcaption></figure><p>Two significant improvements to developer tooling include a new sidebar for VS Code and support for adding extensions to DevTools. The sidebar enables easy discovery of core Flutter tools actions such as creating a new project, invoking hot reload, opening DevTools, or selecting a target device. DevTools extensions provide a framework that <a href=\"https://medium.com/p/c8bc1aaf8e5f/edit\">allows you to create</a> new custom tools that plug into DevTools, and offers additional framework-specific functionality. <a href=\"https://pub.dev/packages/provider\">Provider</a>, <a href=\"https://pub.dev/packages/patrol\">Patrol</a>, and <a href=\"https://pub.dev/packages/serverpod\">ServerPod</a> are a few examples of frameworks developing DevTools extensions.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IWHCMv72Wj3NVy4f\" /><figcaption><em>Screenshot of a DevTools extension for the framework Serverpod</em></figcaption></figure><p>We rebooted the <a href=\"https://docs.flutter.dev/packages-and-plugins/favorites\">Flutter Favorite</a> program and designated <a href=\"https://pub.dev/packages/flame\">flame</a>, <a href=\"https://pub.dev/packages/flutter_animate\">flutter_animate</a>, <a href=\"https://pub.dev/packages/flutter_rust_bridge\">flutter_rust_bridge</a>, <a href=\"https://pub.dev/packages/riverpod\">riverpod</a>, <a href=\"https://pub.dev/packages/video_player\">video_player</a>, <a href=\"https://pub.dev/packages/macos_ui\">macos_ui</a> and <a href=\"https://pub.dev/packages/fpdart\">fpdart</a> as new Flutter Favorites. In August, we held a first-time virtual summit for the package ecosystem, attended by more than 50 non-Googler and Googler contributors to <a href=\"https://pub.dev\">pub.dev</a>.</p><p>We’ve also seen the arrival of several new powerful packages and plugins. A few of my personal favorites are the <a href=\"https://github.com/flutter/packages/tree/main/packages/camera/camera_android_camerax#usage\">CameraX support</a> in the camera plugin, the high-performance <a href=\"https://pub.dev/packages/two_dimensional_scrollables\">2D scrollable TableView</a>, and the <a href=\"https://pub.dev/packages/flutterflow_ui\">flutterflow_ui</a> package, which allows designers and developers to create UI components with drag-and-drop, and then export them to Flutter widget code (<a href=\"https://www.youtube.com/watch?v=yopCfhepAsM\">demo video</a>). Furthermore, the google_maps package now supports <a href=\"https://developers.google.com/maps/documentation/cloud-customization/overview\">cloud map-styles</a>, so developers can update their styles from the Google Cloud Console, and the <a href=\"https://pub.dev/packages/home_widget\">home_widget</a> package now supports creating <a href=\"https://medium.com/@ABausG/interactive-homescreen-widgets-with-flutter-using-home-widget-83cb0706a417\">interactive iOS Home Screen Widgets</a>.</p><h3>New and emerging architectures</h3><h4>Dart interoperability</h4><p>Dart is based around a core promise of enabling multiplatform Dart code to run across a <a href=\"https://dart.dev/overview#platform\">wide range of platforms</a>. However, this often needs to be complemented with the ability to interop with existing code, whether that code is from older projects or APIs available in other libraries or system APIs. To enable this, Dart offers <a href=\"https://dart.dev/guides/libraries/c-interop\">interop with native C APIs</a>, and is working on expanding this to support interop with <a href=\"https://dart.dev/guides/libraries/java-interop\">Java + Kotlin</a> and <a href=\"https://dart.dev/guides/libraries/objective-c-interop\">Objective C + Swift</a>. For more details, checkout today’s <a href=\"https://medium.com/dartlang/dart-3-2-c8de8fe1b91f\">Dart 3.2 blog post</a>.</p><h4>The road to WebAssembly</h4><p>Wasm (also known as <a href=\"https://webassembly.org/\">WebAssembly</a>) is an exciting new instruction format for web browsers, which provides a portable, platform-neutral, binary code format for execution in modern browsers. High-level, managed languages like Dart use garbage collection, which is being added to the WebAssembly standard. As of Chrome 119, <a href=\"https://developer.chrome.com/blog/wasmgc/\">garbage collection support for WebAssembly</a> (Wasm-GC) is enabled by default. Wasm-GC support is also coming in Firefox 120, their next stable release.</p><p>The Dart compiler support for Wasm is almost feature complete, and Flutter web now uses a new rendering engine that enables all rendering to happen in WebAssembly code. While there’s more work to do and support is still considered experimental, we’re already able to run some apps like the <a href=\"https://flutterweb-wasm.web.app/\">Material 3 demo</a>. The <a href=\"https://medium.com/dartlang/dart-3-2-c8de8fe1b91f\">Dart 3.2 blog post</a> has more details.</p><h3>The power of a vibrant community</h3><p>Today’s blog post provides a very small sampling of the thousands of improvements made over the past few quarters. More importantly, an increasing number of these improvements are coming from contributions made by developers outside of Google — the recently published <a href=\"https://github.blog/2023-11-08-the-state-of-open-source-and-ai/\">2023 GitHub Octoverse report</a> on open source activity lists the Flutter project in the top-3 among all GitHub open source projects.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*PY9bV7cnRCdxV2jU\" /></figure><p>We’ve had a great year thanks to your incredible support. We’re grateful for the diversity, enthusiasm, and kind spirit of the Dart and Flutter communities that play a critical role in making the product successful. We can’t wait to see what you build next. Until the next update, thanks 🙏, and have fun coding!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b9218b17f0f7\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/major-steps-this-year-on-the-journey-to-multiplatform-development-b9218b17f0f7\">Major steps this year on the journey to multiplatform development</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-11-15T20:35:49.000Z":{"title":"Building your next casual game with Flutter","link":"https://medium.com/flutter/building-your-next-casual-game-with-flutter-716ef457e440?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/716ef457e440","category":["flutter-app-development","mobile-app-development","games"],"dc:creator":"Zoey Fan","pubDate":"Wed, 15 Nov 2023 20:35:49 GMT","atom:updated":"2023-11-15T21:59:39.495Z","content:encoded":"<h4>Free &amp; open source multi-platform 2D game development in Flutter</h4><p>Today I’m excited to introduce you to a major update of the <a href=\"http://flutter.dev/games\">Flutter Casual Games Toolkit</a>, a collection of new templates and new developer resources to make game developers more productive with Flutter.</p><p>Flutter is Google’s open source UI framework for building beautiful multi-platform applications. Today, Flutter is used in more than one million apps ranging from early stage startups to large companies like ByteDance, Tencent, BMW, and Google, to deliver beautiful, performant, and portable experiences across platforms, from a single codebase.</p><p>Over the past few years, we’ve seen a growing community around casual game development. Tens of thousands of games have been published using Flutter, from simple but fun puzzles to more complex arcade games. Some of our favorites include Etermax’s <a href=\"https://triviacrack.com/\">Trivia Crack</a>, Lotum’s <a href=\"https://flutter.dev/showcase/lotum\">4 Pics 1 Word</a> (word guess game), Dong Digital’s <a href=\"https://play.google.com/store/apps/details?id=net.countrymania.brick&amp;hl=en\">Brick Mania</a> (arcade game), Onrizon’s <a href=\"https://play.google.com/store/apps/details?id=com.gartic.StopotS&amp;hl=en\">StopotS</a> (categories game), the <a href=\"https://pinball.flutter.dev/\">retro pinball game</a> we built in Flutter for I/O, and <a href=\"https://flutter.dev/showcase/pubg-mobile\">PUBG</a> mobile who uses Flutter in their social and menu screens.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/942/0*3DmGJe1yD4eKdnfs.gif\" /><figcaption>An animated gif showing multiple Flutter-based games such as Trivia Crack, Debertz, and Landover running on mobile, web and desktop devices.</figcaption></figure><h3>Why choose Flutter for casual games</h3><p>Flutter is a great choice for game developers. First, it’s free and open source, giving you fine-grained control over your game’s rendering and input handling logic. This allows you to debug issues at their core and customize the engine to your needs. Flutter’s openness also extends to our ecosystem. All <a href=\"http://pub.dev\">Flutter plugins and packages</a> are also available for integration at no cost.</p><p>Second, developing in Flutter is highly productive. Flutter introduced a revolutionary capability called <a href=\"https://docs.flutter.dev/tools/hot-reload#how-to-perform-a-hot-reload\">hot-reload</a> that allows developers to see instant UI updates after making code changes, thus making the development process more iterative and efficient. Besides, Flutter supports multi-platform game development, so you can build your game for <strong>iOS and Android, web, and desktop</strong> all from a single, shared codebase. This saves you time and effort, and allows your game to reach a wider audience from day one.</p><p>Finally, Flutter games load fast and are generally very performant, even on low-end devices or in browsers. Bundle sizes can be smaller because the Flutter engine only adds a few megabytes to your game.</p><h3>The updated Flutter Casual Games Toolkit</h3><p>Since we released the first version of the toolkit in 2022, we’ve seen a lot of excitement from the Flutter community, but we have also heard strong feedback that you want more resources and guidance in developing a successful game. So we are updating the Flutter Casual Games Toolkit with new game templates, and resources to help you easily build casual games in Flutter. Just to highlight a few updates:</p><h4>Templates for multiple game genres</h4><p>We added three new game templates to provide a starting point for building a casual game. First, you will find a <a href=\"https://github.com/flutter/games/tree/main/templates/basic\">basic template</a> that has a simple UI for the main menu, settings screen, simple level selection, and audio integration.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*_MYAbH0pmAhJ3D6B\" /><figcaption>An animated gif showing the basic template</figcaption></figure><p>Second, you will find a <a href=\"https://github.com/flutter/games/tree/main/templates/card\">Card game template</a> that builds on top of the base template and adds basic drag and drop of cards, and is ready for multiplayer integration.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*0GvQrqyBDG2NVb42\" /><figcaption>An animated gif showing the card template</figcaption></figure><p>Third, we partnered with the open source game engine <a href=\"http://flame-engine.org\">Flame</a> (built on top of Flutter), to provide an <a href=\"https://github.com/flutter/games/tree/main/templates/endless_runner\">endless runner template</a>. While you can already use <em>only</em> Flutter to build many turn-based games such as card games, word puzzles, and board games that respond to simple user input, you might also want to build real-time games such as endless runners, shooters, and racing games that require a game loop. In those cases, you can use Flame to implement play steering, collision detection, parallax, spawning, and different visual effects.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*SDayAkeAnC_NtiLU\" /><figcaption>An animated gif showing the endless runner template</figcaption></figure><p>To use these templates, simply check out the <a href=\"https://github.com/flutter/games\">repo</a>, and start building your game using the template that is the closest to what you want.</p><h4>Developer resources for game service integrations</h4><p>The toolkit includes developer guides for integrating necessary services to make your game more successful. For example, we included a few new Cookbook recipes and codelabs to show you how to:</p><ul><li>Build a <a href=\"https://docs.flutter.dev/cookbook/games/firestore-multiplayer\">multiplayer game</a> with Cloud Firestore.</li><li>Make your game more engaging with <a href=\"https://docs.flutter.dev/cookbook/games/achievements-leaderboard\">leaderboards and achievements</a>.</li><li>Monetize your game with <a href=\"https://docs.flutter.dev/cookbook/games/google-mobile-ads\">in-game ads</a> and <a href=\"https://codelabs.developers.google.com/codelabs/flutter-in-app-purchases#0\">in-app purchases</a>.</li><li>Add a user authentication flow with <a href=\"https://firebase.google.com/codelabs/firebase-auth-in-flutter-apps#0\">Firebase Authentication</a>.</li><li>Collect analytics about crashes and errors with <a href=\"https://firebase.flutter.dev/docs/crashlytics/overview/\">Firebase Crashlytics</a>.</li></ul><p>The Flutter Casual Games Toolkit, like Flutter, is available for free (<a href=\"https://github.com/flutter/flutter/blob/master/LICENSE\">BSD 3 License</a>) and is open source. You can learn more and get started at flutter.dev/games. We hope to release further updates to the toolkit with more genre-specific templates and developer resources. Please email us at <a href=\"mailto:flutter-games@google.com\">flutter-games@google.com</a> to tell us what else would make your game development experience easier!</p><h3>Start building your games in Flutter</h3><p>We’re excited to see what you build with the Flutter Casual Games Toolkit. Whether you’re a seasoned game developer or just getting started, we have the tools and resources you need to create amazing casual games. So what are you waiting for? Start building today!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=716ef457e440\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/building-your-next-casual-game-with-flutter-716ef457e440\">Building your next casual game with Flutter</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-09-26T05:18:09.000Z":{"title":"Developing Flutter apps for Large screens","link":"https://medium.com/flutter/developing-flutter-apps-for-large-screens-53b7b0e17f10?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/53b7b0e17f10","category":["android","flutter","tablets","development","ui-design"],"dc:creator":"Mariam Hasnany","pubDate":"Tue, 26 Sep 2023 05:18:09 GMT","atom:updated":"2023-10-31T20:52:09.606Z","content:encoded":"<p>Last year, we partnered with the team at gSkinner to develop <a href=\"https://wonderous.app/\">Wonderous</a>, a reference app to showcase the high-quality experiences possible with Flutter.</p><p><a href=\"https://medium.com/flutter/wonderous-explore-the-world-with-flutter-f43cce052e1\">One of the goals for creating Wonderous</a> was to provide an open-source example that demonstrates best practices. In that same spirit, we audited Wonderous against <a href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality\">Android’s large screen guidelines</a>. We wanted to ensure a high-quality Flutter app across all Android devices. Android has three tiers for meeting their guidelines:</p><p><strong>Tier 3</strong> — large screen ready — app runs on full screen (or full window in multi-window mode), but app layout might not be ideal</p><p><strong>Tier 2</strong> — large screen optimized — app layout is optimized for all screen sizes and handles external input devices</p><p><strong>Tier 1</strong> — large screen differentiated — app designed specifically with foldables in mind, ensuring the layout supports table-top mode with the hinge</p><p>In January 2023, we updated the <a href=\"https://medium.com/flutter/adapting-wonderous-to-larger-device-formats-ac51e1c00bc0\">Wonderous app to adapt to different device formats</a>. While these updates made the app “large screen ready”, the app wasn’t yet “large screen optimized”.</p><p>So we again engaged gSkinner to elevate Wonderous to Tier 2 (or better) and optimized for <a href=\"https://android-developers.googleblog.com/2023/06/the-new-pixel-fold-pixel-tablet-are-here-optimizing-for-large-screens.html\">Android’s new large screen pixel devices</a>.</p><p>In this article, we share what we learned and what you should consider as you develop your app to meet Android’s large screen guidelines.</p><h3>Why large are screens important</h3><p>Before diving into how we optimized Wonderous to meet Android’s Large Screen guidelines, let’s understand the benefits to supporting large screens.</p><p>When we say <a href=\"https://developer.android.com/guide/topics/large-screens/get-started-with-large-screens\">large screens</a>, we mean tablets, foldables, and ChromeOS devices running Android. Demand for large screens is increasing. Today, more than <a href=\"https://developer.android.com/large-screens#:~:text=More%20than%20270%20million%20large%20screen%20Android%20devices\">270 million active large screen</a> and foldable devices run on Android.</p><p>Why this matters for developers:</p><ul><li>Increases business metrics, such as increased user engagement on tablets for apps with layouts optimized to fill the full screen.</li><li>Improves <a href=\"https://developer.android.com/quality/technical\">Technical quality</a> to increase visibility for your app in the Play Store on these devices. Recent <a href=\"https://android-developers.googleblog.com/2022/03/helping-users-discover-quality-apps-on.html\">Play Store updates</a> show ratings by device type and notifies users when an app lacks large screen support.</li></ul><h3>Learnings from optimizing Wonderous</h3><p>Another goal for the Wonderous app is to serve as a source for creating learning materials and documentation. In this section, we share the details where Wonderous didn’t address large-screen requirements. These issues might be common problems Flutter developers encounter so we share how we fixed them.</p><h3>App continuity &amp; configuration changes</h3><p><strong>Requirement:</strong> Apps should change orientation and retain or restore state as the device rotates, changes window size or folds and unfolds.</p><h4>Problem: Folding/Unfolding causes state-loss</h4><p>When Wonderous was folded and unfolded, the app experienced state-loss and would always go back to the initial screen. This issue took a long time for us to figure out. We first assumed this was default behavior in Flutter with folding/unfolding a device, but couldn’t reproduce it with a Flutter counter app. We then realized it might be a plugin that was causing state loss, specifically the <a href=\"https://pub.dev/packages/flutter_inappwebview\">flutter_inappwebview</a> plugin.</p><p><strong>Fix: </strong>Replace the flutter_inappwebview plugin with <a href=\"https://pub.dev/packages/webview_flutter\">webview_flutter</a>, which fixed maintaining state during device configuration.</p><p><strong>Learning:</strong> Your app should not lose state when the device is folded/unfolded, Flutter should maintain state by default. If your app is losing state, verify that the plugins you use support large screen devices. A native extension could cause state-loss when the device changes position.</p><h4>Problem: Maintaining scroll position state</h4><p>We thought we might need a lot of boilerplate code to ensure that a list maintained its scroll position when the screen size changed. We first used the key:PageStorageKey API and it fixed most of our list views. The “learnings” section below describes the situation where you need to go further.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*4I4h-v1nPuUbxBt4\" /><figcaption>Collections page in Wonderous app not maintaining scroll position</figcaption></figure><p><strong>Fix: </strong>Use the<strong> </strong>key: PageStorageKey API to maintain scroll position for lists that keep their layout the same when device orientation changes.<strong> </strong>By <a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app/blob/8a29d6709668980340b1b59c3d3588f123edd4d8/lib/ui/screens/wonder_events/widgets/_events_list.dart#L64\">adding a PageStorageKey to the collections page</a> the scroll position of the SingleChildScrollView widget <a href=\"https://api.flutter.dev/flutter/widgets/PageStorage-class.html\">will be stored automatically</a><strong>.</strong></p><p><strong>Learning:</strong> While key: PageStorageKey offers an elegant way to maintain scroll position with a list, it doesn’t work if your List changes layout from vertical to horizontal. The previous GIF shows what happened with some of the Wonderous pages. In this case, you might have to <a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app/blob/34e49a08084fbbe69ed67be948ab00ef23819313/lib/ui/screens/collection/widgets/_collection_list.dart#L39\">do a bit of math and change the scroll position on screen rotation</a>.</p><h3>Multi-window &amp; split screen</h3><p><strong>Requirement: </strong>App has full functionality running in multi-window mode. The app updates its UI, continuing to play media, for example, when the app doesn’t have top focus.</p><h4>Problem: Letterboxing due to split screen view</h4><p>With the advent of<a href=\"https://developer.android.com/guide/topics/large-screens/multi-window-support\"> “screen splitting”</a>, the user can, with some orientations and aspect ratios, put the app into less than two inches of vertical space. When the screen was split to ⅓ of the display area, the Wonderous app was <a href=\"https://developer.android.com/guide/topics/large-screens/large-screen-compatibility-mode#letterboxing\">letterboxed</a> or positioned in the center of the display area with a solid color background filling the unused area (shown below).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*CUG7wMHjzHSFKMpV\" /><figcaption>Wonderous app being letterboxed in split-screen mode on Pixel Fold</figcaption></figure><p>This happened because we chose to disable landscape on smaller screens by using MediaQuery to determine the size of the device. Unfortunately, MediaQuery doesn’t actually give you the screen size when you’re in split-screen mode and mistakenly identifies large devices with split-screens as small devices.</p><p><strong>Fix: </strong>We added a new API to Flutter to add support for <a href=\"https://developer.android.com/guide/topics/large-screens/support-different-screen-sizes#window_size_classes\">Android’s new window size class</a>. By switching to the Display API we were able to get the full screen size and accurately distinguish a small device from a large device with multiple windows. With this API, you can retrieve various properties of a display. The new <a href=\"https://master-api.flutter.dev/flutter/dart-ui/FlutterView/display.html\">FlutterView.display</a> getter returns a <a href=\"https://master-api.flutter.dev/flutter/dart-ui/Display-class.html\">Display</a> object. The Display object reports the physical size, the device pixel ratio, and the refresh rate of the display. To check out an example that uses the new API, visit the <a href=\"https://master-api.flutter.dev/flutter/services/SystemChrome/setPreferredOrientations.html\">setPreferredMethod API</a>.</p><p><strong>Learning: </strong>When disabling landscape on smaller devices (using SystemChrome.setPreferredOrientations()), use the Display API to determine the device size rather than MediaQuery.</p><h3>Keyboard, mouse and trackpad input</h3><p><strong>Requirement:</strong> Apps should support basic mice or trackpads, and keyboard shortcuts. Main user flows should support keyboard navigation to ensure accessibility.</p><h4>Problem: Focus states</h4><p>Flutter’s Material buttons handle basic focus states by default. In the case of Wonderous, we changed the default styling of the Material buttons to set the overlayColor to transparent. This ended up breaking the focus state of the buttons. With large screen devices that have keyboards and trackpads, your app must handle navigation and provide accessible solutions for those peripheral devices.</p><p><strong>Fix:</strong> <a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app/blob/8a29d6709668980340b1b59c3d3588f123edd4d8/lib/ui/common/controls/buttons.dart#L143\">Changed the button style</a> to have an outline when the button is focused. We used the FocusNode <a href=\"https://api.flutter.dev/flutter/widgets/FocusNode/hasFocus.html\">hasFocus property</a> to check when the button node had focus input and added a border to the button.</p><p><strong>Learning:</strong> Make sure to implement a focus state for any custom buttons or gesture detectors in your app. If you change the default Material button styles, make sure you are testing for keyboard focus states, and implementing your own if needed.</p><h4>Problem: Mouse scroll slow</h4><p>The mouse scroll wheel didn’t work well on some devices throughout the app. A user had to move the scroll wheel a lot for the screen to respond . This was a known<a href=\"https://github.com/flutter/flutter/issues/82973\"> issue</a>, thanks to our community. We noticed that it was more pronounced on tablets and foldables.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*-7rhN0eWj8p1EZ3_\" /><figcaption>Scrolling Wonderous app with a mouse is slow</figcaption></figure><p><strong>Fix: </strong>We <a href=\"https://github.com/flutter/engine/pull/44724\">fixed</a> it in the framework since it affected all Flutter apps and it will be in the next Flutter stable release.</p><p><strong>Learning: </strong>Sometimes the issue is not unique to your app and needs to be fixed by the Flutter team :)</p><h3>App UX layout</h3><p><strong>Requirement:</strong> Apps should provide adaptive layouts and responsive visual elements that change for available screen space or device orientation.</p><h4>Problem: Navigation rail</h4><p>In the first iteration of Wonderous, we disabled the rotation of the app on small form factors since the app lacked proper landscape support on smaller screens. As mentioned earlier, we fixed the app to be able to support landscape mode for smaller screens during split-screen mode on large screen devices. While this approach fixed the letterboxing issue, it became more obvious that the app’s navigation lacked the proper ergonomics for larger screens.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*FkMJSwc7jtu4K7HR\" /><figcaption>Before using Material’s Navigation rail</figcaption></figure><p>This required the app to layout the navigation close to the edges of the screen where it is easier to reach, such as the left side edge of a tablet to free up precious vertical space for app content in landscape mode.</p><p><strong>Fix: </strong>Update the design and implement a navigation similar to <a href=\"https://material.io/components/navigation-rail\">Material’s Navigation rail</a>.</p><p><strong>Learning: </strong>Make sure the layouts and navigation in your app can function properly in large screen devices and ~2” of vertical space if the screen is in split-mode. To make this feasible use <a href=\"https://docs.flutter.dev/ui/layout/responsive/building-adaptive-apps\">adaptive widgets</a> like Material’s Navigation rail<strong>.</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*T0mBXs1X6YdvCQmQlP5ryg.gif\" /><figcaption>After using Material’s Navigation rail</figcaption></figure><h3>Other things to consider</h3><h4>Problem: Camera preview and media projection</h4><p><a href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality#T3-7\">To achieve Android’s Tier 3 </a>status, your app needs to support camera preview and media projection in different orientations, screen sizes, and in multi-window mode. Since Wonderous doesn’t have a camera feature, this requirement didn’t apply.</p><p><strong>Learning: </strong><a href=\"https://developer.android.com/guide/topics/large-screens/large-screen-app-compatibility#camera_preview\">Showing camera previews</a> can be surprisingly complex, but the <a href=\"https://developer.android.com/training/camerax\">Jetpack CameraX library</a> handles many of these details for you. In Flutter 3.10, we added preliminary support for CameraX to our Flutter camera plugin. To try it, opt in by adding the following line to your pubspec.yaml file.</p><pre>Dependencies:<br>camera: ^0.10.4 # Latest camera version<br>camera_android_camerax: ^0.5.0</pre><h4>Not just for Android</h4><p>While these fixes and learnings are presented for Android’s large screen devices, some might apply to other platforms. They can make your app run and feel better on iPads, desktop browsers, and desktop devices. The same learnings apply: leveraging the PageStorageKey API, using adaptive widgets and layouts, or ensuring the plugins you use work well with large form factors.</p><h3>In summary</h3><p>Our main goal for optimizing the Wonderous app for <a href=\"https://developer.android.com/guide/topics/large-screens/get-started-with-large-screens\">large screens</a> was to demonstrate best practices for developing Flutter apps that provide a great experience across all Android devices.</p><p>In the process of meeting Android’s comprehensive set of requirements for <a href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality#large_screen_optimized\">Tier 2 status</a>, we discovered how to fix problems that might be common in other Flutter apps running on large screens. Here are some of the key learnings:</p><ul><li>Maintain and restore <a href=\"https://developer.android.com/jetpack/compose/state#store-state\">app state</a> when changing device orientation or folding/unfolding a device</li><li>Ensure your app isn’t letterboxed by accurately determining the screen size using <a href=\"https://master-api.flutter.dev/flutter/services/SystemChrome/setPreferredOrientations.html\">Display API</a></li><li>Handle external <a href=\"https://developer.android.com/guide/topics/large-screens/input-compatibility-large-screens\">input devices</a>, such as scrolling with a mouse or keyboard</li><li>Design your app layout specifically with large screen devices in mind, such as leveraging <a href=\"https://material.io/components/navigation-rail\">Material’s navigation rails</a></li></ul><p>You can learn more about Android’s <a href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality\">Large screen app quality</a> guidelines on Android’s developer site.</p><p>We hope you’ll leverage <a href=\"https://wonderous.app/\">Wonderous</a> as a reference while developing your own Flutter apps to meet Android’s large screen requirements.</p><p>If you have any feedback on the app, please <a href=\"https://github.com/gskinnerTeam/flutter-wonderous-app\">file an issue on Github</a>. If you have any thoughts on Flutter’s Android support or supporting large screen devices, feel free to message me on <a href=\"https://twitter.com/marihasnany\">X</a> (@marihasnany).</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=53b7b0e17f10\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/developing-flutter-apps-for-large-screens-53b7b0e17f10\">Developing Flutter apps for Large screens</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-12-13T18:36:03.000Z":{"title":"How we built it: Ask Dash — A generative AI Flutter application","link":"https://medium.com/flutter/how-we-built-it-ask-dash-a-generative-ai-flutter-application-79a836ced058?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/79a836ced058","category":["flutter","animation","ai","flutter-app-development","cloud"],"dc:creator":"Very Good Ventures Team","pubDate":"Wed, 13 Dec 2023 18:36:03 GMT","atom:updated":"2023-12-13T18:36:03.049Z","content:encoded":"<h3>How we built it: Ask Dash — A generative AI Flutter application</h3><p>As part of the <a href=\"https://cloudonair.withgoogle.com/events/summit-applied-ml-summit-23?talk=t1_s5_vertexaisearchandconversation\">Google Cloud Applied AI Summit</a>, the Flutter and Vertex AI teams collaborated with <a href=\"https://verygood.ventures/\">Very Good Ventures</a> to create an AI-powered Flutter demo app, <a href=\"https://github.com/VeryGoodOpenSource/dash_ai_search\">Ask Dash</a>, using <a href=\"https://cloud.google.com/vertex-ai-search-and-conversation\">Vertex AI Search and Conversation</a> by Google Cloud. Vertex AI Search and Conversation empowers you to build and deploy search and conversational applications quickly with little to no experience in AI. Flutter was a great way to build a beautiful, customized search experience to show how both products can be used to build powerful applications in only a few short weeks!</p><p>Vertex AI Search and Conversation allows you to create applications that interact with your data with personalized responses demonstrating the power of generative AI. Most importantly, it gives you full control over what data your application accesses and indexes so you can control what information is surfaced to which user. All application data and user interactions are stored in your own cloud instance and are never used to train Google’s underlying machine learning models.</p><p>Since we used Flutter to build the demo app, we decided to use Flutter documentation as training data. We worked with the Google Cloud team to train the model specifically on the Flutter and Dart developer documentation to provide generative AI responses to questions like: What is Flutter? What platforms does it support? And what is hot reload? While much of this data is readily available in public AI models, this demo showcases how you can train a model on just your own data to create powerful AI experiences.</p><p>This article takes you through how our partner, Very Good Ventures, built a Flutter web application and how we connected the app in the Cloud console.</p><h4>How we built the Flutter web app</h4><p>The idea of creating a search application trained on the Flutter docs was straightforward. In fact, the <a href=\"https://docs.flutter.dev/\">official Flutter documentation</a> already provides a simple search experience that delivers relevant page results for questions on Flutter. However, when conceptualizing what to build, we wanted to demonstrate how Flutter can be used to create visually appealing interactive experiences that are fun and engaging.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/777/0*92qfA1AlxG0HMJCE\" /></figure><p><strong>Creating interactive animations in Flutter</strong></p><p>Flutter empowered the team to implement a wide array of animations seamlessly. Its rich set of animations, coupled with the flexibility of widgets, allowed us to create transitions, engaging motion effects, and fluid user interactions. From creating animated loading states while generating the results, to a Dash sprite that waves when the answers appear, Flutter provided flexibility to turn what could be a basic text response into something fun for users to interact with.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/933/0*0gsPB_1VlYop9DPL\" /></figure><p><strong>Visualizing natural language search results</strong></p><p>Unlike a traditional search experience, Vertex AI Search provides a natural language response to the question asked. The answer is generated with AI sourced from various pages within the Flutter documentation and presented as a summarized response alongside cards that display the relevant pages used by the AI. Each card provides the title to the page and a description so that the user can flip through the cards to get more context on the AI response.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*FapWwJ2wFpi8l9ZZ\" /></figure><p>Additionally, within the natural language response, Vertex AI Search provides a link to the source of each sentence in the response — giving the user a more granular understanding of where each part of the response originated. In the demo, clicking on the number next to each sentence flips the cards to the relevant source page.</p><p><strong>More engaging in less time</strong></p><p>Going into the project, we had a tight deadline to launch the demo at the <a href=\"https://cloudonair.withgoogle.com/events/summit-applied-ml-summit-23?talk=t1_s5_vertexaisearchandconversation\">Google Cloud Applied AI Summit</a>. Flutter’s efficient development and ease-of-use, significantly expedited the development process for the team of two working on the application. It provided the necessary tools and framework to build complex animations efficiently, enabling our team to build and launch this demo in just under the two weeks leading up to the event.</p><h4>Connecting the Flutter app to the Vertex API</h4><p>Integrating our front end web application with the Vertex AI Search API was achieved with a simple request using the <a href=\"https://pub.dev/packages/http\">`http` package</a>. Without requiring any previous experience in building AI, Vertex AI Search provided answers to user-generated questions as JSON responses that were parsed and displayed within animated widgets. This allowed the team to focus on Flutter development to create an engaging experience out of the generated data.</p><h4>Setting up generative AI search in your application</h4><p>Setting up Vertex AI and hosting the API for our Flutter app was also straightforward.. In our case, we used <a href=\"https://docs.flutter.dev/\">https://docs.flutter.dev/</a> as our data source and set it up directly in the Google Cloud console. As a Google Cloud customer, getting started with Vertex AI requires just three steps:</p><ol><li><strong>Create a data store</strong></li></ol><p>This is your website’s digital library, holding all the information you need to generate the AI model based on just the root URL. Google Cloud crawls your website for relevant data and creates a data source for you to query. To set this up in the Google Cloud Console,select <strong>Search and Conversation</strong>. Choose <strong>Data Stores</strong> and then <strong>New Data Store</strong>. Opt for <strong>Website URL</strong> as the source and provide your website’s URL.</p><p>2.<strong> Access your data</strong></p><p>Next, create an app in Cloud Console to navigate the data indexed by the model and link it to the data store you created earlier. Under <strong>Search and Conversation</strong>, choose <strong>Apps</strong> and then <strong>New App</strong>. Select <strong>Search</strong> as the type and give your app a name that reflects its purpose, like Ask Dash.</p><p>3. <strong>Craft a Cloud Function</strong></p><p>Finally, create a Cloud Function. This is the API wrapper that exposes your Vertex AI data to other applications. In the Console, go to <strong>Cloud Functions</strong> and select <strong>Create Function</strong>.</p><p>That’s it!</p><p>From there, use the API in your front-end application as you would any API to send requests and receive formatted responses that your application can display. To test it out, head to the <strong>Function</strong> page and select <strong>Testing</strong>. Enter a JSON object with a “search_term” key for your question (such as “hot reload”), and see a detailed response containing a natural language summary, relevant citations, and concise summaries of the referenced pages.</p><p>Learn more about how to get started with <a href=\"https://cloud.google.com/generative-ai-app-builder/docs/try-enterprise-search\">Vertex AI Search</a> in Google Cloud’s documentation.</p><h4>Generative AI applications built in Flutter</h4><p>To see Ask Dash in action and learn more about how we built it, check out the video session from the <a href=\"https://cloudonair.withgoogle.com/events/summit-applied-ml-summit-23?talk=t1_s5_vertexaisearchandconversation\">Google Cloud Applied AI Summit</a>, where Alan Blount, a Product Manager for Google Cloud, breaks down the build process to show the potential of Vertex AI Search in a Flutter application. Check out the <a href=\"https://github.com/VeryGoodOpenSource/dash_ai_search\">open source Flutter code</a> for the demo and get started with your own AI search experience in Google Cloud Console.</p><p>Ask Dash is just the start for how Flutter can power interactive Generative AI experiences in applications. We can’t wait to see what you build!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=79a836ced058\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-we-built-it-ask-dash-a-generative-ai-flutter-application-79a836ced058\">How we built it: Ask Dash — A generative AI Flutter application</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2023-11-30T17:01:52.000Z":{"title":"How we built the Super Dash demo in Flutter and Flame in just six weeks!","link":"https://medium.com/flutter/how-we-built-the-new-super-dash-demo-in-flutter-and-flame-in-just-six-weeks-9c7aa2a5ad31?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/9c7aa2a5ad31","category":["flutter-game","flutter-game-development","flutter-app-development","games","flutter"],"dc:creator":"Very Good Ventures Team","pubDate":"Thu, 30 Nov 2023 17:01:52 GMT","atom:updated":"2023-12-13T18:37:21.431Z","content:encoded":"<h4>Learn how we launched Super Dash, a multiplatform game demo on Desktop browsers, Android, and iOS with just two developers</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7Yf06e3HC80KZyZvfL9dZw.png\" /></figure><p>Super Dash is a new Flutter demo game built from the <a href=\"https://github.com/flutter/games/tree/main/templates/endless_runner\">Endless Runner Flame Template</a> that launched with the recent update of the Flutter <a href=\"https://medium.com/flutter/building-your-next-casual-game-with-flutter-716ef457e440\">Casual Games Toolkit</a>.</p><p>We partnered with the Flutter team at Google to develop a multiplatform game for Android, iOS, and Web from idea to launch in just 6 weeks with Flutter and Flame. Inspired by nostalgic classics like Super Mario, players run in a side-scrolling platformer game as Dash, who collects acorns and eggs to maximize her score and progress through levels.</p><p>The game can be played on a <a href=\"https://superdash.flutter.dev/\">desktop browser</a> and is available for mobile on the <a href=\"https://apps.apple.com/app/super-dash-flutter-game/id6473050393\">Apple App Store</a> and <a href=\"https://play.google.com/store/apps/details?id=com.verygoodventures.super_dash\">Google Play</a>. The code for the game (including mobile platforms) is open-sourced and available in the <a href=\"https://github.com/flutter/super_dash\">super_dash</a> repo on GitHub.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*7q5jOLZfD5UNvaUNiSEbug.gif\" /></figure><h4>How to play</h4><p>Dash runs through each level collecting Acorns (10 points) and Eggs (1000 points) to increase her score. Press the spacebar or tap the screen to start the game and jump to avoid bugs and falling into pits to make it through the level. Grab the Golden Feather to transform Dash into a Phoenix, increasing her jump height and giving her an extra life.</p><h4>Fast and seamless game development using Flutter</h4><p>Flutter made it possible to go from idea to launch in just six weeks with just two developers on our team. This framework’s ability to quickly iterate through changes, powered by its hot reload feature, plus the platform’s composability, modularity, and available tools, allowed the team to move fast and quickly test and evolve the game alongside the design team work.<br>It also accelerated the speed at which the team could build a responsive UI for mobile while targeting browsers and desktop, too. This allowed us to dedicate more of our development time to the game itself and reduce the time spent on making sure the game worked across different devices and screens.</p><p>Additionally, Flutter and Dart’s robust <a href=\"https://pub.dev/\">package ecosystem</a> and integrations with Google services like Firebase made it easy to find tools such as <a href=\"https://pub.dev/packages/flutter_bloc\">Flutter_Bloc</a>, which enabled a seamless creation of game logic and state management.</p><h4>A Flame-powered Flutter adventure</h4><p>Super Dash uses <a href=\"https://flame-engine.org/\">Flame</a>, an open-source game engine built in Flutter. While many casual games can be built with just Flutter alone, Flame extends Flutter’s development capabilities for games that require a game loop, collision, and maps.</p><p>Super Dash extends the functionality of the base Flame Template available in the <a href=\"https://flutter.dev/games\">Casual Games Toolkit</a> with the <a href=\"https://github.com/kurtome/leap\">Leap project</a> — an open-source project created by <a href=\"https://github.com/kurtome\">Kurtome</a>, a member of the Flame Community. Before using Leap, you should have a basic understanding of Flame’s <a href=\"https://docs.flame-engine.org/1.3.0/flame/game.html#flamegame\">FlameGame</a>, <a href=\"https://docs.flame-engine.org/1.3.0/flame/components.html#positioncomponent\">PositionComponent</a>, <a href=\"https://docs.flame-engine.org/1.3.0/flame/components.html#tiledcomponent\">TiledComponent</a> and <a href=\"https://docs.flame-engine.org/1.3.0/flame/camera_and_viewport.html#camera\">Camera</a> components.</p><p>In the repo, you’ll find a custom tool we built for debugging the game, including a macOS version with various actions and utilities. We added a “Teleport to end” button to take Dash to the end screen without playing the entire level, and another button to make Dash immortal, allowing you to go through the entire level without restarting. You can find this tool in the <a href=\"https://github.com/flutter/super_dash\">super_dash repo</a> and try it yourself when building or extending this game.</p><p>All physical objects have rectangular hitboxes that are defined by the object’s size and position, and they don’t have to be the same as the object’s visual appearance, something that significantly improves playability.</p><p>The team used <a href=\"https://firebase.google.com/docs/app-distribution\">Firebase distribution</a> to easily share the app and the game’s test builds, especially for iOS, which sometimes tends to be complicated.</p><h4>Designing an interactive Dash world</h4><p>Super Dash’s design is straightforward and makes it easy to play. We used the open-sourced <a href=\"https://www.mapeditor.org/\">Tiled</a> tool to design the levels, and the <a href=\"https://pub.dev/packages/leap\">leap</a> package to integrate the levels into the game.<br><br>Leap uses the <a href=\"https://pub.dev/packages/flame_tiled\">flame_tiled</a> package (where TiledComponent is implemented) and builds on it to add platformer physics and useful classes likePhysicalEntityfor objects, enemies, and the player.<br>Theflame_tiled package parses the files from tiled to render the map, layers, and objects.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CAzGZZFIAi0oszNtLTJBEA.png\" /><figcaption>Background static image</figcaption></figure><p><strong>LeapMap</strong></p><p>A component accessible throughLeapGame.leapMap, theLeapMapmanages theTiledmap and automatically constructs tiles with proper collision detection for the ground terrain.</p><pre>void main() {<br>  runApp(GameWidget(game: MyLeapGame()));<br>}<br><br><br>class MyLeapGame extends LeapGame with HasTappables, HasKeyboardHandlerComponents {<br>  late final Player player;<br><br><br>  @override<br>  Future&lt;void&gt; onLoad() async {<br>    await super.onLoad();<br><br><br>    // &quot;map.tmx&quot; should be a Tiled map the meets the Leap requirements defined below<br>    await loadWorldAndMap(&#39;map.tmx&#39;, 16);<br>    setFixedViewportInTiles(32, 16);<br><br><br>    player = Player();<br>    add(player);<br>    camera.followComponent(player);<br>  }<br>}</pre><p>To add custom behavior, access the layers through LeapGame.leapMap.tiledMapand integrate your own special behavior for tiles or objects.</p><h4>Customizing layer names and classes</h4><p>You can ask Leap to use different classes, types, or names. To do so, build and pass a custom LeapConfigurationto the game.</p><p>The following example builds a custom LeapConfiguration:</p><pre>class MyLeapGame extends LeapGame {<br>  MyLeapGame() : super(<br>    configuration: LeapConfiguration(<br>      tiled: const TiledOptions(<br>        groundLayerName: &#39;Ground&#39;,<br>        metadataLayerName: &#39;Metadata&#39;,<br>        playerSpawnClass: &#39;PlayerSpawn&#39;,<br>        hazardClass: &#39;Hazard&#39;,<br>        damageProperty: &#39;Damage&#39;,<br>        platformClass: &#39;Platform&#39;,<br>        slopeType: &#39;Slope&#39;,<br>        slopeRightTopProperty: &#39;RightTop&#39;,<br>        slopeLeftTopProperty: &#39;LeftTop&#39;,<br>      ),<br>    ),<br>  );<br>}</pre><p>We worked with <a href=\"https://www.hopr.tv/\">HOPR</a> Studio on the design and artwork for the game. To create a more seamless workflow, we established a common language to describe item behaviors. For example, an “I” indicated infinity, meaning the item would behave the same way repeatedly (moving from left to right or vice versa). This made it easier for each team to understand the game’s goals. Once the map was ready, we incorporated it into the game development.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vXIAYAtllF-90sECtDHfkg.png\" /><figcaption>Super Dash Game instructions</figcaption></figure><h4>What’s next</h4><p>The Super Dash demo was released after the November 2023 update to the <a href=\"http://flutter.dev/games\">Flutter Casual Games Toolkit</a> and uses the <a href=\"https://github.com/flutter/games/tree/main/templates/endless_runner\">new game template</a> that showcases Flame. By highlighting that we went from idea to launch in just six weeks, we hope to showcase how Flutter can help you be more productive and reach more users across a variety of platforms. Check out the <a href=\"https://github.com/flutter/super_dash\">open source code</a> to see how we built it.</p><p><a href=\"https://superdash.flutter.dev/\">Play the game</a> now on a desktop browser or download the mobile app on <a href=\"https://apps.apple.com/app/super-dash-flutter-game/id6473050393\">Apple App Store</a> and <a href=\"https://play.google.com/store/apps/details?id=com.verygoodventures.super_dash\">Google Play</a>! Can you beat the high score?</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9c7aa2a5ad31\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-we-built-the-new-super-dash-demo-in-flutter-and-flame-in-just-six-weeks-9c7aa2a5ad31\">How we built the Super Dash demo in Flutter and Flame in just six weeks!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-01-22T20:05:00.000Z":{"title":"Progress of the Flutter Package Ecosystem","link":"https://medium.com/flutter/progress-of-the-flutter-package-ecosystem-17cded9a0703?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/17cded9a0703","category":["flutter","pubdev","dartlang"],"dc:creator":"Ander Dobo","pubDate":"Mon, 22 Jan 2024 20:05:00 GMT","atom:updated":"2024-01-22T20:04:59.909Z","content:encoded":"<h3>Progress of the Flutter and Dart Package Ecosystem</h3><p>The Flutter and Dart package ecosystem remains a key enabler for developers to build beautiful, performant apps for any screen from a single codebase. The ecosystem grew 26% in 2023 from 38,000 packages in January to 48,000 at the end of December.</p><figure><img alt=\"Line chart depicting the growth in number of packages on pub.dev in 2023\" src=\"https://cdn-images-1.medium.com/max/1024/0*tkq_040X0xa_Noms\" /></figure><p>Pub.dev now has more than 700,000 monthly active users as of January 2024. The Flutter team remains keen and committed to supporting this growth into the future, and enabling developers to build with and contribute to Flutter and Dart. In this update, we’ll take a look at the newest Flutter Favorites, results of the Package Ecosystem Virtual Summit and share some notable updates and things to know.</p><h3>New Flutter Favorites</h3><figure><img alt=\"Flutter Favorite logo\" src=\"https://cdn-images-1.medium.com/max/150/0*gI42oCiw6spGZfOy\" /></figure><p>The <a href=\"https://docs.flutter.dev/packages-and-plugins/favorites\">Flutter Favorites</a> program recognizes and helps developers discover the highest quality packages to consider using in their apps. We’re pleased to announce seven new Flutter Favorite packages that have demonstrated exceptional quality, popularity, and community engagement, making them invaluable tools for Flutter developers. Let’s dive into each:</p><ol><li><a href=\"https://pub.dev/packages/flame\"><strong>flame</strong></a><strong>:</strong> A high-performance 2D game engine for Flutter. Its intuitive API and rich feature set make it an ideal choice for creating visually stunning and engaging games. Check out <a href=\"https://codelabs.developers.google.com/codelabs/flutter-flame-game\">this codelab</a> to try your hand at building a game with flame.</li><li><a href=\"https://pub.dev/packages/flutter_animate\"><strong>flutter_animate</strong></a><strong>: </strong>Bring your UI to life with this a powerful animation library that simplifies complex animations and makes them accessible to all Flutter developers. Its declarative syntax and extensive documentation make it a breeze to create smooth and expressive animations.</li><li><a href=\"https://pub.dev/packages/riverpod\"><strong>riverpod</strong></a><strong>:</strong> An elegant package that offers a powerful and intuitive approach to managing application state. Its streamlined API, performance, scalability, and testability make it a compelling choice for modern Flutter apps.</li><li><a href=\"https://pub.dev/packages/video_player\"><strong>video_player</strong></a><strong>:</strong> Essential for anyone looking to integrate video playback in their Flutter applications. It provides a widget to display video content. It supports a wide range of formats and sources, including network asset and file-based videos. This makes it a versatile tool for building multimedia-rich Flutter apps.</li><li><a href=\"https://pub.dev/packages/macos_ui\"><strong>macos_ui</strong></a><strong>:</strong> For developers targeting macOS, this package enables creation of applications with a design that feels right at home on that platform. It provides an extensive collection of widgets and components that are styled according to the macOS design language, ensuring that your Flutter app not only runs well on macOS, but also looks and feels native.</li><li><a href=\"https://pub.dev/packages/fpdart\"><strong>fpdart</strong></a><strong>:</strong> This package enables functional programming in Dart. It’s great for implementing business logic, for instance, where functional programming paradigms like immutability, pure functions, and higher-order functions, as well as fpdart’s use of Dart’s type system, helps in building more maintainable and predictable code.</li><li><a href=\"https://pub.dev/packages/flutter_rust_bridge\"><strong>flutter_rust_bridge</strong></a><strong>:</strong> For developers seeking to leverage the best of Rust and Flutter in their application, flutter_rust_bridge provides a seamless bridge between the two worlds. It enables native Rust code to interact with Flutter seamlessly, unlocking the potential of Rust’s performance and memory safety in Flutter apps.</li></ol><h3>Sunsetting the Happy Paths program</h3><p>We decided to sunset the Happy Paths program to enable a more dedicated focus on Flutter Favorites. The vision of Happy Paths recommendations was to help you to make informed decisions on finding and using packages to add functionality to your app. We are fortunate to have community initiatives such as <a href=\"https://fluttergems.dev/\">Flutter Gems</a> that are comprehensive resources for navigating well categorized package options. As we focus on the Flutter Favorites program, we will continue to evolve it with input and feedback from the Flutter and Dart community.</p><h3>Package Ecosystem Virtual Summit</h3><figure><img alt=\"The Flutter and Dart Ecosystem Virtual Summit 2023 landing page\" src=\"https://cdn-images-1.medium.com/max/1024/0*NzfQsOUhVaeUcGB8\" /></figure><p>At the end of August 2023, we held a first-time <a href=\"https://rsvp.withgoogle.com/events/flutter-package-ecosystem-summit-2023\">virtual summit</a> for the Flutter and Dart package ecosystem, attended by more than 50 non-Googler and Googler contributors to <a href=\"https://pub.dev/\">pub.dev</a>. We started with a relatively small invitee list to fit the unconference-style format, and to learn from this first-time event before figuring out what it might look like in the future. The goal was to bring contributors together in unconference-style discussions to plan, educate, learn, and share amongst the community. We had three discussion sessions, each on topics that were voted on by registered attendees in the weeks leading up to the summit. The three discussion topics were 1) Building high quality packages — best practices, and challenges, 2) Maintaining packages long term — sustainable models, and 3) Flutter and Dart DevTools Extensions.<strong> </strong>Respondents to the post-event survey gave us insightful feedback that we’ll incorporate in future event planning. Thank you! Overall, we consider this first summit a success. Going forward, we’re keen to partner with the community on similar standalone events, or sessions focused on the Flutter and Dart ecosystem, set within more general events.</p><h3>Updates to the Pigeon package</h3><p>The <a href=\"https://pub.dev/packages/pigeon\">Pigeon package</a> is a code generation tool that streamlines setting up the communication between your Flutter app and platform-specific code. This makes Pigeon useful both 1) when writing custom integrations directly between a Flutter app and platform-native APIs, such as in an <a href=\"https://docs.flutter.dev/add-to-app\">add-to-app</a> scenario, and 2) when writing a <a href=\"https://docs.flutter.dev/packages-and-plugins/developing-packages#types\">Flutter plugin</a> to provide a Dart API surface for platform-native APIs. It’s maintained by the Flutter Team who has made the following notable improvements to the package over this year:</p><ul><li>Added support for Swift, Kotlin and C++ (C++ unlocked Windows support).</li><li>Null safety is now enforced.</li><li>Expanded support for primitive data types support. For example, enums were added as a supported type.</li><li>Added nullable parameters.</li><li>Added error handling on host and Flutter APIs.</li><li>Improved the ergonomics of the tools to make them easier and more intuitive to use. For example, we added support for default parameters and named parameters.</li></ul><p>There are a lot more developments between v5.0.0 in January and v15.0.2 in December than we can list here, so check out all the changes in the <a href=\"https://pub.dev/packages/pigeon/changelog\">change log</a>!</p><h3>Packages in DartPad</h3><p><a href=\"https://dartpad.dev/\">DartPad</a> supports a fixed set of packages that you can view by clicking the info icon in the bottom, right-hand corner of the screen. The Flutter and Dart team at Google reviews and prioritizes package requests on an ongoing basis. If you’d like a package to be added to DartPad, add your thumbs up to an <a href=\"https://github.com/dart-lang/dart-pad/issues?q=is%3Aissue+is%3Aopen+label%3Asuggested-package+sort%3Areactions-%2B1-desc\">existing package suggestion</a>, if there is one, or <a href=\"https://github.com/dart-lang/dart-pad/issues/new?assignees=&amp;labels=&amp;projects=&amp;template=everything-else.md&amp;title=\">open a new issue</a> with your suggestion.</p><figure><img alt=\"Screenshot of packages on Dartpad.dev\" src=\"https://cdn-images-1.medium.com/max/1024/0*U2blC-2k01FIuCsZ\" /></figure><h3>Proposal for canonical topics on pub.dev</h3><p>In 2023 we launched the ability for package authors to tag their package with 1–5 free text topics in the pubspec file. The goal was to improve discovery of packages by potential users by adding a form of package categorization. We’ve seen a healthy uptake of the feature with many packages tagged. We’re exploring a proposal to improve the feature by merging topics that are effectively the same (For example, widget and widgets). We invite the community to share feedback or contribute PRs to this <a href=\"https://github.com/dart-lang/pub-dev/issues/7263\">canonicalize topics issue</a>.</p><figure><img alt=\"An example of Topics on a package on pub.dev\" src=\"https://cdn-images-1.medium.com/max/1024/0*BhBIcosj4JSij9xk\" /></figure><p>That’s it for now! To engage with the amazing community of package authors, check out the <a href=\"https://discord.com/channels/608014603317936148/1014208569706561567\">#package-authors</a> Discord channel (you first need to join the <a href=\"https://github.com/flutter/flutter/wiki/Chat\">Flutter Discord server</a>).</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=17cded9a0703\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/progress-of-the-flutter-package-ecosystem-17cded9a0703\">Progress of the Flutter Package Ecosystem</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-01-09T19:46:22.000Z":{"title":"Announcing the #GlobalGamers Challenge","link":"https://medium.com/flutter/announcing-the-globalgamers-challenge-2c5315c87898?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/2c5315c87898","category":["games","flutter-app-development","flutter","game-development"],"dc:creator":"Kelvin Boateng","pubDate":"Tue, 09 Jan 2024 19:46:22 GMT","atom:updated":"2024-01-09T19:46:21.963Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h3>Build epic Flutter games to assist in the battle to defend the planet</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*e6DUZrDIvURyxTW2\" /></figure><p>We know Flutter devs love a good <a href=\"https://flutter.dev/events/puzzle-hack\">challenge</a>, so just in time for the new year, we’re excited to announce the next Flutter challenge!</p><p><a href=\"http://flutter.dev/global-gamers\">The Global Gamers Challenge</a> is an 8 week contest to design, build, and publish sustainable games, sponsored by Flutter and <a href=\"https://www.globalcitizen.org/en/\">Global Citizen</a>. The contest’s winners will receive a trip to NYC in September 2024 to meet some of the Flutter team for a day of workshops and mentorship, and then celebrate their achievements with up to 60,000 other Global Citizens at Global Citizen Festival 2024.</p><h3>What are sustainable games?</h3><p>Sustainable games use the power of play to inspire positive environmental action. Imagine Candy Crush, but instead of crushing candies, you’re crushing plastic pollution! Or, picture a game like <a href=\"https://superdash.flutter.dev/\">Super Dash</a>, but instead of collecting acorns, you’re in Dash’s home figuring out how to cool the house by optimizing a path for airflow using windows instead of the AC. Here are some more ideas inspired by Global Citizen campaigns running right now:</p><ol><li><a href=\"https://www.reuters.com/markets/commodities/world-cant-afford-us-style-home-energy-consumption-habits-2023-05-19/\"><strong>Encourage a reduction in home energy use</strong></a><strong><br></strong>Data shows that American homes average three times more electricity use than typical homes across the rest of the globe. Can you build a game that helps to reduce reliance on inefficient energy sources?</li><li><a href=\"https://www.timeout.com/travel/best-public-transport-in-the-world\"><strong>Encourage a reduction in use of single-use plastics</strong></a><strong><br></strong>Southeast Asia has some of the highest levels of plastic pollution in the world. Consider building a game that encourages someone to make a swap, like opting for a reusable water bottle over a single-use one.</li><li><a href=\"https://www.ukri.org/what-we-do/browse-our-areas-of-investment-and-support/understanding-plastic-pollution-impact-on-marine-ecosystems-in-southeast-asia/\"><strong>Encourage use of public transportation for short distances and overland options for longer distances</strong></a><strong><br></strong>Europe is home to many of the world’s greatest public transportation systems. Effective games can encourage people to use local public transit for shorter distances, and overland transport, like trains rather than planes) for longer distances.</li></ol><p>We’re confident that games can encourage players to take small, real life, actions that add up to a large impact for the environment. In fact, <a href=\"https://www.globalcitizen.org/en/categories/defend-the-planet/\">if you’d like to take direct action on these items, check out the campaigns Global Citizen is running now</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*BI7eVnRDmTOmFkaQ\" /></figure><h3>Why join the Global Gamers Challenge?</h3><h3>Defend the planet</h3><p>This contest was inspired by the <a href=\"https://www.playing4theplanet.org/\">Playing for the Planet Alliance</a>, a United Nations-facilitated alliance of 50 game studios and companies, <a href=\"https://blog.google/around-the-globe/google-europe/sustainable-gaming-with-the-playing-for-the-planet-alliance/\">including Google</a>, with a mission to reduce the industry’s environmental impact and<em> </em>leverage the power of gaming to bring awareness to and coordinate action for important environmental issues like climate change, biodiversity loss, and pollution.</p><p>Games produced by members of the Playing for the Planet Alliance have a combined reach of over 1 billion people. Through the Alliance’s flagship initiative, the <a href=\"https://www.playing4theplanet.org/green-game-jam-2023\">Green Game Jam</a>, participating games have created real-world impact by raising funds to plant 2.75 million trees and raised roughly $1,500,000 USD to protect wildlife and support environmental causes.</p><p>We’ve partnered with the Playing for the Planet Alliance to source <a href=\"https://igda-website.s3.us-east-2.amazonaws.com/wp-content/uploads/2022/04/06100719/EnvironmentalGameDesignPlaybook_Alpha_Release_Adj.pdf\">best practices for environmental games</a> and added them to the resources kit provided as part of this challenge. This is your chance to build something that helps protect our planet!</p><h3>Learn something new</h3><p>Whether you’re a Flutter developer who’s new to games, a game developer who is new to Flutter, or someone new to both game development and Flutter, you’re bound to learn a few tricks while creating a positive impact on the world.</p><h3>Details</h3><h3>Timeline</h3><p>All projects must be submitted by March 5, 2024, 2:59pm PT (GMT -8). A Top 20 will be announced in late March 2024, and final winners will be announced in May 2024.</p><h3>Submission guidelines</h3><p>Registration and entry submission instructions can be found at <a href=\"http://globalgamers.devpost.com/\">DevPost</a>.</p><h3>Awards</h3><p>Winners will be judged based on criteria like:</p><ul><li>Originality and creativity</li><li>Sustainable action and story</li><li>Use of animation</li><li>Effective Multi-platform deployment</li></ul><p>We won’t just award great coding ability, though. We also have prizes for great ideas, demo videos, educational content for your game, and more!</p><p><strong>Resources</strong></p><p>We’ve compiled a bunch of <a href=\"http://flutter.dev/global-gamers/#resources\">resources</a> to help you build a game, including a <a href=\"http://flutter.dev/global-gamers/#guide\">guide</a> to navigating this challenge, kind of like a game map. It shows you the resources you need, helps you become a Global Citizen through a new <a href=\"https://glblctzn.co/hQ5oyPFbcGb\">learning journey</a> in the Global Citizen application, and contains instructions on how to register and submit your game.</p><h3>Teams</h3><p>We recommend completing this challenge as part of a team. When you <a href=\"http://globalgamers.devpost.com/\">register for the challenge</a> on Devpost, you’ll be able to share your skillset, your team status, and your ideas.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*fJPnnrD19GKt6MiK\" /></figure><p>So, whether you have a great idea but need teammates with technical skills to bring it to life, or if you have the technical skills, but want a great idea, make sure to fill out your profile accordingly and then peruse the <a href=\"https://globalgamers.devpost.com/participants\">participants tab</a> and look for folks whose profile details match what you’re looking for!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*L51Psa66pNh99Rsd\" /></figure><p>We’re particularly excited for the ideas that will come from technologists and activists working together towards a common goal. If you need extra support in finding a teammate, read over this <a href=\"https://help.devpost.com/hc/en-us/articles/360022031411-Participants-page-forming-a-team\">help article</a>.</p><p>Finally, note that teams can be any size, but only 3 people from a team will be able to travel to New York City should the project be selected as a finalist.</p><h3>Get started and stay connected</h3><p>Check out the official contest site at <a href=\"https://flutter.dev/global-gamers\">flutter.dev/global-gamers</a> for everything you need to know. You can also visit <a href=\"https://globalgamers.devpost.com/\">DevPost</a> to register and submit your game.</p><p>Submissions close on March 5th, so don’t wait! We can’t wait to see what you build!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2c5315c87898\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-the-globalgamers-challenge-2c5315c87898\">Announcing the #GlobalGamers Challenge</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-02-07T17:09:33.000Z":{"title":"Extreme UI Adaptability in Flutter — How Google Earth supports every use case on earth","link":"https://medium.com/flutter/extreme-ui-adaptability-in-flutter-how-google-earth-supports-every-use-case-on-earth-6db4661e7a17?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6db4661e7a17","category":["google-earth","flutter","adaptive-ui","dart"],"dc:creator":"Craig Labenz","pubDate":"Wed, 07 Feb 2024 17:09:33 GMT","atom:updated":"2024-02-13T17:22:35.523Z","content:encoded":"<h3>Extreme UI Adaptability in Flutter — How Google Earth supports every use case on earth</h3><p>When Google Earth set out to rewrite their mobile and web clients in Flutter, they knew they wanted to allow each and every one of their users to explore the planet however they liked, on whatever devices they owned. This had long been true to an extent; after all, Google Earth had existing web, desktop, Android, and iOS clients. But this rewrite, which would cover all of those targets other than desktop, would need to support the superset of existing use cases; plus a few new adaptability ideas the Earth team was excited to explore.</p><p>The search for Google Earth’s tech stack of the future was heavily informed by all-too-familiar sources of friction that had slowed development on their existing clients. Namely, Google Earth had long been forced to choose between developer velocity on new features and maintaining feature parity across their three unique codebases (web, Android, and iOS). Luckily, the center of the UI — the entirety of the pale blue dot in the middle of the screen — is powered by a C++ engine that already delivered a unified experience for <em>some</em> of Google Earth’s features. However, the rest of the UI chrome and menus were implemented separately across each codebase. This meant that any cross-platform choice would not only need to overhaul the UI development process, but also integrate with a large legacy engine in Android, iOS, and the web.</p><p>The deciding factors to use Flutter were twofold. First, integrating with the existing Google Earth engine proved to be a straightforward task using method channels. Second, Google Earth not only wanted to streamline their codebases, but also to reimagine their UI entirely. Any major UI overhaul is already something of a rewrite, and Google Earth opted to write one new Flutter app instead of performing surgery on three existing apps. This complicated the task, but the team committed to a clean break and obsessive focus on adaptability. In the end, the Google Earth team came to power their UI across three platforms with Flutter.</p><h3><strong>Defining adaptability</strong></h3><p>And so, the Google Earth team set out on an adventure to push the limits of UI adaptability. Prior art abounds on creating UIs tailored to different user journeys — dating back to the dawn of smartphones and the entire internet’s collective realization that most websites needed a rethink for small screens. Browser APIs and CSS patterns emerged to build websites with an awareness of their screen’s resolution; and those ideas have been prominent ever since. Even in Flutter’s earliest days, developers knew phone screens would vary and made their apps’ UIs depend on the screen’s resolution. And if that resolution changed — either because the user rotated their phone or resized their browser window, the app’s UI would <em>respond</em>. In Flutter, as in the web for years before it, <strong><em>responsive UIs</em> </strong>improved user experiences.</p><p>What then, you might wonder, is the difference between a <em>responsive</em> UI and an <em>adaptive</em> UI? Put simply, a <em>responsive</em> UI adjusts to changes in the amount and aspect ratio of available pixels; while an <em>adaptive</em> UI adjusts to <em>everything else.</em> Responsive UIs can grow and shrink individual UI elements based on screen real estate details, but adaptive UIs answer more fundamental questions like where to render the app’s navigation, whether list views should route to separate detail views or show them side-by-side with the list itself, and how the user’s connected peripherals should influence things like tap targets and hover states (more on this concept later).</p><blockquote>For more on this, watch <a href=\"https://youtu.be/HD5gYnspYzk?si=8AvuBRGXNRNET9dR\">episode 15 of Decoding Flutter</a> on Adaptive vs Responsive UIs and see these guides from <a href=\"https://docs.flutter.dev/ui/layout/responsive/building-adaptive-apps\">Flutter</a> and <a href=\"https://developer.android.com/develop/ui/views/layout/responsive-adaptive-design-with-views\">Android’s</a> documentation.</blockquote><p>As anyone who’s written responsive CSS for a website will tell you, even simple UIs promise tricky edge cases. And to be clear, this is no fault of CSS; the problem space’s many states are so fine-grained as to almost feel analog. What then, should a UI developer expect when considering several additional variables, such as the device form factor and connected peripherals? Naturally, they should expect a fair increase in complexity.</p><p>This all came to a head when the behavior of an early prototype caught the Google Earth team off-guard. While playing with that early build, a Google Earth engineer shrunk their desktop web browser down to an extremely narrow width. Suddenly, typical desktop affordances like side navigation bars and tighter touch targets were replaced by mobile affordances, like a bottom navigation bar and larger, finger-friendly buttons. Their surprise was brief — after all, <em>that was exactly what they’d told their app to do</em>. The Google Earth team was now faced with a profound question — <em>Is this what a user would want?</em></p><p>Such was the terra incognita the Google Earth team was about to chart.</p><h3>Why adaptability?</h3><p>To some, the following content raises a meta-question: <em>Why bother with any of this in the first place? Is the ROI sufficient when surely a responsive UI will satisfy most users?</em></p><p>These are good questions, but they should not contribute toward hesitation with Flutter. Using a cross-platform UI framework like Flutter does not <em>introduce</em> adaptive UI concerns; it <em>unlocks adaptive UI solutions</em>. Beyond that, here are two considerations that suggest adaptive UIs really are that important:</p><ul><li>Screen resolutions don’t imply what they once did. Desktop browsers can have low DPI settings that a naive breakpoint check will confuse with mobile environments; high-DPI phones in landscape orientation can be mistaken with old tablet (or even desktop!) breakpoints; and foldable devices can alternate between showing your app full-screen and splitting screen real estate between multiple apps, leading to jarring differences if this careens a user back and forth across certain breakpoints.</li><li>Apps with distinct creation vs consumption modes (think any text composition app with Read and Edit experiences) can suffer heavily on mobile — and especially on tablets. Shipping a mobile-first, and thus likely consumption-first experience to smartphones and tablets greatly limits your power users with a tablet, Bluetooth keyboard, and mouse.</li></ul><h3>Delivering on adaptability</h3><p>The Google Earth team walked a long road of experimentation, user research, and iteration to arrive at the app they ultimately shipped. But in the end, their problem space boiled down to three high-level questions:</p><ol><li>How should the app determine its initial UI strategy?</li><li>How and when should the app change its UI strategy?</li><li>How would the Google Earth team cleanly implement this logic?</li></ol><h3>Determining an initial UI strategy</h3><p>One of the Earth team’s early assumptions was that “there is no difference between a Chromebook with a touchscreen and a tablet with a connected Bluetooth keyboard”, and that their UI should not distinguish between the two. Although this idea stood to initial reason, it did not survive testing; and over time the Earth team increasingly realized the gaps in this approach. A user launching the app with a high-resolution tablet in landscape mode could find themselves within a desktop UI range of pixel resolution (following older, responsive UI rules). If that same user then rotated their tablet into portrait mode and in doing so shifted into a pixel resolution range assigned to tablets, Google Earth would be faced with a hard choice. The dynamic option would be to dramatically restructure everything by shifting from the desktop UI to the mobile UI; whereas the static option would be to do nothing except squish and compress the desktop UI until it fit in within its new constraints. Neither of these options were satisfying, and it all meant that there <em>was</em> a difference between a Chromebook with a touchscreen and a tablet with a keyboard.</p><p>In the end, the Earth team settled on a simple rule: serve the mobile experience to smartphones and tablets, and the desktop experience to desktops. If this seems anti-climactic, well, it sort of is; but only because it punts some of the juicy parts to the next question — <em>When should the UI’s initial strategy </em><strong><em>change?</em></strong></p><h3>Updating the UI strategy within a user session</h3><p>The Earth team’s first strategy for UI changes was little more than established responsive UI rules: show your mobile UI on any resolutions below a minimum threshold, your tablet UI (if you have one) the next few hundred possible widths, and lastly, your desktop UI on anything else. And, critically, when a UI crosses one of those thresholds for any reason, you re-render the app accordingly. Of course, this ruleset’s awkwardness launched Google Earth onto its odyssey of extreme adaptability; so it should be no surprise that the team abandoned this approach.</p><p>A second possibility came from Stadia, a fellow Google team with a successful Flutter mobile app. (Obviously, Stadia did not survive as a product; but that was not for lack of functionality in its mobile app!) Stadia’s approach was to make adaptive UI decisions based on which inputs were last touched. Drag your computer’s cursor or press a key, and Stadia would snap into its desktop UI mode. Conversely, if you tilted a joystick on a connected console controller, Stadia would snap into its console UI mode. However, while that made sense for Stadia, it proved less appropriate for Google Earth. A simple case ruled out this last-inputs-touched strategy: a tablet user pinching to zoom their map, then returning to a Bluetooth keyboard to finish typing content. No user would want two dramatic UI transitions during that simple interaction, so the user’s most recent inputs could not wholesale change Google Earth’s UI from mobile to desktop or back.</p><p>In the end, the Google Earth team settled on a second very simple rule: remain consistent within a session and never leave the initial UI flavor without the user’s explicit permission. As explored earlier, Google Earth would show its mobile-first UI on smartphones and tablets and its desktop-first UI on desktops; and it would never outsmart itself and change that unless the user requested a change in the settings panel.</p><h3>Mixed-UI states</h3><p>UI consistency within sessions served Google Earth well, but it is not the whole story. UI affordances in desktop experiences like cursor hover effects lack any equivalent on mobile and must be reimagined. A user treating their touchscreen laptop like a tablet could be blocked entirely by an app’s failure to replace critical hover effects with alternatives suitable for mobile. This realization suggested a two-tier problem and solution. Google Earth’s UI would not only need to smoothly switch back and forth between its mobile and desktop experiences when a user requested, but individual controls would need to have both a touch-friendly form <em>and</em> a mouse-friendly form, regardless of the overarching strategy.</p><p>Finally, Google Earth knew what they were building. All of their research and iteration left only implementation questions, which amounted to:</p><ol><li>How to manage transitions between two fundamentally different UIs, and</li><li>How to build individual controls to support atypical peripherals</li></ol><h3>Managing multiple UIs</h3><p>At its simplest, building any Flutter app to seamlessly switch between two different experiences is as simple as putting the following line somewhere in a widget’s build method:</p><pre>child: mode == Mode.desktop ? DesktopUI() : MobileUI()</pre><p>However, this strategy (which is what Google Earth uses) implies some extra work elsewhere to fully realize. The issue — initially obscure — surfaces when <em>any</em> application state is stored within a Stateful widget, as toggling that `mode` variable completely replaces the widget tree, destroying all State objects and any information they hold. There are two layers to this problem.</p><p>To imagine the first layer, consider a screen that has multiple panels on desktop, but reorganizes each of those panels into a tab bar experience on mobile. A mobile user will have an active tab, but that concept has no equivalent on desktop. Storing the active tab index within a StatefulWidget (an idiomatic decision in Flutter!) would always reset a mobile user’s position to the default tab after toggling back and forth through the desktop UI. The solution to this involves moving any primitive application state — strings, integers, and the like — out of StatefulWidgets and into your state management classes. This way, no shenanigans in your widget tree can reset critical values.</p><p>The problem’s second layer comes from application state less easily pulled out of the widget tree, like TextEditingControllers or ScrollControllers. The situation looks like this: you have a ListTile with a TextField, but any time the user touches their mouse or touchscreen, you rebuild that ListTile to accommodate the user’s latest peripherals. Without intervention, this would cause Flutter to destroy the entire part of the Widget and Element trees containing the old TextField, taking with them any controllers holding the user’s work. You might be tempted to treat these as primitives (TextEditingControllers as strings and ScrollControllers as doubles) and repeat the above solution; but controllers are too rich to easily serialize in this way (cursor position and text selection, anyone?).</p><p>To solve this problem, Google Earth uses GlobalKeys to have the framework “reparent” highly-scoped widgets after a fresh layout. The following AdaptableTextInput widget is tightly scoped to its TextField and TextEditingController. Supplying the same GlobalKey to that AdaptableTextInput widget across UI-changing rebuilds will keep the TextEditingController alive, saving your users’ work.</p><pre>class AdaptableTextInput extends StatefulWidget {<br><br>  // Supply a consistent GlobalKey here!<br>  const AdaptableTextInput({super.key, required this.mode});<br><br>  final Mode mode;<br><br>  @override<br>  State&lt;AdaptableTextInput&gt; createState() =&gt; _AdaptableTextInputState();<br>}<br><br>class _AdaptableTextInputState extends State&lt;AdaptableTextInput&gt; {<br><br>  final _controller = TextEditingController();<br>  final String helpText = &#39;I clarify this text input!&#39;;<br><br>  @override<br>  Widget build(BuildContext context) {<br>    if (widget.mode == Mode.desktop) {<br>      return Tooltip(<br>        showOnHover: helpText,<br>        child: TextField(controller: _controller),<br>      );<br>    } else if (widget.mode == Mode.mobile) {<br>      return Column(<br>        children: &lt;Widget&gt;[<br>          TextField(controller: _controller),<br>          Text(helpText);<br>        ],<br>      );<br>    } <br>  }<br>}</pre><h3>Navigation</h3><p>Navigation stacks and the app’s Back button also require special attention. Continuing with the above example of a desktop UI that shows multiple panels at once, now imagine a complementary mobile UI that presents those panels in a stack-like UI with forward and backward navigation. The implications of allowing desktops to use the mobile UI, and phones to use the desktop UI, was one of the big adaptability ideas Google Earth wanted to pursue.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nHhbCY1mlIwlvQI60jaJHA.png\" /><figcaption>A grid of UIs, showing a desktop UI on both desktop and mobile devices, and a mobile UI on both desktop and mobile devices</figcaption></figure><p>If a desktop-UI user is on the red panel when they switch to the mobile UI, the Back button won’t automatically be wired up, because the navigation stack will be reset. This means your desktop UI needs to account for extra information technically only needed by the mobile UI, because at any moment the mobile UI could be asked to take over.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RXf-GaJ4uz5_ZKU8QgIVkw.png\" /><figcaption>A desktop device rendering the same UI in two different modes — one typical of desktop, and one typical of mobile</figcaption></figure><p>Luckily, GoRouter’s declarative routing API can help. Create two separate routing declarations and switch to the appropriate route when your user toggles UI modes. In this situation, if the desktop UI has tracked the user’s last activity to the red panel when a request to activate the mobile UI comes in, calling `mobileRouter.go(‘home/blue/red’)` will create a navigation stack with a synthetic history, allowing the user to press the Back button to escape the red screen.</p><pre>final desktopRouter = GoRouter(<br>  routes: [<br>    GoRoute(<br>      path: &#39;/home&#39;,<br>      builder: (context, state) =&gt; FourPanels(),<br>    ),<br>  ],<br>);<br><br>final mobileRouter = GoRouter(<br>  routes: [<br>    // One route for each panel, configured to wire up<br>    // the Back button if a user arrives on one of the nested panels<br>    GoRoute(<br>      path: &#39;/home/blue&#39;,<br>      builder: (context, state) =&gt; BluePanel(),<br>      routes: [<br>        GoRoute(<br>          path: &#39;red&#39;,<br>          builder: (context, state) =&gt; RedPanel(),<br>          routes: [<br>            GoRoute(<br>              path: &#39;green&#39;,<br>              builder: (context, state) =&gt; GreenPanel(),<br>              routes: [<br>                GoRoute(<br>                  path: &#39;yellow&#39;,<br>                  builder: (context, state) =&gt; YellowPanel(),<br>                ),<br>              ],<br>            ),<br>          ],<br>        ),<br>      ],<br>    ),<br>  ],<br>);</pre><p>Highly adaptive UIs like Google Earth’s require an implementation that treats all possible scenarios as always in play, even though only one given UI is ever being rendered. This means that the app must always be able to <em>completely</em> reconstruct its state from resources you completely control — whether that is because you have GlobalKeys to retain State objects holding important information, or because you’ve stored all relevant details in your state management classes.</p><h3>Adapting to user inputs</h3><p>All of this left only one more tricky adaptability problem: ensuring controls across their UI were amenable to the user’s last-used peripherals and not just the reigning UI strategy. After all, if a tablet user started clicking a Bluetooth mouse; Google Earth wasn’t going to wholesale switch to their desktop UI, but they <em>did</em> want to slightly tweak elements to leverage a keyboard and mouse’s strengths.</p><p>Merely using Flutter meant Google Earth was off to a good start here. Imagine the alternative: an app that is split across three codebases (JavaScript for desktop via web, and Swift and Kotlin for mobile), when the Swift and Kotlin teams realize that it would be awfully nice if, <em>in some scenarios</em>, they could borrow elements from the JavaScript app’s UI. Maybe what they need can be re-implemented simply enough; or maybe not. Either way; in a Flutter app, the existing tool you want to borrow is always in the same codebase.</p><p>But code sharing is not code organization, and the question of how to implement this coherently remained. Here, the Google Earth team turned to an old Flutter staple: the builder pattern.</p><pre>/// High level categories of user inputs.<br>enum InputType { gamepad, keyboardAndMouse, touch }<br><br>/// Builds a widget tree that depends on the user&#39;s current [InputType].<br>class InputTypeBuilder extends StatelessWidget {<br>  /// Called when the [InputType] data updates.<br>  final Function(BuildContext, InputTypeModel, Widget?) builder;<br><br>  /// Constructs a wrapping widget that will invoke the [builder] whenever<br>  /// [InputType] changes.<br>  ///<br>  /// See [InputTypeModel] for details on how to change [InputType].<br>  const InputTypeBuilder({<br>    Key? key,<br>    required this.builder,<br>  }) : super(key: key);<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return Consumer&lt;InputTypeModel&gt;(<br>      builder: (context, inputTypeModel, _) {<br>        return builder(<br>          context,<br>          inputTypeModel.inputType,<br>        );<br>      },<br>    );<br>  }<br>}</pre><p>A widget like InputTypeBuilder listens to a top-level mechanism, the InputTypeModel, which itself subscribes to the Flutter Engine for updates on the last-used input. InputTypeModel.inputType is a property of the InputType enum. And with that, child widgets can make localized decisions about how to render themselves in light of how the user is currently interacting with the app. For example, if you had been using a mouse, but then tapped your finger on the touch screen, affordances that were once only revealed by the cursor’s hover effect would now appear all over the app. And similarly, if you switched back to using the mouse, this InputTypeBuilder would allow them to reverse the change.</p><pre>@override<br>Widget build(BuildContext context) {<br>  return InputTypeBuilder(<br>    builder: (context, inputTypeModel, child) {<br>      final bool isHoveredOrTouchInput = isHovered || inputTypeModel.inputType == InputType.touch;<br>      return Row(<br>        children: &lt;Widget&gt;[<br>          isHoveredOrTouchInput ? DragIndicator() : Container(),<br>          RestOfRow(),<br>        ],<br>      );<br>    },<br>  );<br>}</pre><p>The following gif shows Google Earth’s desktop UI (running in Chrome), nimbly adjusting to the user alternating between touchscreen and mouse actions.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/810/1*7hP0qPviv5Hrh7U82WWhQg.gif\" /><figcaption>Google Earth’s UI swapping between typical desktop and mobile affordances as the end-user interacts with different peripherals</figcaption></figure><h3>Conclusion</h3><p>The biggest unexpected wins rebuilding Google Earth with Flutter came to users of the tweener environments — tablets and the web. Caught awkwardly between phones and laptops; tablets can physically support both types of experiences but rarely enjoy the software flexibility to match. Similarly, web experiences can be loaded on any device; and on desktop, browsers can be arbitrarily resized. Depending on the app, all of this can imply radically different UIs. For most development teams with separate codebases for each build target, fully supporting users caught in these limbo states is a non-starter. (Imagine convincing your boss to spend the time rebuilding your entire desktop UI on mobile, just in case a tablet user wants it!)</p><p>But, as the Google Earth team found, while building a fully adaptive UI in one codebase did imply extra complexity, it was dwarfed by the user experience improvements gained by meeting each and every user exactly where they were.</p><p>You can try Google Earth’s new Flutter implementation today by downloading the app on Android or iOS, or visiting <a href=\"https://earth.google.com\">https://earth.google.com</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6db4661e7a17\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/extreme-ui-adaptability-in-flutter-how-google-earth-supports-every-use-case-on-earth-6db4661e7a17\">Extreme UI Adaptability in Flutter — How Google Earth supports every use case on earth</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-04-16T21:02:08.000Z":{"title":"Flutter and Dart at Google Cloud Next","link":"https://medium.com/flutter/flutter-and-dart-at-google-cloud-next-b4921946d0d1?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/b4921946d0d1","category":["dart","cloud","firebase","ai","flutter"],"dc:creator":"Kelvin Boateng","pubDate":"Tue, 16 Apr 2024 21:02:08 GMT","atom:updated":"2024-04-16T21:02:07.638Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<p>In case you missed it, the Flutter team attended <a href=\"https://cloud.withgoogle.com/next\">Google Cloud Next</a> for the first time this past week, a testament to Flutter’s growing impact within the development community.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*mlHluTwnXfWI-Yzy\" /></figure><p>We partnered with teams across Google Cloud, Firebase, <a href=\"https://verygood.ventures/\">Very Good Ventures</a>, and <a href=\"https://serverpod.dev/\">Serverpod</a> to deliver lightning talks, sessions, and a demo booth with a focus on streamlined workflows.</p><p>Here’s a review of what we shared in case you missed it.</p><p><strong>Fast Development with Firestore, Cloud Run, and Flutter<br></strong>We worked in real-time to develop a minimal viable Flutter app, backed by a Firestore database through a Google Cloud Run-powered API. You can learn more on how to do this yourself from these <a href=\"https://assets.swoogo.com/uploads/3784202-66185e868d8c1.pdf\">resources</a>.</p><p><strong>Harnessing Flutter, Firebase, and Gemini for Intelligent App Development<br></strong>We built a dynamic, real-world application from scratch using Flutter, Firebase, and Gemini, showing live how Firebase’s Firestore and Storage features streamlined data management and media handling. Watch a <a href=\"https://youtu.be/gr890xePN10\">recording of the talk.</a></p><p><strong>How to use Serverpod for Full-Stack Dart<br></strong>We showed how developers can use Dart on the server to share code and complement their Flutter app with <a href=\"https://serverpod.dev/\">Serverpod</a>, a full-stack Dart solution that uses code generation to create matching client-server code and a feature-rich Postgres ORM based on your schema. Check out <a href=\"https://www.youtube.com/watch?v=0bGpPU2vBRY\">this Observable Flutter episode</a> to learn more.</p><p><strong>Live-coding a Flutter app with Firestore<br></strong>We showed how Google’s <a href=\"https://idx.dev/\">Project IDX </a>makes it much easier to set up a development environment for Flutter! Check out Project IDX to get started.</p><p><strong>Developing full-stack apps and games with Flutter, Dart Frog, and Gemini<br></strong>Very Good Ventures (VGV) showed how to create an AI-powered game with Gemini and Flutter à la “choose your own adventure” style. Watch the <a href=\"https://www.youtube.com/watch?v=_NRDyKiVIa4\">talk now!</a></p><p><strong>How to use Dart Frog and Google Cloud to share code<br></strong>VGV showed how to get up and running quickly with <a href=\"https://dartfrog.vgv.dev/\">code sharing between your frontend and backend</a>, bringing up a full-stack project and getting it running on both device and in Cloud Run in a matter of minutes.</p><h4>In case you missed it</h4><p>Check out these announcements from Cloud Next that we think have the potential to help Flutter and Dart developers more easily build AI features in your apps.</p><p><strong>Firestore Vector Search support + extension launch<br></strong><a href=\"https://cloud.google.com/blog/products/databases/get-started-with-firestore-vector-similarity-search\">Vector search embeddings in Firestore</a>, along with the <a href=\"https://extensions.dev/extensions/googlecloud/firestore-vector-search\">Firestore Vector Search extension</a>, enable Flutter and Dart developers to turn Firestore data into a rich, searchable knowledge map, empowering highly innovative generative AI features. This opens the door to integrating AI-powered product recommendations, intelligent chatbots, and other sophisticated experiences directly into your Flutter applications when you use Firestore.</p><p><strong>Vertex Gemini Dart SDK private preview<br></strong>The Vertex Gemini SDKs are a set of client SDKs for Firebase that support Dart, Kotlin, Swift, and JavaScript. They are meant to accelerate development with easy access to Vertex AI services. Flutter and Dart developers can request access to the private preview on this <a href=\"https://docs.google.com/forms/d/e/1FAIpQLScIuowa37cp-yCCLOy9QAFYLVzBPXiU5x-mgENvVmn9OYLtYw/viewform\">Google form</a>.</p><h4><strong>Show us what you’re building</strong></h4><p>The future is bright for developers who want to build high quality cross-platform experiences powered by Google Cloud, and we want to see what you’re building. If you use Flutter with Firebase or any Google Cloud products or services, give us a shout on <a href=\"https://twitter.com/FlutterDev\">Twitter</a> and <a href=\"https://www.linkedin.com/showcase/flutterdevofficial/\">LinkedIn</a>!</p><p>If you’re just looking to get started with Flutter and Google Cloud, check out the following resources.</p><p><a href=\"https://dart.dev/server/google-cloud\">Documentation</a><br><a href=\"https://github.com/flutter/samples/tree/main/code_sharing\">Sample code</a><br><a href=\"https://www.youtube.com/watch?v=P1XzbpeD2GY\">Cloud Development tips (Video)</a></p><p>Until Next 😉 time — we can’t wait to see what you build!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b4921946d0d1\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-and-dart-at-google-cloud-next-b4921946d0d1\">Flutter and Dart at Google Cloud Next</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-04-16T17:51:09.000Z":{"title":"Accessibility in Flutter on the Web","link":"https://medium.com/flutter/accessibility-in-flutter-on-the-web-51bfc558b7d3?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/51bfc558b7d3","category":["accessibility","a11y","web-development","flutter-web","flutter"],"dc:creator":"Thomas Steiner","pubDate":"Tue, 16 Apr 2024 17:51:09 GMT","atom:updated":"2024-04-17T11:29:44.279Z","content:encoded":"<h4>How Flutter aims to make canvas-rendered apps accessible to users of assistive technologies</h4><p>One of the target platforms the Flutter framework supports is the web. Flutter applications guarantee pixel perfection and platform consistency through rendering all UI onto a canvas element. However, by default canvas elements are not accessible. This case study explains how accessibility support works for such canvas-rendered Flutter apps.</p><figure><img alt=\"Dash, the Flutter mascot, with a tablet and a drink.\" src=\"https://cdn-images-1.medium.com/max/1024/1*YhNtNltzEiKubvyWKUXKVw.png\" /></figure><p>Flutter has a large number of default widgets that <a href=\"https://docs.flutter.dev/ui/accessibility-and-localization/accessibility?tab=browsers#:%7E:text=Flutter%E2%80%99s%20standard%20widgets%20generate%20an%20accessibility%20tree%20automatically.\">generate an accessibility tree</a> automatically. An accessibility tree is a tree of accessibility objects that assistive technology can query for attributes and properties and perform actions on. For custom widgets, Flutter’s <a href=\"https://api.flutter.dev/flutter/widgets/Semantics-class.html\">Semantics</a> class lets developers describe the meaning of their widgets, helping assistive technologies make sense of the widget content.</p><p>For performance reasons, at the time of this writing, Flutter’s accessibility is opt-in by default. The Flutter team would like to eventually turn the semantics on by default in Flutter Web. However, at the moment, this would lead to noticeable performance costs in a significant number of cases, and requires some optimization before the default can be changed. Developers who want to always turn on Flutter’s accessibility mode can do so with the following code snippet.</p><pre>import &#39;package:flutter/semantics.dart&#39;;<br><br>void main() {<br>  runApp(const MyApp());<br>  if (kIsWeb) {<br>    SemanticsBinding.instance.ensureSemantics();<br>  }<br>}</pre><blockquote>Note: If your app absolutely requires to know if a user is using accessibility devices like screen readers, allow users to opt-in.</blockquote><p>Once you’ve opted in to Flutter’s accessibility support, the HTML changes automatically, as shown in the rest of this page.</p><blockquote><strong>Note:</strong> Screen readers are only one example of assistive technology that profits from the described approach. For improved legibility, screen readers are used as a proxy for this and other assistive technologies in general.</blockquote><h3>Flutter’s accessibility opt-in</h3><p>Flutter’s opt-in mechanism is a hidden button. It places a button, exactly speaking, an &lt;flt-semantics-placeholder&gt; element with role=&quot;button&quot; — which is invisible and unreachable to sighted users — in its HTML. It’s a custom element with styling applied so it doesn’t show and isn’t selectable unless you use a screen reader.</p><pre>&lt;flt-semantics-placeholder<br>  role=&quot;button&quot;<br>  aria-live=&quot;polite&quot;<br>  aria-label=&quot;Enable accessibility&quot;<br>  tabindex=&quot;0&quot;<br>  style=&quot;  <br>        position: absolute;  <br>        left: -1px;  <br>        top: -1px;  <br>        width: 1px;  <br>        height: 1px;&quot;<br>&gt;&lt;/flt-semantics-placeholder&gt;</pre><pre>/* `&lt;flt-semantics-placeholder&gt;` inherits from `&lt;flutter-view&gt;`. */<br>flutter-view {<br>  user-select: none;<br>}</pre><h3>Changes after the opt-in</h3><p>What happens when a screen reader user clicks this button? Consider a not too complex example like the <a href=\"https://flutter-gallery-archive.web.app/#/demo/card\">card</a> from the Flutter Gallery as displayed in the following screenshot.</p><figure><img alt=\"A classic card component with an image, a heading, and some text.\" src=\"https://cdn-images-1.medium.com/max/739/0*mhvYLQo_t9Sm_ecS\" /></figure><p>To better understand what’s changing when a user clicks the button, compare the before and after screenshots of Chrome DevTools when you <a href=\"https://developer.chrome.com/blog/full-accessibility-tree/\">inspect the accessibility tree</a>. The second screenshot exposes a lot more semantic information than the first.</p><p><strong>Before opt-in:</strong></p><figure><img alt=\"Chrome DevTools showing an “Enable accessibility” button.\" src=\"https://cdn-images-1.medium.com/max/485/0*Y_VjMeKGuxCGCkSs\" /></figure><p><strong>After opt-in:</strong></p><figure><img alt=\"Chrome DevTools showing a rich accessibility tree with headings, buttons, groups, etc.\" src=\"https://cdn-images-1.medium.com/max/486/0*dxy3KYQVwetiInqh\" /></figure><h3>Details of the implementation</h3><p>The core idea in Flutter is to create an accessible DOM structure that reflects what’s right now displayed on the canvas. This consists of an &lt;flt-semantics-host&gt; parent custom element that has &lt;flt-semantics&gt; and &lt;flt-semantics-container&gt; child elements that in turn can be nested. Consider a button widget, such as <a href=\"https://api.flutter.dev/flutter/material/TextButton-class.html\">TextButton</a>. This widget is represented by an &lt;flt-semantics&gt; element in the DOM. The ARIA annotations (e.g., <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/role\">role</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label\">aria-label</a>) and other DOM properties (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\">tabindex</a>, event listeners) on the &lt;flt-semantics&gt; element allows the screen reader to announce the element as a button to the user, and support clicking and tapping on it, even though it’s not a literal <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\">&lt;button&gt;</a> element. In the following screenshot the <strong>Share</strong> button is one example of such a button.</p><figure><img alt=\"Chrome DevTools showing an absolutely positioned `flt-semantics` element with role `button` for the Share button.\" src=\"https://cdn-images-1.medium.com/max/1024/0*5snhUrdCrAAauosx\" /></figure><p>This &lt;flt-semantics&gt; element is absolutely positioned to appear exactly at the position where the corresponding button is painted on the canvas. This is because Flutter owns the layout of all widgets and it precomputes the positions and sizes of every semantic node. Absolute layout allows placing the accessibility element exactly where the user would expect it. However, what this also means is that whenever the user scrolls, the positions need to be adjusted, which can be expensive in some situations.</p><figure><img alt=\"Chrome DevTools showing how the absolutely positioned elements get repositioned in realtime when the user scrolls.\" src=\"https://cdn-images-1.medium.com/max/1024/0*pF3_jPjWNcie3LH0\" /></figure><h3>Expanding the approach to all default widgets</h3><p>Since Flutter knows that what is represented as &lt;flt-semantics role=&quot;button&quot;&gt; in the DOM structure in the Flutter source code originally was a Flutter <a href=\"https://api.flutter.dev/flutter/material/TextButton-class.html\">TextButton</a>, it’s relatively easy to expand the approach and create a mapping from all the existing <a href=\"https://docs.flutter.dev/reference/widgets\">Flutter widgets</a> to the corresponding <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA roles</a>, which is exactly what Flutter does out of the box for all its default widgets. For example, Flutter supports the following roles today:</p><ul><li>Text</li><li>Buttons</li><li>Checkboxes</li><li>Radio boxes</li><li>Text fields</li><li>Links</li><li>Dialogs</li><li>Images</li><li>Sliders</li><li>Live regions</li><li>Scrollables</li><li>Containers and groups</li></ul><p>Note that even though the list of roles is short, many different categories of widgets frequently share the same role. For example, Material <a href=\"https://api.flutter.dev/flutter/material/TextField-class.html\">TextField</a> and <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoTextField-class.html\">CupertinoTextField</a> can share the same text field role. Most layout widgets, such as Stack, Column, Row, Flex, etc., can all be represented by a container/group.</p><h3>Challenges with custom widgets</h3><p>When building a custom widget, Flutter may not be able to automatically apply a correct role to it. If a widget is simply a decorated variant of an existing widget (e.g., a wrapper over <a href=\"https://api.flutter.dev/flutter/widgets/EditableText-class.html\">EditableText</a>), it may present itself correctly (as a text field). However, if you are building a widget from scratch, Flutter expects you to use the <a href=\"https://api.flutter.dev/flutter/widgets/Semantics-class.html\">Semantics</a> widget to describe its accessibility properties. WAI-ARIA defines many different widget roles. Flutter only supports a subset of roles, although this subset is continuously growing.</p><p>For example, you can explore the team class picker live in the <a href=\"https://flip.withgoogle.com/\">I/O Flip game</a>, as shown in the following screenshot. In web terms, it’s essentially a &lt;select&gt;, or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role\">listbox</a>in WAI-ARIA terms. And while the available options are represented as <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/generic_role\">generic</a>texts (they should rather be <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/option_role\">&lt;option&gt;</a> elements), an even bigger problem is that it’s not clear from the accessibility tree that there are more options to choose from but that are outside of the viewport of the widget. Note the available options in the accessibility tree before and after scrolling.</p><p><strong>Before scrolling:</strong></p><figure><img alt=\"Chrome DevTools showing the selectable items of a name selector widget in the accessibility tree. It’s cut, though, and doesn’t show all options that are visible after scrolling.\" src=\"https://cdn-images-1.medium.com/max/853/0*fouBgFDZseB3agw8\" /></figure><p><strong>After scrolling:</strong></p><figure><img alt=\"Chrome DevTools showing the selectable items of a name selector widget in the accessibility tree, this time after scrolling. It’s cut, though, and doesn’t show all options that were visible before scrolling.\" src=\"https://cdn-images-1.medium.com/max/1024/0*wY_EYxQGJey5Vn4f\" /></figure><p>If you look at the <a href=\"https://github.com/flutter/io_flip/blob/a128c2ed1afcfbbd79edf2dfc21682bcc0dc3067/lib/prompt/view/prompt_form_view.dart\">source code</a>, you can see that it doesn’t use the <a href=\"https://api.flutter.dev/flutter/widgets/Semantics-class.html\">Semantics</a> class, since Semantics doesn’t support the listbox and option role annotation use case yet. But it does use a <a href=\"https://api.flutter.dev/flutter/widgets/ListWheelScrollView-class.html\">ListWheelScrollView</a>, which is similar to a regular <a href=\"https://api.flutter.dev/flutter/widgets/ListView-class.html\">ListView</a>, so it knows it’s dealing with a list. Note, though, how the accessibility tree only ever shows the now visible items, plus a few items above and below the viewport, but never all items. (This is a common app performance trick that we almost got natively on the web, too, in the form of a <a href=\"https://github.com/WICG/virtual-scroller\">&lt;virtual-scroller&gt;</a>.)</p><figure><img alt=\"Chrome DevTools showing how the selectable items in a listview get refreshed in realtime in the accessibility tree when the user scrolls.\" src=\"https://cdn-images-1.medium.com/max/1024/0*506M98hmpxgRJFd7\" /></figure><p>Compare Flutter’s accessibility tree to that of the <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/examples/listbox-scrollable/\">scrollable listbox example</a> from the <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/\">ARIA Authoring Practices Guide</a>, where all options are shown in the accessibility tree, even those outside of the viewport. Not fully supporting this listbox use case is at the time of this writing a shortcoming of the Flutter solution that will get addressed in the future.</p><figure><img alt=\"Chrome DevTools showing the accessibility tree of a class HTML `select` element where all items are always announced, independent of what’s visible and what position the element is scrolled to.\" src=\"https://cdn-images-1.medium.com/max/1024/0*clEvyPhHbCFI71Wc\" /></figure><h3>Text editing</h3><p>Flutter has an &lt;flt-text-editing-host&gt; element that has either an &lt;input&gt;or a &lt;textarea&gt; as its child that it places pixel-perfectly onto the corresponding canvas area. This means browser conveniences like autofill work as expected. This feature is always enabled, independent of whether accessibility is enabled or not. In the semantics tree, the text field is represented by an &lt;input&gt; element, potentially with an ARIA label describing it. The following <a href=\"https://flutter-gallery-archive.web.app/#/demo/text-field\">text field</a> example is from the Flutter Gallery. See how the &lt;input&gt; field is dynamically repositioned whenever the user presses the tab key.</p><figure><img alt=\"Chrome DevTools showing how an HTMLtext input field is dynamically repositioned pixel-perfectly over the corresponding canvas-rendered text input fields when the user tabs between the input fields.\" src=\"https://cdn-images-1.medium.com/max/1024/0*MeogiafDXLMMaxtX\" /></figure><p>While for sighted users the label texts displayed in the text inputs are visible, for screen reader users the text fields are announced as “edit, blank” with <a href=\"https://www.nvaccess.org/about-nvda/\">NVDA</a> on Windows or “edit text, blank” with <a href=\"https://www.apple.com/voiceover/info/guide/_1121.html\">VoiceOver</a> on macOS, since Flutter at the moment doesn’t create &lt;label&gt; elements yet. You can see VoiceOver’s screen reader output at the bottom of the images. This is something Flutter will fix in the future.</p><figure><img alt=\"Screen reader output rendered to the screen showing the screen reader ignores the user-visible labels and announces just a blank text field without context.\" src=\"https://cdn-images-1.medium.com/max/662/0*UpUS0j53XBPfPB8j\" /></figure><p>When text fields are properly labeled, the screen reader announces the intended meaning, as depicted in the following pure HTML example.</p><figure><img alt=\"Screen reader output rendered to the screen, this time for a classic HTML form, showing the screen reader respect the user-visible labels and announce the text fields with context.\" src=\"https://cdn-images-1.medium.com/max/662/0*X8hvqa_bbwsEtV-P\" /></figure><h3>Conclusions</h3><p>This case study has delved into the intricacies of how accessibility support functions within Flutter canvas applications on the web. Flutter’s accessibility unfolds through a hidden button with specific attributes and styling. Upon activation, this approach significantly improves the experience for users relying on screen readers and other assistive technologies. The core concept in Flutter involves creating an accessible DOM structure that mirrors the canvas display, utilizing custom elements such as &lt;flt-semantics-host&gt;, &lt;flt-semantics&gt;, &lt;flt-semantics-container&gt;, and others.</p><p>While Flutter adeptly maps default widgets to WAI-ARIA roles, the team acknowledges some remaining challenges. The exploration of text editing in Flutter showcases the trick with the &lt;flt-text-editing-host&gt; with &lt;input&gt; or &lt;textarea&gt;, demonstrating dynamic repositioning of input fields.</p><p>Looking ahead, there are opportunities for further refinement of Flutter’s accessibility framework that the team has already started working on. This includes addressing the listbox use case for custom widgets and enhancing label element creation for text editing. These anticipated enhancements aim to deliver a more encompassing and seamless accessibility experience, reflecting Flutter’s commitment to continuous improvement of its web compilation target.</p><h3>Acknowledgements</h3><p>This case study was reviewed for accuracy by <a href=\"https://www.linkedin.com/in/yegorjbanov/\">Yegor Jbanov</a>, <a href=\"https://www.linkedin.com/in/kevmoo/\">Kevin Moore</a>, <a href=\"https://www.linkedin.com/in/msthomsen/\">Michael Thomsen</a>, and <a href=\"https://www.linkedin.com/in/shams-zakhour-84a9b31\">Shams Zakhour</a> from the Flutter team. The editorial review is courtesy of <a href=\"https://rachelandrew.co.uk/\">Rachel Andrew</a> and <a href=\"https://www.linkedin.com/in/shams-zakhour-84a9b31\">Shams Zakhour</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=51bfc558b7d3\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/accessibility-in-flutter-on-the-web-51bfc558b7d3\">Accessibility in Flutter on the Web</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-04-04T18:01:55.000Z":{"title":"Global Gamers Challenge: Top 20 Revealed!","link":"https://medium.com/flutter/global-gamers-challenge-top-20-revealed-1982879b48d0?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/1982879b48d0","category":["announcements","flutter-app-development","competition","flutter"],"dc:creator":"Kelvin Boateng","pubDate":"Thu, 04 Apr 2024 18:01:55 GMT","atom:updated":"2024-04-04T19:07:35.215Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h4>The Global Gamers Challenge is nearing its conclusion, and it’s time to unveil the 20 projects progressing to the final round of judging.</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3a0UYlMSfs-7N9fq\" /></figure><p>It’s been incredibly inspiring to see thousands of developers work together to develop epic games for the planet with Flutter and Dart over the last 9 weeks. Entries included RPGs, platformers, AI-powered, and more. Your creative ideas spanned continents, genres, formats, platforms, and even galaxies!</p><p>Your creativity never fails to amaze us, so our panel of Flutter judges had some tough decisions to make as they evaluated hundreds of games from talented developers, designers, artists, and activists from every corner of the globe. Without further ado, here are the Top 20!</p><h3>The Big Reveal!</h3><p>Drumroll please! Here are the 20 projects moving on to the final round:</p><ul><li><a href=\"https://globalgamers.devpost.com/review/submissions/enlLZWd3d1lwWTk3b0lTanhXbDcxcmpnRG9ydTBrcWgrVGZmWFI2R0NNMW9hRjI3NHhrdW1LMlBkU1lqWDZJOUQ2WnlSUVJPQ3B3aDRmM20xTTVFMDNHQXdqZmszVHVjM0ZHN2xCdHRBeHc9LS0zOG11OXMxMkU5dVFxSlJQSkJScDdBPT0=--e11a994803647f9d016701bd2cf338a94fb9e4e2\">Better World</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/ZTNIa002Z212RWE1N3VKYXdyK0EyVjVoYUxadFVJOU5HQTZFNk4wNHFMQ1BLbHZCcDBjOGpublh6ZGFjNWdQVGt5azYzT0pmRDhwQXRoaWlRNytjT3BxeUV1UFF4Tm1nWGM5ZWJOV0cxc2c9LS05dS9nWnF0QjV3OGpQSmhsdVdQNUdBPT0=--c4f5738e6bb6c62e468daadcdb4f7984df8b994c\">Bin It Right</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/eHNnUmpnV0sxWlA5RTlXazNoT0RjTVlldy9iaXJHY1N4Q0NpMFhTRU5vc1hsUGgyTldtZ2hNaEhiS3lmeFZNRGFIdzI2Y3VnRHdzc083dThhalpLY3hUTmZEYXRiNWFxd29wM3hNTHBXbHM9LS1lL0RiWWhlUUxSdDdKZXE5cGJ5UW13PT0=--57d7e84271214ea300127a0e83ea64a1a692d56c\">Craftown</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/V2hQQitXY1FFV2N3TUJWS1FrRTVnUzFYV0hQVWo2Y0dTTU1NdHZWL25iR2VndUFwNkFjWkVXNEJHaXk2NWRrYzl5UDBpSkd3bFVOMDZPWm85ZGxvK203cC9QOXQweVVxbUZ2c3VzNFUwV289LS0xbUJNb25iaFFSRGptT1Z4aW9MTmdRPT0=--4788773139af2e54ffe258b8b1488ad313514fca\">EcoShift Chronicles</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/S0lJMkQrSzViVjQxT1Jsa1ZCSkNaaTIzajNUMVI3TEx5c1RsbUxFbTM2dHZjY1l0YUxqM0NMQlViODBCUEN0U2JpVVI0VVhxQ2lxNGpiQjhKanYzanZVd2kyL2tCbjlKeTQ2U0pOVFVNelU9LS1EREF5NFJiT2YyS3JpZVRoR2Ezam5nPT0=--1318da02bb7f68768ff57cc2c4b2f08a73bfeec1\">Escape From Heat Island</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/SEpSdVVkb1J5dUFPZGlHcUJtWTI5eWRKM0FUZTVUbUIydTgwWU9qRU5vTlBxOFJIdXNRTGszNEFoQnpxL21uSk4zZUR5RmtCT0U1cVdXVEdOUldDUTlLL2hMWlFKcW92ZmkyRkR6dU1hTFk9LS1oVlpBM2hDWjJ6L25TNFFET0NqcW1nPT0=--b19149b1358c52b67238c81a3b0531d95d1c676a\">Gomiland</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/UHZCNC9wUG9Qd2NJakYxMkZ5YTZucjZCNGZVbXZGeWN3b0FXSFphbmYxdkNZWEdyRkllRjIwenB1cW1NVWhrQVFnMmsxSXlNSXJWbUFzVndUS2NoR201TFBJZVkySjVCRndzeURyQThHanc9LS1Yc1JQbkdsZkQxaUM5Y0M5elRVQ1pnPT0=--2f95599fcbeb41f022bde22e42ec6f3d92663fc7\">Green Capitalist</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/T1JpMmMxQjU3aG1NRk53OXQzWWZ1b2Vpd3ZrTWZsaFRweVZTQlExOFZkZDlvNkgyUW5tamt6WmNTakh4Zi9lUUFsaTY5Tm42OTNlNGZjYWl3Szk0Y2d6MTlrcll4RXpkc3pzMU53em1IUzQ9LS1MdkFZYnAzVWRKWWdLVE1UMUJDeG5nPT0=--1316df99b2d96029da5b27a13659d9d32010a223\">Last Bottle</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/ZVM2RVBaQlUyTmxoamxPZlByVTdYWmJZeGNYaWNtVDJsZU1kN0F3MzRPaVBBL1VUQTgrOTFoOFVrdmtGdDkxR0pXVThyeTJXdElKVlR2dVJ6aUVRRTFOb3VwV0o1MzJDRHJYNlpVd1U1M3c9LS1NM3B3OTBERWlZSWZPdmovTlpUbUlRPT0=--f2a60f8f9cbc7dfb3f34b6933b09a2091da0e863\">MGame — A waste management game</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/aWcvcmo2VExlMjh4QTJwb3Bqbmxma2tsKzhBaDBYdXNuU0N4YTFuL1lWNkI4d1BjZThqdG5wb05uNUFnblZaZTNRY2hVWnJtUUpNTDZCdTdESktuQjlhRGQ4SG9rVURnMU9vbzV1V1l1bGc9LS1hb2w3RjUvQ3ZnTFZqU0Fha1hyTXZBPT0=--3826cbc4d405d18dc05c2fca5a7ea20d6d0d84e7\">Ocean Ranger</a>s</li><li><a href=\"https://globalgamers.devpost.com/review/submissions/dnZ0ZDU5aWJWWFJ3ZkkrNVp2Y3hYeWwvN0ZYSXBSZG0xelhBdG5CZ2d4ZmUzK0JMSFNkSm56S09BOXY2ZHVGS0EwMzJqUzVEVk85V0hJL25pNTRMYThjVE9vR1ZxMThqaS9NL05UUndXU3c9LS1YRElEZTg0ME10ME9NblhqV2hVTXd3PT0=--19f36428769b3c76b639dcc1b1b083a6b8f452fb\">Ofeka Earth</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/aFRPak8rVjZGd2t2RGFqb3ZvREpBYnYxM1J1M2ZHWVlNNzZ0ZVIxQ0ZnMXVZYVcvSVlYc2dlbTZ1OXNJTE5DUUpmY2FDbEg1WkZqYVo1eGtrL0dYb1lFVk4zMjQ1SXY0UU1BZkhPUFZYNlU9LS1NTHc5T3NLbnIyVG9wV0puYVlhcEhnPT0=--2cc59a62faacb6e4f070d15ede9dd3cc5e4f1f0b\">PlasticPunk</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/dldUUUNMSFpjUnVDQ3FzZHJRRldTVVc5dkpvYldDV3V5V0tPODg5WnBtb0Z5ODV6SG9aMGtMNlIzbHdLNVdWUyt4ZGZWWUlybksyZlFDVHJRNDFuc3JuMkRRTW41MGtycnhSaWdncXVIMkE9LS1RNTFtdUFvR1A0ZkxZRTRtdDErN2dBPT0=--4451922054b1b673ba4ab0615c7c968399dbd3bd\">Recyclo</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/TDI1cEVFSVBZelZtR2hsMEVTZWFWYTUwa1FYeldWSDFwdkIvckZKdFhMSUZrRlY4aUlWNVRCQVJPSG1lSWZ3a1liZks2cjVPNmlCSlJEZDg0QXhjU1ZjdVdHN2ZTZjlHV2lMUlRPK2lvTzQ9LS1ESG5wTG9oS2J1UnBsMWNHVWlwbnZ3PT0=--76148d0a4646534a5695130f1db1d728c7f6ac5a\">Scuba Sweep</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/eVI0blRPZ3R1SkV6MUdtMXNmeGdWU21ONEloV2NwSS81QUtOYWxUZDlPMTI2bG1xTXdoWGFNRTRkWVZQRFV0ejJxbDF6aDRyK2dsM2l6cEhpQmI5ekhLNENmdjVKc1ZKMWpvaVlYWE41YnM9LS1CYXFnMnI2aDRCcVVYL3VVWXdFWUl3PT0=--81ee42d6ae67ee20e733d471a7fd5f9c4fd03ab6\">Sinking Earth (Thinking Us)</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/WFFkRy9XOE0xc0F1NzVpbkVVdzZoSWxzMmM0WlZ0dWpjeXZVUEhmSExKWFhDRExVNFY5Tm9nVkphcVdTa2NPeitoQ09OTElFMUlyYWJ2elN2cm1xWjRtaXZZcXAzdVJJdGRkZE9VVjBmVms9LS1Xc1dhOGRiM2FhUnd2NkpkMy93NDRRPT0=--756045c57682c3a3e663876f4fe0f78a445b1885\">Socket Tower</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/bXhaM2xmN3lpSTdkMytjeVpHOVhCdy9LRkdQcFpLeUpvZVJLdEtFbUhYVGtxb0NEbXZxWEdBcm5rSG1yZWtQQ1J4UXNZZXVIZlZGNDlnRms4NUJ5cFhZZ2FuckFOS3Rmai9jTlFIZGRwbHc9LS0wV2lBT29mam90d0xRcjNzNm5Zb1VBPT0=--5118b6c9045e73bfd35050599b959726b1c1a237\">The Shady Story: Recycling</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/eTN0dGVHRVZLRlZpQndUVG4rL1pVbXhtNnREQWFLeFNTdFNJTzQ3RTRDSDdsNHlsbzFSUHlITW1CQzk1Q1F1QUZ0UWw5Y1paSVlWSUJMUEdLbDZnOFBhQ0QwVWxhRExWOEZHQkx5R0d6Snc9LS1YRHBSM0Q1TUIxalhXK2xsWmd2V0t3PT0=--7f63c9da364e949fd376b8b1777d1c6c44cf627a\">Waste Wise</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/SWRGWEEzQmZQSkRlSWp3M2VPYmxpMGk0NnhuNEJ0VGtjQ29pSUY3NXRRK1B6VnlRUC85ZytRakpBeW92Zi9HemZRMFhpM2ZOQmFiSEhody9VbHNlR1F1a0FXcWVJWENqVTUzMHlha0lKcGc9LS0yODlkY0J5SHhEdDJLaVNVOG5pS1ZBPT0=--6ebd73c62cc6042aa07aeb529b1d9fa3a6c15ebb\">Whaley’s Bins Waste Sorting</a></li><li><a href=\"https://globalgamers.devpost.com/review/submissions/ZmNDMlJweVI2cGE3WTNnUUZDK21XSVhTRWUrL1RKQnQ0VTJzT1BpOWRSaFBZSTErK28veTBsbFliSzA4dVJoM1N0Wk8vUnZuQkJnOE5vTDhxMHl6QjNyRURoVll3cVpxcGdVS0UxeGdJYkk9LS0ydnlWNVJOcFFRWWhqc0w4NVRDSkp3PT0=--88495cf408930c8e6cace121f602b55550131898\">WildRun</a></li></ul><h3>What’s next?</h3><p>It gets even more exciting from here! The final panel of judges, representing Global Citizen, the UN Playing for the Project Alliance, Google Play, YouTube, and the Flutter community, will choose our 10 finalists. The Top 10 will be announced in May 2024.</p><p>In the meantime, starting April 22nd, you get to vote for your favorites! Head over to <a href=\"http://globalgamers.devpost.com\">globalgamers.devpost.com</a> to cast your vote and help determine our Community Choice champs!</p><h3>Thank you and keep building!</h3><p>Thank you from the bottom of our hearts to everyone who participated, and a huge congrats again to our Top 20! And from all of us at Google and Global Citizen — keep dreaming big, keep coding, and keep fighting for our planet, one amazing game at a time!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1982879b48d0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/global-gamers-challenge-top-20-revealed-1982879b48d0\">Global Gamers Challenge: Top 20 Revealed!</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-03-20T16:02:21.000Z":{"title":"Flutter takes the stage at GDC","link":"https://medium.com/flutter/flutter-takes-the-stage-at-gdc-b4e14900d606?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/b4e14900d606","category":["games","flutter","mobile-app-development"],"dc:creator":"Zoey Fan","pubDate":"Wed, 20 Mar 2024 16:02:21 GMT","atom:updated":"2024-03-20T16:02:20.593Z","content:encoded":"<p>Last year saw a <a href=\"https://medium.com/flutter/building-your-next-casual-game-with-flutter-716ef457e440\">major update to the Flutter Casual Games toolkit</a>. This week, Flutter made its <a href=\"https://schedule.gdconf.com/session/google-developer-summit-building-multiplatform-games-with-flutter-presented-by-google/903077\">debut</a> at the <a href=\"https://gdconf.com/\">Game Developers Conference</a> (GDC) in San Francisco, the game industry’s premier professional event, championing game developers and the advancement of their craft. Read on to see progress developers have made building games on Flutter, and what’s in store for the future of Flutter game development.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*zVBJt_90TX8KEYoD\" /><figcaption>Flutter for Games hero image</figcaption></figure><p>Since the launch of the <a href=\"http://flutter.dev/games\">Flutter Casual Games Toolkit</a>, Flutter has made strong progress within the game development arena. More than 15,000 new mobile games have been developed with Flutter in the last 12 months.</p><p>Flutter has proven to be an appealing option for game apps of all sizes, empowering both first-time game devs like <a href=\"https://github.com/tty215\">Tatsuya</a>, who used Flutter to create <a href=\"https://play.google.com/store/apps/details?id=com.ttydev.tiniesmerge\">Tinies Merge</a> in his spare time and secured a spot as a top 20 finalist at <a href=\"https://android-developers-jp.googleblog.com/2023/07/IndieGamesFestival2023.html\">Google Play’s Indie Game Festival</a>, to the teams behind popular titles such as <a href=\"https://play.google.com/store/apps/details?id=com.etermax.preguntados.lite&amp;hl=en_US&amp;gl=US\">Trivia Crack</a>, which has hundreds of millions of downloads across the globe!</p><h3>Why Flutter for Games?</h3><p>Flutter offers compelling advantages for 2D casual games, particularly interface-driven or turn-based titles. The fact that it’s open-source eliminates licensing fees, provides deep control over game mechanics, and grants access to a rich plugin ecosystem. Flutter’s “hot reload” feature accelerates development, while its optimized engine ensures smooth performance across devices, including browsers. With the ability to build once and deploy cross-platform, including iOS, Android, web, desktop, and <a href=\"https://play.google.com/googleplaygames\">Google Play Games for PC</a>, Flutter streamlines your game’s reach. So, if you’re a game developer, don’t overlook Flutter’s potential — try Flutter for your next game and help us spread the word!</p><h3>2024 and beyond: building the Flutter Game Development ecosystem together</h3><p>In 2024, we’re dedicated to empowering you to create amazing casual game experiences with Flutter. We’ll focus on:</p><ul><li><strong>Streamlining development:</strong> Expect expanded game development resources like templates, plugin-integrations, and in-depth guides to speed up your workflow and unlock Flutter’s game development potential.</li><li><strong>Expanding your reach:</strong> We’re working to make deploying Flutter games on the web and other platforms even smoother, opening up new audiences for your creations.</li><li><strong>Foundations for the future:</strong> While 2D mobile game support is our main focus, we are keen to explore 3D capabilities as a part of <a href=\"https://github.com/flutter/flutter/wiki/Flutter-GPU\">Flutter GPU</a> effort. Follow some of our <a href=\"https://github.com/bdero/flutter-scene-example/tree/gdc2024\">early experiments</a> to see our progress.</li></ul><h3>A special thank you to the community</h3><p>We are incredibly grateful to the community for your unwavering support and significant contributions, which have fueled Flutter’s remarkable growth in the game development space.</p><p>We are in awe of your work, and incredibly thankful for the many brilliant contributions, including:</p><ul><li><a href=\"https://github.com/luanpotter\">Luan Nico</a>, <a href=\"https://github.com/spydon\">Lukas Klingsbo</a>, <a href=\"https://github.com/erickzanardo\">Erick Zanardo</a>, <a href=\"https://github.com/renancaraujo\">Renan Araujo</a>, <a href=\"https://github.com/radicaled\">Arron Washington</a>, <a href=\"https://github.com/st-pasha\">Pasha Stetsenko</a>, <a href=\"https://github.com/wolfenrain\">Jochum van der Ploeg</a>, <a href=\"https://github.com/feroult\">Fernando Ultremare</a>, <a href=\"https://github.com/ufrshubham\">DevKage</a> (<a href=\"https://flame-engine.org/\">Flame</a>): Your work on the Flame engine and its related projects has been transformative for Flutter game development.</li><li><a href=\"https://github.com/RafaelBarbosatec\">Rafael Barbosa</a> (<a href=\"https://bonfire-engine.github.io/#/\">Bonfire</a>): Your powerful and versatile game engine is a fantastic tool for building RPG-style games.</li><li><a href=\"https://github.com/filiph\">Filip </a>Hráček: Your templates and tutorials provide an invaluable starting point for many new game developers.</li><li><a href=\"https://github.com/subhash279\">Jeff Ward</a>: Embedding Dart in other game engines opens up exciting possibilities.</li><li>The amazing team at @VeryGoodVentures: Your beautiful games and willingness to share the best practices raise the bar for everyone.</li><li><a href=\"https://github.com/Abedalkareem\">Abedalkareem Omreyh</a> (<a href=\"https://pub.dev/packages/games_services\">game services</a>), <a href=\"https://github.com/Gustl22\">August</a>, <a href=\"https://github.com/subhash279\">subhash279</a> (<a href=\"https://pub.dev/packages/audioplayers\">audioplayers</a>), <a href=\"https://github.com/alnitak\">Marco Bavagnoli</a> (<a href=\"https://pub.dev/packages/flutter_soloud\">Flutter SoLoud</a>) and <strong>countless others</strong> who create essential packages: The foundation you provide is what makes complex and engaging games possible with Flutter.</li></ul><p>This list barely scratches the surface of the talent in this community. To everyone we couldn’t name individually: your contributions are deeply appreciated, and you make Flutter a vibrant place for game development!</p><p>Meanwhile, we would also like to extend our deepest thanks to our developers who have launched games using Flutter. Your creativity and passion inspire us to continue pushing the boundaries of what’s possible, making Flutter an even more powerful tool for developers worldwide.</p><p>Flutter’s journey as a game development platform is just beginning. We’re committed to growing alongside the community, listening to your feedback, and building the tools you need.</p><p>We can’t wait to see what you build!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b4e14900d606\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-takes-the-stage-at-gdc-b4e14900d606\">Flutter takes the stage at GDC</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-02-19T19:01:58.000Z":{"title":"How Flutter facilitates collaboration between designers and developers at L+R","link":"https://medium.com/flutter/how-flutter-facilitates-collaboration-between-designers-and-developers-at-l-r-05ec82c9f45e?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/05ec82c9f45e","category":["flutter-app-development","flutter","global-citizen"],"dc:creator":"Ivan Leider","pubDate":"Mon, 19 Feb 2024 19:01:58 GMT","atom:updated":"2024-02-19T19:01:57.892Z","content:encoded":"<p>You might be familiar with <a href=\"https://www.globalcitizen.org/en/\">Global Citizen</a> (GC), an organization dedicated to ending world poverty and helping the planet. When GC wanted to rewrite a mobile app to help with this effort, they reached out to our studio, <a href=\"https://levinriegner.com/home\">L+R</a>, to collaborate on designing, building, and launching the app simultaneously on Android and iOS.</p><p>Flutter’s flexibility, pre-built widget catalog, and robust animation capabilities allowed the L+R team to implement a design-led development process. When using Flutter, our developers have a blank canvas to bring custom designs to life. For L+R, this means our design teams can unleash their creativity to create user-centric apps that look and feel great.</p><p>Here are a few screenshots from the Global Citizen app:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/738/0*wuezwMGAnC91NBTJ\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/738/0*dv6mhmjDb4HP59LA\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/738/0*KD5yX1QHIghjtf78\" /></figure><p><strong>The design process</strong></p><p>When starting a new client project, the designers first create a design system in Figma. This consists of brand guidelines — like color palettes and typography — and small reusable components.</p><p>When starting on the Global Citizen app rewrite, the design team expanded upon the existing guidelines to provide a fresh look with higher-contrast elements. Not only does this help to direct the user’s attention but it also improves accessibility.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DwbyxOv8yHSp1aFb\" /></figure><p>UI elements are created as <em>components</em> in Figma. Each component may have different <em>variants</em> depending on component type or state. For example, the following diagram shows several button variants:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/572/0*JXYimUKJxblL6LYA\" /></figure><p>When developing new components, the design team referenced the Material and iOS design kits in Figma for inspiration. This helps with translating the design to code as these Figma components closely correspond to widgets available in the Material and Cupertino libraries.</p><p>Throughout the design process, the team composed the small, reusable components to form larger feature-specific components that were then combined into entire pages. This empowered Global Citizen’s product team to expand the app with new functionality while remaining true and consistent with the original vision.</p><p><strong>Project template</strong></p><p>At L+R, our team has been working with Flutter since its first public release. To make building Flutter apps fast and easy for our team, we’ve created an <a href=\"https://github.com/levin-riegner/flutter-template\">open-source repository</a> that serves as a project template and provides the cornerstone for all Flutter apps that we build.</p><p>This barebones project contains a set of widgets that can be customized and used in our client’s applications. For example, the buttons represented in the Figma design file (shown above) can be built using the _BaseButton class from the project template. This class accepts different colors, text styles, and padding to best match the design system set for that project.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/638/0*ApRsUADr-G3HYMzY\" /></figure><p>,</p><p>To make it easy to style these components based on the brand guidelines, we use the ThemeData class. Developers take the color schemes and text styles from Figma and map them to the corresponding theme properties.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/888/0*DOvyVLAckVSQqoax\" /></figure><p>Our team leveraged the existing properties in ThemeData as much as possible, and then used the ThemeExtension functionality to complete the remaining configurations.</p><p><strong>Flutter’s widget library</strong></p><p>As mentioned above, the project template contains a set of reusable widgets. When developing these, we try to use pre-existing widgets from the Material and Cupertino libraries as much as possible. In the Global Citizen app, about half of the components descend from Material or Cupertino widgets.</p><p>For example, the TextField and TextFormField widgets from Material contained all the necessary customizations and functionality needed to match the designs. The TextButton from Material was also used to implement the _BaseButton widget. In this case, we took advantage of TextButton’s existing highlight functionality, but we wrapped it into a new widget with extended functionality to better suit our needs.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BrVLb8vUnOxCenlR\" /></figure><p>Having these out-of-the-box UI components that can easily be styled makes it easier to build and maintain our widgets. However, sometimes our designers create custom components that can’t be recreated using Flutter’s Material or Cupertino widgets. In these cases, the development team creates our own custom widgets from low-level Flutter widgets.</p><p>One example from the Global Citizen app was progress indicators. For this app, our designers created a custom progress indicator as shown in the following GIF. The existing Material and Cupertino progress indicators didn’t work for this design. However, it was easy for our developers to create an entirely new widget using only containers, rows, and columns with intrinsic animations.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/350/0*FSZ6UZM2gdxag6tr\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ecO_ptzWhoeP60fp\" /></figure><p>Community libraries were also incredibly useful for more complex and flexible components. For example we used a community- built <a href=\"https://pub.dev/packages/another_flushbar\">flushbar</a> to display alert notifications inside the Global Citizen app.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/745/0*vMiJl709u8ABpUE3\" /></figure><p><strong>Hot reload</strong></p><p>When translating the Figma design to Flutter code, it’s important for designers and developers to collaborate. Designers often have feedback that results in small tweaks to styles, layouts, or animations. Hot reload made this collaboration much more efficient.</p><p>With hot reload, developers can tweak the code while screen-sharing with the design team (either during the UX phase, UI concept phase, front-end implementation stage, or even the design-QA stage). While screen sharing, the designer can instantly see the results of changes. This makes debugging and iteration much faster.</p><p><strong>Smooth animations</strong></p><p>One thing that helps an app feel polished is adding thoughtful animations. Flutter’s animation framework is flexible and powerful, however it can be difficult for designers to understand. One thing that helped our team was to reference beautiful animations in open source apps. Specifically, we looked at the codebase for the <a href=\"http://wonderous.app\">Wonderous ap</a>p. We’ve since leveraged the open-source library, <a href=\"https://pub.dev/packages/flutter_animate\">flutter_animate</a>, that powers Wonderous to add simple yet enriching animations to key functionalities.</p><p>The video in the following link highlights part of the “Take Action” flow, where the user navigates through a series of informative screens to learn more about the issue.</p><p>Check out the <a href=\"https://drive.google.com/file/d/1OmILf7hZZHbnWbaC6BN-EopYDmQtEOmp/view\">action_learn_animations</a> video.</p><p>Using flutter_animate, we were able to do the following:</p><ul><li>Animate the step indicator as the user moves forward</li><li>Add a slight fade transition between pages</li><li>Transform the <strong>Play Video</strong> button into a success checkmark after viewing the video</li></ul><p>Overall, Flutter allows a flexible approach to design and development. Flutter’s pre-built widgets make it easier to create reusable UI components that can be styled to match a customer’s branding. The Flutter community plays an important role in how the technology matures, offering high quality libraries and expanding the available resources. Key Flutter features like hot reload supports better collaboration between designers and developers. All of these put together result in an app that is both beautiful and functional!</p><p>For more information about the app, check out <a href=\"https://www.globalcitizen.org/en/content/new-global-citizen-app-impact-activism-every-day/\">The New Global Citizen App: Daily Activism &amp; Measurable Impact in Your Pocket</a>. You can also <a href=\"https://www.globalcitizen.org/en/app/download/\">download the Global Citizen app</a> to your mobile device.</p><p><a href=\"https://levinriegner.com/home\">L+R</a> is an international strategy, design, and mobile technology studio. We offer many services like UX design, mobile development and strategy consulting.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=05ec82c9f45e\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-flutter-facilitates-collaboration-between-designers-and-developers-at-l-r-05ec82c9f45e\">How Flutter facilitates collaboration between designers and developers at L+R</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-02-15T19:31:48.000Z":{"title":"What’s new in Flutter 3.19","link":"https://medium.com/flutter/whats-new-in-flutter-3-19-58b1aae242d2?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/58b1aae242d2","category":["flutter-app-development","flutter","release-notes","announcements"],"dc:creator":"Kevin Chisholm","pubDate":"Thu, 15 Feb 2024 19:31:48 GMT","atom:updated":"2024-02-15T22:35:02.380Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZX3bHJdGGZwwOQHt\" /></figure><h4>Revolutionizing App Development with the Gemini API, Impeller Updates, and Windows Arm64 Support</h4><p>Today we present you with a new Flutter release, Flutter 3.19. This release brings a new Dart SDK for Gemini, a widget enabling developers to add fine-grained control to widget animations, a rendering boost with updates to Impeller, tooling to help implement deep links, Windows Arm64 support and so much more!</p><p>The Flutter community continues to impress, merging 1429 pull requests by 168 community members, with 43 community members committing their first Flutter pull requests!</p><p>Keep reading to learn about all the new additions and improvements the Flutter community has contributed to this latest release!</p><h3>AI integration</h3><h4>Gemini Google AI Dart SDK beta release</h4><p>The Google AI Dart SDK has been released to beta. This enables you to build generative AI features into your Dart or Flutter app, powered by Gemini, Google’s latest family of AI models. There is now a <a href=\"https://pub.dev/packages/google_generative_ai\">google_generative_ai</a> package on pub.dev. Learn more about how to build with the Google AI Dart SDK in <a href=\"https://medium.com/flutter/harness-gemini-in-your-dart-and-flutter-apps-00573e560381\">this blog post</a> or jump straight into the <a href=\"https://ai.google.dev/tutorials/dart_quickstart\">Dart quickstart</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*13y0iIXD9nN5wCcX\" /></figure><h3>Framework</h3><h4>Scrolling improvements</h4><p>Flutter used to scroll twice as fast if you dragged two fingers. You can now configure the default ScrollBehavior with MultiTouchDragStrategy.latestPointer to get number-of-fingers-agnostic scrolling behavior. For more information on this change, see the <a href=\"https://docs.flutter.dev/release/breaking-changes/multi-touch-scrolling\">migration guide</a>.</p><p>We also completed bug fixes for <a href=\"https://github.com/flutter/flutter/pull/136871\">SingleChildScrollView</a> and <a href=\"https://github.com/flutter/flutter/pull/136828\">ReorderableList</a>, resolving a number of reported crashes and unexpected behavior.</p><p>In two dimensional scrolling, we resolved an issue so now, if you drag or tap while a scroll is underway in either direction, the scroll activity stops as expected.</p><p>The TableView widget in the two_dimensional_scrollables package has also been updated since the last release, providing more polish, adding support for merged cells, and adopting more of the new features of the 2D foundation after the last stable release of 3.16.</p><h4>AnimationStyle</h4><p>Thanks to a <a href=\"https://github.com/flutter/flutter/pull/138721\">contribution</a> by Flutter community member <a href=\"https://github.com/TahaTesser\">@TahaTesser</a>, Flutter has a new AnimationStyle widget that allows users to override the default animation behavior in widgets, such as MaterialApp, ExpansionTile, and PopupMenuButton, providing developers with the ability to override animation curves and durations.</p><h4>SegmentedButton.styleFrom</h4><p>Flutter community member <a href=\"https://github.com/AcarFurkan\">@AcarFurkan</a> added a styleFrom static utility method, just like the ones provided by the other button types. This method enables quickly creating a SegmentedButton’s ButtonStyle that can be shared with other segmented buttons or used to configure the app’s SegmentedButtonTheme.</p><h4>Adaptive Switch</h4><p>This adaptive component looks and feels native on macOS and iOS and has the Material Design look and feel elsewhere. It does not depend on the Cupertino library so its API is exactly the same on all platforms.</p><p>See the <a href=\"https://github.com/flutter/flutter/pull/130425\">adaptive switch pull request</a> and the live example on the Switch.adaptive constructor <a href=\"https://api.flutter.dev/flutter/material/Switch/Switch.adaptive.html\">API page</a>.</p><h4>SemanticsProperties accessibility identifier</h4><p>A new accessibility identifier in SemanticsProperties provides an identifier for the semantic node in the native accessibility hierarchy. On Android, it appears in the accessibility hierarchy as resource-id. On iOS, this sets UIAccessibilityElement.accessibilityIdentifier. We want to thank community member <a href=\"https://github.com/bartekpacia\">@bartekpacia</a> for this change, which spanned the <a href=\"https://github.com/flutter/engine/pull/47961\">engine</a> and <a href=\"https://github.com/flutter/flutter/pull/138331\">framework</a>.</p><h4>Increased access to text widget state</h4><p>We added support for a MaterialStatesController in TextField and TextFormField so that you can listen to MaterialState changes.</p><h4>UndoHistory stack</h4><p>We <a href=\"https://github.com/flutter/flutter/pull/138674\">fixed</a> a <a href=\"https://github.com/flutter/flutter/issues/130881\">problem</a> where the undo/redo history could disappear on Japanese keyboards. You can now modify an entry before it’s pushed to the UndoHistory stack.</p><h3>Engine</h3><h4>Impeller progress</h4><p><strong>Android OpenGL preview</strong></p><p>In the 3.16 stable release, we invited users to try out Impeller on Vulkan-enabled Android devices, covering 77% of Android devices in the field. Over the past few months, we have brought Impeller’s OpenGL backend up to feature parity with the Vulkan backend, for example, by adding <a href=\"https://github.com/flutter/engine/pull/47030\">support for MSAA</a>. This means that Flutter apps on nearly all Android devices are expected to render correctly, with the exception of a small number of remaining features that are coming soon, such as custom shaders and full support for external textures.</p><p>We request that Flutter developers upgrade to the latest stable version, and file issues about any shortcomings observed when <a href=\"https://docs.flutter.dev/perf/impeller#android\">Impeller is enabled</a>. Feedback at this stage is invaluable to ensuring that Impeller is successful on Android and that we can confidently make it the default renderer in a release later this year. The Android hardware ecosystem is much more diverse than the iOS ecosystem. For that reason, the most helpful feedback about Impeller should include detailed information about the specific device and Android version where issues occurred.</p><p>Further, as a reminder, Impeller’s Vulkan backend enables additional debugging capabilities in <a href=\"https://docs.flutter.dev/testing/build-modes#debug\">debug</a> builds beyond what is used with Skia, and these capabilities have additional runtime overhead. Therefore, it’s important to give feedback about Impeller’s performance from a <a href=\"https://docs.flutter.dev/testing/build-modes#profile\">profile</a> or <a href=\"https://docs.flutter.dev/testing/build-modes#release\">release</a> build. The bug report should include timelines from DevTools and a comparison with the Skia backend on the same device. Finally, as always, we are very grateful for feedback that includes a small reproducible test case that demonstrates the issue.</p><p><strong>Roadmap</strong></p><p>After rendering fidelity, our main focus in Impeller’s Android preview period is performance. We continue to make incremental gains, however a couple of larger improvements are also in progress. We expect work to take advantage of <a href=\"https://github.com/flutter/flutter/issues/128911\">Vulkan subpasses</a> to greatly improve the performance of advanced blend modes. Further, we also expect that a change in rendering strategy away from always tessellating every path on the CPU towards a <a href=\"https://github.com/flutter/flutter/issues/137714\">Stencil-then-cover</a> approach will greatly reduce Impeller’s CPU utilization on both Android and iOS. Finally, we expect that a new implementation of <a href=\"https://github.com/flutter/flutter/issues/131580\">Gaussian blurring</a> will match the throughput of the Skia implementation, and improve idiomatic use of blurring on iOS.</p><h4>API improvements</h4><p><strong>Glyph Information</strong></p><p>This release includes two new methods on dart:ui’s Paragraph object: getClosestGlyphInfoForOffset, and getGlyphInfoAt, which each return an object of the new type GlyphInfo. Check out the documentation on the new <a href=\"https://main-api.flutter.dev/flutter/dart-ui/GlyphInfo-class.html\">GlyphInfo</a> type.</p><p><strong>GPU tracing</strong></p><p>Under Impeller on Metal (iOS, macOS, Simulator) and on Vulkan-enabled Android devices, the Flutter engine now reports GPU times for each frame in the timeline in debug and profile builds. GPU frame timing can be inspected in DevTools under the “GPUTracer” heading.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*m3qW6u7Q4mNfTKxN\" /></figure><p>Please note that since non-Vulkan Android devices might misreport their support for querying GPU timing, Impeller’s GPU tracing can only be enabled with a flag set in the AndroidManifest.xml file on these devices.</p><pre>&lt;meta-data<br>  android:name=&quot;io.flutter.embedding.android.EnableOpenGLGPUTracing&quot;<br>  android:value=&quot;true&quot; /&gt;</pre><h4>Performance optimizations</h4><p><strong>Specialization constants</strong></p><p>The team added <a href=\"https://github.com/flutter/flutter/issues/119357\">support for specialization constants</a> to Impeller. Taking advantage of this feature in Impeller’s shaders reduced uncompressed binary size of the Flutter engine by <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1698877815&amp;end=1702074996&amp;queries=test%3Dhello_world_ios__compile&amp;requestType=0&amp;selected=commit%3D37892%26name%3D%252Carch%253Darm%252Cbranch%253Dmaster%252Cconfig%253Ddefault%252Cdevice_type%253DiPhone_11%252Cdevice_version%253Dnone%252Chost_type%253Dmac%252Csub_result%253Dflutter_framework_uncompressed_bytes%252Ctest%253Dhello_world_ios__compile%252C\">nearly 350KB</a>.</p><p><strong>Backdrop filter speedups</strong></p><p>There is much more work to do, however this release includes a couple of nice performance improvements for backdrop filters and blurs on Impeller. In particular, open source contributor <a href=\"https://github.com/knopp\">@knopp</a> <a href=\"https://github.com/flutter/flutter/issues/131567#issuecomment-1678210475\">noticed</a> that Impeller was mistakenly requesting the capability to read from the onscreen texture. <a href=\"https://github.com/flutter/engine/pull/47808\">Removing this capability</a> improved scenes that include multiple backdrop filters anywhere from 20–70% in our benchmarks, depending on complexity.</p><p>Further, Impeller <a href=\"https://github.com/flutter/engine/pull/47397\">no longer unconditionally stores the stencil buffer</a> on every backdrop filter. Instead, any clip affecting operations are recorded, and replayed into a new stencil buffer when restoring the save layer for the backdrop filter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1008/0*6Of__x8KILe6U5Si\" /></figure><p>With this change, our benchmark of animated advanced blend modes on a Pixel 7 Pro running Impeller with the Vulkan backend improved average GPU frame times from 55ms to 16ms, and improved 90%-ile raster thread CPU times from around 110ms down to 22ms.</p><h3>Android</h3><h4>Deeplinking web validator</h4><p>We have learned from developers that deep linking (taking users from a web URL to a specific page in a mobile app) has always been difficult to implement, and also error prone. So we first created a validation tool to help developers understand what links are incorrectly configured, and provide implementation guidance. We are very happy to share that an early version of the Flutter deeplink validator is now available!</p><p>In this early version, the Flutter deep link validator supports web check on Android, which means validating the setup of your assetlinks.json file. You can open DevTools, click into the <strong>Deep Links</strong> tab, and import a Flutter project that contains deeplinks. The deeplinking validator tells you if your web file is configured correctly. You can refer to the deep link validation tool <a href=\"https://docs.google.com/document/d/1fnWe8EpZleMtSmP0rFm2iulqS3-gA86z8u9IsnXjJak/edit?tab=t.0\">testing instructions</a> for more information.</p><p>We hope this tool is the first step to simplify your deep linking implementation journey. We will continue to work on providing future support for web check on iOS, and app check on both iOS and Android!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*1YoGEcLgpaFythel\" /></figure><h4>Support for Share.invoke</h4><p>The default <strong>Share</strong> button on text fields and views was previously missing from Android, but we’ve added it in this release as part of our ongoing effort to ensure all the default context menu buttons are available on each platform. You can follow that ongoing work in <a href=\"https://github.com/flutter/flutter/issues/107578\">PR #107578</a>.</p><h4>Native assets feature</h4><p>If you’re interested in the interoperability of Flutter with functions from other languages in your Flutter code, you can now perform FFI calls through Native assets on Android as part of our <a href=\"https://github.com/flutter/flutter/issues/129757\">ongoing work</a> towards supporting Native assets.</p><h4>Texture Layer Hybrid Composition (TLHC) mode</h4><p>Flutter 3.19 includes work that now makes Google Maps and the text input magnifier work in TLHC mode, which means better performance for your apps. If you’re using Google Maps, we encourage you to test out the changes and let us know your feedback!</p><p>This work doesn’t include commits under the Framework or Engine, but you can see the work in <a href=\"https://github.com/flutter/packages/pull/5408\">PR 5408</a>, along with the steps to test the THLC.</p><h4>Custom system-wide text selection toolbar buttons</h4><p>Android apps can add custom text selection menu items that appear in all text selection menus (the menu that appears when you long-press on text). Flutter’s TextField selection menu now incorporates those items.</p><h3>iOS</h3><h4>Flutter iOS native fonts</h4><p>Flutter text now looks a little more compact and a little more native on iOS. According to the Apple design guidelines, smaller fonts on iOS should be more spread out in order to be easier to read on mobile, while larger fonts should be more compact to not take up as much space. Before, we were incorrectly using the smaller, more spaced out font in all cases. Now, by default Flutter will use the compact font for larger text.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/798/0*q9BjqFkxrFRfx9eP\" /></figure><h3>DevTools</h3><h4>DevTools updates</h4><p>Some highlights for DevTools with this release are:</p><ul><li>Added a new feature and screen in DevTools to validate deeplinks setup on Android.</li><li>Added an option in the <strong>Enhance Tracing</strong> menu for tracking platform channel activity. This is useful for apps with plugins.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/752/0*zDY2wXaCTMankTTb\" /></figure><ul><li>The Performance and CPU profiler screens are now made available when there is no connected app. Performance data or CPU profiles that were previously saved from DevTools can be reloaded for viewing from these screens.</li><li>The Flutter Sidebar in VS Code now has the ability to enable new platforms if not enabled for the current project, and the DevTools menu in the sidebar now has an option to open DevTools in an external browser window.</li></ul><p>To learn more, check out the release notes for DevTools, <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.29.0\">2.29.0</a>, <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.30.0\">2.30.0</a>, and <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.31.0\">2.31.0</a>.</p><h3>Desktop</h3><h4>Windows Arm64 support</h4><p>Flutter on Windows is now embracing initial support for the Arm64 architecture, thanks to the commendable efforts of community member <a href=\"https://github.com/pbo-linaro\">@pbo-linaro</a>. This initial support paves the way for more efficient and performant Flutter applications that run natively on Windows Arm64 devices. Although still in development, with progress trackable on GitHub issue <a href=\"https://github.com/flutter/flutter/issues/62597\">#62597</a>, this move signifies a promising enhancement for Flutter developers aiming to optimize their apps for a broader range of Windows devices.</p><h3>Ecosystem</h3><h4>Required reason privacy manifest</h4><p>Flutter now includes a privacy manifest on iOS to meet <a href=\"https://developer.apple.com/support/third-party-SDK-requirements/\">upcoming Apple requirements</a>.</p><h4>Progress of the Flutter and Dart package ecosystem</h4><p>In case you missed it, check out the blogpost from January on the <a href=\"https://medium.com/flutter/progress-of-the-flutter-package-ecosystem-17cded9a0703\">progress of the Flutter and Dart package ecosystem</a>.</p><h3>Deprecations and breaking changes</h3><h4>Dropping Windows 7 and 8 support</h4><p>As Flutter evolves, we’re excited to focus on the latest technologies by ending support for Windows 7 and 8 with Dart 3.3 and Flutter 3.19 releases. This shift, in line with Microsoft’s strategy, allows us to enhance Flutter on modern operating systems. We appreciate the adjustments required from our developers and are committed to assisting you through this transition. This move paves the way for a more secure, efficient, and feature-rich development environment on supported versions of Windows. Thank you for your understanding and adaptability as we continue to innovate together in the Flutter ecosystem.</p><h4>Impeller dithering flag</h4><p>As noted in the release notes for the 3.16 stable release, the global flag Paint.enableDithering has been <a href=\"https://github.com/flutter/engine/pull/46745\">removed</a>. See the <a href=\"https://docs.flutter.dev/release/breaking-changes/paint-enableDithering\">breaking change announcement</a> on the website for full details.</p><h4>Deprecate iOS 11</h4><p>Due to a <a href=\"https://github.com/flutter/flutter/issues/136060\">runtime crash</a> when certain networking APIs were called, Flutter no longer supports iOS 11. This means that apps built against Flutter 3.16.6 and later won’t run on those devices.</p><h4>Deprecate auto render mode</h4><p><a href=\"https://docs.flutter.dev/release/breaking-changes\">Breaking changes</a> in this release include deprecated APIs that expired after the release of v3.16. To see all affected APIs, along with additional context and migration guidance, see the <a href=\"https://docs.flutter.dev/release/breaking-changes/3-16-deprecations\">deprecation guide for this release</a>. Many of these deprecations are supported by <a href=\"https://docs.flutter.dev/development/tools/flutter-fix\">Flutter fix</a>, including quick fixes in the IDE. Bulk fixes can be evaluated and applied with the dart fix command line tool.</p><p>As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a> — these help us identify these breaking changes. To learn more, check out <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">Flutter’s breaking change policy</a>.</p><p>This is the first release to adopt the flutter_driver package into the deprecation policy in addition to already supported packages, flutter and flutter_test.</p><h3>Conclusion</h3><p>As we highlighted the remarkable number of contributors at the start of this announcement, we did so with purpose. The evolution of Flutter into the powerful and efficient toolkit it has become is a direct testament to the dedication and hard work of our incredible community. A heartfelt thank you to each and every one of you.</p><p>To dive into the specifics of what has been achieved with this release, we invite you to view the <a href=\"https://docs.flutter.dev/release/release-notes/release-notes-3.19.0\">release notes and change log</a> for a comprehensive list of additions in Flutter 3.19.</p><p>Flutter 3.19, alongside <a href=\"https://medium.com/dartlang/new-in-dart-3-3-extension-types-javascript-interop-and-more-325bf2bf6c13\">Dart 3.3</a>, is now available on the stable channel. Embarking on this latest journey with Flutter is as straightforward as running flutter upgrade.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=58b1aae242d2\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-19-58b1aae242d2\">What’s new in Flutter 3.19</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-02-15T19:30:03.000Z":{"title":"Starting 2024 strong with Flutter and Dart","link":"https://medium.com/flutter/starting-2024-strong-with-flutter-and-dart-cae9845264fe?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/cae9845264fe","category":["flutter","flutter-app-development","announcements","releases"],"dc:creator":"Brandon Badger","pubDate":"Thu, 15 Feb 2024 19:30:03 GMT","atom:updated":"2024-02-15T19:30:02.985Z","content:encoded":"<p>An introduction, two new SDK releases, and bringing Flutter and Dart into the Gemini era</p><p><em>We’re excited to announce the first of this year’s quarterly SDK releases for Flutter and Dart — Flutter 3.19 and Dart 3.3, along with some exciting announcements involving AI.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gO0yYMh4FUkpue3w\" /></figure><p><strong>Flutter and Dart’s value and future</strong></p><p>I recently joined the Flutter and Dart team, and am excited to work with our developer community at a time when AI is moving quickly to enhance developer productivity and unlock new types of user experiences. I see endless potential in Flutter and Dart’s role in helping to shape this future. I’m equally inspired by the original vision for Flutter to improve the experience of building beautiful, performant, multi platform apps for any device<strong><em>.</em></strong></p><p>Judging by the millions of talented and creative developers who support Flutter with contributions to the framework, or by building amazing experiences — it’s clear others see this vision and are motivated to help. And the core mission remains the same: to deliver a strong language and framework pairing, enabling creative developers to build beautiful, rich, and performant apps for any device. Let’s do this together!</p><p><strong>Bringing Flutter and Dart into the Gemini era</strong></p><p>Today we launched the <a href=\"https://medium.com/flutter/harness-gemini-in-your-dart-and-flutter-apps-00573e560381\">Google AI Dart SDK</a>, a new pub.dev package, <a href=\"https://pub.dev/packages/google_generative_ai\">google_generative_ai,</a> and <a href=\"https://ai.google.dev/tutorials/dart_quickstart\">supporting resources</a>; together these enable you to build your own generative AI-based features like smart chat bots, visual search engines, and image descriptions into Dart and Flutter apps using the Gemini API. Flutter and Dart’s cross-platform capabilities and this new SDK make it easier for you to build interactive experiences across platforms.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5hGoIuMtVnvrZ2id\" /></figure><p>And this is only the beginning of the innovations that we’re bringing to Flutter and Dart development with AI. For instance, soon Flutter and Dart developers can copy Dart code directly from <a href=\"https://aistudio.google.com/?utm_source=flutter&amp;utm_medium=referral&amp;utm_campaign=blog_umbrella_announcement&amp;utm_content=\">Google’s AI Studio</a> after honing prompts for your use case.</p><p>Learn more about the Google AI Dart SDK in the <a href=\"https://medium.com/flutter/harness-gemini-in-your-dart-and-flutter-apps-00573e560381\">deep dive blog post</a>.</p><p>Many developers have already begun to bring Flutter and AI tools together in exciting ways:</p><ul><li>The team at <a href=\"https://leancode.co/\">LeanCode</a> have used the Gemini model to build <a href=\"https://leancode.co/arb_translate\">arb_translate</a>, a package that allows developers to perform translation tasks automatically</li><li>We Spot Turtles! have combined Flutter and AI in their mission to save sea turtles from extinction. They were recently featured in Google Play’s <a href=\"https://play.google.com/console/about/weareplay/\">#WeArePlay campaign</a>. Take a look below.</li><li>AutoGPT, an experimental, open-source project that builds on top of large language models (LLMs), has a <a href=\"https://github.com/Significant-Gravitas/auto_gpt_flutter_client\">Flutter client</a> that runs across iOS, Android, web, macOS, and Windows.</li></ul><p><a href=\"https://youtu.be/CfzhLOiczDQ?si=Qgc4Yb4Q9xKI6byF\">#WeArePlay | Caitlin and Nicolas | We Spot Turtles! | Australia</a></p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FCfzhLOiczDQ%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCfzhLOiczDQ&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FCfzhLOiczDQ%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c589a07e2318b9c8d79af8b3e2dc5a53/href\">https://medium.com/media/c589a07e2318b9c8d79af8b3e2dc5a53/href</a></iframe><p>As you explore the Gemini model’s capabilities, be sure to share the new and innovate experiences you’re building with us using the #BuildWithGemini hashtag.</p><p><strong>Two new SDK releases</strong></p><p>Aside from the excitement that AI brings, we remain focused on continuing to build a strong UI framework, capable of delivering any experience you want to build on any screen you want to build for. You’ll see progress towards that vision in today’s SDK releases, Flutter 3.19 and Dart 3.3.</p><p>These releases are focused on refinements and performance improvements that build upon the trajectory that Flutter and Dart set out <a href=\"https://medium.com/flutter/whats-next-for-flutter-b94ce089f49c\">last year</a>. In this Flutter release, you’ll find:</p><ul><li>Updates to our work to generate breakthrough graphics performance through our continued work on Impeller</li><li>Additional steps towards providing seamless integration between platforms with Flutter iOS native fonts and an early version of a deep linking web validator</li><li>Continued focus on the developer experience with updates to DevTools and a <a href=\"https://medium.com/flutter/progress-of-the-flutter-package-ecosystem-17cded9a0703?source=collection_home---4------1-----------------------\">progress report on the Flutter package ecosystem</a></li><li>And finally, we’re excited to share progress on our mission to help define the future of the web with Wasm</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2UG76__vsbp6NHtN\" /></figure><p>Dart 3.3 in turn, introduces extension types, a new model for interacting with JavaScript on the web, and updates to our work to support access to more and better web libraries. You can learn more about each release in the blog posts for <a href=\"https://medium.com/flutter/whats-new-in-flutter-3-19-58b1aae242d2\">Flutter 3.19</a> and <a href=\"https://medium.com/dartlang/dart-3-3-325bf2bf6c13\">Dart 3.3</a>, respectively.</p><p><strong>2024 Strategy and Roadmap</strong></p><p>Each of these features is a small step in a larger journey we’re taking this year, and that you can see in our <a href=\"https://github.com/flutter/flutter/wiki/Roadmap\">2024 roadmap</a>. As always, these roadmaps are born from a desire to be open about our plans as we know many of you consider Flutter and Dart to be essential components in your careers and businesses. That being said, progress can be difficult to predict, even with a plan in place.</p><p>And while we’ll do our best to continue to remain transparent as changes inevitably force us to shift focus and make tradeoffs, we want to highlight that there are more contributors to Flutter and Dart outside of Google than those of us employed here, meaning that the things mentioned in our roadmap are but a small portion of the thousands of changes that will come to Dart and Flutter this year.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*oAoUwrRrrYWIbu_u\" /><figcaption>2024 roadmap</figcaption></figure><p><strong>Bringing it all together</strong></p><p>I’ve worked on many fun and innovative projects during my 17+ years at Google and YouTube, but this is the most enthusiastic I’ve felt about leaning into a new opportunity. I started my career as a software engineer, and my first job at Google was as the PM for the Maps API and Geo developer tools, so it’s great to get back to my developer roots.</p><p>Part of what drives my enthusiasm is, well, your enthusiasm. Just in 2024 so far, I’ve seen such amazing things come out of this community, including:</p><ul><li>Over 2,700 of you have joined our<a href=\"http://flutter.dev/global-gamers\"> Global Gamers Challenge</a>, which we’re hosting in partnership with international advocacy firm Global Citizen to challenge you to use your skills to build Flutter games that inspire the world to live more sustainably.</li><li><a href=\"https://youtu.be/37qvcjmE51w\">Superlist</a>, who announced version 1.0 yesterday, is using Flutter to redefine task management, note taking, and everything in between.</li></ul><p>In closing, my kids are starting to study Computer Science, and I’m motivated to help create the software development experience that will help the next generation change the world for the better.</p><p>This year promises to be an important one for creating that future, and I can’t wait to see the ways in which Flutter and Dart support it. As always, we’re incredibly grateful for your continued support and we can’t wait to see what we’ll build together. Until next time!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cae9845264fe\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/starting-2024-strong-with-flutter-and-dart-cae9845264fe\">Starting 2024 strong with Flutter and Dart</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-02-15T19:28:44.000Z":{"title":"Sharing Flutter’s 2024 roadmap","link":"https://medium.com/flutter/sharing-flutters-2024-roadmap-22debd2bbd22?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/22debd2bbd22","category":["flutter","roadmaps","announcements","flutter-app-development"],"dc:creator":"Michael Thomsen","pubDate":"Thu, 15 Feb 2024 19:28:44 GMT","atom:updated":"2024-02-15T19:28:44.068Z","content:encoded":"<p>As an open source project with a thriving community, we strive to be transparent about our plans, with everything from issues to design specifications being shared in the open. We’ve heard a great deal of interest in Flutter’s feature roadmap. These kinds of roadmaps can be challenging in terms of predictability, as those plans tend to shift and adapt throughout the year, but we still feel it’s important to share our overall plans, with the stated caveat: plans may change.</p><p>We’ve been publishing our roadmaps <a href=\"https://github.com/flutter/flutter/wiki/%5BArchive%5D-Old-Roadmaps\">since 2020</a>, and <strong>today we’re sharing our</strong><a href=\"https://github.com/flutter/flutter/wiki/Roadmap\"><strong> 2024 roadmap</strong></a>. This is a natural continuation of previous years’ work, still working towards our long-term goal of creating <em>the most popular, fastest growing, and highest-productivity multi-platform UI framework for building rich app experiences</em>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8v__Z0fIVOBm4uxFnMLAVg.png\" /></figure><p>Note that what we’re listing here is primarily content gathered from those of us who work on Flutter as employees of Google. By now non-Google contributors outnumber those employed by Google, so this is not an exhaustive list of all the new and exciting things that we hope will come to Flutter this year!</p><p>We’re <strong>immensely thankful</strong> for the community and your continued support. We can’t wait to see what you’ll build!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=22debd2bbd22\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/sharing-flutters-2024-roadmap-22debd2bbd22\">Sharing Flutter’s 2024 roadmap</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-02-15T14:51:44.000Z":{"title":"Harness the Gemini API in your Dart and Flutter Apps","link":"https://medium.com/flutter/harness-the-gemini-api-in-your-dart-and-flutter-apps-00573e560381?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/00573e560381","category":["flutter","google","gemini","ai","dart"],"dc:creator":"Ander Dobo","pubDate":"Thu, 15 Feb 2024 14:51:44 GMT","atom:updated":"2024-02-15T16:07:34.216Z","content:encoded":"<p><strong>Introducing the Google AI Dart SDK</strong></p><p>We’re thrilled to announce the launch of the Google AI Dart SDK for the Gemini API. The new pub.dev package, <a href=\"https://pub.dev/packages/google_generative_ai\">google_generative_ai,</a> and <a href=\"https://ai.google.dev/tutorials/dart_quickstart\">supporting resources</a> enable you to build your own generative AI-based features into Dart and Flutter apps through an idiomatic Dart integration with the Gemini API. It opens the door to a vast range of possibilities for building intelligent, performant applications for Android, iOS, web, macOS, Windows, and Linux from a single code base.</p><p>With the Google AI Dart SDK, you can:</p><ul><li><strong>Easily integrate generative AI features: </strong>Add advanced text generation, summarization, chat, and more to your Dart or Flutter apps with minimal setup.</li><li><strong>Tap into Google’s most capable and general model yet:</strong> The Gemini model draws on Google’s extensive research and development in machine learning, giving you access to generative AI capabilities that will continue to improve.</li><li><strong>Accelerate your AI-powered app development: </strong>Focus on your app logic and user experience, while the SDK handles the intricacies of interacting with AI models.</li><li><strong>Build cross-platform AI-powered apps:</strong> Easily create generative AI features across desktop, web, and mobile applications using Flutter.</li><li><strong>Use the Gemini API in more than 180+ countries and territories: </strong>Check the <a href=\"https://ai.google.dev/available_regions#available_regions\">available regions</a> for the most current list of countries and regions where the Gemini API and Google AI Studio (described further below) are available.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-KkJmzvv3jNhh88TWxIBJg.png\" /></figure><p><strong>What can you build?</strong></p><p>We believe generative AI holds immense potential to help you achieve your app and business goals. And since the Gemini model is multimodal (it’s capable of processing information from multiple modalities, including images and text), it empowers you to be extremely creative. However, the first question we often get from app developers — and even from within our own team — is “What can I actually do with the Gemini API?” Here are a few examples of features you might create for your Dart or Flutter app:</p><ul><li><strong>Text summarization:</strong> Generate concise summaries of long articles, research papers, or website content from textual input.</li><li><strong>Smart chatbots:</strong> Build more engaging and human-like conversational interfaces, enhancing user experience in your applications.</li><li><strong>Visual search engine: </strong>Users can upload an image, and the app uses the Gemini API to return descriptions of what’s in the image, the style, and perhaps even how to make what’s in the image.</li><li><strong>Image descriptions for accessibility:</strong> Generate detailed text descriptions of uploaded images to aid users who are visually impaired.</li><li><strong>Diagram &amp; chart interpretation: </strong>Users can upload images of diagrams, charts, or graphs, and the Gemini API delivers a text-based analysis and explanation of the data.</li></ul><p>This list could go on because the possibilities are nearly endless!</p><figure><img alt=\"A screenshot of the Flutter sample app that uses the Google AI Dart SDK\" src=\"https://cdn-images-1.medium.com/max/1024/0*7Zvr0YiN7O22wTOy\" /><figcaption>A screenshot of the Flutter sample app that uses the Google AI Dart SDK</figcaption></figure><p><strong>Getting Started</strong></p><p>Check out the <a href=\"https://ai.google.dev/tutorials/dart_quickstart\">Dart quickstart</a> for a detailed step-by-step guide on how to get set up. At a high level, here’s what you’ll do:</p><ol><li>Get a Gemini API key from Google AI Studio. Keep this key secure. We strongly recommend that you do not include the key directly in your code, or check files that contain the key into version control systems. While developing, we recommend using flutter run -d [DEVICE NAME] — dart-define=API_KEY=[YOUR API KEY] to run the app in an emulator/simulator, using your API key as an environment variable.</li><li>Add the Google AI Dart SDK to your Dart or Flutter app by running dart pub add google_generative_ai or flutter pub add google_generative_ai, respectively. This adds google_generative_ai as a dependency to your `pubspec.yaml` file.</li><li>Initialize the generative model in your code:</li></ol><pre>import &#39;package:google_generative_ai/google_generative_ai.dart&#39;;<br><br>// Access your API key as an environment variable (see first step above)<br>final apiKey = Platform.environment[&#39;API_KEY&#39;];<br>if (apiKey == null) {<br>  print(&#39;No \\$API_KEY environment variable&#39;);<br>  exit(1);<br>}<br><br>final model = GenerativeModel(model: &#39;MODEL_NAME&#39;, apiKey: apiKey);</pre><p>4. You can now start to explore using the Gemini API to implement different use cases. For example, when the prompt input includes both text and images, use the gemini-pro-vision model and the generateContent method to generate text output:</p><pre>import &#39;dart:io&#39;;<br><br>import &#39;package:google_generative_ai/google_generative_ai.dart&#39;;<br><br>void main() async {<br>  // Access your API key as an environment variable (see first step above)<br>  final apiKey = Platform.environment[&#39;API_KEY&#39;];<br>  if (apiKey == null) {<br>    print(&#39;No \\$API_KEY environment variable&#39;);<br>    exit(1);<br>  }<br>  // For text-and-image input (multimodal), use the gemini-pro-vision model<br>  final model = GenerativeModel(model: &#39;gemini-pro-vision&#39;, apiKey: apiKey);<br>  final (firstImage, secondImage) = await (<br>    File(&#39;image0.jpg&#39;).readAsBytes(),<br>    File(&#39;image1.jpg&#39;).readAsBytes()<br>  ).wait;<br>  final prompt = TextPart(&quot;What&#39;s different between these pictures?&quot;);<br>  final imageParts = [<br>    DataPart(&#39;image/jpeg&#39;, firstImage),<br>    DataPart(&#39;image/jpeg&#39;, secondImage),<br>  ];<br>  final response = await model.generateContent([<br>    Content.multi([prompt, ...imageParts])<br>  ]);<br>  print(response.text);<br>}</pre><p>Explore the <a href=\"https://ai.google.dev/docs\">Gemini API documentation</a> and check out the <a href=\"https://github.com/google/generative-ai-dart/tree/main/samples\">Dart and Flutter sample apps</a> in the GitHub repo for detailed guides and examples on how to use the SDK for various use cases, or in <a href=\"https://dartpad.dev/?id=341bc46b2ed1d2055d357ab987ed5fc2\">this sample app</a> in DartPad, which is a free, open-source online editor for Dart and Flutter snippets, now built with Flutter. Please report any issues or tell us about feature requests in the <a href=\"https://github.com/google/generative-ai-dart/issues/new/choose\">generative-ai-dart GitHub repo</a>.</p><p><strong>Google AI Studio</strong></p><p>Alongside the SDK, <a href=\"https://aistudio.google.com/?utm_source=flutter&amp;utm_medium=referral&amp;utm_campaign=blog_gaidartsdk_announcment&amp;utm_content=\">Google AI Studio</a> is a browser-based IDE for prototyping with generative models. It enables you to quickly iterate to develop prompts for your use case, and then get an API key to use in your app development. You can sign into Google AI Studio with your Google account and take advantage of the free quota, which allows 60 requests per minute. To help us improve product quality, when you use the free quota, your Google AI Studio input and output might be accessible to trained reviewers. This data is de-identified from your Google account and API key.</p><p>We will add Dart to Google AI Studio soon, so keep a lookout for the announcement! This will enable you to simply click on “Get code”, select a new Dart tab (which will be alongside the existing supported languages), and then “Copy” the Dart code to transfer your work to your IDE of choice.</p><figure><img alt=\"A screenshot of Google AI Studio\" src=\"https://cdn-images-1.medium.com/max/1024/0*xhBJ20OLOQDtQ2xi\" /><figcaption>Google AI Studio</figcaption></figure><p><strong>Share what you build!</strong></p><p>We look forward to seeing what you’ll build with Gemini, like the team at LeanCode who have used the Gemini API to build <a href=\"https://leancode.co/arb_translate\">arb_translate</a>. It’s a package that helps developers to perform language translation automatically, streamlining localization in Flutter apps.</p><p>Use the hashtag #BuildWithGemini on Twitter/X to let us know what you’re building!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=00573e560381\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/harness-the-gemini-api-in-your-dart-and-flutter-apps-00573e560381\">Harness the Gemini API in your Dart and Flutter Apps</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-08-06T18:02:39.000Z":{"title":"Getting started with Flutter GPU","link":"https://medium.com/flutter/getting-started-with-flutter-gpu-f33d497b7c11?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/f33d497b7c11","category":["flutter","3d","guides-and-tutorials","graphics-programming","game-development"],"dc:creator":"Brandon DeRosier","pubDate":"Tue, 06 Aug 2024 18:02:39 GMT","atom:updated":"2024-08-06T18:02:39.237Z","content:encoded":"<h4>Build custom renderers and render 3D scenes in Flutter.</h4><p>The Flutter 3.24 release introduces a new low-level graphics API called <a href=\"https://github.com/flutter/engine/blob/main/docs/impeller/Flutter-GPU.md\">Flutter GPU</a>. There is also a 3D rendering library powered by Flutter GPU called <a href=\"https://pub.dev/packages/flutter_scene\">Flutter Scene</a> (package: flutter_scene). Both Flutter GPU and Flutter Scene are currently in preview, only available on Flutter’s <a href=\"https://docs.flutter.dev/release/upgrade#other-channels\">main channel</a> (due to reliance on experimental features), require <a href=\"https://docs.flutter.dev/perf/impeller#availability\">Impeller to be enabled</a>, and might occasionally introduce breaking changes.</p><p>This article contains two “getting started” guides for these packages:</p><ol><li>🔺 <strong>Advanced:</strong> <a href=\"#d558\">Getting started with Flutter GPU</a><br>If you’re an experienced graphics programmer or you’re interested in low level graphics and want to build renderers from scratch in Flutter, then this guide will get you set up to start tinkering with Flutter GPU. You’ll draw your first triangle from scratch… in Flutter!</li><li>💚 <strong>Intermediate:</strong> <a href=\"#6b35\">3D rendering with Flutter Scene</a><strong><br></strong>If you’re a Flutter developer that wants to add 3D functionality to your apps, or you want to create 3D games using Dart and Flutter, then this is a guide for you! You’ll set up a project that imports and renders 3D assets in Flutter.</li></ol><h3>Getting started with Flutter GPU</h3><p>⚠️ Warning! ⚠️ Flutter GPU is ultimately a low-level API. It’s overwhelmingly likely that the vast majority of Flutter devs who will benefit from Flutter GPU’s existence will do so by consuming higher level rendering libraries published on pub.dev, such as the Flutter Scene rendering package. If you’re not interested in the Flutter GPU API itself and you’re just interested in 3D rendering, skip ahead to <a href=\"#6b35\">3D rendering with Flutter Scene</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/0*hAqIOVkaI1IWnOHE\" /><figcaption>Ooh shiny. This is a ray-marched signed distance field. You could render this using Flutter GPU, but it’s perfectly possible to do so with a <a href=\"https://docs.flutter.dev/ui/design/graphics/fragment-shaders\">custom fragment shader</a> as well.</figcaption></figure><h3>Getting started with Flutter GPU</h3><p>Flutter GPU is Flutter’s built-in low-level graphics API. It allows you to build and integrate custom renderers in Flutter by writing Dart code and GLSL shaders. No native platform code required.</p><p>Currently, Flutter GPU is in early preview and offers a basic rasterization API, but more functionality will continue to be added and refined, as the API approaches stable.</p><p>Flutter GPU also requires <a href=\"https://docs.flutter.dev/perf/impeller#availability\">Impeller to be enabled</a>. This means it can only be used when targeting platforms that are supported by Impeller. At the time of writing, Impeller supports:</p><ul><li>iOS (on by default)</li><li>macOS (opt-in preview)</li><li>Android (opt-in preview)</li></ul><p>Our aim with Flutter GPU is to eventually support all of Flutter’s platform targets. The ultimate goal is to foster an ecosystem of cross-platform rendering solutions in Flutter that are easy to maintain for package authors and easy to install for users.</p><p>3D rendering is just one possible use case. Flutter GPU can also be used to build specialized 2D renderers, or to do something more unorthodox, like render 3D slices of a 4D space, or project non-euclidean spaces.</p><p>One example of a great use case for a custom 2D renderer powered by Flutter GPU would be 2D character animation formats that rely on skeletal mesh deformation. Spine 2D is a good example of this. Such skeletal mesh solutions usually have animation clips that manipulate translation, rotation, and scale properties of bones in a hierarchy, and each vertex has a few associated “bone weights” that determine what bones should influence the vertex and by how much.’</p><p>With a Canvas solution like drawVertices, bone weight transforms would need to be applied for each vertex on the CPU. With Flutter GPU, the bone transforms could be fed to a vertex shader in the form of a uniform array or even a texture sampler, allowing the final position for each vertex to be calculated in parallel on the GPU based on the state of the skeleton and the per-vertex bone weights.</p><p>With that out of the way, let’s get started with Flutter GPU by way of a gentle introduction: Drawing your first triangle!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*JEI3fLDGcRHWKruT\" /></figure><h3>Add Flutter GPU to your project</h3><p>First, note that Flutter GPU is currently in an early preview state and might be prone to API breakages. Quite a lot is already possible with the current API, but experienced graphics engineers might notice some missing common functionality. Much is planned for Flutter GPU over the coming months.</p><p>For these reasons, it’s strongly recommended that, for now, you operate against the tip of the <a href=\"https://docs.flutter.dev/release/upgrade#other-channels\">main channel</a> when developing packages against Flutter GPU. If you happen to run into any unexpected behavior, bugs, or have feature requests, please file issues using the standard <a href=\"https://github.com/flutter/flutter/issues/new/choose\">Flutter issue templates</a> on GitHub. All tracked issues related to Flutter GPU are given the <a href=\"https://github.com/flutter/flutter/labels/flutter-gpu\">flutter-gpu label</a>.</p><p>So before experimenting with Flutter GPU, switch Flutter over to the main channel by running the following commands.</p><pre>flutter channel main<br>flutter upgrade</pre><p>Now create a fresh Flutter project.</p><pre>flutter create my_cool_renderer<br>cd my_cool_renderer</pre><p>Next, add the flutter_gpu SDK package to your pubspec.</p><pre>flutter pub add flutter_gpu --sdk=flutter</pre><h3>Build and import shader bundles.</h3><p>In order to render anything with Flutter GPU, you’ll need to author some GLSL shaders. Flutter GPU’s shaders have different semantics than those consumed by Flutter’s <a href=\"https://docs.flutter.dev/ui/design/graphics/fragment-shaders\">fragment shader</a> feature, particularly when it comes to uniform bindings. You’ll also define a vertex shader to go alongside the fragment shader.</p><p>Start with defining the simplest possible shaders. You can place shaders anywhere in your project, but for this example, create a shaders directory and populate it with two shaders: simple.vert and simple.frag .</p><pre>// Copy into: shaders/simple.vert<br><br>in vec2 position;<br><br>void main() {<br>  gl_Position = vec4(position, 0.0, 1.0);<br>}</pre><p>When drawing the triangle, you’ll have a list of data that defines each vertex. In this case, it merely lists 2D positions. For each of these vertices, a simple vertex shader assigns these 2D positions to the clip space output intrinsic gl_Position.</p><pre>// Copy into: shaders/simple.frag<br><br>out vec4 frag_color;<br><br>void main() {<br>  frag_color = vec4(0, 1, 0, 1);<br>}</pre><p>The fragment shader is even simpler; it outputs an RGBA color with a range of (0, 0, 0, 0) to (1, 1, 1, 1). So everything will be shaded as green.</p><p>Okay, so now that you have your shaders, compile them using Flutter&#39;s ahead of time (AOT) shader compiler . To set up automated builds for shader bundles, we recommend using the <a href=\"https://pub.dev/packages/flutter_gpu_shaders\">flutter_gpu_shaders</a> package.</p><p>Use pub to add flutter_gpu_shaders as a regular dependency in your project.</p><pre>flutter pub add flutter_gpu_shaders</pre><p>Flutter GPU shaders are bundled into .shaderbundle files, which can be added to your project&#39;s asset bundle as regular assets. Shader bundles contain the compiled shader sources for the platform target(s).</p><p>Next, create a shader bundle manifest file that describes the contents of the shader bundle. Add the following to my_renderer.shaderbundle.json in the root directory of your project.</p><pre>{<br>    &quot;SimpleVertex&quot;: {<br>        &quot;type&quot;: &quot;vertex&quot;,<br>        &quot;file&quot;: &quot;shaders/simple.vert&quot;<br>    },<br>    &quot;SimpleFragment&quot;: {<br>        &quot;type&quot;: &quot;fragment&quot;,<br>        &quot;file&quot;: &quot;shaders/simple.frag&quot;<br>    }<br>}</pre><p>Each entry in the shader bundle can have an arbitrary name. In this case, the names are &quot;SimpleVertex&quot; and &quot;SimpleFragment&quot;. These names are used to look up the shaders in your app.</p><p>Next, use the flutter_gpu_shaders package to build the shaderbundle. You can add a hook that automatically triggers a build by enabling the experimental &quot;native assets&quot; feature. Use the following commands to enable native assets and install the native_assets_cli package.</p><pre>flutter config --enable-native-assets<br>flutter pub add native_assets_cli</pre><p>With the native assets feature enabled, add a build.dart script under the hook directory that will trigger building the shader bundle automatically.</p><pre>// Copy into: hook/build.dart<br><br>import &#39;package:native_assets_cli/native_assets_cli.dart&#39;;<br>import &#39;package:flutter_gpu_shaders/build.dart&#39;;<br><br>void main(List&lt;String&gt; args) async {<br>  await build(args, (config, output) async {<br>    await buildShaderBundleJson(<br>        buildConfig: config,<br>        buildOutput: output,<br>        manifestFileName: &#39;my_renderer.shaderbundle.json&#39;);<br>  });<br>}</pre><p>After this change, when the Flutter tool is building the project, buildShaderBundleJson builds the shader bundle and outputs the result to build/shaderbundles/my_renderer.shaderbundle under the package root.</p><p>The shader bundle format itself is tied to the specific version of Flutter you&#39;re using and might change over time. If you&#39;re authoring a package that builds shader bundles, do <strong>not</strong> check the generated .shaderbundle files into your source tree. Instead, use a build hook to automate the build process (as previously explained).</p><p>This way, developers that use your library will always build fresh shader bundles with the correct format!</p><p>Now that you&#39;re automatically building your shader bundle, import it like a regular asset. Add an asset entry to your project&#39;s pubspec.yaml:</p><pre>flutter:<br>  assets:<br>    - build/shaderbundles/</pre><p>In the future, the native assets feature will allow build hooks to append data assets to the bundle. Once this happens, it will no longer be necessary to add an asset import rule alongside the build hook.</p><p>Next, add some code to load up the shaders at runtime. Create lib/shaders.dart and add the following code.</p><pre>// Copy into: lib/shaders.dart<br><br>import &#39;package:flutter_gpu/gpu.dart&#39; as gpu;<br><br>const String _kShaderBundlePath =<br>    &#39;build/shaderbundles/my_renderer.shaderbundle&#39;;<br>// NOTE: If you&#39;re building a library, the path must be prefixed<br>//       with a package name. For example:<br>//      &#39;packages/my_cool_renderer/build/shaderbundles/my_renderer.shaderbundle&#39;<br><br>gpu.ShaderLibrary? _shaderLibrary;<br>gpu.ShaderLibrary get shaderLibrary {<br>  if (_shaderLibrary != null) {<br>    return _shaderLibrary!;<br>  }<br>  _shaderLibrary = gpu.ShaderLibrary.fromAsset(_kShaderBundlePath);<br>  if (_shaderLibrary != null) {<br>    return _shaderLibrary!;<br>  }<br><br>  throw Exception(&quot;Failed to load shader bundle! ($_kShaderBundlePath)&quot;);<br>}</pre><p>This code creates a singleton getter for the Flutter GPU shader runtime library. The first time shaderLibrary is accessed, the runtime shader library is initialized using the built asset bundle with gpu.ShaderLibrary.fromAsset(shader_bundle_path).</p><p>The project is now set up to use Flutter GPU shaders. It’s time to render that triangle!</p><h3>Drawing your first triangle</h3><p>For this guide, you’ll create an RGBA Flutter GPU Texture and a RenderPass that attaches the Texture as a color output. Then, you’ll render the Texture in a widget using <a href=\"https://api.flutter.dev/flutter/dart-ui/Canvas/drawImage.html\">Canvas.drawImage</a>.</p><p>For the sake of brevity, you’ll forego best practice and just rebuild all of the resources for each frame.</p><p>As long as you mark your Texture as &quot;shader readable&quot; when allocating it, you’ll be able to convert it to a dart:ui.Image. To display the rendered results in the widget tree, draw it to a dart:ui.Canvas!</p><p>You can access a Canvas by scaffolding the widget tree with a custom painter. Replace the contents of lib/main.dart with the following:</p><pre>import &#39;dart:typed_data&#39;;<br><br>import &#39;package:flutter/material.dart&#39;;<br>import &#39;package:flutter_gpu/gpu.dart&#39; as gpu;<br><br>// NOTE: We made this earlier while setting up shader bundle imports!<br>import &#39;shaders.dart&#39;;<br><br>void main() {<br>  runApp(const MyApp());<br>}<br><br>class MyApp extends StatelessWidget {<br>  const MyApp({super.key});<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      title: &#39;Flutter GPU Triangle Example&#39;,<br>      home: CustomPaint(<br>        painter: TrianglePainter(),<br>      ),<br>    );<br>  }<br>}<br><br>class TrianglePainter extends CustomPainter {<br>  @override<br>  void paint(Canvas canvas, Size size) {<br>    // Attempt to access `gpu.gpuContext`.<br>    // If Flutter GPU isn&#39;t supported, an exception will be thrown.<br>    print(&#39;Default color format: &#39; +<br>        gpu.gpuContext.defaultColorFormat.toString());<br>  }<br><br>  @override<br>  bool shouldRepaint(covariant CustomPainter oldDelegate) =&gt; true;<br>}</pre><p>Now, run the app. As a reminder, Flutter GPU currently requires <a href=\"https://docs.flutter.dev/perf/impeller#availability\">Impeller to be enabled</a>. So you must use an Impeller-supported platform. For this guide, I&#39;ll be targeting macOS.</p><pre>flutter run -d macos --enable-impeller</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lKTtaX2ih6dFpSMQ\" /></figure><p>If Flutter GPU is working, then you should see the default color format printed to the console.</p><pre>flutter: Default color format: PixelFormat.b8g8r8a8UNormInt</pre><p>If Impeller isn&#39;t enabled, an exception is thrown when attempting to access gpu.gpuContext.</p><pre>Exception: Flutter GPU requires the Impeller rendering backend to be enabled.<br><br>The relevant error-causing widget was:<br>  CustomPaint</pre><p>For the sake of simplicity, you’ll only modify the paint method from here onwards.</p><p>To start off, create a Flutter GPU Texture, clear it, and then display it by drawing it to the Canvas.</p><p>Create a Texture the size of the Canvas. A StorageMode must be chosen. In this case, you’ll mark the Texture as devicePrivate, because you&#39;ll only be using instructions that accesses the texture&#39;s memory from the device (GPU).</p><pre>final texture = gpu.gpuContext.createTexture(gpu.StorageMode.devicePrivate,<br>    size.width.toInt(), size.height.toInt())!;</pre><p>If overwriting the texture&#39;s data by uploading it from the host (CPU), then use StorageMode.hostVisible instead.</p><p>The third available option is StorageMode.deviceTransient, which is useful for attachments that don&#39;t need to exceed the lifetime of a single RenderPass (so they can just exist in tile memory and don&#39;t need to be backed by a VRAM allocation). Oftentimes, depth/stencil textures fit this criteria.</p><p>Next, define a RenderTarget. Render targets contain a collection of &quot;attachments&quot; that describe a per-fragment memory layout and its setup/teardown behavior at the beginning and end of a RenderPass.</p><p>Essentially, a RenderTarget is a reusable descriptor for a RenderPass.</p><p>For now, define a very simple RenderTarget consisting of only one color attachment.</p><pre>final renderTarget = gpu.RenderTarget.singleColor(<br>gpu.ColorAttachment(texture: texture, clearValue: Colors.lightBlue));</pre><p>Notice that this code sets the clearValue to light blue. Each attachment has a LoadAction and a StoreAction that determines what should happen to the attachment&#39;s ephemeral tile memory at the beginning and end of the pass, respectively.</p><p>By default, color attachments are set to LoadAction.clear (which initializes the tile memory to a given color), and StoreAction.store (which saves the results to the attached texture&#39;s VRAM allocation).</p><p>Now, create a CommandBuffer, spawn a RenderPass from it using the RenderTarget from earlier, and then immediately submit the CommandBuffer to clear the texture.</p><pre>final commandBuffer = gpu.gpuContext.createCommandBuffer();<br>final renderPass = commandBuffer.createRenderPass(renderTarget);<br>// ... draw calls will go here!<br>commandBuffer.submit();</pre><p>All that&#39;s left is to draw the initialized texture to the Canvas!</p><pre>final image = texture.asImage();<br>canvas.drawImage(image, Offset.zero, Paint());</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ebUDtzQOuIGmdlop\" /></figure><p>Now that you have a RenderPass hooked up with results displayed to the screen, you’re ready to start drawing the triangle. To do this, set up the following:</p><ol><li>A RenderPipeline created from our shaders, and</li><li>A GPU-accessible buffer containing our geometry (three vertex positions).</li></ol><p>Creating the RenderPipeline is easy. You just need to combine a vertex and fragment shader from your library.</p><pre>final vert = shaderLibrary[&#39;SimpleVertex&#39;]!;<br>final frag = shaderLibrary[&#39;SimpleFragment&#39;]!;<br>final pipeline = gpu.gpuContext.createRenderPipeline(vert, frag);</pre><p>Now for the geometry. Recall that the &quot;SimpleVertex&quot; shader only has one input: in vec2 position. So, to draw the three vertices, you need three sets of two floating point numbers.</p><pre>final vertices = Float32List.fromList([<br>  -0.5, -0.5, // First vertex<br>   0.5, -0.5, // Second vertex<br>   0.0,  0.5, // Third vertex<br>]);<br>final verticesDeviceBuffer = gpu.gpuContext<br>    .createDeviceBufferWithCopy(ByteData.sublistView(vertices))!;</pre><p>All that&#39;s remaining is to bind the new resources and call renderPass.draw() to finish recording the draw call.</p><pre>renderPass.bindPipeline(pipeline);<br><br>final verticesView = gpu.BufferView(<br>  verticesDeviceBuffer,<br>  offsetInBytes: 0,<br>  lengthInBytes: verticesDeviceBuffer.sizeInBytes,<br>);<br>renderPass.bindVertexBuffer(verticesView, 3);<br><br>renderPass.draw();</pre><p>If you launch your app, you should now see a green triangle!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LWnGU5WPT_Eom0wJ\" /></figure><p>Yay, you built a renderer from scratch with Flutter, Dart, and a little bit of GLSL!</p><p>Whether this is your first time rendering a triangle or you&#39;re a seasoned graphics veteran, I hope you&#39;ll continue playing with Flutter GPU and check out the packages that we&#39;re working on, like Flutter Scene.</p><p>In the future, we hope to publish beginner-friendly codelabs that dive deeper into Flutter GPU&#39;s default behavior and best practices. We still haven&#39;t talked about the vertex attribute layout, texture binding, uniforms and alignment requirements, pipeline blending, depth and stencil attachments, perspective correction, and so much more!</p><p>Until then, I&#39;d recommend exploring <a href=\"https://github.com/bdero/flutter_scene\">Flutter Scene</a> as a more comprehensive example of how to use Flutter GPU.</p><h3>3D rendering with Flutter Scene</h3><p>Flutter Scene (package flutter_scene) is a new 3D scene graph package powered by Flutter GPU that enables Flutter developers to import animated glTF models and render realtime 3D scenes.</p><p>The intent is to provide a package that makes building interactive 3D apps and games easy in Flutter.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tC68CbPLef2rJp1e\" /></figure><p>This package started life as a dart:ui extension for a 3D renderer written in C++ and built directly into Flutter&#39;s native runtime, but it&#39;s been rewritten against Flutter GPU with a more flexible interface.</p><p>As with the Flutter GPU API itself, Flutter Scene is currently in an early preview state and requires <a href=\"https://docs.flutter.dev/perf/impeller#availability\">Impeller to be enabled</a>. Flutter Scene generally keeps up to date with breaking changes to Flutter GPU&#39;s API, and so it&#39;s strongly recommended to use the <a href=\"https://docs.flutter.dev/release/upgrade#other-channels\">main channel</a> when experimenting with Flutter Scene.</p><p>Next, make an app with Flutter Scene!</p><h3>Set up a Flutter Scene project</h3><p>Since it&#39;s strongly recommended to use Flutter Scene against the <a href=\"https://docs.flutter.dev/release/upgrade#other-channels\">main channel</a>, start off by switching to it.</p><pre>flutter channel main<br>flutter upgrade</pre><p>Next, create a fresh Flutter project.</p><pre>flutter create my_3d_app<br>cd my_3d_app</pre><p>Flutter Scene relies on the experimental &quot;native assets&quot; feature for automatically building shaders. You’ll use native assets in a moment to set up automatic importing of 3D models for Flutter Scene.</p><p>Enable native assets with the following command.</p><pre>flutter config --enable-native-assets</pre><p>And finally, add Flutter Scene as a project dependency.</p><p>You’ll also need to use several vector_math constructs while interacting with Flutter Scene&#39;s API, so add the vector_math package as well.</p><pre>flutter pub add flutter_scene vector_math</pre><p>Next, import a 3D model!</p><h3>Import a 3D model</h3><p>First, you need a 3D model to render. For this guide, you’ll use a common <a href=\"https://en.wikipedia.org/wiki/GlTF\">glTF</a> sample asset: <a href=\"https://github.com/KhronosGroup/glTF-Sample-Assets/tree/main/Models/DamagedHelmet\">DamagedHelmet.glb</a>. Here&#39;s what it looks like.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/912/0*vVWRLxJ348tCxv7T\" /><figcaption>The original Damaged Helmet model was created by theblueturtle_ in 2016 (license: <a href=\"https://creativecommons.org/licenses/by-nc/4.0/legalcode\">CC BY-NC 4.0 International</a>). The converted glTF version was created by ctxwing in 2018 (license: <a href=\"https://creativecommons.org/licenses/by/4.0/legalcode\">CC BY 4.0 International</a>)</figcaption></figure><p>You can grab it from the <a href=\"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Assets/main/Models/DamagedHelmet/glTF-Binary/DamagedHelmet.glb\">glTF sample assets repository</a> hosted on GitHub. Place DamagedHelmet.glb in your project root.</p><pre>curl -O https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/main/2.0/DamagedHelmet/glTF-Binary/DamagedHelmet.glb</pre><p>Like most real-time 3D renderers, Flutter Scene uses a specialized 3D model format internally. You can convert standard glTF binaries (.glb files) to this format using Flutter Scene&#39;s offline importer tool.</p><p>Add the flutter_scene_importer package to the project as a regular dependency.</p><pre>flutter pub add flutter_scene_importer</pre><p>Adding this package makes it possible to invoke the importer manually using dart run.</p><pre>dart --enable-experiment=native-assets \\<br>     run flutter_scene_importer:import \\<br>     --input &quot;path/to/my/source_model.glb&quot; \\<br>     --output &quot;path/to/my/imported_model.model&quot;</pre><p>You can automatically run the importer by using a native assets build hook. To do this, first install native_assets_cli as a regular project dependency.</p><pre>flutter pub add native_assets_cli</pre><p>You can now write the build hook. Create hook/build.dart with the following contents.</p><pre>import &#39;package:native_assets_cli/native_assets_cli.dart&#39;;<br>import &#39;package:flutter_scene_importer/build_hooks.dart&#39;;<br><br>void main(List&lt;String&gt; args) {<br>  build(args, (config, output) async {<br>    buildModels(buildConfig: config, inputFilePaths: [<br>      &#39;DamagedHelmet.glb&#39;,<br>    ]);<br>  });<br>}</pre><p>Using the buildModels utility from flutter_scene_importer, supply a list of models to build. The paths are relative to the build root of the project.</p><p>When the Flutter tool is building the project, buildModels now builds the shader bundle and outputs the result to build/models/DamagedModel.model under the package root.</p><p>The imported model format itself is tied to the specific version of Flutter Scene you&#39;re using and will change over time. When authoring an app or library that uses Flutter Scene, do not check the generated .model files into your source tree. Instead, use a build hook to generate them from your source models (as previously explained).</p><p>This way, you&#39;ll always build fresh .model files with the correct format as you upgrade Flutter Scene over time!</p><p>Next, import the model like a regular asset. Add an asset entry to your project&#39;s pubspec.yaml.</p><pre>flutter:<br>  assets:<br>    - build/models/</pre><p>In the future, the native assets feature will allow build hooks to append data assets to the bundle. Once this happens, it will no longer be necessary to add an asset import rule alongside the build hook.</p><h3>Rendering a 3D scene</h3><p>Now for the app&#39;s code.</p><p>First, create a stateful widget to persist a Scene across frames.</p><p>You’ll be animating based on time, so add the SingleTickerProviderStateMixin to the state along with an elapsedSeconds member.</p><pre>import &#39;dart:math&#39;;<br><br>import &#39;package:flutter/material.dart&#39;;<br>import &#39;package:flutter/scheduler.dart&#39;;<br>import &#39;package:flutter_scene/camera.dart&#39;;<br>import &#39;package:flutter_scene/node.dart&#39;;<br>import &#39;package:flutter_scene/scene.dart&#39;;<br>import &#39;package:vector_math/vector_math.dart&#39;;<br><br>void main() {<br>  runApp(const MyApp());<br>}<br><br>class MyApp extends StatefulWidget{<br>  const MyApp({super.key});<br><br>  @override<br>  MyAppState createState() =&gt; MyAppState();<br>}<br><br>class MyAppState extends State&lt;MyApp&gt; with SingleTickerProviderStateMixin {<br>  double elapsedSeconds = 0;<br>  Scene scene = Scene();<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return MaterialApp(<br>      title: &#39;My 3D app&#39;,<br>      home: Placeholder(),<br>    );<br>  }<br>}</pre><p>Run the app as a smoke test to ensure there are no errors. And remember to <a href=\"https://docs.flutter.dev/perf/impeller#availability\">enable Impeller</a>!</p><pre>flutter run -d macos --enable-impeller</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/912/0*74qs6ytcTjyVHwML\" /></figure><p>Before continuing, set up the ticker for the animation. Override initState in MyAppState to call createTicker.</p><pre>  @override<br>  void initState() {<br>    createTicker((elapsed) {<br>      setState(() {<br>        elapsedSeconds = elapsed.inMilliseconds.toDouble() / 1000;<br>      });<br>    }).start();<br><br>    super.initState();<br>  }</pre><p>As long as the widget is visible, the ticker callback is invoked for every frame. Calling setState triggers this widget to rebuild every frame.</p><p>Next, load up the 3D model that you placed in the project earlier and add it to the Scene.</p><p>Use Node.fromAsset to load the model from the asset bundle. Place the following code in initState.</p><pre>    Node.fromAsset(&#39;build/models/DamagedHelmet.model&#39;).then((model) {<br>      model.name = &#39;Helmet&#39;;<br>      scene.add(model);<br>    });</pre><p>Node.fromAsset asynchronously deserializes the model from the asset bundle and resolves the returned Future&lt;Node&gt; once it&#39;s ready to be added to the scene.</p><p>The MyAppState.initState should now look as follows:</p><pre>  @override<br>  void initState() {<br>    createTicker((elapsed) {<br>      setState(() {<br>        elapsedSeconds = elapsed.inMilliseconds.toDouble() / 1000;<br>      });<br>    }).start();<br><br>    Node.fromAsset(&#39;build/models/DamagedHelmet.model&#39;).then((model) {<br>      model.name = &#39;Helmet&#39;;<br>      scene.add(model);<br>    });<br><br>    super.initState();<br>  }</pre><p>However, you’re still not actually rendering the 3D Scene yet! To do this, use Scene.render, which takes a UI Canvas, a Flutter Scene Camera, and a size.</p><p>One way to access a Canvas is to create a CustomPainter:</p><pre>class ScenePainter extends CustomPainter {<br>  ScenePainter({required this.scene, required this.camera});<br>  Scene scene;<br>  Camera camera;<br><br>  @override<br>  void paint(Canvas canvas, Size size) {<br>    scene.render(camera, canvas, viewport: Offset.zero &amp; size);<br>  }<br><br>  @override<br>  bool shouldRepaint(covariant CustomPainter oldDelegate) =&gt; true;<br>}</pre><p>Don&#39;t forget to set the shouldRepaint override to return true so that the custom painter will repaint whenever a rebuild occurs.</p><p>Lastly, add the CustomPainter to the source tree.</p><pre>  @override<br>  Widget build(BuildContext context) {<br>    final painter = ScenePainter(<br>      scene: scene,<br>      camera: PerspectiveCamera(<br>        position: Vector3(sin(elapsedSeconds) * 3, 2, cos(elapsedSeconds) * 3),<br>        target: Vector3(0, 0, 0),<br>      ),<br>    );<br><br>    return MaterialApp(<br>      title: &#39;My 3D app&#39;,<br>      home: CustomPaint(painter: painter),<br>    );<br>  }</pre><p>This code instructs the camera to move in a continuous circle, but always facing towards the origin.</p><p>Finally, start the app!</p><pre>flutter run -d macos --enable-impeller</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/796/0*_-OFc0vhBHAhrPrO\" /></figure><p>Here&#39;s the full source we put together.</p><pre>import &#39;dart:math&#39;;<br><br>import &#39;package:flutter/material.dart&#39;;<br>import &#39;package:flutter_scene/camera.dart&#39;;<br>import &#39;package:flutter_scene/node.dart&#39;;<br>import &#39;package:flutter_scene/scene.dart&#39;;<br>import &#39;package:vector_math/vector_math.dart&#39;;<br><br>void main() {<br>  runApp(const MyApp());<br>}<br><br>class MyApp extends StatefulWidget {<br>  const MyApp({super.key});<br><br>  @override<br>  MyAppState createState() =&gt; MyAppState();<br>}<br><br>class MyAppState extends State&lt;MyApp&gt; with SingleTickerProviderStateMixin {<br>  double elapsedSeconds = 0;<br>  Scene scene = Scene();<br><br>  @override<br>  void initState() {<br>    createTicker((elapsed) {<br>      setState(() {<br>        elapsedSeconds = elapsed.inMilliseconds.toDouble() / 1000;<br>      });<br>    }).start();<br><br>    Node.fromAsset(&#39;build/models/DamagedHelmet.model&#39;).then((model) {<br>      model.name = &#39;Helmet&#39;;<br>      scene.add(model);<br>    });<br><br>    super.initState();<br>  }<br><br>  @override<br>  Widget build(BuildContext context) {<br>    final painter = ScenePainter(<br>      scene: scene,<br>      camera: PerspectiveCamera(<br>        position: Vector3(sin(elapsedSeconds) * 3, 2, cos(elapsedSeconds) * 3),<br>        target: Vector3(0, 0, 0),<br>      ),<br>    );<br><br>    return MaterialApp(<br>      title: &#39;My 3D app&#39;,<br>      home: CustomPaint(painter: painter),<br>    );<br>  }<br>}<br><br>class ScenePainter extends CustomPainter {<br>  ScenePainter({required this.scene, required this.camera});<br>  Scene scene;<br>  Camera camera;<br><br>  @override<br>  void paint(Canvas canvas, Size size) {<br>    scene.render(camera, canvas, viewport: Offset.zero &amp; size);<br>  }<br><br>  @override<br>  bool shouldRepaint(covariant CustomPainter oldDelegate) =&gt; true;<br>}</pre><h3>Flutter’s great future ahead</h3><p>If you were able to successfully follow one of these guides and get something up and running: Woohoo, congrats!</p><p>Both Flutter GPU and Flutter Scene are very young efforts with limited platform support. But I think someday we&#39;ll look back fondly at these humble beginnings.</p><p>With the Impeller effort, the Flutter team took full ownership over the rendering stack because we needed to specialize the renderer towards Flutter&#39;s use case. And now we&#39;re starting a new chapter in Flutter&#39;s history. One where YOU collectively take control over the rendering!</p><p>Flutter Scene started as a C++ component in Impeller alongside the 2D Canvas renderer with a slim dart:ui extension. By the time I was building it, I was already aware that Flutter Engine wouldn&#39;t be its final destination.</p><p>The sea of architecture decisions for 3D renderers is vast, and no single generic 3D renderer can solve every use case well. &quot;Generic&quot; and &quot;high performance&quot; are generally antithetical goals.</p><p>At best, adequacy at everything all but guarantees excellence at nothing.</p><p>In the world of rendering performance, the situation is even worse. Specializing for one use case often means degrading the performance of another.</p><p>In short, it&#39;s just not possible to ship a generic 3D renderer that can solve every use case for everyone. But, by surfacing the low level APIs necessary for you to build your own solutions (Flutter GPU), and building a useful generic 3D renderer on top of it that&#39;s easy for the Flutter community to inspect and modify (Flutter Scene), we’re carving out the space for Flutter developers to enjoy low-risk for obsolescence and a high reward.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/506/1*jfeUgpEP9AgAz94yVxVW1g.gif\" /></figure><p>I can&#39;t wait to see what you&#39;ll make with these new capabilities. Stay tuned for future releases of Flutter Scene. There&#39;s a lot on the way.</p><p>In the meantime, I’m heading back to work.</p><p>See you soon. :)</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f33d497b7c11\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/getting-started-with-flutter-gpu-f33d497b7c11\">Getting started with Flutter GPU</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-08-06T18:00:29.000Z":{"title":"Announcing Flutter 3.24 and Dart 3.5","link":"https://medium.com/flutter/flutter-3-24-dart-3-5-204b7d20c45d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/204b7d20c45d","category":["flutter-app-development","announcements","flutter","ios","ios-app-development"],"dc:creator":"Michael Thomsen","pubDate":"Tue, 06 Aug 2024 18:00:29 GMT","atom:updated":"2024-08-06T18:00:29.358Z","content:encoded":"<h3>An early look at Flutter GPU, web enhancements, and more!</h3><p>Today, we’re unveiling <a href=\"https://medium.com/p/6c040f87d1e4/edit\">Flutter 3.24</a> and <a href=\"https://medium.com/dartlang/dart-3.5-6ca36259fa2f\">Dart 3.5</a> alongside the last stop<a href=\"https://ioconnectchina.googlecnapps.cn/\"> in the I/O 2024 Connect series,</a> happening in just a few hours in China — one of Flutter’s most prolific communities in the world, making this moment very special.</p><figure><img alt=\"Dash flies in and lands to the left of an outline of 3.24. She presses a button that fills the 3.24 in with Flutter blue.\" src=\"https://cdn-images-1.medium.com/max/1024/1*jzRGig761LnPlvokq2FaVA.gif\" /></figure><p>We kicked off <a href=\"https://io.google/2024/\">Google I/O</a> in May with an <a href=\"https://medium.com/flutter/io24-5e211f708a37\">exciting slew of updates</a>, including the graduation of support for WebAssembly compilation to the stable channel, improvements to Impeller, and an early look at the future of Dart macros.</p><p>The Flutter 3.24 and Dart 3.5 releases build upon our mission to help you craft stunning, performant apps that reach users across mobile, web, and desktop — all from a single, shared codebase. They include an early preview of the new Flutter GPU API, enhancements to element embedding on the web, and several exciting updates for those interested in building for the iOS ecosystem, including early support for Swift Package Manager, and updated functionality to Cupertino widgets.</p><p>Let’s jump in!</p><h3>Impeller: Raising the bar for multi-platform graphics performance</h3><p>Historically, cross-platform frameworks have required compromise on visuals, due to a reliance on high-level abstractions offered by the underlying platforms. Flutter has taken a different approach, with its own rendering layer that offers hardware-accelerated graphics and smooth performance on every device. We’ve made substantial progress with <a href=\"https://docs.flutter.dev/perf/impeller\">Impeller</a> and <a href=\"https://docs.flutter.dev/ui/design/graphics/fragment-shaders\">shaders</a>, unlocking exciting new possibilities in graphics — like 3D.</p><p>We’re excited to share an early preview of the new <a href=\"https://github.com/flutter/engine/blob/main/docs/impeller/Flutter-GPU.md\">Flutter GPU API</a>, a powerful, low-level graphics API integrated directly into the Flutter SDK. The API allows you to define custom raster pipelines and submit draw calls directly to the GPU, making it possible to create specialized renderers like 2D Canvas alternatives, 3D scene graphs, or even particle systems for visually stunning, performant, and immersive experiences without the engine-level bulk typically needed.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/796/0*QC1D0LdTgLynDOnV\" /><figcaption>3D animation of a sci-fi space helmet rendered in flutter_scene.</figcaption></figure><p>Given how low-level the API is, we expect a learning curve for developers who don’t have significant experience developing graphics. That’s why we’re investing in rendering packages, like the new flutter_scene package, which leverages the Flutter GPU API to allow importing animated glTF models and constructing 3D scenes, enabling you to easily build 3D apps and games in Flutter and Dart, like the one below.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FY-DFVKPikVM%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DY-DFVKPikVM&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FY-DFVKPikVM%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"640\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/21e51abf698b844782de55d81e3cd7b4/href\">https://medium.com/media/21e51abf698b844782de55d81e3cd7b4/href</a></iframe><p>While the Flutter GPU API offers exciting possibilities, it’s still in early preview and we might make breaking changes to the API. We recommend developing against Flutter’s main channel when using Flutter GPU. Learn more in the blog post <a href=\"https://medium.com/flutter/getting-started-with-flutter-gpu-f33d497b7c11\">Introducing Flutter GPU &amp; Flutter Scene</a>.</p><h3>Flutter for iOS and macOS: making it easier to deliver beautiful, fast apps for the Apple ecosystem</h3><p>It’s our goal to empower you to build exceptional apps that feel native and perform flawlessly. Part of that work is optimizing performance as well as maximizing Flutter’s compatibility with the underlying platforms, including accessing the full power of the Apple ecosystem.</p><p>In this release, we’ve introduced early support for Swift Package Manager, unlocking access to the thriving Swift package ecosystem, and empowering Flutter plugins to leverage a wealth of pre-built functionality to accelerate development. Once Swift Package Manager (SPM) is widely adopted by plugin developers, it should simplify the Flutter installation process itself, and lower the barrier to entry for newcomers, particularly those that aren’t familiar with the iOS ecosystem. We encourage plugin authors to <a href=\"https://docs.flutter.dev/packages-and-plugins/swift-package-manager/for-plugin-authors#how-to-add-swift-package-manager-support-to-an-existing-flutter-plugin\">try adding support for SPM to your plugins,</a> and provide <a href=\"https://github.com/flutter/flutter/issues\">feedback</a> on your experience.</p><p>Next, we want to enable you to always say “yes” to your designers and deliver high-fidelity experiences on iOS. To address this, we’ve embarked on a journey to modernize and expand our Cupertino widget library, resolving <a href=\"https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aclosed+label%3A%22f%3A+cupertino%22+sort%3Aupdated-desc+closed%3A2024-04-01..2024-07-01+\">15 issues</a> across Cupertino, and adding 37 missing Cupertino widgets in the <a href=\"https://docs.flutter.dev/ui/widgets/cupertino\">widget catalog</a>.</p><p>Finally, we’ve added <a href=\"https://docs.flutter.dev/platform-integration/macos/platform-views\">platform view</a> and <a href=\"https://docs.flutter.dev/platform-integration/web/web-content-in-flutter\">webview</a> support for Flutter macOS apps, allowing for seamless integration of native macOS UI components directly into your Flutter app for a more complete and polished user experience.</p><p>Looking forward, we’re excited to invest more in additional Cupertino widget fidelity, land Swift Package Manager with our ecosystem, and provide other investments that make it even easier to integrate and interoperate with Apple’s platforms.</p><h3>Highlighting the global impact of the vibrant Flutter community</h3><p>We also want to acknowledge that these releases wouldn’t be possible without contributions from the community, including you! This set of releases consist of almost 1,500 commits from over 167 unique contributors, including 49 <em>new</em> contributors. We’re inspired by the continued high levels of activity, commitment, and growth in the Flutter community, including those actively building the framework. Thank you!</p><p>The impact of our collective work is showing up all over the world in incredible apps and experiences that millions of people use every day. For instance, here is a sneak peek at a <a href=\"http://flutter.dev/showcase/xiaomi\">case study</a> showing how and why a small team at a Chinese technology company, Xiaomi, used Flutter to develop a companion app for the firm’s popular new EV, the <a href=\"https://www.mi.com/global/discover/article?id=3263&amp;ref=renatomitra.com\">Xiaomi SU7.</a></p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FwfD7ZQhwACU%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DwfD7ZQhwACU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FwfD7ZQhwACU%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1e141755d6ab1cd3b7962281efd5e6d3/href\">https://medium.com/media/1e141755d6ab1cd3b7962281efd5e6d3/href</a></iframe><p>Several other exciting examples of Flutter apps popping up all over the world:</p><ul><li><a href=\"http://flutter.dev/showcase/sncf-connect\"><strong>SNCF Connect</strong></a>, the French railway, and owners of the largest Flutter app in Europe at over 150 screens, partnered with the Olympics to deliver many updates to the Flutter app that enabled millions of visitors to travel across France during the Olympic games.</li><li><a href=\"http://flutter.dev/showcase/wolt\"><strong>Wolt</strong></a>, part of DoorDash International, used Flutter to expand into the merchant retail market.</li><li><a href=\"http://flutter.dev/showcase/whirlpool\"><strong>Whirlpool</strong></a>, a Fortune 500 company with a worldwide presence, is exploring new sales channels in Brazil using Flutter.</li><li><a href=\"http://flutter.dev/showcase/monta\"><strong>Monta</strong></a>, a Danish EV charging ecosystem startup, brought their first mobile app to market in just 3 months with Flutter, and later successfully ported their web app to Flutter too.</li></ul><h3>Wrap up</h3><p>The above are just a few of many new features and updates to Flutter and Dart in these releases, and you can learn more in the <a href=\"https://medium.com/p/6c040f87d1e4/edit\">Flutter 3.24 technical blog</a> post and in the <a href=\"https://medium.com/dartlang/dart-3.5-6ca36259fa2f\">Dart 3.5 blog post</a>.</p><p>Looking ahead, we’re filled with excitement for the future of Flutter. We remain committed to our mission, and we’re grateful to you — whether a contributor, community member, or Flutter developer — for being part of this amazing journey. We can’t wait to see what you build next!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=204b7d20c45d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/flutter-3-24-dart-3-5-204b7d20c45d\">Announcing Flutter 3.24 and Dart 3.5</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-08-06T18:00:07.000Z":{"title":"What’s new in Flutter 3.24","link":"https://medium.com/flutter/whats-new-in-flutter-3-24-6c040f87d1e4?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/6c040f87d1e4","category":["flutter-app-development","release-notes","flutter-development","announcements","flutter"],"dc:creator":"Kevin Chisholm","pubDate":"Tue, 06 Aug 2024 18:00:07 GMT","atom:updated":"2024-08-07T18:34:26.571Z","content:encoded":"<h4>Unleashing Flutter GPU, Multi-View Embedding, and More</h4><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EA-cAY6uwkYqYb725vnCIw.png\" /><figcaption>Flutter 3.24 on a blue background</figcaption></figure><p>Welcome to the latest Flutter update! Flutter 3.24 is packed with exciting new features and enhancements to elevate your app development experience. This release highlights the preview of Flutter GPU, which enables advanced graphics and 3D scenes directly in Flutter. Web apps can now embed multiple Flutter views, enhancing your app’s versatility. And finally, we’ve added video ad monetization support to help you maximize revenue.</p><p>In the past few months, the Flutter community has been incredibly active, with 852 framework commits and 615 engine commits. We’re excited to welcome 49 new contributors who have helped make this release possible. Your dedication and passion are what drive Flutter forward.</p><p>So, dive in and discover all the new features and enhancements that the Flutter community has brought to this latest release!</p><h3>Flutter Framework</h3><h4>New Slivers</h4><p>This release adds new slivers that can be composed together for dynamic app bar behaviors:</p><ul><li><a href=\"http://api.flutter.dev/flutter/widgets/PinnedHeaderSliver-class.html\">PinnedHeaderSliver</a></li><li><a href=\"http://api.flutter.dev/flutter/widgets/SliverResizingHeader-class.html\">SliverResizingHeader</a></li></ul><p>You can use these new slivers to make headers that float, stay pinned, or resize as the user scrolls. These new slivers are similar to the existing <a href=\"https://api.flutter.dev/flutter/widgets/SliverPersistentHeader-class.html\">SliverPersistentHeader</a> and <a href=\"http://sliverappbar\">SliverAppBar</a> slivers, but have simpler APIs that can be combined for greater effect.</p><p>These new slivers come with new sample code. For example, PinnedHeaderSliver’s API documentation has an example that recreates effects like the iOS Settings app’s app bar:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*bdcb6KGonosfPZ6m\" /></figure><h4>Updates in the Cupertino library</h4><p>In this release, we’ve improved the fidelity of <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoActionSheet-class.html\">CupertinoActionSheet</a><strong>. </strong>Sliding your finger across the action sheet’s buttons now provides haptic feedback. The buttons’ font size and weight now match their native counterparts.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/655/0*_o_9V0RlITOZdU4v\" /></figure><p>We’ve also added new focus properties to <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoButton-class.html\">CupertinoButton</a>, and you can now customize the color of a disabled <a href=\"https://api.flutter.dev/flutter/cupertino/CupertinoTextField-class.html\">CupertinoTextField</a>.</p><p>A refresh of the Cupertino library is underway, expect more updates in future releases!</p><h4>TreeView</h4><p>The <a href=\"https://pub.dev/packages/two_dimensional_scrollables\">two_dimensional_scrollables</a> package released the <a href=\"https://pub.dev/documentation/two_dimensional_scrollables/latest/two_dimensional_scrollables/TreeView-class.html\">TreeView</a> widget, alongside several companion classes for building performant scrolling trees that can scroll in all directions as the tree grows. The sample app included in the package was also updated with several new examples of using the <a href=\"https://pub.dev/documentation/two_dimensional_scrollables/latest/two_dimensional_scrollables/TableView-class.html\">TableView</a> and <a href=\"https://pub.dev/documentation/two_dimensional_scrollables/latest/two_dimensional_scrollables/TreeView-class.html\">TreeView</a> widgets.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*wcmJCv-6owwsolRl\" /></figure><p><a href=\"https://api.flutter.dev/flutter/widgets/TreeSliver-class.html\">TreeSliver</a> was also added to the framework for building trees in one dimensional scrolling. The TreeView and TreeSliver APIs match, making it easy to switch between the one that is right for your use case.</p><h4>CarouselView</h4><p>This release included the <a href=\"https://m3.material.io/components/carousel/overview\">Material Design carousel</a> widget: CarouselView. The CarouselView presents the “<a href=\"https://m3.material.io/components/carousel/specs#477de3a1-c9df-4742-baf3-bcd5eeb3764c\">Uncontained</a>” layout: a scrollable list of items that scroll to the edge of the container, and the leading and the trailing items can dynamically change size when they are scrolling out of the view and scrolling in the view.</p><figure><img alt=\"Flutter CarouselView example\" src=\"https://cdn-images-1.medium.com/max/512/1*6ytqSvtR2TJzAE6LntHTGw.gif\" /></figure><h4>More functionality available from widgets</h4><p>This release contains some of the work to relocate core widget logic, that isn’t design specific, out of the Material library and into the Widgets library for more general use. This includes:</p><ul><li>The <a href=\"https://github.com/flutter/flutter/pull/148523\">Feedback</a> widget, which provides easy access to haptic and audio feedback from the device in response to gestures like tap, long press, and more.</li><li><a href=\"https://github.com/flutter/flutter/pull/148272\">ToggleableStateMixin and </a><a href=\"https://github.com/flutter/flutter/pull/148272\">ToggleablePainter</a>, base classes for building toggle widgets like checkboxes, switches, and radio buttons.</li></ul><h4>Enhanced enum features for AnimationStatus</h4><p>In a fantastic <a href=\"https://github.com/flutter/flutter/pull/147801\">contribution</a> from community member <a href=\"https://github.com/nate-thegrate\">@nate-thegrate</a>, enhanced enum features were added to <a href=\"https://api.flutter.dev/flutter/animation/AnimationStatus.html\">AnimationStatus</a>, including getters:</p><ul><li>isDismissed</li><li>isCompleted</li><li>isRunning</li><li>isForwardOrCompleted</li></ul><p>Some of these getters already existed in <a href=\"https://api.flutter.dev/flutter/animation/Animation-class.html\">Animation</a> subclasses, like <a href=\"https://api.flutter.dev/flutter/animation/AnimationController-class.html\">AnimationController</a> and <a href=\"https://api.flutter.dev/flutter/animation/CurvedAnimation-class.html\">CurvedAnimation</a>. Now all of these status getters are available in Animation subclasses in addition to AnimationStatus. Lastly, a <a href=\"https://api.flutter.dev/flutter/animation/AnimationController/toggle.html\">toggle</a> method was added to AnimationController to switch the direction of the animation.</p><h4>Updates in SelectionArea</h4><p>Flutter’s <a href=\"https://api.flutter.dev/flutter/material/SelectionArea-class.html\">SelectionArea</a> now supports more native gestures associated with a triple click using a mouse, and double tapping on a touch device. By default, the <a href=\"https://api.flutter.dev/flutter/material/SelectionArea-class.html\">SelectionArea</a> and <a href=\"https://api.flutter.dev/flutter/widgets/SelectableRegion-class.html\">SelectableRegion</a> widgets use these new gestures.</p><p>Triple click</p><ul><li>Triple click + drag: Extends the selection in paragraph blocks.</li><li>Triple click: Selects the paragraph block at the clicked position.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_GmbsIKfnwEAW6G8\" /></figure><p>Double tap</p><ul><li>Double tap + drag: extends the selection in word blocks (supported on native Android/Fuchsia/iOS, and iOS web).</li><li>Double tap: selects the word at the tapped position (supported on native Android/Fuchsia/iOS, and Android/Fuchsia web).</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/770/0*DwZgIybQr3FDFxXd\" /></figure><h3>Engine</h3><h4>Impeller</h4><p><strong>Improving Performance and Fidelity</strong></p><p>In anticipation of removing the Impeller opt-out on iOS in a stable release coming soon, the team has been hard at work on improvements to Impeller’s performance and fidelity. As one example, a long series of improvements to text rendering <a href=\"https://github.com/flutter/flutter/issues/138798\">greatly increased the performance of emoji scrolling</a>, eliminating jank when scrolling a large collection of emojis, which was a fantastic stress test of Impeller’s text rendering capabilities.</p><p>Additionally, by <a href=\"https://github.com/flutter/engine/pull/53042\">solving a number of issues</a> we have also greatly improved the fidelity of Impeller’s text rendering in this release. In particular, text weight, spacing, and kerning now all match the fidelity of text with the legacy renderer.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gIu2Wm9mpuMGb1JY\" /><figcaption>Before (Note gaps instead of proper kerning, and lighter than intended font weight.)</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tt9hlqhTbrmj4ZCt\" /><figcaption>After</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/739/0*eMboSxWLEJBS_EyL\" /><figcaption>Before (Note incorrect spacing, for example in “vergelijken”)</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/739/0*uxeGJuIKWu0dPW1d\" /><figcaption>After</figcaption></figure><p><strong>Android Preview</strong></p><p>In this release, we are continuing to preview Impeller on Android. We have extended the preview period due to difficulties stemming from <a href=\"https://github.com/flutter/flutter/issues/146499#issuecomment-2082873125\">a bug in Android 14</a> that affects APIs that Impeller uses for Platform Views. The bug has since been patched by the Android team, however many deployed devices will be running the unpatched Android version for the foreseeable future. Working around these issues implies an additional API migration and therefore an additional stable release cycle. Out of an abundance of caution and to ensure that Flutter apps work on the widest possible range of devices, we are holding off on making Impeller the default renderer until a stable release later this year.</p><p>As the Impeller preview on Android continues through the 3.24 stable cycle, we request that Flutter developers upgrade to the latest stable version, and file issues about any shortcomings noticed when Impeller is enabled. Feedback at this stage is invaluable to ensuring that Impeller is successful on Android and that we will be able to confidently make it the default renderer in a release later this year. The Android hardware ecosystem is much more diverse than the iOS ecosystem. For that reason, the most helpful feedback about Impeller should include detailed information about the specific device and Android version where issues occurred.</p><h4>Improved defaults for downscaled images</h4><p>In this release, the default FilterQuality for images has been changed from FilterQuality.low to FilterQuality.medium. When a large image is substantially larger than its destination rectangle, which is a common scenario, FilterQuality.low causes an image to look more ‘pixelated’ and be slower to render than FilterQuality.medium. Going forward the team is also exploring more suitable names for the various FilterQuality levels.</p><h4>Flutter GPU preview</h4><p>Flutter has introduced a major update for rendering capabilities with the Flutter GPU, available on the main channel. This low-level graphics API allows developers to create custom renderers using Dart code and GLSL shaders without needing any native platform code.</p><p>Flutter GPU expands what you can render directly in Flutter, enabling advanced graphics and 3D scenes. It requires the Impeller rendering backend, currently supported on iOS, macOS, and Android. Although in early preview, Flutter GPU aims to eventually support all Flutter platforms.</p><p>The API allows for full control over render pass attachments, the vertex stage, and data upload to the GPU. This flexibility is essential for creating sophisticated rendering solutions, from 2D character animations to complex 3D scenes.</p><p>Developers can start using Flutter GPU by switching to the main channel and adding the flutter_gpu package to their projects. The upcoming months will see more functionality and stability improvements, with higher-level rendering libraries like flutter_scene simplifying the use of these advanced features.</p><p>For a deeper dive into Flutter GPU and to see how you can leverage it in your projects, check out the detailed <a href=\"https://medium.com/flutter/getting-started-with-flutter-gpu-f33d497b7c11\">Flutter GPU blog post</a>. Whether you’re creating games or complex graphics, Flutter’s new GPU capabilities make it a robust choice for your product.</p><h3>Web</h3><h3>Multi-view embedding</h3><p>Flutter web applications can now leverage multi-view embedding, allowing developers to render content into multiple HTML elements simultaneously. This feature, known as “embedded mode” or “multi-view,” offers flexibility for integrating Flutter views into existing web applications.</p><p>In multi-view mode, a Flutter web application doesn’t render immediately upon launch. Instead, it waits until the host application adds the first “view” using the addView method. The host application can dynamically add or remove these views, and Flutter adjusts its widgets accordingly.</p><p>To enable multi-view mode, set multiViewEnabled: true in the initializeEngine method within the flutter_bootstrap.js file. Views can then be managed from JavaScript, adding them to specified HTML elements and removing them as needed. Each view addition and removal triggers updates within Flutter, allowing for dynamic content rendering.</p><p>This feature is particularly useful for integrating Flutter into complex web applications where multiple, independent Flutter views are required. It also supports custom initialization data for each view, enabling personalized configurations and interactive experiences.</p><p>For a deeper dive into implementing multi-view embedding in your Flutter web applications, check out the <a href=\"https://docs.flutter.dev/platform-integration/web/embedding-flutter-web\">detailed documentation</a>.</p><h3>Monetization</h3><h3>Video ad monetization support</h3><p>We have launched a new <a href=\"https://pub.dev/packages/interactive_media_ads\">Interactive Media Ads (IMA) plugin</a> to support instream video ad monetization on Flutter mobile apps. The new IMA plugin provides new ad monetization opportunities for Flutter apps on top of the existing <a href=\"https://pub.dev/packages/google_mobile_ads\">Google Mobile Ads (GMA) plugin</a> which primarily supports display ad formats.</p><p>Instream video ads are typically shown to a user in the video player before (preroll), during (midroll), or after (postroll) video content playback. Some instream video ads can be skippable as well.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/836/0*_c0s8KMdLNyfxOMQ\" /></figure><p><strong>Flutter IMA benefits</strong>:</p><ul><li>Seamlessly monetize video player content on Flutter apps. For example, when an app user clicks <strong>play</strong> on video content, you can now implement the Flutter IMA plugin to first show the user a 15 second ad before starting the video content.</li><li>Tap into the same benefits of native IMA SDK including access to premium Google ad demand and industry standard compliance (such as <a href=\"https://iabtechlab.com/standards/vast/\">IAB VAST</a>).</li></ul><p>The initial launch version currently supports pre-roll video ads on Android and iOS platform. Support for midroll ads will be available soon. We encourage you to start exploring the new IMA plugin on your Flutter app video content. Please let us know if have any issues or concerns on <a href=\"https://github.com/flutter/flutter/issues?q=is%3Aissue+is%3Aopen+label%3A%22p%3A+interactive_media_ads%22\">GitHub</a>.</p><p>Resources: <a href=\"https://pub.dev/packages/interactive_media_ads\">Plugin guide</a>, <a href=\"https://pub.dev/packages/interactive_media_ads/example\">Sample App</a>, <a href=\"https://github.com/flutter/packages/tree/main/packages/interactive_media_ads\">Git Repository</a></p><h3>iOS</h3><h3>Swift Package Manager initial support</h3><p>Today, Flutter uses CocoaPods to manage native iOS or macOS dependencies.</p><p>Flutter 3.24 adds early support for Swift Package Manager. This brings several benefits, including:</p><p>1. <strong>Access to the Swift package ecosystem</strong>. Flutter plugins will be able to leverage the growing ecosystem of <a href=\"https://swiftpackageindex.com/\">Swift packages</a>! <br>2. <strong>Simplifies Flutter installation</strong>. Swift Package Manager is bundled with Xcode. In the future, you won’t need to install Ruby and CocoaPods to use Flutter for Apple’s platforms.</p><p>We encourage plugin authors to<a href=\"https://docs.flutter.dev/packages-and-plugins/swift-package-manager/for-plugin-authors#how-to-add-swift-package-manager-support-to-an-existing-flutter-plugin\"> try adding support for Swift Package Manager to your plugins</a>, and provide feedback on your experience.</p><p>If you have feedback on Flutter’s support for Swift Package Manager, please <a href=\"https://github.com/flutter/flutter/issues/new/choose\">file an issue</a>.</p><h3>Ecosystem</h3><h3>Shared Preferences plugin updates</h3><p>We’ve added two new APIs to the <a href=\"https://pub.dev/packages/shared_preferences\">shared_preferences</a> plugin, SharedPreferencesAsync and SharedPreferencesWithCache. The most significant change is that the Android implementation uses Preferences DataStore instead of Shared Preferences.</p><p>SharedPreferencesAsync allows users to call directly to the platform to get the most up to date preferences saved on the device, at the cost of being async and a little slower than using the cached version. This is useful for preferences that can be updated by other systems or isolates, which would make a cache stale.</p><p>SharedPreferencesWithCache is built on top of SharedPreferencesAsync and allows users to access a locally cached copy of the preferences synchronously. This is similar to the old API, but can now be instantiated multiple times with different parameters.</p><p>These new APIs are intended to replace the current SharedPreferences API in the future. However, this is one of the most used plugins in the ecosystem, and we know it will take time for the ecosystem to switch to the new APIs.</p><h3>Flutter and Dart Package Ecosystem Summit Europe 2024</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*fWo9ieYzQcJjwQBi\" /></figure><p>As part of Fluttercon Europe 2024, we held the first in-person Flutter and Dart Package Ecosystem Summit. This followed on from the first virtual summit we held in August 2023. See a summary of takeaways from the discussion sessions <a href=\"https://docs.google.com/document/d/e/2PACX-1vRFLdpIJYO5YPARcyUT1FYPzwkFb1hxh_agqnCXxsyirXocLZS5jobs3xFV5ZGpSQHLHZiBzqbJlXNV/pub\">here</a>.</p><p>We’re excited to announce that the next summit will be at <a href=\"https://flutterconusa.dev/\">Fluttercon USA</a> in New York City on 20th September 2024! If you’re a package author or contributor, and are attending Fluttercon USA 2024, <a href=\"https://rsvp.withgoogle.com/events/flutter-package-ecosystem-summit-usa-2024\">register</a> to save your spot in the summit.</p><p>The summit brought together package authors and maintainers for unconference-style sessions on the following topics:</p><ul><li>Session 1 — Past, Present and Future of Native Interop</li><li>Session 2 — Sustainable package maintenance models</li><li>Session 3 — Addressing package ecosystem fragmentation</li></ul><p>We believe the summit, especially when part of more general Flutter and Dart events, is a valuable platform for open discussion among the community, to surface critical challenges and brainstorming solutions. We’re looking forward to holding more of these summits going forward, in partnership with the community.</p><h3>DevTools and IDEs</h3><p>This release includes some exciting improvements to the Flutter DevTools tooling suite.</p><p>If you have ever wondered whether your Flutter app is building more Widgets than expected, a new feature in the <strong>DevTools Performance</strong> tool that can help with that. Using the new<strong> Rebuild Stats</strong> feature, you can capture information about how many times a widget was built in your app or even in a specific Flutter frame.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/749/0*7LXjXlFR9w-VR6xk\" /></figure><p><em>A screenshot of the DevTools Performance tool tracking rebuild stats.</em></p><p>We’ve added polish and critical bug fixes to tools like the <strong>Network profiler</strong> and the <strong>Flutter Deep Links tool</strong>, and have made some general improvements to provide you with a better experience when you are using DevTools from within your IDE. Speaking of IDEs, did you know that you can use every DevTools tool directly inside your IDE?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tdpToIuTd-mBq-_R\" /></figure><p><em>DevTools screens open inside a VS Code window.</em></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*QvoXCNqqfsrMn1oC\" /></figure><p><em>DevTools screens open inside Android Studio tool windows.</em></p><p>This release includes improvements to the Flutter Sidebar in VS Code to give you easier access to the tools you are looking for. Upgrade to the latest versions of VS Code and the Flutter and Dart extensions to access the improved sidebar.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/318/0*BzEybhMlV-SnSZZl\" /></figure><p><em>The Flutter Sidebar is adaptive and scales to fit your workspace</em></p><p>This release also includes some major improvements to the <a href=\"https://docs.flutter.dev/tools/devtools/extensions\">DevTools Extensions</a> framework. You can now use DevTools extensions (tools provided by one of your package dependencies) when you are debugging a Dart or Flutter test, or even when you aren’t debugging anything, but are just writing code in your IDE. So, if you’ve wanted to use a tool (or build one!) for one of these user journeys, it is now possible.</p><p>To learn more about all the updates included in Flutter 3.24 check out the release notes for DevTools <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.35.0\">2.35.0</a>, <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.36.0\">2.36.0</a>, and <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.37.2\">2.37.2</a>.</p><h3>Breaking changes and deprecations</h3><p>Breaking changes in this release include changes to <a href=\"https://docs.flutter.dev/release/breaking-changes/navigator-and-page-api\">Navigator’s pages API</a>, <a href=\"https://docs.flutter.dev/release/breaking-changes/popscope-with-result\">generic types in PopScope</a>, <a href=\"https://docs.flutter.dev/platform-integration/web/renderers\">Flutter web’s default renderer</a> and the introduction of some new deprecations. See the full list of migration guidance on the <a href=\"https://docs.flutter.dev/release/breaking-changes\">breaking changes page</a>.</p><p>As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a> — these help us identify these breaking changes. To learn more, check out <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">Flutter’s breaking change policy</a>.</p><h3>Conclusion</h3><p>At the heart of Flutter’s success is you — our amazing community. This release wouldn’t be possible without your countless contributions and unwavering passion. From the bottom of our hearts, thank you.</p><p>To dive into the specifics of what has been achieved with this release, we invite you to view the <a href=\"https://docs.flutter.dev/release/release-notes/release-notes-3.24.0\">release notes</a> and <a href=\"https://github.com/flutter/flutter/blob/main/CHANGELOG.md\">change log</a> for a comprehensive list of additions in Flutter 3.24.</p><p>Flutter 3.24, alongside Dart 3.5, is now available on the stable channel. Embarking on this latest journey with Flutter is as straightforward as running flutter upgrade. We can’t wait to see what you build!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6c040f87d1e4\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-24-6c040f87d1e4\">What’s new in Flutter 3.24</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-06-26T17:01:39.000Z":{"title":"How we built it: Creating the I/O Crossword puzzle, powered by AI","link":"https://medium.com/flutter/how-we-built-it-creating-the-i-o-crossword-puzzle-powered-by-ai-2210e39b04b9?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/2210e39b04b9","category":["flutter-app-development","flutter","game-development","crossword-puzzles","flutter-game-development"],"dc:creator":"Very Good Ventures Team","pubDate":"Wed, 26 Jun 2024 17:01:39 GMT","atom:updated":"2024-06-26T17:01:39.029Z","content:encoded":"<p><strong><em>Adding a fun, helpful twist to a classic word game with Flutter, Firebase Genkit, and the Gemini API</em></strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4ylubp836_tc4Nni\" /></figure><p>For this year’s I/O, Very Good Ventures partnered with the Flutter and Firebase teams at Google to create a unique, digital experience to showcase the power of the Gemini API.</p><p>The fun (and challenge) of crossword puzzles is solving the clues to complete the board. A natural place to start for words and clues was everything we’ve talked about at I/O this year. To generate the game content, we gave videos of the keynotes to <a href=\"https://gemini.google.com/\">Gemini Advanced</a> and asked it to create a list of topical technology-related words and clues to make playing the game a fun way to learn about everything announced this year at I/O.</p><p>Keep reading to learn how we built the UI with Flutter and check out the open-source code for the game, which you can access on <a href=\"https://github.com/VGVentures/io_crossword\">GitHub</a>.</p><p><strong>How to play</strong></p><p>When you log in to the puzzle, you are prompted to choose your team. As you correctly answer a clue, the word fills in and the cells change to your team color. Your team earns points for every word you solve and you earn a bonus for a streak of solving words without asking for hints.</p><p>Need a hint? Click the <strong>Hint</strong> button, then ask up to ten yes-or-no questions about the concealed word. The <a href=\"https://ai.google.dev/\">Gemini API</a> privately responds to your questions so you can fill in more words and help your team claim Victory!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*1aAyHb71XpChgH6R\" /></figure><p>The design of the <em>hint</em> feature is a great example of how different technologies can work together to solve a problem. Hints are powered by <a href=\"https://firebase.google.com/docs/genkit\">Firebase Genkit</a>, a new framework for AI development announced at I/O, and are deployed as a Firebase Function.</p><p>The network request to the API includes the answer to the clue, so to keep the response hidden from the client in the message data, we built a simple Dart backend using the <a href=\"https://pub.dev/packages/dart_frog\">Dart Frog package</a> to make the experience more robust. The Frog backend calls Genkit to get the hint and retrieves the answer from the database. That way players can’t simply inspect the network call to figure out the answers to the game.</p><p>You can read more about how the Genkit flow was built in the <a href=\"https://firebase.blog/posts/2024/06/ai-powered-crossword-genkit\">Firebase deep dive blog</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5i_oBZnXJonFcLc5\" /></figure><p><strong>Rendering a performant crossword board with Flutter</strong></p><p>The board is one of the core pieces of the game. We optimized player movement on the puzzle to ensure good performance and make the best user experience for players.</p><p>We considered two options to build the board: straight Flutter or leverage the <a href=\"https://flame-engine.org/\">Flame</a> game engine. The most compelling feature of Flame for this game is its camera API, which allows the mascots to easily move and supports zoom controls. However, since that was really the only feature of Flame we would be using, we ultimately decided that using a full game engine like Flame would be overkill for this scenario.</p><p>Looking for an alternative solution, we explored the <a href=\"https://api.flutter.dev/flutter/widgets/InteractiveViewer-class.html\">InteractiveViewer</a> widget, which allows rendering the words in a canvas of a custom size, and moving the mascots around freely with matrix transformations. InteractiveViewer was a simpler solution for our needs with less dependencies and load, which better allowed us to showcase the flexibility and performance of Flutter.</p><p><strong>The power and flexibility of the InteractiveViewer</strong></p><p>The InteractiveViewer has built-in zoom gestures, but we wanted to add more intuitive buttons for the desktop experience. Leveraging the matrix transformations, we implemented zoom controls by first calculating the change in scale and updating the new viewport with the center as a constant reference point:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*D0vBnIvT4TKXnRnG\" /></figure><p>Once we have the new tentative viewport, we have to ensure that it fits within the boundaries of the board. We have two scenarios that we must allow for: when the viewport is bigger than the board, or when it’s positioned out of bounds. We update both the change in scale and the translation of the viewport to ensure it fits within the boundaries by tweaking the zoom level or the location of the viewport, as shown in the following code:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wpfH-WuFnd984LEW\" /></figure><p>Finally, calculate the transformation and apply it to the InteractiveViewer controller:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Sf93caUyyPq4OKKa\" /></figure><p>With this code, we’ve extended the zoom controls of the InteractiveViewer and transformed the viewport according to our needs.</p><p><strong>Boosting performance with WebAssembly in Flutter</strong></p><p>WebAssembly support for Flutter web apps was one of the major announcements for the Flutter community this year at IO. With players across the world playing the game at the same time, performance was a critical factor. We leveraged <a href=\"https://docs.flutter.dev/platform-integration/web/wasm\">WebAssembly (Wasm)</a>, built into Flutter, to reduce performance bottlenecks and maintain a smooth frame rate, particularly when it comes to the character and board animations in the game.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/719/0*Nyoq1GrKd0eFce-M\" /></figure><p><strong>Dart Backend and Cloud Run: Seamless code sharing between backend and frontend</strong></p><p>To ensure a smooth gaming experience for all users, our Dart backend is built with the <a href=\"https://pub.dev/packages/dart_frog\">Dart Frog package</a> and is hosted on <a href=\"https://dartfrog.vgv.dev/docs/deploy/google-cloud-run\">Google Cloud Run,</a> to leverage the auto scaling capabilities. This helps to maintain optimal performance regardless of the active number of players as the game makes multiple calls, such as every time a user is created, or when a player submits a word or asks for a hint.</p><p>Using a backend to confirm the answers to each clue also allowed us to safeguard the crossword puzzle and prevent cheating. Specifically, the app reads information with the Flutter Firestore SDK but the database <em>only</em> allows changes from the Dart back end. This also allowed for faster development since we could use the same language (Dart) between the front end and the back end.</p><p>We can see this pattern in action in the Player data model, for example, which creates a player using the Dart Frog API.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*s1G59HNBAWqoq0xt\" /></figure><p>The app directly accesses the players leaderboard, reusing the same model and avoiding duplication and desynchronization:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*538Moipv7JTPricT\" /></figure><p><strong>Start playing: Solve the I/O Crossword puzzle!</strong></p><p>Start playing the <a href=\"https://crossword.withgoogle.com/\">crossword</a> on your own in all its across-and-down glory. For those who want to dig into the details, check out its <a href=\"https://github.com/VGVentures/io_crossword\">open-source code</a> and the <a href=\"https://developers.google.com/learn/pathways/solution-crossword\">Developer Learning Pathway</a> to showcase how we built it. Catch the <a href=\"https://www.youtube.com/watch?v=xKmEOXZsU_0\">recap of Google I/O</a> to learn more about everything announced this year!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2210e39b04b9\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/how-we-built-it-creating-the-i-o-crossword-puzzle-powered-by-ai-2210e39b04b9\">How we built it: Creating the I/O Crossword puzzle, powered by AI</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-05-30T15:37:07.000Z":{"title":"All the Flutter news from a busy Google I/O 2024","link":"https://medium.com/flutter/all-the-flutter-news-from-a-busy-google-i-o-2024-7c963c064f8d?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/7c963c064f8d","category":["recaps","google-io-2024","announcements","flutter","flutter-app-development"],"dc:creator":"Michael Thomsen","pubDate":"Thu, 30 May 2024 15:37:07 GMT","atom:updated":"2024-05-30T15:37:07.488Z","content:encoded":"<h4>Catch up on all the big product updates, new resources, and success stories announced at Google I/O 2024</h4><p>It’s hard to believe that <a href=\"https://io.google/2024/\">Google I/O 2024</a> was already two weeks ago. We couldn’t be more grateful for the Flutter community’s support — the energy was uplifting!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/549/1*--DvqdXSA38rPuqMK5c0tQ.png\" /><figcaption>Flutter logo illustration</figcaption></figure><p>We shared a lot of product updates, resources, developer stories, technical sessions, and workshops, across several blogs, videos, and events — and we know it can be tough to keep track of it all.</p><p>Below, you’ll find an overview of everything we shared at Google I/O 2024, as well as updates on locations and dates for events where you might be able to connect with us and other Flutter community members at I/O Connect in Berlin, Bengaluru, Beijing, and I/O Extended events all summer long.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fx2WOHonEwqM&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dx2WOHonEwqM&amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2Fx2WOHonEwqM%2Fhqdefault.jpg&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/712779b5030e3328a07a329d72a40505/href\">https://medium.com/media/712779b5030e3328a07a329d72a40505/href</a></iframe><h3>Blog posts</h3><p>We launched <strong>four new blog posts</strong> across the Dart and Medium blogs:</p><ul><li><a href=\"https://medium.com/flutter/io24-5e211f708a37\">Landing Flutter 3.22 and Dart 3.4 at Google I/O 2024</a></li><li><a href=\"https://medium.com/flutter/fbde6c164fe3\">What’s new in Flutter 3.22</a></li><li><a href=\"https://medium.com/flutter/announcing-the-winners-of-the-global-gamers-challenge-1ccf4d271226\">Announcing the winners of the Global Gamers Challenge</a></li><li><a href=\"https://medium.com/dartlang/dart-3-4-bd8d23b4462a\">Announcing Dart 3.4</a></li></ul><p>We also partnered with the Android team on a blog post to offer some guidance on <strong>how to choose the right framework</strong> for your project; Flutter, Jetpack Compose, and Kotlin Multi-Platform:</p><ul><li><a href=\"https://developers.googleblog.com/en/making-development-across-platforms-easier-for-developers/\">Making development across platforms easier for developers</a></li></ul><h3>Google I/O talks, codelabs, and workshops</h3><p>The main Google I/O event featured a selection of exciting talks on Dart and Flutter. We recommend starting with the <a href=\"https://www.youtube.com/watch?v=lpnKWK-KEYs\"><strong>What’s new in Flutter</strong></a><strong> keynote</strong>, and then moving on to our <a href=\"https://io.google/2024/explore/?q=technical-session,flutter\">five technical sessions</a>, which feature topics such as CameraX, adaptive UI, AI agents, Gemini, and app deep links.</p><p>We also have <a href=\"https://io.google/2024/explore/?q=codelab,flutter\">three new codelabs</a>, all focused on creating <a href=\"https://flutter.dev/games\">casual games with Flutter</a>. They can help you get started with 2D physics and adding sound &amp; music. For even more detail, check out the new <a href=\"https://io.google/2024/explore/?q=workshop,flutter\">2D physics games workshop</a>.</p><h3>New Flutter showcase stories</h3><p>The <a href=\"https://flutter.dev/showcase\">Flutter Showcase</a> exhibits a selection of Flutter apps that illustrate compelling user experiences you can create with Flutter across mobile, web, and desktop. We added <strong>four new showcase stories</strong> for Google I/O 2024:</p><ul><li><a href=\"https://flutter.dev/showcase/universal-studios\">Universal Studios</a>: <em>Universal Studios build next generation experiences with Flutter</em></li><li><a href=\"https://flutter.dev/showcase/supercell\">Supercell</a>: <em>Flutter helps Supercell reduce Supercell ID core code size by 45%</em></li><li><a href=\"https://flutter.dev/showcase/etermax\">Etermax</a>: <em>Etermax boosts developer efficiency with Flutter</em></li><li><a href=\"https://flutter.dev/showcase/virgin-money\">Virgin Money</a>: <em>Virgin Money unifies app development with Flutter</em></li></ul><h3>I/O Connect events</h3><p>Google I/O did not end with the <a href=\"https://io.google/2024/\">main event</a> at Shoreline in Mountain View, California, USA. There are a number of <a href=\"https://gdg.community.dev/ioextended/\">Google I/O community events</a> across the globe, plus <a href=\"https://developers.google.com/events\">Google I/O Connect</a> events planned in three locations:</p><ul><li>I/O Connect Berlin, Germany on 27 June 2024</li><li>I/O Connect Bengaluru, India on 17 July 2024</li><li>I/O Connect Beijing, China on 7–8 August 2024</li></ul><p>The Dart and Flutter teams will be represented at all three I/O Connect events, and we hope to connect with many of you! If you’d like to join an event, make sure to <a href=\"https://developers.google.com/events\">register</a>. We look forward to connecting!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7c963c064f8d\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/all-the-flutter-news-from-a-busy-google-i-o-2024-7c963c064f8d\">All the Flutter news from a busy Google I/O 2024</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-05-14T20:36:19.000Z":{"title":"Announcing the winners of the Global Gamers Challenge","link":"https://medium.com/flutter/announcing-the-winners-of-the-global-gamers-challenge-1ccf4d271226?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/1ccf4d271226","category":["flutter","games","game-development"],"dc:creator":"Kelvin Boateng","pubDate":"Tue, 14 May 2024 20:36:19 GMT","atom:updated":"2024-06-12T00:27:42.868Z","cc:license":"http://creativecommons.org/licenses/by/4.0/","content:encoded":"<h3>Our 10 top projects, and how to stay involved with sustainability games</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*S_bBN0WiR_Q5F08J\" /></figure><p>We asked the Flutter and Global Citizen communities to come together to build epic Flutter games that focused on helping the planet. Hundreds of innovative game projects were submitted by thousands of passionate developers spanning over 50 countries.</p><p>Each project aimed to empower players with knowledge and actions that can protect our planet. From resource conservation to combating pollution, these games have raised our collective awareness of pressing environmental issues while being genuinely fun to play! We’re deeply inspired by the incredible ideas and passion of the entries.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F_GgqdB9md1w&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D_GgqdB9md1w&amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2F_GgqdB9md1w%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f79ed19f8ef6235e83b919df5506662f/href\">https://medium.com/media/f79ed19f8ef6235e83b919df5506662f/href</a></iframe><h3>One last drumroll for our Top 10</h3><p>For 103 days, these project teams have ideated, built, sought feedback on, and refined their projects. The result — exciting games that encourage us all to think more deeply about the ways we can live more sustainably. Here they are, in alphabetical order!</p><h4><a href=\"https://devpost.com/software/wip-au-flutter-game\">Better World</a></h4><p>A variety of environmental themes, colorful visuals and music, and ideas to partner with organizations to promote positive action.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*tC1QJGzd_UQhSNuapBbFlA.gif\" /></figure><h4><a href=\"https://devpost.com/software/craftown\">Craftown</a></h4><p>A unique blend of classic real-time strategy and resource management gameplay, with a focus on sustainability themes.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*5-BTF74D9iY2W-eg\" /></figure><h4><a href=\"https://devpost.com/software/ecoshift-chronicles\">EcoShift Chronicles</a></h4><p>Encourages positive action with charming visuals and sound design, presenting players with relatable choices and their environmental consequences.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*2tKU55OoZoT6H8Df\" /></figure><h4><a href=\"https://devpost.com/software/gomiland\">Gomiland</a></h4><p>Visually appealing, educational, waste management game, inspired by Japanese culture.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*9PUEQpgttn8Oib0e\" /></figure><h4><a href=\"https://devpost.com/software/last-bottle\">Last Bottle</a></h4><p>Charming design and collectible elements that effectively communicate its core message about the limitations of recycling and thinking critically about environmental issues.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*W8ns7jNJ3jZ0SXbd\" /></figure><h4><a href=\"https://devpost.com/software/mgame-a-waste-management-game\">MGame — A waste management game</a></h4><p>Ambitious simulation game that offers an engaging take on complex waste management systems, reminiscent of classic city-building titles.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*jof-AXtEcUz1_WFL\" /></figure><h4><a href=\"https://devpost.com/software/projectocean\">Ocean Rangers</a></h4><p>A compelling narrative, engaging characters, and strategic gameplay elements offer a unique take on a familiar genre with an environmental twist.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*P1nBcfMDFwveciQu\" /></figure><h4><a href=\"https://devpost.com/software/plasticpunk\">PlasticPunk</a></h4><p>City-builder style game presenting a complex environmental challenge through engaging gameplay and appealing visuals.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*9lzHmRWHxSyGI8pl\" /></figure><h4><a href=\"https://devpost.com/software/waste-wise\">Waste Wise</a></h4><p>Waste sorting game featuring intuitive gameplay and effectively educating players on proper waste disposal.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*m_Lo2d9Tfr1eqyUw\" /></figure><h4><a href=\"https://devpost.com/software/whaley-s-bins-waste-sorting\">Whaley’s Bins Waste Sorting</a></h4><p>Waste sorting game with a creative approach to recycling education, featuring distinctive pixel art visuals.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/0*4TtFim6qaLkM0-rj\" /></figure><p>We look forward to hanging out with these teams in New York City for a day of workshops and more in the Google offices and to celebrate with 60,000 other Global Citizens at Global Citizen Festival 2024!</p><p>But these are just 10 of over 30 teams that won prizes from the Global Gamers Challenge, including other members of the Top 20, who you’ll see in the Honorable Mentions list. Head to <a href=\"http://flutter.dev/global-gamers/#winners\">flutter.dev/global-gamers/#winners</a> to see all of them!</p><p>Congratulations to all of the winners!</p><h3>It doesn’t end here</h3><p><em>by Lisa Pak, Head of Operations at Playing 4 the Planet Alliance</em></p><p>The Global Gamers Challenge might be drawing to a close, but the sustainable games movement doesn’t end here. The games built during this challenge, and similar challenges like the <a href=\"https://globalgamejam.org/\">Global Game Jam</a>, have the potential to reach millions of players, creating a ripple effect of positive environmental change throughout the world.</p><p>To stay connected with this burgeoning movement:</p><ul><li><strong>Join the community</strong>: Consider joining online communities and forums dedicated to eco-conscious game design. These spaces offer invaluable opportunities to share your work and exchange ideas with fellow developers</li><li><strong>Keep playing sustainability games</strong>: Keep an eye out for <a href=\"https://globalgamejam.org/\">popular games</a> that include green activations in the form of time limited events, challenges, and new levels, to engage their players on this important topic. Our goal is to reach as many people as possible, and these could be a great source of inspiration.</li><li><strong>Make your own voice heard</strong>: Write about your experiences with sustainability game development, mentor aspiring developers, or organize your own initiatives. In sharing your knowledge and expertise, whether technical or environmental, you not only support the growth of the community but also inspire others to create games that make a positive impact on the planet.</li></ul><h3><strong>Keep building</strong></h3><p><em>by Clayton Whittle, Co-Chair, Climate SIG</em></p><p>Sustainability in gaming includes promoting the movement itself, prioritizing climate and sustainability concerns in your team’s game design practice, and persisting as ambassadors for a sustainability games industry.</p><p>Green game design is an evolving field, with increasingly refined practices for creating games that yield tangible and measurable impact. While there are no universal rules for crafting a green game, adhering to standard guidelines can significantly benefit any game design team.</p><ul><li><strong>Know your audience</strong>: Effective sustainability games begin with understanding your audience’s needs and capabilities. Since sustainability games aim to transform players in some way, understanding your audience is crucial for guiding this transformation. Without knowing where your audience stands initially, it’s challenging to lead them to a desired endpoint.</li><li><strong>Be specific</strong>: Focus your message to increase its effectiveness. Trying to change a player’s entire worldview with one game is unrealistic. Instead, identify specific areas where change makes sense.</li><li><strong>Promote effective actions</strong>: Equip players with actionable knowledge. Teach them impactful actions they can take to make a difference. Players are more likely to engage if they see how their actions can influence ecosystems or society on a large scale.</li><li><strong>Beware of </strong><a href=\"https://en.wikipedia.org/wiki/Greenwashing\"><strong>greenwashing</strong></a>: Avoid superficial sustainability efforts. Greenwashing involves token sustainability elements that don’t genuinely integrate sustainability issues. While adding green artwork or naming a character “Captain Recycle” might seem appealing, players see through these superficial connections if the gameplay or narrative lacks meaningful sustainability actions.</li></ul><p>Remember, there are countless ways to develop impactful green games. Your ideas and designs might extend beyond this guidance into uncharted territories. What works for your team depends on your mission and audience. However, incorporating these principles into your design discussions help ensure that your team remains focused on its impact mission.</p><h3><strong>How Flutter can help</strong></h3><p>Here are a couple ways that Flutter can help you spend less time worrying about where your game will run, and more time designing an impactful experience for your mission and audience.</p><ul><li><strong>Flutter is productive: </strong>Single codebase development with Flutter means you can write your game just one time, and deploy it across platforms. Features like stateful hot reload help you iterate quickly, speeding up your development flow.</li><li><strong>Flutter is easy to learn</strong>: Even if you’re not a professional game developer, Starting with Flutter can be easier than with traditional game development tools. We also offer several resources, like game templates as part of the <a href=\"http://flutter.dev/games\">Flutter Casual Games Toolkit</a> that give you a launching pad to boost your game development skills.</li></ul><p>Thank you all for joining us on this journey! We can’t wait to see what you build next!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1ccf4d271226\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/announcing-the-winners-of-the-global-gamers-challenge-1ccf4d271226\">Announcing the winners of the Global Gamers Challenge</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-05-14T20:34:31.000Z":{"title":"What’s new in Flutter 3.22","link":"https://medium.com/flutter/whats-new-in-flutter-3-22-fbde6c164fe3?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/fbde6c164fe3","category":["flutter-app-development","release-notes","flutter"],"dc:creator":"Kevin Chisholm","pubDate":"Tue, 14 May 2024 20:34:31 GMT","atom:updated":"2024-05-17T12:04:39.302Z","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hf9CEzGh0uhxnzVZi2Kk4g.png\" /></figure><h4>WebAssembly, Graphics rendering enhancements, and more options for AI integration</h4><p>Welcome back for another exciting Flutter stable release! This time, we’re thrilled to present Flutter 3.22. We’re bringing WebAssembly to the stable channel, a fully featured Vulkan backend for Impeller on Android, promising smoother graphics and a major performance boost. We’re also introducing streamlined workflows with new widget state properties, dynamic view sizing, and improved form validation. But that’s not all — you’ll find flavor-conditional asset bundling, a preview of Vertex AI for Firebase in Dart, and updated DevTools to make your life easier.</p><p>In just a few months since our last update, we’ve merged an impressive 1595 pull requests from the Flutter community, with 37 new community members contributing to Flutter for the first time!</p><p>So, dive in and discover all the new features and enhancements that the Flutter community has brought to this latest release!</p><h3>WebAssembly</h3><p>With the release of Flutter 3.22, Wasm is now available on the stable channel, offering significant performance improvements. In our internal benchmarks using Chrome on an M1 MacBook, the Wonderous app’s frame rendering time improved by 2x on average and 3x in worst-case scenarios.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/719/0*x6HEkml8cFGc96hg\" /></figure><p>These enhancements are vital for apps with animations and rich transitions, where maintaining a smooth frame rate is essential. Wasm helps achieve this by reducing performance bottlenecks, resulting in smoother animations and transitions. To start using Wasm with your Flutter web apps, check out our <a href=\"https://dart.dev/web/wasm\">Dart Wasm documentation</a> and <a href=\"https://docs.flutter.dev/platform-integration/web/wasm\">Flutter Wasm documentation</a>. For the full announcement, visit the <a href=\"https://medium.com/flutter/io24-5e211f708a37\">Flutter at Google I/O blog post</a>.</p><h3>Engine</h3><p>Flutter 3.22 introduces significant updates to Impeller, the rendering engine that powers your Flutter applications. Key highlights include the completion of the Vulkan backend on Android for smoother graphics and improved performance, ongoing optimizations for blur effects and complex path rendering, and a new experimental API for testing with Impeller. In line with our <a href=\"https://github.com/flutter/flutter/wiki/Roadmap#core-framework--engine\">roadmap</a>, we’re committed to enhancing Impeller’s quality and performance, including completing the iOS migration to Impeller and expanding Android support.</p><h4>Impeller</h4><h4><strong>Vulkan backend feature complete on Android</strong></h4><p>In this release, Impeller’s Vulkan backend for Android is feature complete. In particular, in the past few months, the team has been hard at work completing the implementation of <a href=\"https://github.com/flutter/engine/pull/50154\">fast advanced blends</a>, support for custom fragment shaders with the <a href=\"https://github.com/flutter/engine/pull/49543\">FragmentProgram API</a>, <a href=\"https://github.com/flutter/engine/pull/50730\">PlatformView</a> support (though it requires a <a href=\"https://docs.flutter.dev/release/breaking-changes/android-surface-plugins\">small API migration</a>), and fully implementing <a href=\"https://github.com/flutter/flutter/issues/134178\">all blur styles</a>.</p><h4>Android preview</h4><p>In the 3.19 stable release, after releasing improvements in Impeller’s OpenGL backend, we invited users to try out Impeller on Android devices both with and without Vulkan support. Over the past few months, after evaluating the performance of the OpenGL backend and estimating the remaining work on the Vulkan backend, we have decided to focus our efforts on making the Vulkan backend production ready first.</p><p>Impeller solves the issue of shader compilation jank. Additionally, in our benchmarks it outperforms the legacy renderer on average, 90th, and 99th percentile frame times. We therefore believe that the performance of the Vulkan backend on Android is acceptable. In this release (3.22), an app that opts-in to Impeller will use the Vulkan backend where available. In a future release, this will become the default. When an app that opts-in to Impeller runs on a device that doesn’t support Vulkan, Flutter will gracefully fall back automatically to using OpenGL ES with Skia. No action is necessary on your part. In the future, when we believe the OpenGL ES Impeller backend is production ready, this fallback will also use Impeller.</p><p>As the Impeller preview on Android continues through the 3.22 stable cycle, we request that Flutter developers upgrade to the latest stable version, and file issues about any shortcomings noticed when <a href=\"https://docs.flutter.dev/perf/impeller#android\">Impeller is enabled</a>. Feedback at this stage is invaluable to ensuring that Impeller is successful on Android and that we will be able to confidently make it the default renderer in a release later this year. The Android hardware ecosystem is very diverse. For that reason, the most helpful feedback about Impeller should include detailed information about the specific device and Android version where issues occurred.</p><h4>Blur performance improvements</h4><p>Blur has been <a href=\"https://github.com/flutter/engine/pull/47576\">reimplemented</a> in Impeller for both iOS and Android. In particular, the new approach, which is similar to Skia’s, reduces the CPU and GPU time of blurs by nearly half in <a href=\"https://flutter-flutter-perf.skia.org/e/?begin=1699468487&amp;end=1710262311&amp;keys=X01fc3d52ebd6fbf38afef91d82ab8d2b&amp;requestType=0&amp;selected=commit%3D38815%26name%3D%252Carch%253Dintel%252Cbranch%253Dmaster%252Cconfig%253Ddefault%252Cdevice_type%253DiPhone_11%252Cdevice_version%253Dnone%252Chost_type%253Dmac%252Csub_result%253Daverage_frame_rasterizer_time_millis%252Ctest%253Dbackdrop_filter_perf_ios__timeline_summary%252C&amp;xbaroffset=38815\">benchmarks</a>.</p><p>The chart below shows worst-case, 99%-ile, 90%-ile, and average frame rasterization times and GPU frame times in ms on an iPhone 11 device in a pathological benchmark intended to highlight blur performance. After rewriting Impeller’s blur, both the CPU and GPU cost of backdrop filter blurs has been nearly halved. This scale of this improvement translates to non-pathological cases as well, as would appear in typical apps.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*mtFyiLoIUSqk_zRB\" /><figcaption>99%-ile, 90%-ile and average frame rasterization times and GPU frame times in ms on an iPhone 11 device in a pathological benchmark intended to highlight blur performance</figcaption></figure><h4>Stencil-then-Cover</h4><p>Impeller on both iOS and Android has <a href=\"https://github.com/flutter/engine/pull/51219\">moved to a new rendering strategy</a> based on the Stencil-then-Cover approach described in the chapter “Drawing Filled, Concave Polygons Using the Stencil Buffer” in the <a href=\"http://www.opengl-redbook.com/\">OpenGL Redbook</a>. Team members discussed more on this technique as it applies to Flutter in GitHub issue <a href=\"https://github.com/flutter/flutter/issues/123671\">#123671</a>.</p><p>This approach solves the issue where the raster thread was spending too much time calculating tessellations for complex paths on the CPU for example, SVGs and <a href=\"https://github.com/flutter/flutter/issues/141961\">Lottie animations</a>. After the change, the total frame time (UI thread on the CPU + raster thread on the CPU + GPU work) is much lower for frames that contain complex paths. Users will notice that Lottie animations and other complex paths render more smoothly, with lower CPU utilization, and slightly higher GPU utilization.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1lCd7dBwJ0ab_sieDlQNFw.gif\" /><figcaption>(Left) A Lottie animation. Previously, Impeller on a recent iPhone took 64ms / frame of raster thread CPU time to render it. (Right) The same animation on the same device after we landed the Stencil-then-Cover optimization. Raster times are nearly 10x faster.</figcaption></figure><p>While pleased with these improvements, there is still more work to do. Among other opportunities, we are aware that polyline generation remains prominent in CPU profiles, and we intend to investigate shifting this work to the GPU, as well.</p><h4>New API</h4><p>While still experimental, flutter test now accepts the --enable-impeller flag, which exercises Impeller using the Vulkan backend.</p><h3>Framework</h3><h4>Widget state properties</h4><p>MaterialState has been moved outside of the Material library and renamed WidgetState, in order to make it available to Cupertino, the base Flutter framework, and package authors. For more information on migrating to the new WidgetState, see the <a href=\"https://docs.flutter.dev/release/breaking-changes/material-state\">migration guide</a>.</p><h4>Dynamic view sizing</h4><p><a href=\"https://github.com/flutter/flutter/pull/140918\">Enhancements</a> to dynamic view sizing benefits developers building responsive layouts, ensuring better UI adaptability across various device screens.</p><h4>Improved form validation</h4><p>Thanks to the <a href=\"https://github.com/flutter/flutter/pull/135578\">contributions</a> of Flutter community member <a href=\"https://github.com/SharbelOkzan\">SharbelOkzan</a>, Flutter 3.22 comes with more flexible form validation methods allowing developers to create more robust user input handling, enhancing both usability and security.</p><h4>Covariants in 2D APIs</h4><p>Reducing the need for type casts in 2D graphics APIs simplifies development workflows and enhances performance, important for games and complex animations.</p><h4>Flavor-conditional asset bundling</h4><p>Developers using the <a href=\"https://docs.flutter.dev/deployment/flavors\">flavors</a> feature can now configure individual assets to be bundled only when building for a specific flavor. For more information, check out <a href=\"https://docs.flutter.dev/deployment/flavors#conditionally-bundling-assets-based-on-flavor\">Conditionally bundling assets based on flavor</a>.</p><h4>Transformation of assets using Dart packages</h4><p>Users can now configure Dart packages to transform their app’s assets as they are bundled. For more information, check out <a href=\"http://docs.flutter.dev/ui/assets/asset-transformation\">Transforming assets at built time</a>.</p><h3>Android</h3><h4>Deep linking</h4><p>Deep links can significantly improve the user experience in your Flutter app, acting as shortcuts that seamlessly guide users to specific content within your app, boosting engagement, and driving sales. While Universal Links for iOS and App Links for Android are highly recommended for their security and user-friendly nature, setting them up can be a bit tricky.</p><p>In the last Flutter stable release, we introduced a deep link validator tool within DevTools that supports checking web configuration for Android apps. In this version, we added a new set of features to help verify setups within your Android manifest files.</p><p>For more information on using this tool, check out <a href=\"https://docs.flutter.dev/tools/devtools/deep-links\">Validate deep links</a>.</p><h4>Predictive back gesture</h4><p>Flutter now adds more support for Android’s upcoming predictive back feature, where users can peek at the previous route or even the previous app during a back gesture. This is still behind a feature flag on Android devices, but you can find details on how to try it out yourself <a href=\"https://github.com/flutter/flutter/issues/132504#issuecomment-2025776552\">on GitHub</a>.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*8b6DxQuMXAyYVu-w\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/0*hr_OF9DsfUcsLNHv\" /></figure><h4>Flutter tool enforces version requirements on Gradle, AGP, Java, and Kotlin</h4><p>In this release, the Flutter tool enforces a policy regarding the versions that it supports for Gradle, the Android Gradle Plugin (AGP), Java, and Kotlin. Initially, the tool only provides warnings.</p><p>Currently, the supported version ranges are as follows:</p><ul><li>Gradle — Fully supported 7.0.2 to current, warn otherwise</li><li>AGP — Fully supported 7.0.0 to current, warn otherwise</li><li>Java — Fully supported Java 11 to current, warn otherwise</li><li>Kotlin — Fully supported 1.5.0 to current, warn otherwise</li></ul><p>In the next major release these warnings will become errors, which can be overridden with the flag --android-skip-build-dependency-validation. More generally speaking, the tool provides a warning for at least one release before fully dropping support (generating an error) for a given version of these dependencies.</p><p>This policy was discussed in an <a href=\"https://docs.google.com/document/d/1qeeM5QG-jiafttSgvc7yvC19IDRggFFZQTktBVxL6sI/edit?resourcekey=0-HLEAiBOMxAlQxDs-mEeffw\">associated design spec</a>. Comments and feedback are always welcome.</p><h4>Support for using Gradle Kotlin DSL in Gradle build scripts on Android</h4><p>Gradle Kotlin DSL is now supported in Flutter, providing an alternative to the traditional Gradle Groovy DSL. This support allows for a better code editing experience, featuring auto-completion, quick access to documentation, source navigation, and context-aware refactoring.</p><p>This initial support was contributed by GitHub user <a href=\"https://github.com/bartekpacia\">bartekpacia</a>. Developers can now choose to rewrite their Gradle build scripts in Kotlin to take advantage of these benefits, although the Flutter tool doesn’t yet allow for selecting Kotlin over Groovy when using flutter create.</p><p>For more details, check out the <a href=\"https://github.com/flutter/flutter/pull/140744\">PR 140744</a> by <a href=\"https://github.com/bartekpacia\">bartekpacia</a>.</p><h4>Platform views improvements</h4><p><strong>Heads up for all Flutter app developers</strong>! If you’re using Flutter to build apps that rely on native Android components (like maps, web views, or certain UI elements), we have some important news.</p><p>Due to a bug in Android 14, apps built with older versions of Flutter might not work properly on devices running this new Android version.</p><p>Flutter 3.22 fixes this issue and improves the overall performance of these native components in your Android apps. So, to ensure your app runs smoothly on all Android devices, make sure to rebuild and release your app with Flutter 3.22.</p><p>This update also includes behind-the-scenes improvements to make platform views on Android more reliable and performant overall.</p><h4>End of support for KitKat</h4><p>Flutter’s minimum supported Android version is now Lollipop (API 21). Beginning with Flutter’s 3.22 stable release, Flutter will no longer work on devices running Android KitKat (API 19). For more details, see our <a href=\"https://docs.flutter.dev/release/breaking-changes/android-kitkat-deprecation\">deprecation guide</a>.</p><h3>iOS</h3><h4>Platform view performance</h4><p>We understand that platform view performance on iOS has been a pain point for many Flutter developers. This has been especially noticeable within scroll views when using platform views.</p><p>Recent updates directly address these concerns, with significant improvements in scenarios like embedding multiple inline ads within an article. Here are some key improvements <a href=\"https://github.com/flutter/flutter/pull/144745\">in our benchmark</a>:</p><ul><li><strong>Reduced GPU usage:</strong> GPU usage has been reduced by 50%, leading to less power consumption and a potentially smoother user experience.</li><li><strong>Improved frame rendering: </strong>Average frame render times have decreased by 1.66ms (33%).</li><li><strong>Minimized jank: </strong>Worst-case frame render times have been reduced by 3.8ms (21%).</li></ul><p>If you’ve previously experienced performance challenges when using multiple platform views (like ads, maps, etc) within scrolling views, these optimizations offer the potential for a more fluid and responsive scrolling experience. Please give it a try and let us know what you think.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*uk0URkHcImHdTq2M\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-KX8Ubw77KpdGnPI\" /></figure><h3>Ecosystem</h3><h4>Vertex AI for Firebase Dart SDK preview release</h4><p>The Vertex AI for Firebase product has been released to public preview and includes the Dart SDK. This enables you to use the Gemini API to build generative AI features for your Dart or Flutter app, with production, performance and enterprise scale in mind. The SDK is integrated with <a href=\"https://firebase.google.com/docs/app-check\">Firebase App Check</a>, which protects your API calls, and safeguards your backend infrastructure from serious threats like billing fraud, phishing, and app impersonation. Jump into the <a href=\"https://firebase.google.com/docs/vertex-ai/get-started?platform=flutter\">Getting Started for Dart</a> and start using it with no cost with a promo code</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*KmIhzrfoyskNW7r8\" /></figure><p>The <a href=\"https://ai.google.dev/gemini-api/docs/get-started/dart\">Google AI Dart SDK</a> remains available, and is recommended for prototyping only. Google AI has free-of-charge access (within limits and where available) and pay-as-you-go pricing. If you have been prototyping with the Google AI Dart SDK, and are ready to migrate to Vertex AI for Firebase, check out the <a href=\"https://firebase.google.com/docs/vertex-ai/migrate-to-vertex-ai?platform=flutter\">migration guide</a>.</p><h4>DevTools updates</h4><p>We continue to improve DevTools, the suite of performance and debugging tools for Dart and Flutter. This release includes performance improvements, general polish, and new features like including CPU samples in the timeline, advanced filtering, and support for importing and exporting memory snapshots.</p><p>Other notable improvements were shipped with the devtools_extensions and devtools_app_shared packages that support DevTools extension authors. We added support for connecting an extension to the new Dart Tooling Daemon (DTD), which allows DevTools extensions to access public methods registered by other DTD clients, such as an IDE, as well as allowing access to a minimal file system API for interacting with the development project.</p><p>To learn more about all the updates included in Flutter 3.22 check out the release notes for DevTools <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.32.0\">2.32.0</a>, <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.33.0\">2.33.0</a>, and <a href=\"https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.34.1\">2.34.1</a>.</p><h4>Google Mobile Ads SDK for Flutter</h4><p>For those of you monetizing your Flutter apps with Ads, we’ve got some exciting news: Google Mobile Ads for Flutter has just released a major update to version 5.0.1!</p><p><strong>Enhanced support for User Messaging Platform (UMP) SDK: </strong>The update adds support for the latest APIs from the Android UMP SDK version 2.2.0 and iOS UMP SDK version 2.4.0. The UMP SDK is crucial for complying with privacy regulations, making it easier for you to obtain user consent for personalized ads. This new version introduces several new APIs to simplify the consent gathering process.</p><p><strong>Expanded mediation partners:</strong> We’ve broadened your ad monetization horizons by offering integrations with popular ad partners, including <a href=\"https://pub.dev/packages/gma_mediation_unity\">Unity</a>, <a href=\"https://pub.dev/packages/gma_mediation_meta\">Meta</a>, <a href=\"https://pub.dev/packages/gma_mediation_applovin\">AppLovin</a>, <a href=\"https://pub.dev/packages/gma_mediation_ironsource\">Iron Source</a>, <a href=\"https://pub.dev/packages/gma_mediation_mintegral\">Mintegral</a>, <a href=\"https://pub.dev/packages/gma_mediation_pangle\">Pangle</a>, <a href=\"https://pub.dev/packages/gma_mediation_dtexchange\">DT Exchange</a>, <a href=\"https://pub.dev/packages/gma_mediation_inmobi\">InMobi</a>, and<a href=\"https://pub.dev/packages/gma_mediation_liftoffmonetize\"> Liftoff.</a> You can now maximize your app revenue with expanded mediation options and simplified implementation.</p><p>We encourage you to try out these new features in your Flutter apps and let us know which other mediation partners you’d like to see us support. Your feedback is invaluable as we continue to enhance the Google Mobile Ads SDK for Flutter.</p><h3>Breaking Changes and Deprecations</h3><h4>Removal of v1 Android embedding</h4><p>Deletion of version one of the Android embedding is under way. This will likely have no effect on most apps, as</p><ol><li>Version two has been the default for many years</li><li>The Flutter tool would already block building version one apps, unless specifically overridden with the flag -- ignore-deprecation.</li></ol><p>This release breaks Flutter tool support for v1 apps completely. <strong>It is no longer possible to override.</strong></p><p><strong>Plugin authors, please note</strong>: when the v1 android embedding was initially deprecated a migration doc was written for plugin authors at <a href=\"https://docs.flutter.dev/release/breaking-changes/plugin-api-migration\">https://docs.flutter.dev/release/breaking-changes/plugin-api-migration</a>. As part of this migration, it was recommended that plugin authors keep support for apps using the v1 embedding, by including in their *Plugin.java a method with the signature</p><p>public static void registerWith(@NonNull io.flutter.plugin.common.PluginRegistry.Registrar registrar)</p><p>We plan to fully delete the v1 Android embedding in the next release, <strong>at which point plugins that include a method with this signature will no longer compile</strong> (as it makes reference to a type from the v1 android embedding).</p><p>It currently serves no purpose, as this release has broken apps using the v1 embedding. We recommend that plugin authors release updated versions of their plugins with the v1 code removed as soon as possible, to avoid breakage in future versions of Flutter. For an example, check out <a href=\"https://github.com/flutter/packages/pull/6494\">PR 6494</a>, which removed the plugins maintained by the Flutter team.</p><h4>Deprecations removed in 3.22</h4><p><a href=\"https://docs.flutter.dev/release/breaking-changes\">Breaking changes</a> in this release include deprecated APIs that expired after the release of v3.19. To see all affected APIs, along with additional context and migration guidance, see the <a href=\"https://docs.flutter.dev/release/breaking-changes/3-19-deprecations\">deprecation guide for this release</a>. Many of these are supported by <a href=\"https://docs.flutter.dev/development/tools/flutter-fix\">Flutter fix</a>, including quick fixes in the IDE. Bulk fixes can be evaluated and applied with the dart fix command-line tool.</p><p>As always, many thanks to the community for <a href=\"https://github.com/flutter/tests/blob/master/README.md\">contributing tests</a> — these help us identify these breaking changes. To learn more, check out <a href=\"https://github.com/flutter/flutter/wiki/Tree-hygiene#handling-breaking-changes\">Flutter’s breaking change policy</a>.</p><h3>Conclusion</h3><p>At the heart of Flutter’s success is you — our amazing community. This release wouldn’t be possible without your countless contributions and unwavering passion. From the bottom of our hearts, thank you.</p><p>Ready to explore Flutter 3.22? Dive into the full release notes and changelog, fire up your terminal, and run flutter upgrade. We can’t wait to see what you build!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fbde6c164fe3\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/whats-new-in-flutter-3-22-fbde6c164fe3\">What’s new in Flutter 3.22</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-05-14T20:33:38.000Z":{"title":"Landing Flutter 3.22 and Dart 3.4 at Google I/O 2024","link":"https://medium.com/flutter/io24-5e211f708a37?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/5e211f708a37","category":["releases","announcements","flutter"],"dc:creator":"Michael Thomsen","pubDate":"Tue, 14 May 2024 20:33:38 GMT","atom:updated":"2024-05-14T20:33:38.614Z","content:encoded":"<h4><em>Major milestones for Flutter web apps, graphics performance upgrades, productivity experiments, and more</em></h4><p>It’s been a particularly busy last few months in Dart &amp; Flutter air traffic control, but we’re happy to announce that Flutter 3.22 and Dart 3.4 have landed and are available today, just in time for this year’s <a href=\"https://io.google/2024/\">Google I/O</a>!</p><p>We remain committed to providing a strong language and framework pairing, enabling you to build beautiful, rich, and fast apps from a single, shared code base — so you can deliver apps to users on mobile, web, and desktop — without having to fragment your product roadmap.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Mq-Uj8c8l7rrpPxYQ6Gemw.gif\" /></figure><p>Flutter 3.22 and Dart 3.4 offer performance improvements and platform-specific refinements that bring us closer to that vision. We’re particularly excited to share more about our journey with Wasm, but you’ll find so much more, including an improved Impeller rendering engine, smoother visuals and reduced CPU usage on iOS, enhanced platform navigation with Android’s predictive back gesture, expanded monetization options with the Google Mobile Ads SDK, and a new powerful deep link validator in DevTools. Dart developers will enjoy streamlined API migration with dart fix directly in the IDE and new DevTools capabilities for advanced profiling. Plus, you can now preview the Vertex AI for Firebase Dart SDK, integrating AI-powered features with robust security measures.</p><p>Today, we’ll also spotlight top companies using Flutter to increase productivity and build performant experiences. We’ll highlight just a few particularly exciting features that move us closer to our goal to deliver native-like performance across platforms, and include selected updates on our investments in productivity, developer experience, and games.</p><p>If you want more details on everything included in the releases, check out the dedicated <a href=\"https://medium.com/flutter/fbde6c164fe3\">Flutter</a> and <a href=\"https://medium.com/dartlang/dart-3-4-bd8d23b4462a\">Dart</a> posts. It’s time to Dash!</p><h3>Flutter in action</h3><p>Flutter developers are busy launching large, new apps into the app stores. Let’s look at a few.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*cF6UE3y05YTyMBQn\" /></figure><h4>Helping large, enterprise-scale applications deliver on mobile and the web</h4><ul><li>In the United Kingdom, financial institution <a href=\"https://uk.virginmoney.com/\">Virgin Money</a> is <a href=\"http://flutter.dev/showcase/virgin-money\">using Flutter</a> across their suite of mobile banking and credit card apps to unify app development processes, speed up change, and enable an industry-leading user experience.</li><li>US insurance company <a href=\"https://www.geico.com/about/corporate/at-a-glance/\">GEICO</a> recently <a href=\"https://www.geico.com/techblog/flutter-as-the-multi-channel-ux-framework/\">shared</a> that Flutter helped them improve branded user experiences across iOS, Android, and the web, reduce the size of their codebase, and increase development efficiency, all at scale.</li><li><a href=\"https://corporate.universaldestinationsandexperiences.com/\">Universal Studios Destinations &amp; Experiences</a> released new Flutter mobile apps for their Hollywood, Osaka, and Orlando parks. Watch the video below to learn why they chose Flutter and to see how it’s performing so far.</li></ul><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FJTk2Exr7FO4%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DJTk2Exr7FO4&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FJTk2Exr7FO4%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/721111dda3bc3595ada438b543af64a4/href\">https://medium.com/media/721111dda3bc3595ada438b543af64a4/href</a></iframe><h4>Going beyond mobile and the web</h4><ul><li>The <a href=\"https://canonical.com/\">Canonical</a> team has been working with Flutter <a href=\"https://ubuntu.com/blog/flutter-and-ubuntu-so-far\">since 2021</a> to enable support for the Flutter <a href=\"https://pub.dev/publishers/canonical.com/packages\">ecosystem</a> in Ubuntu. Over the past year the Canonical team has rebuilt the Ubuntu Installer from the ground up with Flutter.</li><li><a href=\"https://www.lg.com/us\">LG</a> has chosen Flutter to enhance their smart TV operating system, webOS. Flutter’s performance, productivity, and strong ecosystem allow LG to rapidly develop and deploy webOS system apps that run smoothly. By 2025, Flutter will power system apps on tens of millions of LG TVs worldwide.</li></ul><p>We’re inspired by these success stories, and are committed to making Flutter even better. Let’s dive into the latest product updates to show what we’re doing to enable you to build even more amazing apps, games, and experiences.</p><h3>WebAssembly: Chasing native performance on the web</h3><p>Today we’re announcing support in our stable release for <a href=\"https://docs.flutter.dev/platform-integration/web/wasm\">compiling</a> Flutter web apps to WebAssembly (Wasm). This is an exciting new instruction format for web browsers, which provides a portable, platform neutral, binary code format.</p><p>Our support for Wasm has been a deep, multi-year investment. First we partnered with the Chrome team on defining support in WebAssembly for high-level, managed languages like Dart, which commonly use garbage collection. This resulted in the <a href=\"https://developer.chrome.com/blog/wasmgc/\">WasmGC</a> <a href=\"https://github.com/WebAssembly/gc/blob/main/proposals/gc/Overview.md\">proposal</a>, which is now a full and finalized standard, with runtime implementations available in Chrome (Chromium 119 and later) and Firefox (120 and later), and with other browser vendors expected to follow. Next, we added a brand new Dart compiler backend to generate WasmGC code, and the Dart &amp; Flutter teams collaborated to run both the compiled app code and the Flutter rendering engine as Wasm modules with efficient Wasm to Wasm interop.</p><p>So what’s the net result? We’re seeing much improved performance, approaching what we have on mobile and desktop devices running machine code. In our internal benchmarks (in Chrome on an M1 MacBook), the frame rendering time of <a href=\"https://flutter.gskinner.com/wonderous/\">Wonderous</a> improved by 2x in the general case and by 3x for the 99% worst case performance. Improved rendering performance is critical in demanding apps that feature animations and rich transitions, where exceeding the frame budget (the time allocated to render the next frame) causes very visible jank. Wasm has the potential to eliminate that, as illustrated by the juxtaposition below of the Wonderous app running with our traditional JS compilation compared to Wasm compilation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/719/0*ebpdPSPlak3EwoAU\" /><figcaption><em>Comparing the rendering speed of Javascript vs Wasm for the </em><a href=\"https://flutter.gskinner.com/wonderous/\"><em>Wonderous</em></a><em> demo application.</em></figcaption></figure><p>Wasm compilation for Flutter web apps is available in stable today. To get started, check out our <a href=\"https://dart.dev/web/wasm\">Dart Wasm documentation</a> and <a href=\"https://docs.flutter.dev/platform-integration/web/wasm\">Flutter Wasm documentation</a>.</p><h3>Dart macros: raising the development abstraction level</h3><p>We’re committed to providing a best-in-class developer experience. That means tackling long standing pain-points for Dart developers, like serializing JSON data.</p><p>It’s a prevalent pattern that’s equal parts trivial and tedious. Current solutions mean either slogging through encoding and decoding boilerplate manually, or layering on extra tooling in the form of code generation solutions like the <a href=\"https://docs.flutter.dev/data-and-backend/serialization/json#serializing-json-using-code-generation-libraries\">JsonSerializable</a> package.</p><p>Today, we’re announcing a preview of a better option for JSON: the <a href=\"https://dart.dev/go/json-codable\">JsonCodable</a> macro.</p><p>Macros are code that creates more code. They’re like code generation, except the macro system is <em>built into Dart</em> and happens <em>in real-time</em> as you are editing and running the code. It’s an integrated experience without delays, fully supporting our existing developer workflows such as hot reload, as illustrated by this screencast:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/896/0*rWeEWxzBvcmOFNM4\" /><figcaption><em>Screencast showing the experience of using a macro: Initially no toJson code completion exists, but after adding @JsonCodable to the class, the toJson code completion shows up immediately.</em></figcaption></figure><p>We’re excited to see macros solve all kinds of problems for our developers. Take, for example, data classes, the <a href=\"https://github.com/dart-lang/language/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc\">highest voted</a> Dart language feature. Beyond specific applications, our eventual goal is to have a macro system in Dart that allows users to create their own macros and raise the abstraction level of Dart programming.</p><p>Designing and implementing such a powerful macro system is a large task, so there is currently no date set for a stable release — for more details check out the <a href=\"https://medium.com/dartlang/dart-3-4-bd8d23b4462a\">Dart 3.4 post</a>. In the meantime, try out a preview of the JsonCodable macro today. For more information, check out<a href=\"http://dart.dev/go/json-codable\"> macros documentation</a>.</p><h3>New resources for Flutter game development</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*F19xflZ4BfoCekFQ\" /></figure><p>We’re seeing promising results from our early investment in games, including success stories from industry leaders like <a href=\"http://flutter.dev/showcase/etermax\">Etermax</a> and <a href=\"http://flutter.dev/showcase/supercell\">Supercell</a>, who are each leveraging Flutter’s power and flexibility to efficiently deliver delightful user experiences and expand their reach.</p><p>Today, we’re excited to continue to build on that momentum with these new resources for Flutter game developers:</p><ul><li>The <a href=\"https://pub.dev/packages/flutter_soloud\">SoLoud audio engine</a> is now available: We’ve collaborated with the Flutter community (@<a href=\"https://github.com/alnitak\">Marco Bavagnoli</a>) to create a free and portable audio engine that delivers low-latency, high-performance sound, essential for many games. We also created a new <a href=\"https://codelabs.developers.google.com/codelabs/flutter-codelab-soloud#0\">sound and music codelab</a> that uses SoLoud.</li><li>Learn how to <a href=\"https://codelabs.developers.google.com/codelabs/flutter-word-puzzle#0\">generate expansive crossword-style grids</a> of interlocking words without compromising the user experience, and <a href=\"https://codelabs.developers.google.com/codelabs/flutter-flame-forge2d#0\">craft game mechanics in a Flutter and Flame game using a 2D physics simulation</a> along the lines of Box2D called <a href=\"https://pub.dev/packages/forge2d\">Forge2D</a>.</li><li>A new guide for <a href=\"https://medium.com/flutter/best-practices-for-optimizing-flutter-web-loading-speed-7cc0df14ce5c\">optimizing Flutter web-based game loading speed</a>: Long load times are a major deterrent in web-based games. Follow this guide (authored by <a href=\"https://twitter.com/chenglinlim\">Cheng Lin</a>) to optimize your loading speed so that players don’t abandon your game because it loads slowly.</li></ul><h3>Empowering sustainable game development</h3><p>In January 2024, inspired by the <a href=\"https://www.youtube.com/watch?v=qgOlg173gcI&amp;pp=ygUWR2xvYmFsIENpdGl6ZW4gRmx1dHRlcg%3D%3D\">story</a> behind their use of Flutter, we partnered with Global Citizen to challenge our communities to design, build, and publish sustainability games using Flutter. These games are meant to inspire and empower players to take small, but meaningful actions for the environment. Today, we’re announcing <a href=\"https://medium.com/flutter/announcing-the-winners-of-the-global-gamers-challenge-1ccf4d271226\">the 10 winners</a>.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F_GgqdB9md1w&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D_GgqdB9md1w&amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2F_GgqdB9md1w%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f79ed19f8ef6235e83b919df5506662f/href\">https://medium.com/media/f79ed19f8ef6235e83b919df5506662f/href</a></iframe><p>Congrats to all of the winners!</p><h3>Much more to explore</h3><p>That’s all we have time to spotlight today, but there are many more exciting improvements that we didn’t touch on. Here are a few more things to know:</p><ul><li>You can<strong> </strong>preview<strong> </strong><a href=\"https://firebase.google.com/docs/vertex-ai/get-started?platform=flutter\"><strong>the Vertex AI for Firebase Dart SDK</strong></a> to use the Gemini API for AI-driven features in a Dart or Flutter app. The SDK is integrated with Firebase App Check, which protects your API calls, and safeguards your backend infrastructure from serious threats like billing fraud, phishing, and app impersonation. For details, see our <a href=\"http://flutter.dev/ai\">AI page</a>.</li><li><strong>Impeller</strong>, our <a href=\"https://docs.flutter.dev/perf/impeller\">next-gen rendering engine</a>, is now feature complete on Android.</li><li><strong>Android’s </strong><a href=\"https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture\"><strong>predictive back</strong></a> gesture is now supported both when navigating within a Flutter app, and when navigating to another app or to the homescreen.</li><li><strong>Platform views</strong> on iOS have been performance optimized, reducing CPU usage by up to 50%.</li><li>The <strong>Google Mobile Ads SDK</strong> has been extended to support more ad partners and mediation options.</li><li>DevTools has a new <strong>deep link validator</strong> that helps you identify and troubleshoot errors in Android deep link configuration, so you can more easily connect web experiences to a Flutter app.</li><li><strong>Dart fix</strong>, our API migration tool, can now be invoked directly from the IDE.</li><li><strong>DevTools</strong> now supports advanced filtering and CPU samples in the timeline.</li></ul><p>Head over to the <a href=\"https://medium.com/flutter/fbde6c164fe3\">Flutter technical post</a> and the <a href=\"https://medium.com/dartlang/dart-3-4-bd8d23b4462a\">Dart 3.4 post</a> for more details on each of these, and more.</p><p>As always, we’re incredibly grateful for your continued support, passion, enthusiasm, and feedback. This project wouldn’t be possible without you, and we can’t wait to see how you continue to push Flutter forward.</p><p>Flutter over and out. We hope to see you on board again soon!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5e211f708a37\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/io24-5e211f708a37\">Landing Flutter 3.22 and Dart 3.4 at Google I/O 2024</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-05-07T15:02:05.000Z":{"title":"Cross Platform development with Flutter — How Google Classroom gets teachers and students on the…","link":"https://medium.com/flutter/cross-platform-development-with-flutter-how-google-classroom-gets-teachers-and-students-on-the-597d4f3b450c?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/597d4f3b450c","category":["education-technology","dart","cross-platform","enterprise-technology","flutter"],"dc:creator":"Craig Labenz","pubDate":"Tue, 07 May 2024 15:02:05 GMT","atom:updated":"2024-05-07T15:39:16.222Z","content:encoded":"<h3>Cross Platform development with Flutter — How Google Classroom gets teachers and students on the same page</h3><p>Google’s Classroom app, which originally launched in 2014, is used by 150 million educators and students around the world to organize homework, grades, and communication in the classroom. Available on Android and iOS, development originally began earlier that year and has spanned eras of tremendous change on both mobile platforms. Managing that divergent change, it turned out, was challenging.</p><p>Despite efforts toward synchronization, 7 years later in 2021, the Classroom app’s distinct Android and iOS codebases had incrementally drifted apart in features, UI, and implementation. From the most obvious, like screens that took different approaches to the same UI, to the less obvious, like authentication and app start-up logic differences; Classroom had slowly turned into a difficult app to maintain and improve, with two codebases taxing a small developer pool.</p><p>A spectrum of options were available, ranging from persevering with the status quo, to adding more developers, to a complete rewrite of both codebases with a cross-platform framework. The team was committed to improvement, which ruled out the status quo option, and then assessed what it would take to stabilize the two existing codebases, which ruled out merely adding more developers. In the end, the team settled on its third choice: reimagine Classroom with a single-source, cross-platform solution, which was ultimately Flutter.</p><h3>How Flutter simplified the Classroom app</h3><h4>Inconsistent UIs</h4><p>The most visible of Classroom’s issues — UI variations — forced teachers to intimately know both the Android and iOS UIs. After all, it’s easy to imagine students asking questions about this homework screen and instructions from one platform’s perspective not making much sense against what a student was seeing on their device from the other platform.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-u0y5vTqoC_sCyOHpvUnNA.png\" /></figure><p>The conventional approach is for separate client apps, developed by separate teams, that diverge over time. Only consistent, painstaking work to synchronize every feature can prevent this. In contrast, Flutter’s very nature inverts this default outcome. With Flutter, UIs are the same by default [1] until active work (<a href=\"https://medium.com/flutter/extreme-ui-adaptability-in-flutter-how-google-earth-supports-every-use-case-on-earth-6db4661e7a17\">often in pursuit of adaptability</a>) forces them to diverge for the benefit of the user.</p><blockquote>[1] In Classroom’s Flutter client, small, intentional differences remain, like system bars and bottom controls. Flutter preserves those idiomatic platform details while leaving the middle 90% of the screen to be filled by a single UI implementation.</blockquote><h4>Muddled business logic</h4><p>Estranged UIs were not the only place where Classroom’s Android and iOS clients were at odds. Shaped by a server-side solution that offloaded some complex business logic to the client, the old Classroom app also dealt with differences across core implementations. Aside from giving rise to the occasional platform-specific bug (which can frustrate an engineer’s attempt to reproduce!), this imposed a considerable mental tax on anyone assessing the correctness of either implementation.</p><p>Rewriting Classroom with Flutter solved a slew of bugs, both previously reported and not, simply because of how Flutter handles native platform interactions.</p><p>In the original code, years of constant development had occasionally blurred the lines between UI, business, and platform-specific logic. This meant that users’ bug reports were almost always a tremendous effort to isolate, as the whole call stack was potentially guilty. Was a requested file not loading because the file system was being read incorrectly, because of a miscommunication in business logic, or because the UI received the file, but then lost track of it? The only way to find out was to <em>investigate everything</em>.</p><p>Of course, Flutter developers can blur these lines and mix logic just like anyone else, but the Classroom engineering team found that following framework best practices made attempts to do so painfully obvious. Flutter’s system of declarative UI strongly advises against accidentally placing business logic within UI widgets, and a new MVVM architecture even helped enforce clear layers of responsibility within the vast codebase that sits behind Flutter widgets.</p><p>Flutter apps still periodically talk to the underlying platform — after all, the user journey of uploading and viewing homework can’t happen without using the file system — but here again Flutter’s pattern of quarantining platform-specific logic into dedicated plugins prevents something like routine disk I/O from sneaking into places where it doesn’t belong. The following example shows a realistic way Flutter apps access the file system without muddying up the whole call stack.</p><pre>import &quot;dart:io&quot;;<br>import &quot;package:path/path.dart&quot; as path;<br>import &quot;package:path_provider/path_provider.dart&quot; as path_provider;<br><br>// Loads the student&#39;s saved homework for a given assignment.<br>// Return value&#39;s exists() function will return False if the<br>// student&#39;s dog ate their homework.<br>Future&lt;File&gt; getHomework(Assignment assignment) async {<br>  // Use the `path_provider` package to abstract away platform-specific<br>  // file system quirks<br>  final Directory homeworkDirectory = <br>    await path_provider.getApplicationSupportDirectory();<br><br>  // Extract the student&#39;s uploaded homework<br>  return File(<br>    path.join([homeworkDirectory.absolute.path, assignment.name]),<br>  );<br>}</pre><p>This example is simple, and the Classroom engineering team ultimately developed several of their own plugins to contain more complicated interactions with the host platform. Interestingly, doing so made their native code <em>easier to debug</em> than it had been in their original native apps. How was this possible? Following Don’t Repeat Yourself (DRY) principles in Flutter plugins means hoisting as much business logic as possible into Dart code, leaving only the simplest in-and-out method calls for native interactions. This forces a rock-solid separation between domain logic and platform logic; meaning that any errors in Classroom’s Android or iOS code were probably in isolated, single-responsibility functions that were easily reasoned about.</p><h4>Performance drains</h4><p>When a user journey fails, a concrete bug is filed that everyone can agree needs to be fixed. But what happens for softer problems, like slow app startup time that has been getting worse year after year since an app’s launch? Sprinkle in concerns about keeping multiple clients in sync, and suddenly troubleshooting an app’s lethargic bootstrapping flow feels like a hopeless task.</p><p>Here, Flutter helped by being fast enough itself to not make the problem worse and, more importantly, by offering the chance at a clean slate. Knowing they were building something new instead of working around the skeletons from years of development, the Classroom team crystallized their authorization and bootstrapping flows by removing redundant API calls, parallelizing other independent API calls, and showing shimmer effects and other UI previews while everything resolved. The result was a staggering <em>80% reduction in app launch time!</em></p><h4>Annotation feature</h4><p>Most of Classroom’s functionality could be seen as a fairly routine app bringing together users around shared content, like the assignments and uploaded homework. But, one feature stands out as <em>obviously tricky</em>. One of Classroom’s banner features is file sharing, where both teachers and students can create, view, and edit files, including free-form annotation as if drawing on real paper with a pen or marker. This annotation-sharing feature already existed in Classroom’s native Android and iOS clients, so any friction porting it to Flutter would be a deal-breaker.</p><p>The Classroom team was able to re-package this annotation functionality in a plugin that delegates platform-specific implementations to separate libraries. For file annotation, those became thin wrappers around the pre-existing native libraries already used in Google One, Google Keep, and the old Classroom app. Internally, Android and iOS have different implementation requirements around file-sharing. On iOS, the Classroom app accesses files through native views, but on Android it opens the Google Keep app directly. However, good plugin design principles were able to isolate these implementation details and still expose a clean, singular Dart API for the rest of the app to navigate. In the end, one of Classroom’s “trickiest” features had been successfully ported to Flutter.</p><p>Below is a visualization of Classroom’s annotation feature on Android, outlining the mixture of native and Flutter UI components.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*yJhbJRuTHa2wt-ofA9fazw.png\" /><figcaption>Four mobile screens side by side, collectively showing the user flow to select and annotate a file</figcaption></figure><p>More broadly, typical plugin design in Flutter looks like the following, where a single, streamlined interface loads platform-specific libraries which, in turn, use FFI or JNI to talk to the underlying platform. This allows Flutter apps to engage with platform-specific native APIs across all of their build targets without leaking those considerations into Dart code.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/928/1*slexehY5Bz7L36tuIuxP4g.png\" /><figcaption>A diagram of how to design a Flutter plugin</figcaption></figure><h3>Looking back</h3><h4>Developer velocity</h4><p>The Classroom team spent 2 years rewriting their app with a team that grew from 1 engineer (for the initial prototyping phase) to 10 full-time engineers at peak development. This is no small investment, but the team made it on the promise of faster development and maintenance in perpetuity. Classroom launched their Flutter rewrite on iOS in June, 2023 and completed the project by launching on Android in January, 2024. Since then, average engineering time spent on new features has decreased by two-thirds, which is a tripling of developer velocity! After waiting 2 years for any new features, stakeholders have been delighted by the long-awaited arrival of ✨faster feature development✨.</p><p>Part of the Classroom team’s decision to rewrite was, knowing that their project would never be “done”, new features were likely to be added long into the future. This allowed for a compelling case that a rewrite, even an expensive one, would eventually pay for itself. The formula for when the Classroom team would hit the break-even point on investment from their rewrite is:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JS2z5_kG8Z8hAfbrxeOtCw.png\" /><figcaption>The formula for estimating when increased velocity from rewriting an app in Flutter will exceed the time spent rewriting. The formula is time spent rewriting divided by the reduction in time spent writing features in Flutter equals the number of post-launch features to break even.</figcaption></figure><p>In the 9 months since launching iOS, Classroom estimates to have already reclaimed 40% of that initial investment through the tripling of developer velocity offered by Flutter.</p><h4>Developer experience</h4><p>The only people made happier by increased developer velocity than stakeholders is — <em>the developers themselves</em>. For the Classroom team, their 3x increase in velocity came from a mixture of only writing each feature once (or at most, 1.5 times in scenarios with heavy native components), eliminating the costs of coordination for two teams whose schedules were often months apart and, of course, hot reload. Hot reload alone, with its ~99% reduction in rebuild times, buoyed the Classroom team’s morale above where it had ever been with their two native clients. In the end, the Classroom team found it easy to attract and retain engineers after their switch to Flutter.</p><p>Additionally, the Classroom team found that new features, on average, required at least 50% fewer lines of code to implement. In reality, the decrease is likely quite a bit higher, since not every feature that they built during the rewrite was even properly implemented in the two native clients! Put differently, 50% as many lines of code delivered all the old features, plus coverage of <em>large</em> feature gaps (including offline support on iOS).</p><h3>Conclusion</h3><p>Roughly two years after beginning their rewrite, the Classroom team has shipped their app to Android and iOS and added enough additional features to pay down 40% of their upfront investment. Their new app launches almost <em>five times as fast</em> as the old, saving both developers and end-users time and frustration. Looking forward, new features average one-third the development cost in comparison to the old status quo, enjoy simultaneous release on both platforms, <em>and</em> are easier to troubleshoot and maintain. Ultimately, user, developer, and stakeholder morale has never been higher than it became after Classroom switched to Flutter to reinvest in their future.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=597d4f3b450c\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/cross-platform-development-with-flutter-how-google-classroom-gets-teachers-and-students-on-the-597d4f3b450c\">Cross Platform development with Flutter — How Google Classroom gets teachers and students on the…</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"},"2024-05-06T17:35:44.000Z":{"title":"Best practices for optimizing Flutter web loading speed","link":"https://medium.com/flutter/best-practices-for-optimizing-flutter-web-loading-speed-7cc0df14ce5c?source=rss----4da7dfd21a33---4","guid":"https://medium.com/p/7cc0df14ce5c","category":["flutter-web-development","flutter-web","flutter"],"dc:creator":"Cheng Lin","pubDate":"Mon, 06 May 2024 17:35:44 GMT","atom:updated":"2024-05-06T17:35:44.465Z","content:encoded":"<p>As a Flutter developer working with the Google Flutter team and personally in my private time, I encounter and understand the concerns regarding the loading speed of Flutter web apps. Optimizing loading speed is crucial for better performance and a positive user experience, especially as Flutter developers expand into web development. This guide offers actionable strategies and best practices to accelerate the performance of your Flutter web apps.</p><h3>Rendering</h3><p>CanvasKit, the default <a href=\"https://docs.flutter.dev/platform-integration/web/renderers\">renderer</a> for Flutter web applications, offers high performance and pixel-perfect consistency across platforms by leveraging WebGL. This capability is particularly beneficial for complex graphical applications that require rich animations and high fidelity. However, the inherent file size of CanvasKit (around 1.5 MB) can be a drawback, especially for apps where initial load time is critical.</p><p>Although the flutter.js load API parallelizes the download of CanvasKit and main.dart.js, all Flutter widgets have to wait for them to be fully loaded into the browser, potentially leading to noticeable delays before the application becomes interactive. To mitigate these concerns and optimize the loading experience, developers can choose the Wasm rendering mode.</p><p>As <a href=\"https://docs.flutter.dev/platform-integration/web/wasm\">WebAssembly support</a> in Flutter web is considered experimental and subject to change, these steps are for developers willing to experiment with cutting-edge features. Features and commands might evolve, so always refer to the latest Flutter documentation for current practices.</p><h4>Compatibility</h4><p>The dart:html package is not supported when building with Wasm. This limitation means you must carefully consider the APIs on which your app depends. Alternatively, the <a href=\"https://pub.dev/packages/web\">web package</a> is supported by both dart2wasm and dart2js.</p><h4>Performance</h4><p>Wasm not only reduces app size compared to CanvasKit, it’s also faster to start up compared to JavaScript.</p><h3>Lazy loading</h3><p>Dart’s <a href=\"https://dart.dev/language/libraries#lazily-loading-a-library\">deferred imports</a> allow you to split your code and load parts of it only when needed, reducing the initial load time. The following sections discuss how you can use deferred loading.</p><h4>Declare a deferred import</h4><p>At the top of your Dart file, declare the import that you want to defer. In your import statement, specify deferred as followed by an identifier. When you need to use the library, load it asynchronously using the loadLibrary() method on the deferred import:</p><pre>import &#39;package:myapp/hello.dart&#39; deferred as hello;<br><br>Future&lt;void&gt; loadHelloLibrary() async {<br>  await hello.loadLibrary();<br>  hello.sayHi();<br>}</pre><h4>Call the load function</h4><p>In your Flutter app, call this function when needed, for example, as a response to user interactions. The following example loads the needed library when the user presses a widget:</p><pre>import &#39;package:flutter/material.dart&#39;;<br><br>void main() {<br>  runApp(MaterialApp(home: MyApp()));<br>}<br><br>class MyApp extends StatelessWidget {<br>  @override<br>  Widget build(BuildContext context) {<br>    return Scaffold(<br>      body: Center(<br>        child: ElevatedButton(<br>          onPressed: () {<br>            loadHelloLibrary();<br>          },<br>          child: Text(&#39;Load Feature&#39;),<br>        ),<br>      ),<br>    );<br>  }<br>}</pre><h3>Unawaited function calls</h3><p>In order to reduce the time taken to display the initial widget of your app, try to not await for costly futures before calling runApp. Some futures can be left un-awaited so they update the UI after they complete. The <a href=\"https://api.flutter.dev/flutter/dart-async/unawaited.html\">unawaited function</a> allows app programmers to explicitly tell the “unawaited futures” lint that those futures are not expected to be awaited. This improvement enhances the user experience during both app startup and page loading by making the app feel more responsive. However, it’s important to manage such functions carefully to avoid issues related to app state consistency and resource management.</p><pre>import &#39;dart:async&#39;;<br>import &#39;package:flutter/material.dart&#39;;<br><br>void main() {<br>  unawaited(downloadVideos().then(videos) {<br>    playlist.add(videos);<br>  });<br><br>  runApp(const MyApp());<br>}</pre><h3>Media files</h3><h4>Displaying assets at optimal resolution</h4><p>Flutter automatically handles <a href=\"https://docs.flutter.dev/ui/assets/assets-and-images#resolution-aware\">loading assets at the appropriate resolution based on the device’s pixel density</a>. This ensures optimal visuals across different screen sizes. While it’s important to optimize assets for efficient delivery, prioritize providing assets at the exact resolutions needed before exploring alternative image formats, as we’ll talk about in the next section.</p><h4>Better image compression</h4><p>PNG and JPG are among the most prevalent image formats used on websites. These formats are renowned for their widespread support and compatibility. However, emerging next-generation formats like <a href=\"https://developers.google.com/speed/webp\">WebP</a> and <a href=\"https://netflixtechblog.com/avif-for-next-generation-image-coding-b1d75675fe4\">AVIF</a> offer significant advancements in reducing file sizes without substantially compromising image quality. For instance, a PNG image with an original size of 319 KB can be compressed to just 38 KB in WebP format or, even more impressively, to 10 KB in AVIF format. These reductions in file size are achieved with minimal perceptible loss in quality to the human eye, demonstrating the potential of these formats to enhance website loading speeds while maintaining visual fidelity.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_bz3_DRzn9aoB0qD\" /><figcaption>PNG 319 KB / WebP 38 KB / AVIF 10 KB</figcaption></figure><p>However, it’s important to note that not all browsers support <a href=\"https://caniuse.com/webp\">WebP</a> and <a href=\"https://caniuse.com/avif\">AVIF</a> images. Before integrating these formats into your website, verify their compatibility with the browsers your audience uses most frequently. This will help you determine whether these next-generation image formats align with your website’s requirements and audience needs.</p><h3>Caching</h3><h4>Memory, disk, service workers cache</h4><p>Leveraging the capabilities of memory cache, disk cache, and Service Workers can significantly reduce loading times after the initial page load. This is because these caching mechanisms require files to be loaded once before they can cache them. Memory cache, stored in RAM, offers rapid access speeds but is volatile. On the other hand, disk cache, although slower, provides persistence. Service Workers act as programmable network proxies, enabling sophisticated caching strategies across both memory and disk.</p><p>Browsers or operating systems usually manage memory and disk caches automatically, eliminating the need for manual intervention unless there’s a specific requirement to manipulate them programmatically. While Flutter manages Service Workers to some extent, developers have the flexibility to implement custom Service Workers alongside Flutter for enhanced control over caching and network interactions.</p><h4>Wasm</h4><p>Browsers cache Wasm files (like CanvasKit, and soon dart2wasm output) as well as their compiled native code. This means cached Wasm modules load as quickly as native binaries, unlike JavaScript, which requires reparsing, recompilation, and reJIT (Just-In-Time) processing.</p><p>While Flutter’s Wasm build option isn’t fully stable yet, adopting modern JS-interop practices benefit you when dart2wasm stabilizes. For example, avoid using legacy libraries like dart:html and dart:js, and prefer package:web and dart:js_interop. Also, consider checking whether other packages you are using are compatible with Wasm.</p><h3>Preloading</h3><h4>HTML &lt;head tag&gt;, HTTP response headers</h4><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload\">Preloading assets</a> like images, fonts, and JavaScript files can significantly improve webpage loading speed. By preloading within the HTML &lt;head&gt; tag or using HTTP response headers, you instruct the browser to download these resources before they’re needed for rendering. This eliminates delays and ensures a smoother user experience. To preload assets, add the &lt;link&gt; tag in the &lt;head&gt; section and set the rel attribute to preload. Only preload assets that are used immediately, optimally in the first screen of your app, otherwise browsers will consider the preloading as a waste of bandwidth.</p><h4>HTML &lt;head&gt; tag</h4><pre>&lt;head&gt;<br>  &lt;link rel=&quot;preload&quot; href=&quot;assets/logo.webp&quot; as=&quot;image&quot; type=&quot;image/webp&quot; /&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  &lt;picture&gt;<br>    &lt;source src=&quot;assets/logo.webp&quot; type=&quot;image/webp&quot; /&gt;<br>  &lt;/picture&gt;<br>&lt;/body&gt;</pre><h4>HTTP response headers for Firebase hosting</h4><p>The following code block is a firebase.json example with a key/value combo demonstrating how to add HTTP headers for asset preloading.</p><pre>&quot;headers&quot;: [<br>  {<br>    &quot;key&quot;: &quot;Link&quot;,<br>    &quot;value&quot;: &quot;&lt;assets/logo.webp&gt;; rel=preload; as=image&quot;<br>  }<br>]</pre><h4>Landing page</h4><p>Flutter empowers you to build fully interactive landing pages for your app using plain HTML/CSS. While users engage with your landing page, flutter.js preloads your Flutter app — ensuring instant launches when the user navigates to the Flutter app. This is especially beneficial for games with a <strong>Play</strong> button and apps that require logging in.</p><h3>Loading/splash screen</h3><p>While we’ve focused on technical optimizations for app loading speed, perceived loading speed is more critical. Your goal should be to make your app <em>feel fast</em>.</p><p>Loading/splash screens are highly effective in enhancing this perception. By providing visual activity, they reassure users that the app is launching promptly. In contrast, a blank screen breeds uncertainty, potentially leading to frustration and page refreshes.</p><p>For the fastest responsiveness, implement your splash screen directly in your index.html file using plain CSS/HTML. This minimizes any potential delays.</p><p>For an example, check out the <a href=\"https://github.com/flutter/gallery/blob/cfcb9dbda56697fe8bafe4b64c1a9261dde908ae/web/index.html#L211\">Flutter Gallery implementation</a>.</p><h3>Conclusion</h3><p>In this doc, we’ve explored ways to accelerate both the initial loading and rendering performance of your Flutter web app. There are various strategies you can employ, but remember that each solution involves trade-offs. Choose the optimizations that best suit your specific needs and those of your users. By combining these approaches, you’ll create a smoother, more responsive user experience for your Flutter web apps.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7cc0df14ce5c\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/flutter/best-practices-for-optimizing-flutter-web-loading-speed-7cc0df14ce5c\">Best practices for optimizing Flutter web loading speed</a> was originally published in <a href=\"https://medium.com/flutter\">Flutter</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"}}